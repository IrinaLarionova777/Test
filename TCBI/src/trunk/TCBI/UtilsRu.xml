<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCBI.UtilsRu">
<Super>%RegisteredObject</Super>
<TimeCreated>62560,49177.708176</TimeCreated>

<Method name="GetDaysLOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>datef,datet:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// return LOS in days
	if datef="" s returnVal=-1 quit returnVal
	if (datet'="") s returnVal=datet-datef
	if (datet = "") s returnVal=(+$h)-datef // include current instances
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetMinsLOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>datef,datet,timef,timet:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// return LOS in minutes
	if (datef="")||(timef="") s returnVal=-1 quit returnVal
	if datet="" s datet=+$h
	if timet="" s timet=$p($h,",",2)  // include current instances
   	s returnVal=$fn((((datet-datef)*86400) + (timet-timef)/60),"",0)
	Quit returnVal
]]></Implementation>
</Method>

<Method name="TimeDiffMins">
<ClassMethod>1</ClassMethod>
<FormalSpec>datef,datet,timef,timet,flag:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// return time difference in minutes where from and to date and time exists, else return flag
	// flag "-1" - for invalid data, used in range expressions 
	// flag "No Data" - 
	// flag "0" - used in measures to preserve count
	
	if (datef="")||(timef="")||(datef="")||(datef="") s returnVal=flag quit returnVal
   	s returnVal=$fn((((datet-datef)*86400) + (timet-timef)/60),"",0)
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetWeekday">
<Description>
//##class(TCBI.Utils).GetWeekday(%source.EPVISDateOfReceiving)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	///return day of week as an integer to force correct sequence
	&SQL(SELECT DISTINCT {fn DAYOFWEEK (:val)} into :returnVal)
	i (SQLCODE'=0) {
		s returnVal=""
	}
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetPriority">
<Description>
##class(TCBI.Utils).GetPriority(%source.EPVISPriorityCodeDR) for EPVisitNumber
##class(TCBI.Utils).GetPriority(VISTSTestSetDR.CTTSPriorityDR) for EPVisitTestSet
return priority (если не определен, то считаем , что Normal)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s returnVal="Обычный"
	set priorityDesc=""
	set val=$get(val)
	/*
	&SQL(SELECT CTPR_Desc into :priorityDesc from SQLUser.CT_Priority where CTPR_Code=:val)
	i (SQLCODE=0) {
		s returnVal=priorityDesc
	}*/
	if val'="" set returnVal=$piece($get(^TTAB("PC",val)),"\",1)
	if returnVal="" set returnVal="Обычный"
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetPriorityTestSet">
<Description>
##class(TCBI.Utils).GetPriority(VISTSTestSetDR.CTTSPriorityDR) for EPVisitTestSet
return priority (если не определен, то считаем , что Normal)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String,testsetid:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s returnVal="Обычный"
	set priorityDesc=""
	set val=$get(val)
	// если установлен приоритет на уровне эпизода и не установлен приоритет на уровне набора тестов, то приоритет на уровне эпизода распространяется на все наборы тестов в этом эпизоде
	if val="" {
	    set epis=$piece($get(testsetid),"||",2)	
	    if epis'="" set val=$piece($get(^TEPI(epis)),"\",15)
	}
	/*
	&SQL(SELECT CTPR_Desc into :priorityDesc from SQLUser.CT_Priority where CTPR_Code=:val)
	i (SQLCODE=0) {
		s returnVal=priorityDesc
	}
	*/
	if val'="" set returnVal=$piece($get(^TTAB("PC",val)),"\",1)
	if returnVal="" set returnVal="Обычный"
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetDepartmentCode">
<Description>
код отдела</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String,pSuperSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	 quit $select(pSuperSet'="":$extract(pSuperSet,1),1:$extract(pTestSet,1))
]]></Implementation>
</Method>

<Method name="GetDepartmentName">
<Description>
наименование отдела</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String,pSuperSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set code=..GetDepartmentCode(pTestSet,pSuperSet)
	quit $select(code'="":$p($g(^TTAB("DEP",code)),"\",1),1:"")
]]></Implementation>
</Method>

<Method name="GetYear">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit $extract($zdate(pDate,8),1,4)
]]></Implementation>
</Method>

<Method name="GetYearMonth">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit $extract($zdate(pDate,8),1,6)
]]></Implementation>
</Method>

<Method name="GetYearMonth2">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetYearMonth($get(pDate))
]]></Implementation>
</Method>

<Method name="GetMonthNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit +$extract($zdate(pDate,8),5,6)
]]></Implementation>
</Method>

<Method name="GetMonthName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit $case(+$extract($zdate(pDate,8),5,6),1:"янв",2:"фев",3:"март",4:"апр",5:"май",6:"июнь",7:"июль",8:"авг",9:"сен",10:"окт",11:"нояб",12:"дек",:"")
]]></Implementation>
</Method>

<Method name="GetMonthNameYear">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit ..GetMonthName(pDate)_" "_$extract($zdate(pDate,8),1,4)
]]></Implementation>
</Method>

<Method name="GetTAT">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pDateOfAuthorisation:%Date="",pTimeOfAuthorisation:%Float="",pDateOfCollection:%Date="",pTimeOfCollection:%Float="",pDateOfReceive:%Date="",pTimeOfReceive:%Float="",pDateOfCreation:%Date="",pTimeOfCreation:%Float=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//if $get(pId)'="" s ^test("tatpar",pId)=$g(pDateOfAuthorisation)_"-"_$g(pTimeOfAuthorisation)_"-"_$g(pDateOfCollection)_"-"_$g(pTimeOfCollection)_"-"_$g(pDateOfReceive)_"-"_$g(pTimeOfReceive)_"-"_$g(pDateOfCreation)_"-"_$g(pTimeOfCreation)
	set returnVal=""
	if +pDateOfCollection=0 set pDateOfCollection=""
	set pTimeOfCollection=$select(+pTimeOfCollection'=0:pTimeOfCollection*60,1:"")
	if +pDateOfReceive=0 set pDateOfReceive=""
	//set pTimeOfReceive=$select(+pTimeOfReceive'=0:pTimeOfReceive*60,1:"")  ???
	if +pDateOfCreation=0 set pDateOfCreation=""
	set pTimeOfCreation=$select(+pTimeOfCreation'=0:pTimeOfCreation*60,1:"")
	// time begin
	set timeFrom=0
	if +pDateOfAuthorisation=0||(+pTimeOfAuthorisation=0) quit returnVal
	
	kill visit
	set visit(12)=pDateOfCollection,visit(13)=pTimeOfCollection
	set visit(61)=pDateOfReceive,visit(62)=pTimeOfReceive
	set visit(10)=pDateOfCreation,visit(11)=pTimeOfCreation
	set timeFrom=##class(TCLEx.ReportZEN.TurnaroundTimeData).GetDateStartForTAT(.visit) //в секундах от царя Гороха 
    
    if +timeFrom=0 quit returnVal
    
       // time end
    set timeTo=(+pDateOfAuthorisation*86400)+(pTimeOfAuthorisation*60)
    
    if +timeTo>+timeFrom {
	    set returnVal=$j((timeTo-timeFrom)/60,0,0)
    }
    set epis=$piece(pId,"||",1)
    set testset=$piece(pId,"||",2)
    //if testset="B013",+pDateOfAuthorisation>62182 m ^test("TAT2",1,epis,testset,"VISIT")=visit s ^test("TAT2",1,epis,testset,"dop")=timeFrom_"*"_timeTo
    /*
    if returnVal>7200 {
	    set returnVal=""
    }
    */
    //s ^test("tat",pId)=returnVal_"*"_pDateOfAuthorisation_"*"_pTimeOfAuthorisation_"*"_pDateOfCollection_"*"_pTimeOfCollection_"*"_pDateOfReceive_"*"_pTimeOfReceive_"*"_pDateOfCreation_"*"_pTimeOfCreation
	quit returnVal
]]></Implementation>
</Method>

<Method name="GetTATResultReceiveAuthor">
<Description>
##class(TCBI.Utils).GetTATResultReceiveAuthor(%source.%ID)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateOfAuthorisation:%Date=0,pTimeOfAuthorisation:%Float=0,pDateOfReceive:%Date=0,pTimeOfReceive:%Float=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set returnValue=""
    set timeFrom=0
	if (+pDateOfAuthorisation=0)||(+pTimeOfAuthorisation=0)||(pDateOfReceive=0)||(pTimeOfReceive=0) quit returnVal
	set timeFrom=0
	
	set timeFrom=(+pDateOfReceive*1440)+pTimeOfReceive
    set timeTo=(+pDateOfAuthorisation*1440)+pTimeOfAuthorisation
    if +timeTo>+timeFrom {
	    set returnVal=timeTo-timeFrom
    }
    quit returnVal
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ##class(TCBI.Utils).GetTATAnalyzerOrderResult(%source.%ID)

]]></Content>
</UDLText>

<Method name="GetTATAnalyzerOrderResult">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set returnValue=""
	if (epis="")||(testset="")||(tscnt="") quit returnValue
	set test="",timemax=0
	for {
		set test=$order(^TEPI(epis,1,testset,tscnt,"DATA",test),1,rec) if test="" quit
		set analyzer=$piece(rec,"\",6) if analyzer="" continue
		set recanal=$get(^TMIFinfo(analyzer,"0",epis,test)) if recanal="" continue
		set dateOrder=$piece(rec,$char(0),1) if +dateOrder=0 continue
		set dateResult=$piece(rec,$char(0),3) if +dateResult=0 continue
		set time=dateResult*86400+$piece(rec,$char(0),2)-dateOrder*86400+$piece(rec,$char(0),4)
		if time>timemax set timemax=time
	}
	if timemax>0 {
		set returnValue=timemax
	}	
    quit returnValue
]]></Implementation>
</Method>

<Method name="GetKolTestSets">
<Description>
##class(TCBI.Utils).GetKolTestSets(%source.%ID)
Кол-во наборов тестов на заявку</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
	set returnValue=""
	if $get(pEpisode)="" quit returnValue
	
	Set objepis=##class(User.EPVisitNumber).%OpenId(pEpisode)
	if $IsObject(objepis) {
		set testsets=objepis.ChildEPVisitTestSet
        set returnValue=testsets.Count()    
        If returnValue=0 {
		    Set returnValue=""
        }
	}
	*/
	set returnValue=""
	set ts=""
	for {
		set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
		set tscnt=""
		for {
			set tscnt=$order(^TEPI(pEpisode,1,ts,tscnt)) if tscnt="" quit
			set returnValue=returnValue+1
		}
	}

	quit returnValue
]]></Implementation>
</Method>

<Method name="GetKolServicesInEpisode">
<Description>
##class(TCBI.Utils).GetKolServicesInEpisode(%source.%ID)
Кол-во наборов тестов на заявку</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set returnValue=""
	if $get(pEpisode)="" quit returnValue
	kill vsp
	set ts=""
	for {
		set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
		set tscnt=""
		for {
			set tscnt=$order(^TEPI(pEpisode,1,ts,tscnt),1,rec) if tscnt="" quit
			set superset=$piece(rec,"\",29)
			if superset'="" {
				if $data(vsp(superset)) continue
				set vsp(superset)=""
			}
			set returnValue=returnValue+1
		}
	}
	kill vsp
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagIsTestSets">
<Description>
##class(TCBI.Utils).GetFlagIsTestSets(%source.%ID)
Флаг, есть ли наборы тестов в заявке (1-есть, 0 -нет)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set returnValue=""
	if $get(pEpisode)="" quit returnValue
	quit $select($data(^TEPI(pEpisode,1)):1,1:0)
]]></Implementation>
</Method>

<Method name="GetPortionEpisode">
<Description>
##class(TCBI.Utils).GetPortionEpisode(%source.%ID)
1/Кол-во наборов тестов в заявке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	set returnValue=0
	if $get(pId)="" quit returnValue
	set epis=$piece(pId,"||",1)
	set kolTestSets=..GetKolTestSets(epis)
	if +kolTestSets'=0 {
		//set returnValue=+$j(1/kolTestSets*1E10,0,0)
		set returnValue=+$j(1/kolTestSets,0,12)
	}
	//if +$j(returnValue,0,2)=.05 s ^test(1,pId)=kolTestSets
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetMachineTestData">
<Description>
##class(TCBI.Utils).GetMachineTestData(%source.%ID)
output: Наименование анализатора (код анализатора)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set returnValue=..GetMachineTestData0($get(pId))
	if returnValue="" quit returnValue
	if returnValue'="" {
	   set returnValue=$piece($get(^TMIF(returnValue)),"\",1)_" ("_returnValue_")"	
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetMachineTestData0">
<Description>
##class(TCBI.Utils).GetMachineTestData(%source.%ID)
output: Наименование анализатора (код анализатора)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//s iii=$i(^test("tt"))
	//s ^test("tt",iii,1)=$g(pId)
	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=""
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
	if '$data(^TEPI(epis,1,testset,tscnt,"DATA",test)) quit returnValue
	set returnValue=$piece($get(^TEPI(epis,1,testset,tscnt,"DATA",test)),"\",6)
	// поиск в TCLEx.Data.MIFInfoEpisodeTest
	if (returnValue="")&&($data(^TMIFinfoI("EpisTest",epis,test))) {
	    set device=""
	    for {
		    set device=$order(^TMIFinfoI("EpisTest",epis,test,device)) if device="" quit
		    set rec=$get(^TMIFinfo(device,"0",epis,test))
		    if $piece(rec,$char(0),3)'="" {
			    set returnValue=device 
			    quit
		    }
		}
	}
	if returnValue="" {
		set nn=""
	    for {
	        set nn=$order(^TEPI(epis,1,testset,tscnt,"History",nn)) if nn="" quit
	        if '$data(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test)) continue
	        set returnValue=$piece($get(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test)),"\",6)
	        quit
	        //if returnValue'="" s ^test("tt",pId,2)=returnValue quit	
	    }
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagChangeResultFromMachine">
<Description>
##class(TCBI.Utils).GetFlagChangeResultFromMachine(%source.%ID)
type=1 Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен)
type=2 Флаг о том, что результат был получен с анализатора, а потом удалена информация, что результат получен с анализатора (ошибка в программе) (0 - не изменен, 1 - изменен)
type=3 Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен (type=1), 2 - изменен (type=2))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,type:%Integer=3</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pId)="" quit ""
	if (type'=1)&&(type'=2)&&(type'=3) set type=3
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=0
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
    set prev=""	
	set nn=""
	for {
	   set nn=$order(^TEPI(epis,1,testset,tscnt,"History",nn)) if nn="" quit
	   if '$data(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test)) continue
	   set curr=$get(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test))
	   set prevdevice=$piece(prev,"\",6)
	   set currdevice=$piece(curr,"\",6)
	   set prevres=$piece(prev,"\",1)
	   set currres=$piece(curr,"\",1)
	   if prev'="" {
		   if (type=1)||(type=3) {
			   if (prevdevice'="")&&(currdevice="")&&(prevres'=currres) set returnValue=1
		   }
		   if (type=2)||(type=3) {
	           if (prevdevice'="")&&(currdevice="")&&(prevres=currres) set returnValue=$select(type=3:2,1:1)
		   }
	   }
	   set prev=curr
	   if returnValue'=0 quit	
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagTestCalc">
<Description>
##class(TCBI.Utils).GetFlagTestCalc(%source.%ID)
Флаг о том, что тест является вычисляемым</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=""
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
	if '$data(^TEPI(epis,1,testset,tscnt,"DATA",test)) quit returnValue
	set returnValue=0
	if $data(^TTAB("TC",test,3,testset)) set returnValue=1
	//if test="A0136" s ^test("ttt",pId)=returnValue
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagResultExist">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=0
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
	if '$data(^TEPI(epis,1,testset,tscnt,"DATA",test)) quit returnValue
	if $piece($get(^TEPI(epis,1,testset,tscnt,"DATA",test)),"\",1)'="" set returnValue=1
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetServiceCode">
<Description>
##class(TCBI.Utils).GetServiceCode(%source.VISTSTestSetDR.CTTSCode,%source.VISTSSuperSetDR)
Код услуги (если это часть супернабора, то код супернабора, иначе - код набора тестов)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestset:%String,pSuperset:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $select(pSuperset'="":pSuperset,1:pTestset)
]]></Implementation>
</Method>

<Method name="GetServiceDescription">
<Description>
##class(TCBI.Utils).GetServiceDescription(%source.VISTSTestSetDR.CTTSCode,%source.VISTSSuperSetDR)
Код услуги (если это часть супернабора, то код супернабора, иначе - код набора тестов)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestset:%String,pSuperset:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $select(pSuperset'="":pSuperset_" "_$piece($get(^TTAB("SUPTS",pSuperset)),"\",1),1:pTestset_" "_$piece($get(^TTAB("TS",pTestset)),"\",1))
]]></Implementation>
</Method>

<Method name="GetDateOfAuthorisationService">
<Description>
##class(TCBI.Utils).GetDateOfAuthorisationService(%source.%ID,%source.VISTSSuperSetDR,%source.VISTSDateOfAuthorisation)
Дата авторизации услуги (последняя дата авторизации супернабора или просто дата авторизации набора тестов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String,pDateOfAuthorisation:%Date</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	set returnValue=pDateOfAuthorisation
	if (pSuperset'="") {
		//if (+pSuperset=2)||(+pSuperset=5)||(+pSuperset=6) s ^test("badpSuperset",pId)=pSuperset
		set returnValue=##class(TCLEx.Function.SuperSet).AuthorisationDate2($piece(pId,"||",1),pSuperset)
	}
	//set ^test("DateOfAuthorisationService",pId)=returnValue_"*"_pSuperset
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetKolService">
<Description>
##class(TCBI.Utils).GetKolService(%source.%ID,%source.VISTSSuperSetDR)
Кол-во услуг (для первого набора тестов в эпизоде а данном суернаборе возвращвем 1, для остальных тестов в эпизоде для супернабора - 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set returnValue=0
	set epis=$piece(pId,"||",1)
	set testset0=$piece(pId,"||",2)
	set tscnt0=$piece(pId,"||",3)
	if (epis="")||(testset0="")||(tscnt0="") quit 0

	set returnValue=$select($listget($get(^TEPIext(epis,1,testset0,tscnt0)),4)=1:1,1:0)
	//s ^test("TCBI.UtilsRu.KolService",pId)=pSuperset_"*"_"*"_returnValue
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetPriceService">
<Description>
##class(TCBI.Utils).GetPriceService(%source.%ID,%source.VISTSSuperSetDR,%source.VISTSDateOfAuthorisation)
Кол-во услуг (для первого набора тестов в эпизоде а данном суернаборе возвращвем 1, для остальных тестов в эпизоде для супернабора - 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String=""</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	if +$get(^Settings("birlab","use"))=0 quit 0
	set returnValue=+..GetPriceTestSet(pId,pSuperset)
	//s ^test("TCBI.UtilsRu",pId)=pSuperset_"*"_"*"_returnValue
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetPriceTestSet">
<Description>
Цена набора тестов
Вызов из ..GetPriceService</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String=""</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	if +$get(^Settings("birlab","use"))=0 quit 0
	
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	if (epis="")||(testset="")||(tscnt="") quit 0
	set returnValue=+$listget($get(^TEPIext(epis,1,testset,tscnt)),1)
	quit +returnValue
]]></Implementation>
</Method>

<Method name="GetBillingItemAmountOld">
<Description>
Определение цены по-старому (до 01.12.2012 в Бионе)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode,pTestset,ptscnt,pSuperset,pDateOfAuthorisation</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	set rec=$get(^TEPI(pEpisode))
	set rects=$get(^TEPI(pEpisode,1,pTestset,ptscnt))
    ; плательщик (на уровне лаб.номера)
    set payment=$p(rects,"\",23) 
    if payment="" {
	    set payment=$piece(rec,"\",7) 
	    set:$g(payment)="" payment="?"  ;если был зарегистрирован через LT
    }
    set cito=$piece(rects,"\",10)
    if cito="" {
	    set cito=$piece(rec,"\",15) 
    }
    set billitem=$select(pSuperset'="":pSuperset,1:pTestset)
	quit $$GetBillingItemAmount^PRTCLNRUS05birlab(payment,pEpisode,pDateOfAuthorisation,billitem,cito,$name(^invForGetPrice))
]]></Implementation>
</Method>

<Method name="GetPayer">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<Implementation><![CDATA[
	set returnValue=$listget($get(^TEPIext(pEpisode)),2)
	//s ^test("TCBI.UtilsRu_Payer",pEpisode)=returnValue
    quit returnValue
]]></Implementation>
</Method>

<Method name="GetPayerName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<Implementation><![CDATA[
	set codePayer=..GetPayer(pEpisode)
	set returnValue=""
	if codePayer'="" {
		set descshort="",desclong=""
		&sql(select DescriptionShort,DescriptionLong into :descshort,:desclong from BiRLab_CT.Payer where code=:codePayer)
		if (SQLCODE=0) {
		    set returnValue=descshort
		    if returnValue="" set returnValue=desclong	
		}
	}
    quit returnValue
]]></Implementation>
</Method>

<Method name="vr">
<Description>
for testing</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s ^test("bi","dep",pId)=$g(pValue)
	quit $get(pValue)
]]></Implementation>
</Method>
</Class>
</Export>
