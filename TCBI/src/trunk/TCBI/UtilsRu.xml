<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCBI.UtilsRu">
<Super>%RegisteredObject</Super>
<TimeCreated>62560,49177.708176</TimeCreated>

<Method name="GetDaysLOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>datef,datet:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// return LOS in days
	if datef="" s returnVal=-1 quit returnVal
	if (datet'="") s returnVal=datet-datef
	if (datet = "") s returnVal=(+$h)-datef // include current instances
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetMinsLOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>datef,datet,timef,timet:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// return LOS in minutes
	if (datef="")||(timef="") s returnVal=-1 quit returnVal
	if datet="" s datet=+$h
	if timet="" s timet=$p($h,",",2)  // include current instances
   	s returnVal=$fn((((datet-datef)*86400) + (timet-timef)/60),"",0)
	Quit returnVal
]]></Implementation>
</Method>

<Method name="TimeDiffMins">
<ClassMethod>1</ClassMethod>
<FormalSpec>datef,datet,timef,timet,flag:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// return time difference in minutes where from and to date and time exists, else return flag
	// flag "-1" - for invalid data, used in range expressions 
	// flag "No Data" - 
	// flag "0" - used in measures to preserve count
	
	if (datef="")||(timef="")||(datef="")||(datef="") s returnVal=flag quit returnVal
   	s returnVal=$fn((((datet-datef)*86400) + (timet-timef)/60),"",0)
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetWeekday">
<Description>
//##class(TCBI.Utils).GetWeekday(%source.EPVISDateOfReceiving)
depricated</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateOfReceiving:%String="",pDateOfEntry:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set pDateOfReceiving=..GetDateOfReceiving(pDateOfReceiving,pDateOfEntry)  // если пустая дата получения пробирки, то она заменится на дату ввода заявки
	///return day of week as an integer to force correct sequence
	/*
	&SQL(SELECT DISTINCT {fn DAYOFWEEK (:pDateOfReceiving)} into :returnVal)
	i (SQLCODE'=0) {
		s returnVal=""
	}
	*/
	set returnVal=""
	if pDateOfReceiving>0 {
		set returnVal=..GetWeekDay2(pDateOfReceiving)
	}
	//if '((returnVal>0)&&(returnVal<8)) set ^test("week",$i(^test("week")))=pDateOfReceiving
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetPriority">
<Description>
##class(TCBI.Utils).GetPriority(%source.EPVISPriorityCodeDR) for EPVisitNumber
##class(TCBI.Utils).GetPriority(VISTSTestSetDR.CTTSPriorityDR) for EPVisitTestSet
return priority (если не определен, то считаем , что Normal)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s returnVal="Обычный"
	set priorityDesc=""
	set val=$get(val)
	/*
	&SQL(SELECT CTPR_Desc into :priorityDesc from SQLUser.CT_Priority where CTPR_Code=:val)
	i (SQLCODE=0) {
		s returnVal=priorityDesc
	}*/
	if val'="" set returnVal=$piece($get(^TTAB("PC",val)),"\",1)
	if returnVal="" set returnVal="Обычный"
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetPriorityTestSet">
<Description>
##class(TCBI.Utils).GetPriority(VISTSTestSetDR.CTTSPriorityDR) for EPVisitTestSet
return priority (если не определен, то считаем , что Normal)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String,testsetid:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s returnVal="Обычный"
	set priorityDesc=""
	set val=$get(val)
	// если установлен приоритет на уровне эпизода и не установлен приоритет на уровне набора тестов, то приоритет на уровне эпизода распространяется на все наборы тестов в этом эпизоде
	if val="" {
	    set epis=$piece($get(testsetid),"||",1)	
	    if epis'="" set val=$piece($get(^TEPI(epis)),"\",15)
	}
	/*
	&SQL(SELECT CTPR_Desc into :priorityDesc from SQLUser.CT_Priority where CTPR_Code=:val)
	i (SQLCODE=0) {
		s returnVal=priorityDesc
	}
	*/
	if val'="" set returnVal=$piece($get(^TTAB("PC",val)),"\",1)
	if returnVal="" set returnVal="Обычный"
	Quit returnVal
]]></Implementation>
</Method>

<Method name="GetDepartmentCode">
<Description>
код отдела</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String,pSuperSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	 quit $select(pSuperSet'="":$extract(pSuperSet,1),1:$extract(pTestSet,1))
]]></Implementation>
</Method>

<Method name="GetDepartmentName">
<Description>
наименование отдела</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String,pSuperSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set code=..GetDepartmentCode(pTestSet,pSuperSet)
	quit $select(code'="":$p($g(^TTAB("DEP",code)),"\",1),1:"")
]]></Implementation>
</Method>

<Method name="GetYear">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit $extract($zdate(pDate,8),1,4)
]]></Implementation>
</Method>

<Method name="GetYearMonth">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit $extract($zdate(pDate,8),1,6)
]]></Implementation>
</Method>

<Method name="GetYearMonth2">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetYearMonth($get(pDate))
]]></Implementation>
</Method>

<Method name="GetMonthNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit +$extract($zdate(pDate,8),5,6)
]]></Implementation>
</Method>

<Method name="GetMonthName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit $case(+$extract($zdate(pDate,8),5,6),1:"янв",2:"фев",3:"март",4:"апр",5:"май",6:"июнь",7:"июль",8:"авг",9:"сен",10:"окт",11:"нояб",12:"дек",:"")
]]></Implementation>
</Method>

<Method name="GetMonthNameYear">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if +$get(pDate)=0 quit ""
    quit ..GetMonthName(pDate)_" "_$extract($zdate(pDate,8),1,4)
]]></Implementation>
</Method>

<Method name="GetTAT">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pDateOfAuthorisation:%Date="",pTimeOfAuthorisation:%Float="",pDateOfCollection:%Date="",pTimeOfCollection:%Float="",pDateOfReceive:%Date="",pTimeOfReceive:%Float="",pDateOfCreation:%Date="",pTimeOfCreation:%Float=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//if $get(pId)'="" s ^test("tatpar",pId)=$g(pDateOfAuthorisation)_"-"_$g(pTimeOfAuthorisation)_"-"_$g(pDateOfCollection)_"-"_$g(pTimeOfCollection)_"-"_$g(pDateOfReceive)_"-"_$g(pTimeOfReceive)_"-"_$g(pDateOfCreation)_"-"_$g(pTimeOfCreation)
	set returnVal=""
	if +pDateOfCollection=0 set pDateOfCollection=""
	set pTimeOfCollection=$select(+pTimeOfCollection'=0:pTimeOfCollection*60,1:"")
	if +pDateOfReceive=0 set pDateOfReceive=""
	//set pTimeOfReceive=$select(+pTimeOfReceive'=0:pTimeOfReceive*60,1:"")  ???
	if +pDateOfCreation=0 set pDateOfCreation=""
	set pTimeOfCreation=$select(+pTimeOfCreation'=0:pTimeOfCreation*60,1:"")
	// time begin
	set timeFrom=0
	if +pDateOfAuthorisation=0||(+pTimeOfAuthorisation=0) quit returnVal
	
	kill visit
	set visit(12)=pDateOfCollection,visit(13)=pTimeOfCollection
	set visit(61)=pDateOfReceive,visit(62)=pTimeOfReceive
	set visit(10)=pDateOfCreation,visit(11)=pTimeOfCreation
	set timeFrom=##class(TCLEx.ReportZEN.TurnaroundTimeData).GetDateStartForTAT(.visit) //в секундах от царя Гороха 
    
    if +timeFrom=0 quit returnVal
    
       // time end
    set timeTo=(+pDateOfAuthorisation*86400)+(pTimeOfAuthorisation*60)
    
    if +timeTo>+timeFrom {
	    set returnVal=$j((timeTo-timeFrom)/60,0,0)
    }
    set epis=$piece(pId,"||",1)
    set testset=$piece(pId,"||",2)
    //if testset="B013",+pDateOfAuthorisation>62182 m ^test("TAT2",1,epis,testset,"VISIT")=visit s ^test("TAT2",1,epis,testset,"dop")=timeFrom_"*"_timeTo
    /*
    if returnVal>7200 {
	    set returnVal=""
    }
    */
    //s ^test("tat",pId)=returnVal_"*"_pDateOfAuthorisation_"*"_pTimeOfAuthorisation_"*"_pDateOfCollection_"*"_pTimeOfCollection_"*"_pDateOfReceive_"*"_pTimeOfReceive_"*"_pDateOfCreation_"*"_pTimeOfCreation
	quit returnVal
]]></Implementation>
</Method>

<Method name="GetTATResultReceiveAuthor">
<Description>
##class(TCBI.Utils).GetTATResultReceiveAuthor(%source.%ID)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateOfAuthorisation:%Date=0,pTimeOfAuthorisation:%Float=0,pDateOfReceive:%Date=0,pTimeOfReceive:%Float=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set returnValue=""
    set timeFrom=0
	if (+pDateOfAuthorisation=0)||(+pTimeOfAuthorisation=0)||(pDateOfReceive=0)||(pTimeOfReceive=0) quit returnVal
	set timeFrom=0
	
	set timeFrom=(+pDateOfReceive*1440)+pTimeOfReceive
    set timeTo=(+pDateOfAuthorisation*1440)+pTimeOfAuthorisation
    if +timeTo>+timeFrom {
	    set returnVal=timeTo-timeFrom
    }
    quit returnVal
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ##class(TCBI.Utils).GetTATAnalyzerOrderResult(%source.%ID)

]]></Content>
</UDLText>

<Method name="GetTATAnalyzerOrderResult">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set returnValue=""
	if (epis="")||(testset="")||(tscnt="") quit returnValue
	set test="",timemax=0
	for {
		set test=$order(^TEPI(epis,1,testset,tscnt,"DATA",test),1,rec) if test="" quit
		set analyzer=$piece(rec,"\",6) if analyzer="" continue
		set recanal=$get(^TMIFinfo(analyzer,"0",epis,test)) if recanal="" continue
		set dateOrder=$piece(rec,$char(0),1) if +dateOrder=0 continue
		set dateResult=$piece(rec,$char(0),3) if +dateResult=0 continue
		set time=dateResult*86400+$piece(rec,$char(0),2)-dateOrder*86400+$piece(rec,$char(0),4)
		if time>timemax set timemax=time
	}
	if timemax>0 {
		set returnValue=timemax
	}	
    quit returnValue
]]></Implementation>
</Method>

<Method name="GetKolTestSets">
<Description>
##class(TCBI.Utils).GetKolTestSets(%source.%ID)
Кол-во наборов тестов на заявку</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
	set returnValue=""
	if $get(pEpisode)="" quit returnValue
	
	Set objepis=##class(User.EPVisitNumber).%OpenId(pEpisode)
	if $IsObject(objepis) {
		set testsets=objepis.ChildEPVisitTestSet
        set returnValue=testsets.Count()    
        If returnValue=0 {
		    Set returnValue=""
        }
	}
	*/
	set returnValue=""
	set ts=""
	for {
		set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
		set tscnt=""
		for {
			set tscnt=$order(^TEPI(pEpisode,1,ts,tscnt)) if tscnt="" quit
			set returnValue=returnValue+1
		}
	}

	quit returnValue
]]></Implementation>
</Method>

<Method name="GetKolServicesInEpisode">
<Description>
##class(TCBI.Utils).GetKolServicesInEpisode(%source.%ID)
Кол-во наборов тестов на заявку</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set returnValue=""
	if $get(pEpisode)="" quit returnValue
	kill vsp
	set ts=""
	for {
		set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
		set tscnt=""
		for {
			set tscnt=$order(^TEPI(pEpisode,1,ts,tscnt),1,rec) if tscnt="" quit
			set superset=$piece(rec,"\",29)
			set returnValue=returnValue+..GetKolService(pEpisode_"||"_ts_"||"_tscnt,superset)
			/*
			if superset'="" {
				if $data(vsp(superset)) continue
				set vsp(superset)=""
			}
			set returnValue=returnValue+1
			*/
		}
	}
	kill vsp
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagIsTestSets">
<Description>
##class(TCBI.Utils).GetFlagIsTestSets(%source.%ID)
Флаг, есть ли наборы тестов в заявке (1-есть, 0 -нет)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set returnValue=""
	if $get(pEpisode)="" quit returnValue
	quit $select($data(^TEPI(pEpisode,1)):1,1:0)
]]></Implementation>
</Method>

<Method name="GetPortionEpisode">
<Description>
##class(TCBI.Utils).GetPortionEpisode(%source.%ID)
1/Кол-во наборов тестов в заявке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	set returnValue=0
	if $get(pId)="" quit returnValue
	set epis=$piece(pId,"||",1)
	set kolTestSets=..GetKolTestSets(epis)
	if +kolTestSets'=0 {
		//set returnValue=+$j(1/kolTestSets*1E10,0,0)
		set returnValue=+$j(1/kolTestSets,0,12)
	}
	//if +$j(returnValue,0,2)=.05 s ^test(1,pId)=kolTestSets
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetMachineTestData">
<Description>
##class(TCBI.Utils).GetMachineTestData(%source.%ID)
output: Наименование анализатора (код анализатора)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set returnValue=..GetMachineTestData0($get(pId))
	if returnValue="" quit returnValue
	if returnValue'="" {
	   set returnValue=$piece($get(^TMIF(returnValue)),"\",1)_" ("_returnValue_")"	
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetMachineTestData0">
<Description>
##class(TCBI.Utils).GetMachineTestData(%source.%ID)
output: Наименование анализатора (код анализатора)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=""
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
	if '$data(^TEPI(epis,1,testset,tscnt,"DATA",test)) quit returnValue
	set returnValue=$piece($get(^TEPI(epis,1,testset,tscnt,"DATA",test)),"\",6)
	// поиск в TCLEx.Data.MIFInfoEpisodeTest
	if (returnValue="")&&($data(^TMIFinfoI("EpisTest",epis,test))) {
	    set device=""
	    for {
		    set device=$order(^TMIFinfoI("EpisTest",epis,test,device)) if device="" quit
		    set rec=$get(^TMIFinfo(device,"0",epis,test))
		    if $piece(rec,$char(0),3)'="" {
			    set returnValue=device 
			    quit
		    }
		}
	}
	if returnValue="" {
		set nn=""
	    for {
	        set nn=$order(^TEPI(epis,1,testset,tscnt,"History",nn)) if nn="" quit
	        if '$data(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test)) continue
	        set returnValue=$piece($get(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test)),"\",6)
	        quit
	        //if returnValue'="" s ^test("tt",pId,2)=returnValue quit	
	    }
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagChangeResultFromMachine">
<Description>
##class(TCBI.Utils).GetFlagChangeResultFromMachine(%source.%ID)
type=1 Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен)
type=2 Флаг о том, что результат был получен с анализатора, а потом удалена информация, что результат получен с анализатора (ошибка в программе) (0 - не изменен, 1 - изменен)
type=3 Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен (type=1), 2 - изменен (type=2))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,type:%Integer=3</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pId)="" quit ""
	if (type'=1)&&(type'=2)&&(type'=3) set type=3
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=0
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
    set prev=""	
	set nn=""
	for {
	   set nn=$order(^TEPI(epis,1,testset,tscnt,"History",nn)) if nn="" quit
	   if '$data(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test)) continue
	   set curr=$get(^TEPI(epis,1,testset,tscnt,"History",nn,"DATA",test))
	   set prevdevice=$piece(prev,"\",6)
	   set currdevice=$piece(curr,"\",6)
	   set prevres=$piece(prev,"\",1)
	   set currres=$piece(curr,"\",1)
	   if prev'="" {
		   if (type=1)||(type=3) {
			   if (prevdevice'="")&&(currdevice="")&&(prevres'=currres) set returnValue=1
		   }
		   if (type=2)||(type=3) {
	           if (prevdevice'="")&&(currdevice="")&&(prevres=currres) set returnValue=$select(type=3:2,1:1)
		   }
	   }
	   set prev=curr
	   if returnValue'=0 quit	
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagTestCalc">
<Description>
##class(TCBI.Utils).GetFlagTestCalc(%source.%ID)
Флаг о том, что тест является вычисляемым</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=""
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
	if '$data(^TEPI(epis,1,testset,tscnt,"DATA",test)) quit returnValue
	set returnValue=0
	if $data(^TTAB("TC",test,3,testset)) set returnValue=1
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetFlagResultExist">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	if $get(pId)="" quit ""
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	set test=$piece(pId,"||",4)
	set returnValue=0
	if (epis="")||(testset="")||(tscnt="")||(test="") quit returnValue
	if '$data(^TEPI(epis,1,testset,tscnt,"DATA",test)) quit returnValue
	if $piece($get(^TEPI(epis,1,testset,tscnt,"DATA",test)),"\",1)'="" set returnValue=1
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetServiceCode">
<Description>
##class(TCBI.Utils).GetServiceCode(%source.VISTSTestSetDR.CTTSCode,%source.VISTSSuperSetDR)
Код услуги (если это часть супернабора, то код супернабора, иначе - код набора тестов)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestset:%String,pSuperset:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $select(pSuperset'="":pSuperset,1:pTestset)
]]></Implementation>
</Method>

<Method name="GetServiceDescription">
<Description>
##class(TCBI.Utils).GetServiceDescription(%source.VISTSTestSetDR.CTTSCode,%source.VISTSSuperSetDR)
Код услуги (если это часть супернабора, то код супернабора, иначе - код набора тестов)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestset:%String,pSuperset:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $select(pSuperset'="":pSuperset_" "_$piece($get(^TTAB("SUPTS",pSuperset)),"\",1),1:pTestset_" "_$piece($get(^TTAB("TS",pTestset)),"\",1))
]]></Implementation>
</Method>

<Method name="GetDateOfAuthorisationService">
<Description>
##class(TCBI.Utils).GetDateOfAuthorisationService(%source.%ID,%source.VISTSSuperSetDR,%source.VISTSDateOfAuthorisation)
Дата авторизации услуги (последняя дата авторизации супернабора или просто дата авторизации набора тестов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String,pDateOfAuthorisation:%Date</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	set returnValue=pDateOfAuthorisation
	if (pSuperset'="") {
		//if (+pSuperset=2)||(+pSuperset=5)||(+pSuperset=6) s ^test("badpSuperset",pId)=pSuperset
		set returnValue=##class(TCLEx.Function.SuperSet).AuthorisationDate2($piece(pId,"||",1),pSuperset)
	}
	//set ^test("DateOfAuthorisationService",pId)=returnValue_"*"_pSuperset
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetKolService">
<Description>
##class(TCBI.Utils).GetKolService(%source.%ID,%source.VISTSSuperSetDR)
Кол-во услуг (для первого набора тестов в эпизоде а данном суернаборе возвращвем 1, для остальных тестов в эпизоде для супернабора - 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set returnValue=0
	set epis=$piece(pId,"||",1)
	set testset0=$piece(pId,"||",2)
	set tscnt0=$piece(pId,"||",3)
	if (epis="")||(testset0="")||(tscnt0="") quit 0

	set returnValue=$select($listget($get(^TEPIext(epis,1,testset0,tscnt0)),4)=1:1,1:0)
	//s ^test("TCBI.UtilsRu.KolService",pId)=pSuperset_"*"_"*"_returnValue
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetPriceService">
<Description>
##class(TCBI.Utils).GetPriceService(%source.%ID,%source.VISTSSuperSetDR,%source.VISTSDateOfAuthorisation)
Кол-во услуг (для первого набора тестов в эпизоде а данном суернаборе возвращвем 1, для остальных тестов в эпизоде для супернабора - 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String=""</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	if +$get(^Settings("birlab","use"))=0 quit 0
	set returnValue=+..GetPriceTestSet(pId,pSuperset)
	//s ^test("TCBI.UtilsRu",pId)=pSuperset_"*"_"*"_returnValue
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetPriceTestSet">
<Description>
Цена набора тестов
Вызов из ..GetPriceService</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperset:%String=""</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	if +$get(^Settings("birlab","use"))=0 quit 0
	
	set epis=$piece(pId,"||",1)
	set testset=$piece(pId,"||",2)
	set tscnt=$piece(pId,"||",3)
	if (epis="")||(testset="")||(tscnt="") quit 0
	set returnValue=+$listget($get(^TEPIext(epis,1,testset,tscnt)),1)
	quit +returnValue
]]></Implementation>
</Method>

<Method name="GetBillingItemAmountOld">
<Description>
Определение цены по-старому (до 01.12.2012 в Бионе)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode,pTestset,ptscnt,pSuperset,pDateOfAuthorisation</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	set rec=$get(^TEPI(pEpisode))
	set rects=$get(^TEPI(pEpisode,1,pTestset,ptscnt))
    ; плательщик (на уровне лаб.номера)
    set payment=$p(rects,"\",23) 
    if payment="" {
	    set payment=$piece(rec,"\",7) 
	    set:$g(payment)="" payment="?"  ;если был зарегистрирован через LT
    }
    set cito=$piece(rects,"\",10)
    if cito="" {
	    set cito=$piece(rec,"\",15) 
    }
    set billitem=$select(pSuperset'="":pSuperset,1:pTestset)
	quit $$GetBillingItemAmount^PRTCLNRUS05birlab(payment,pEpisode,pDateOfAuthorisation,billitem,cito,$name(^invForGetPrice))
]]></Implementation>
</Method>

<Method name="GetPayer">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<Implementation><![CDATA[
	set returnValue=$listget($get(^TEPIext(pEpisode)),2)
	//s ^test("TCBI.UtilsRu_Payer",pEpisode)=returnValue
    quit returnValue
]]></Implementation>
</Method>

<Method name="GetPayerName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<Implementation><![CDATA[
	set codePayer=..GetPayer(pEpisode)
	set returnValue=""
	if codePayer'="" {
		set descshort="",desclong=""
		&sql(select DescriptionShort,DescriptionLong into :descshort,:desclong from BiRLab_CT.Payer where code=:codePayer)
		if (SQLCODE=0) {
		    set returnValue=descshort
		    if returnValue="" set returnValue=desclong	
		}
	}
    quit returnValue
]]></Implementation>
</Method>

<Method name="vr">
<Description><![CDATA[
for testing
$select(%source.VISTSSuperSetDR.CTSSCode&apos;=&quot;&quot;:$e(%source.VISTSSuperSetDR.CTSSCode,1),1:$e(%source.VISTSTestSetDR.CTTSCode,1))
$piece($get(^TTAB(&quot;DEP&quot;,$select(%source.VISTSSuperSetDR.CTSSCode&apos;=&quot;&quot;:$e(%source.VISTSSuperSetDR.CTSSCode,1),1:$e(%source.VISTSTestSetDR.CTTSCode,1)))),&quot;\&quot;,1)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId,pTestSet:%String,pSuperSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set value=$p($g(^TTAB("DEP",$select(pSuperSet'="":$e(pSuperSet,1),1:$e(pTestSet,1)))),"\",1)
	quit value
]]></Implementation>
</Method>

<Method name="GetDateOfCollectionTestSet">
<Description>
Получить дату забора материала на уровне набора тестов (если она пустая, то посмотреть
1. Дату забора материала на уровне эпизода
2. Дату получения пробирки на уровне эпизода (DateOfReceiving)
3. дату ввода эпизода (DateOfEntry)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String="",pDateOfCollectionTestSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if +pDateOfCollectionTestSet'=0 quit pDateOfCollectionTestSet
	set episode=$piece(pId,"||",1)
	if episode'="" {
		set rec=$get(^TEPI(episode))
		set dateOfCollectionEpisode=$piece(rec,"\",10)
		if +dateOfCollectionEpisode'=0 quit dateOfCollectionEpisode  // так как есть эпизоды, в которых в этом поле 0 (382100313101||E225||1)
		
		set dateOfReceiving=$piece(rec,"\",32)
	    if +dateOfReceiving'=0 quit dateOfReceiving
	    
	    set dateOfEntry=$piece(rec,"\",8)
	    if +dateOfEntry'=0 quit dateOfEntry
	}
	quit ""
]]></Implementation>
</Method>

<Method name="GetDateOfCreationTestSet">
<Description>
Получить дату создания задания на уровне набора тестов (если она пустая, то посмотреть
1. дату ввода эпизода (DateOfEntry)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String="",pDateOfCreationTestSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if +pDateOfCreationTestSet'=0 quit pDateOfCreationTestSet
	set episode=$piece(pId,"||",1)
	if episode'="" {
		set rec=$get(^TEPI(episode))
	    
	    set dateOfEntry=$piece(rec,"\",8)
	    if +dateOfEntry'=0 quit dateOfEntry
	}
	quit ""
]]></Implementation>
</Method>

<Method name="GetDateOfReceiving">
<Description>
GetDateOfReceiving
Получить дату получения пробирки на уровне эпизода (если она пустая, то посмотреть
1. дату ввода эпизода (DateOfEntry)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateOfReceiving:%String="",pDateOfEntry:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if +pDateOfReceiving'=0 quit pDateOfReceiving
    if +pDateOfEntry'=0 quit pDateOfEntry
	quit ""
]]></Implementation>
</Method>

<Method name="GetAllDateEpisode">
<Description>
Получить список со всеми датами на уровне эпизода и их дни недели
output: $listbuild(DateOfCollection, DateOfReceiving, DateOfEntry, weekdayOfCollection, weekdayOfReceiving, weekdayOfEntry,timeOfCollection,timeOfReceiving,timeOfEntry) 
(дата забора материала, дата поступления материала в лабораторию, дата регистрации эпизода, день недели забора материала, день недели поступления материала в лабораторию, день недели регистрации эпизода)
время в минутах</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateOfCollection:%String="",pTimeOfCollection:%String="",pDateOfReceiving:%String="",pTimeOfReceiving:%String="",pDateOfEntry:%String="",pTimeOfEntry:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   // $listbuild(DateOfCollection, DateOfReceiving, DateOfEntry,weekdayOfCollection,weekdayOfReceiving,weekdayOfEntry,timeOfCollection,timeOfReceiving,timeOfEntry)
   set returnValue=$listbuild("","","","","","","","","")  
   set dateOfCollection="",dateOfReceiving="",dateOfEntry=""
   set weekdayOfCollection="",weekdayOfReceiving="",weekdayOfEntry=""
   set timeOfCollection="",timeOfReceiving="",timeOfEntry=""
   try {
	   set dateOfCollection=$select(+pDateOfCollection>0:pDateOfCollection,+pDateOfReceiving>0:pDateOfReceiving,+pDateOfEntry>0:pDateOfEntry,1:"")
	   if dateOfCollection>0 set weekdayOfCollection=..GetWeekDay2(dateOfCollection)
	   	   
	   set dateOfReceiving=$select(+pDateOfReceiving>0:pDateOfReceiving,+pDateOfEntry>0:pDateOfEntry,1:"")
	   if dateOfReceiving>0 set weekdayOfReceiving=..GetWeekDay2(dateOfReceiving)
	   
	   set dateOfEntry=$select(+pDateOfEntry>0:pDateOfEntry,1:"")
	   if dateOfEntry>0 set weekdayOfEntry=..GetWeekDay2(dateOfEntry)
	   
	   if (+pTimeOfCollection>0) {
		   set timeOfCollection=pTimeOfCollection
	   } else {
		   if dateOfCollection'="" {
			   if ((+pTimeOfReceiving>0)&&(dateOfCollection=dateOfReceiving)) {
		           set timeOfCollection=pTimeOfReceiving
	           } elseif ((pTimeOfEntry>0)&&(dateOfCollection=dateOfEntry)) {
		           set timeOfCollection=pTimeOfEntry
	           }
	       }
	   }

	   if (+pTimeOfReceiving>0) {
		   set timeOfReceiving=pTimeOfReceiving
	   } else {
		   if dateOfReceiving'="" {
	           if ((pTimeOfEntry>0)&&(dateOfReceiving=dateOfEntry)) {
		           set timeOfReceiving=pTimeOfEntry
	           }
	       }
	   }

       if (+pTimeOfEntry>0) {
		   set timeOfEntry=pTimeOfEntry
	   }
	   
	   set returnValue=$listbuild(dateOfCollection,dateOfReceiving,dateOfEntry,weekdayOfCollection,weekdayOfReceiving,weekdayOfEntry,timeOfCollection,timeOfReceiving,timeOfEntry)
	   
   } catch(e) {
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_".GetAllDateEpisode("_$get(pDateOfCollection)_","_$get(pDateOfReceiving)_","_$get(pDateOfEntry)_")")   
   }
   quit returnValue
]]></Implementation>
</Method>

<Method name="GetWeekDay2">
<Description>
Получить код дня недели в такой кодировке (1-понедельник, 2-вторник, 3-среда, 4-четверг, 5-пятница, 6-суббота, 7-воскресенье)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set returnValue=""
	if pDate>0 {
		set returnValue=$zdate(pDate,10)
		if returnValue=0 set returnValue=7
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="GetAllDateTestSet">
<Description>
Получить список со всеми датами и временами (время) на уровне набора тестов + ТАТ
output: $listbuild(DateOfCollection, DateOfReceiving, DateOfCreation, timeOfCollection,timeOfReceiving,timeOfCreation,TAT) 
(дата забора материала для этого набора тестов, дата поступления материала в лабораторию для этого НТ, дата регистрации НТ,время забора материала для этого набора тестов, время поступления материала в лабораторию для этого НТ, время регистрации НТ,Turn Around Time)
время в минутах</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pDateOfCollection:%String="",pTimeOfCollection:%String="",pDateOfReceiving:%String="",pTimeOfReceiving:%String="",pDateOfCreation:%String="",pTimeOfCreation:%String="",pDateOfAuthorisation:%String="",pTimeOfAuthorisation:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   set returnValue=$listbuild("","","","","","","")  
   set dateOfCollection="",dateOfReceiving="",dateOfCreation=""
   set weekdayOfCollection="",weekdayOfReceiving="",weekdayOfCreation=""
   set timeOfCollection="",timeOfReceiving="",timeOfCreation=""
   set TAT=""
   try {
	   set rec=""
	   set dateOfCollectionEpis="",dateOfReceivingEpis="",dateOfEntryEpis=""
	   set timeOfCollectionEpis="",timeOfReceivingEpis="",timeOfEntryEpis=""
	   set episode=$piece(pId,"||",1)
	   
	   // dateOfCollection 
	   if +pDateOfCollection>0 {
		   set dateOfCollection=pDateOfCollection
	   } else {
		   if rec="" set rec=$get(^TEPI(episode))
		   if dateOfCollectionEpis="" set dateOfCollectionEpis=+$piece(rec,"\",10)
		   if dateOfCollectionEpis>0 set dateOfCollection=dateOfCollectionEpis
		   if dateOfCollection="" {
			   if dateOfReceivingEpis="" set dateOfReceivingEpis=+$piece(rec,"\",32)
			   if dateOfReceivingEpis>0 set dateOfCollection=dateOfReceivingEpis
		   }
		   if dateOfCollection="" {
			   if dateOfEntryEpis="" set dateOfEntryEpis=+$piece(rec,"\",8)
			   if dateOfEntryEpis>0 set dateOfCollection=dateOfEntryEpis
		   }
	   }

	   // dateOfReceiving 
	   if +pDateOfReceiving>0 {
		   set dateOfReceiving=pDateOfReceiving
	   } else {
		   if rec="" set rec=$get(^TEPI(episode))
		   if dateOfReceivingEpis="" set dateOfReceivingEpis=+$piece(rec,"\",32)
		   if dateOfReceivingEpis>0 set dateOfReceiving=dateOfReceivingEpis
		   if dateOfReceiving="" {
			   if dateOfEntryEpis="" set dateOfEntryEpis=+$piece(rec,"\",8)
			   if dateOfEntryEpis>0 set dateOfReceiving=dateOfEntryEpis
		   }
	   }

	   // dateOfCreation
	   if +pDateOfCreation>0 {
		   set dateOfCreation=pDateOfCreation
	   } else {
		   if rec="" set rec=$get(^TEPI(episode))
		   if dateOfEntryEpis="" set dateOfEntryEpis=+$piece(rec,"\",8)
		   if dateOfEntryEpis>0 set dateOfCreation=dateOfEntryEpis
	   }
	   
	   // timeOfCollection
	   if (+pTimeOfCollection>0) {
		   set timeOfCollection=pTimeOfCollection
	   } else {
		   // Сначала смотрим на время забора на уровне эпизода (если даты одинаковые)
		   if timeOfCollection="" {
		       if rec="" set rec=$get(^TEPI(episode))
		       if dateOfCollectionEpis="" set dateOfCollectionEpis=+$piece(rec,"\",10)
		       if timeOfCollectionEpis="" set timeOfCollectionEpis=+$piece(rec,"\",11)
		       if ((timeOfCollectionEpis>0)&&(dateOfCollection=dateOfCollectionEpis)) {
			       set timeOfCollection=timeOfCollectionEpis
		       }
	       }
           // затем смотрим на время получения пробирки на уровне НТ, потом на время создания НТ (если даты одинаковые)
		   if (timeOfCollection="")&&(dateOfCollection'="") {
			   if ((+pTimeOfReceiving>0)&&(dateOfCollection=dateOfReceiving)) {
		           set timeOfCollection=pTimeOfReceiving
	           } elseif ((pTimeOfCreation>0)&&(dateOfCollection=dateOfCreation)) {
		           set timeOfCollection=pTimeOfCreation
	           }
	       
	           // затем смотрим на время получения пробирки на уровне эпизода
	           if timeOfCollection="" {
		           if rec="" set rec=$get(^TEPI(episode))
		           if dateOfReceivingEpis="" set dateOfReceivingEpis=+$piece(rec,"\",32)
		           if timeOfReceivingEpis="" set timeOfReceivingEpis=+$piece(rec,"\",33)
		           if ((timeOfReceivingEpis>0)&&(dateOfCollection=dateOfReceivingEpis)) {
			           set timeOfCollection=timeOfReceivingEpis
		           }
	           }
	           // затем смотрим на время регистрации эпизода
	           if timeOfCollection="" {
		           if rec="" set rec=$get(^TEPI(episode))
		           if dateOfEntryEpis="" set dateOfEntryEpis=+$piece(rec,"\",8)
		           if timeOfEntryEpis="" set timeOfEntryEpis=+$piece(rec,"\",9)
		           if ((timeOfEntryEpis>0)&&(dateOfCollection=dateOfEntryEpis)) {
			           set timeOfCollection=timeOfEntryEpis
		           }
	           }
		   }
	   }

	   // timeOfReceiving
	   if (+pTimeOfReceiving>0) {
		   set timeOfReceiving=pTimeOfReceiving
	   } else {
		   // Сначала смотрим на время получения пробирки на уровне эпизода (если даты одинаковые)
		   if timeOfReceiving="" {
		       if rec="" set rec=$get(^TEPI(episode))
		       if dateOfReceivingEpis="" set dateOfReceivingEpis=+$piece(rec,"\",32)
		       if timeOfReceivingEpis="" set timeOfReceivingEpis=+$piece(rec,"\",33)
		       if ((timeOfReceivingEpis>0)&&(dateOfReceiving=dateOfReceivingEpis)) {
			           set timeOfReceiving=timeOfReceivingEpis
		           }
	       }
           // затем смотрим на на время создания НТ (если даты одинаковые)
		   if (timeOfReceiving="")&&(dateOfReceiving'="") {
	           if ((pTimeOfCreation>0)&&(dateOfReceiving=dateOfCreation)) {
		           set timeOfReceiving=pTimeOfCreation
	           }
	       
	           // затем смотрим на время регистрации эпизода
	           if timeOfReceiving="" {
		           if rec="" set rec=$get(^TEPI(episode))
		           if dateOfEntryEpis="" set dateOfEntryEpis=+$piece(rec,"\",8)
		           if timeOfEntryEpis="" set timeOfEntryEpis=+$piece(rec,"\",9)
		           if ((timeOfEntryEpis>0)&&(dateOfReceiving=dateOfEntryEpis)) {
			           set timeOfReceiving=timeOfEntryEpis
		           }
	           }
		   }
	   }
	   
	   // timeOfCreation
	   if (+pTimeOfCreation>0) {
		   set timeOfCreation=pTimeOfCreation
	   } else {
		   // Сначала смотрим на время регистрации эпизода на уровне эпизода (если даты одинаковые)
		       if rec="" set rec=$get(^TEPI(episode))
		       if dateOfEntryEpis="" set dateOfEntryEpis=+$piece(rec,"\",8)
		       if timeOfEntryEpis="" set timeOfEntryEpis=+$piece(rec,"\",9)
		       if ((timeOfEntryEpis>0)&&(dateOfCreation=dateOfEntryEpis)) {
			        set timeOfCreation=timeOfEntryEpis
		       }
	   }

       set TAT=..GetTAT(pId,pDateOfAuthorisation,pTimeOfAuthorisation,dateOfCollection,timeOfCollection,dateOfReceiving,timeOfReceiving,dateOfCreation,timeOfCreation) 
       //if dateOfReceiving="" set ^test("dateOfReceiving",pId)=""
       set returnValue=$listbuild(dateOfCollection,dateOfReceiving,dateOfCreation,timeOfCollection,timeOfReceiving,timeOfCreation,TAT)
	   
   } catch(e) {
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_".GetAllDateEpisode("_$get(pDateOfCollection)_","_$get(pDateOfReceiving)_","_$get(pDateOfCreation)_")")   
   }
   quit returnValue
]]></Implementation>
</Method>

<Method name="GetUserEpisode">
<Description>
Получить всю информациб по потльзователю, который зарегистрировал эпизод
Output: $listbuild(ФИО пользователя, код типа регистрации (Trak, WebER (внутренняя), WebER (внешняя)))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pUserCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set infoaboutuser=$listbuild("",""),ok=1
	try {
		set type=""
		if pUserCode'="" {
			set $li(infoaboutuser,1)=$piece($get(^SSU("SSUSR",1,pUserCode)),"^",2)
			set $li(infoaboutuser,2)="Trak"
			quit
		}
		if pEpisode'="" {
			set numorder=pEpisode if $length(numorder)>10 set numorder=$extract(pEpisode,1,10)
			set weberuser="",weberusercode=""
			&sql(select ChangedUser,ChangedUser->Description into :weberusercode,:weberuser from WebER_Data.LabOrder where OrderNumber=:numorder)
		    if (SQLCODE=0)&&(weberuser'="") {
			    set $li(infoaboutuser,1)=weberuser
			    if ##class(WebER.CT.Users).IsIntUser(weberusercode) {
				    set type="WebER (внутренняя)"
			    } else {
				    set type="WebER (внешняя)"
			    }
			    set $li(infoaboutuser,2)=type
		    }
		    
		}
	} catch(e) { 
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_".GetUserEpisode("_$get(pEpisode)_")")   
	}
	//set ^test(111,pEpisode)=infoaboutuser_"*"_pUserCode
	quit infoaboutuser
]]></Implementation>
</Method>

<Method name="GetAllInfoTestSet">
<Description>
Получить всю информацию по набору тестов, которая рассчитывается
Output: $listbuild(
1 : код отдела,
2 : наименование отдела, 
3 : код отдела для услуги, 
4 : наименование отдела для услуги,
5 : код услуги,
6 : наименование услуги
7 : кол-во услуг
8 : цена
9 : флаг о том, что результат не в норме ( если все тесты в норме, то НТ в норме (="Нет"), если хотя бы один не в норме - НТ не в норме (="Да") )
10: код пациента (вспомогательное поле - для вычисляемого измерения "Кол-во пациентов" на уровне наборов тестов)
11: код типа образца
12: наименование типа образца
13: кол-во контейнеров -отключено
14: номер контейнера (реально там лежит поле $p(rects,"\",47) (без типа контейнера через ":"), если оно пустое, то $p(rects,"\",46), если и это пустое, то "?" (для подсчета кол-ва контейнеров) медленного и долгого 
15: кол-во выполненных тестов тестов
16: кол-во выполненных невычисляемых тестов тестов
)
^||data("bitweenCubes1") - и создается и используется и на уровне набора тестов и на уровне теста </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pSuperSet:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   set returnValue=$listbuild("","","","","","","","","Нет","","","","","","","")  
   try {
	   set rec=""
	   set episode=$piece(pId,"||",1)
	   set testset=$piece(pId,"||",2)
	   set tscnt=$piece(pId,"||",3)
	   
	   
	   // отдел для набора тестов
	   set dep="",depName="" 
	   set dep=$extract(testset,1)
	   if dep'="" set depName=$piece($get(^TTAB("DEP",dep)),"\",1)
	   	   
	   // отдел для услуги
	   set depService="",depServiceName=""
	   set depService=$select(pSuperSet'="":$extract(pSuperSet,1),1:dep)
	   if depService'="" set depServiceName=$piece($get(^TTAB("DEP",depService)),"\",1)
	   
	   // услуга
	   set serviceCode="",serviceDesc="" // код и наименование услуги
	   if pSuperSet'="" {
		   set serviceCode=pSuperSet
		   set serviceDesc=$piece($get(^TTAB("SUPTS",pSuperSet)),"\",1)
	   } else {
		   set serviceCode=testset
		   set serviceDesc=$piece($get(^TTAB("TS",testset)),"\",1)
	   }
	   
	   set recext=$get(^TEPIext(episode,1,testset,tscnt))
	   // кол-во услуг (для услуги (супернабор) на одном из наборов тестов кол-во услуг=1, на остальных =0)
	   set qServices=$select($listget(recext,4)=1:1,1:0) 
	   // цена за набор тестов (для услуги (супернабор) на одном из наборов тестов цена не нулевая)
	   set price=+$listget(recext,1) 
	   
	   set flagNoNorma="Нет" // результат норма или вне нормы ( если все тесты в норме, то НТ в норме (flag=0), если хотя бы один не в норме - НТ не в норме (flag=1) )
	   set qtTest=0 // кол-во выполненных тестов 
	   set qtTestNoCalc=0 // кол-во выполненных невычисляемых тестов 
	   set test=""
	   for {
		   set test=$order(^TEPI(episode,1,testset,tscnt,"DATA",test)) if test="" quit
		   set qtTest=qtTest+1
		   set flagTest=""
		   set testid=pId_"||"_test
		   if '$data(^||data("bitweenCubes1",testid)) {
			   set flagTest=..GetAbnormalFlag(episode,testset,tscnt,test)
			   set flagCalculation=$select($data(^TTAB("TC",test,3,testset)):1,1:0)
			   set ^||data("bitweenCubes1",testid)=$lb(flagTest,flagCalculation)
		   } else {
			   set recvsp=^||data("bitweenCubes1",testid)
			   if flagNoNorma="Нет" set flagTest=$listget(recvsp,1)
			   set flagCalculation=$listget(recvsp,2)
		   }
		   if (flagTest'="")&&(flagNoNorma="Нет") {
			   set flagNoNorma=$select(flagTest="N":"Нет",1:"Да")
		   }
		   if flagCalculation=0 set qtTestNoCalc=qtTestNoCalc+1 
	   }
	   
	   set rec=$get(^TEPI(episode))
	   // код пациента
	   set patientcode=$piece(rec,"\",18)
	   
	   set rects=$get(^TEPI(episode,1,testset,tscnt))
	   // тип образца
	   set typeSpecimen=$piece(rects,"\",46)
	   /*
	   if typeSpecimen="" {
		   set typeSpecimen=##class(TCLEx.Function.TestSet).DefaultSpecimen(testset)
	   }*/
	   set nameSpecimen=""
	   if typeSpecimen'="" {
		  set nameSpecimen=$piece($get(^TTAB("SPEC",typeSpecimen)),"\",1) 
	   }
	   
	   // кол-во контейнеров
	   set qtContainers=0
	   /*
	   set specimenNo=$piece(rects,"\",47)
	   if '$data(^||data("container",episode)) {
		  $$$ThrowOnError(..CreateDimContainres(episode,$name(^||data("container",episode))))
	   } 
	   
	   if specimenNo'="" {
		   for ii=1:1:$length(specimenNo,";") {
			   set container=$piece($piece(specimenNo,";",ii),":",1)
			   if container="" continue
			   set count=+$get(^||data("container",episode,container))
			   if count>0 set qtContainers=qtContainers+(1/count)
		   }
	   } elseif (typeSpecimen'="") {
		   set count=+$get(^||data("container",episode,typeSpecimen))
		   if count>0 set qtContainers=(1/count)
	   } else {
		   set count=+$get(^||data("container",episode,"?"))
		   if count>0 set qtContainers=(1/count)
		      
	   }
	   */
	   
	   // номер контейнера
	   set containers=""
	   set specimenNo=$piece(rects,"\",47)
	   if specimenNo'="" {
		   for ii=1:1:$length(specimenNo,";") {
			   set container=$piece($piece(specimenNo,";",ii) ,":",1)
			   if container="" continue
			   set containers=containers_$select(containers'="":";",1:"")_container
		   }
	   } elseif (typeSpecimen'="") {
		   	   set containers=typeSpecimen
	   } else {
		   set containers="?" 
	   }

       set returnValue=$listbuild(dep,depName,depService,depServiceName,serviceCode,serviceDesc,qServices,price,flagNoNorma,patientcode,typeSpecimen,nameSpecimen,qtContainers,containers,qtTest,qtTestNoCalc)
       //                          1     2        3             4             5           6           7     8       9        10            11           12            13         14        15      16
	   //s ^test("ds","ds",pId)=returnValue
	   
   } catch(e) {
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_".GetAllDateEpisode("_$get(pDateOfCollection)_","_$get(pDateOfReceiving)_","_$get(pDateOfCreation)_")")   
   }
   quit returnValue
]]></Implementation>
</Method>

<Method name="GetAllInfoForTest">
<Description>
Получить всю информацию по тесту, которая рассчитывается
Output: $listbuild(
1 : Флаг о том, что тест не в норме (тест не в норме ("Да") /тест в норме ("Нет")
##class(TCBI.Utils).GetFlagChangeResultFromMachine(%source.%ID)
2 : Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен)
3 : Флаг о том, что результат был получен с анализатора, а потом удалена информация, что результат получен с анализатора (ошибка в программе) (0 - не изменен, 1 - изменен)
4 : Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен (type=1), 2 - изменен (type=2))
5 : Флаг о том, что тест является вычисляемым ("Да"/"Нет")
6 : Флаг о том, что результат по тесту существует ("Да"/"Нет")
)
^||data("bitweenCubes1") - и создается и используется и на уровне набора тестов и на уровне теста </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   set returnValue=$listbuild("Нет","","","","Нет","Нет")  
   try {
	   set episode=$piece(pId,"||",1)
	   set testset=$piece(pId,"||",2)
	   set tscnt=$piece(pId,"||",3)
	   set test=$piece(pId,"||",4)

	   set info=$get(^TEPI(episode,1,testset,tscnt,"DATA",test))
	   
	   if $data(^||data("bitweenCubes1",pId)) {
		   set flagNorma=$listget(^||data("bitweenCubes1",pId),1)
	   } else {
		   set flagNorma=..GetAbnormalFlag(episode,testset,tscnt,test)
	   }
	   
	   set flag1=0 //Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен)
	   set flag2=0 // Флаг о том, что результат был получен с анализатора, а потом удалена информация, что результат получен с анализатора (ошибка в программе) (0 - не изменен, 1 - изменен)
	   set flag3=0 //Флаг о том, что результат был получен с анализатора, а потом изменен (0 - не изменен, 1 - изменен (type=1), 2 - изменен (type=2))
	   
	   set analyzercode=$piece(info,"\",6)
	   if analyzercode="" {
		set prev=""	
	    set nn=""
	    for {
	      set nn=$order(^TEPI(episode,1,testset,tscnt,"History",nn)) if nn="" quit
	      if '$data(^TEPI(episode,1,testset,tscnt,"History",nn,"DATA",test)) continue
	      set curr=$get(^TEPI(episode,1,testset,tscnt,"History",nn,"DATA",test))
	      set prevdevice=$piece(prev,"\",6)
	      set currdevice=$piece(curr,"\",6)
	      set prevres=$piece(prev,"\",1)
	      set currres=$piece(curr,"\",1)
	      if prev'="" {
			   if (prevdevice'="")&&(currdevice="") {
				   if (prevres'=currres) set flag1=1,flag3=1
		           if (prevres=currres) set flag2=1,flag3=2
			   }
	      }
	   
	      set prev=curr
	      if (flag1'=0)||(flag2'=0)||(flag3'=0) quit	
	    }
	   }
	   
       
	   set flagNoNorma=$select(flagNorma="A":"Да",1:"Нет")

	   // Флаг о том, что тест является вычисляемым
	   set flagCalculation=$select($data(^TTAB("TC",test,3,testset)):1,1:0)
	   set flagCalculationName=$select(flagCalculation=1:"Да",1:"Нет")
	   
	   set flagResultExist=$select($piece(info,"\",1)'="":"Да" ,1:"Нет")
	   
       set returnValue=$listbuild(flagNoNorma,flag1,flag2,flag3,flagCalculationName,flagResultExist)
       
       if '$data(^||data("bitweenCubes1",pId)) {
	       set ^||data("bitweenCubes1",pId)=$listbuild(flagNorma,flagCalculation) // для использования в кубе EPVisitTestSet
       }
	   
	   
   } catch(e) {
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_".GetAllInfoForTest("_$get(pId)_")")   
   }
   quit returnValue
]]></Implementation>
</Method>

<Method name="GetAbnormalFlag">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String="",pTestSet:%String="",pTestSetCnt:%String="",pTest:%String=""</FormalSpec>
<Implementation><![CDATA[
	s returnVal=""
	s testdata=$p($g(^TEPI(pEpisode,1,pTestSet,pTestSetCnt,"DATA",pTest)),"\",1)
	
	if testdata'="" {
		set flag=$extract($$validres^LVBVIS1(pEpisode,pTest,testdata,pEpisode_"||"_pTestSet_"||"_pTestSetCnt,1),1)
	    if flag'="N" set flag="A"  // "L","H" --> "A" (abnormal)
	    //s ^test(222,pEpisode_"||"_pTestSet_"||"_pTestSetCnt_"||"_pTest)=flag_"*"_testdata
  	    //s flag=$P($G(^TTAB("TC",m4,2,testdata)),"\",1) // было в кубе, который привез Володя (это работает, когда стандартный комментарий и testdata="ERR")
 	    s returnVal=flag
	}
 	quit returnVal
]]></Implementation>
</Method>

<Method name="GetAllInfoEpisode">
<Description>
Получить всю информацию по эпизоду, которая рассчитывается
Output: $listbuild(
1 : кол-во контейнеров,
)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   set returnValue=$listbuild("")  
   try {
	   set qtContainers=0
	   kill ^||data("container",pId)
	   $$$ThrowOnError(..CreateDimContainres(pId,$name(^||data("container",pId))))
   
	   set container=""
	   for {
		   set container=$order(^||data("container",pId,container)) if container="" quit
		   set qtContainers=qtContainers+1
	   }
       set returnValue=$listbuild(qtContainers)
	   
   } catch(e) {
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_".GetAllInfoEpisode("_$get(pId)_")")   
   }
   quit returnValue
]]></Implementation>
</Method>

<Method name="CreateDimContainres">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
	   kill @pGlb
	   set ts=""
	   for {
		   set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
		   set tscnt=""
		   for {
			   set tscnt=$order(^TEPI(pEpisode,1,ts,tscnt),1,rects) if tscnt="" quit
			   set specno=$piece(rects,"\",47)
			   set spectype=$piece(rects,"\",46)
			   if specno'="" {
				   for ii=1:1:$length(specno,";") {
					   set container=$piece($piece(specno,";",ii),":",1)
					   if (container'="") {
						   if $i(@pGlb@(container))
					   }
				   }
			   } elseif (spectype'="") {
				   if $i(@pGlb@(spectype))
			   } else {
				   if $i(@pGlb@("?"))
			   }
		   }
	   }
	} catch(e) { set ok=e.AsStatus() }
	quit ok
]]></Implementation>
</Method>
</Class>
</Export>
