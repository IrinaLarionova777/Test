<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="ReportZEN.WSsimple2">
<Description>
ReportZEN.WSsimple</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62371,45366.824004</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this report belongs to.</Description>
<Default>ReportZEN.ReportApplication</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
This is the default display mode for this report.</Description>
<Default>xml</Default>
</Parameter>

<Parameter name="REPORTXMLNAMESPACE">
<Description>
This is the optional XML namespace used for the report.</Description>
</Parameter>

<Property name="TypeWorkSheet">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="NumWorkSheet">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="DataGlobal">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="ReportDefinition">
<Description>
This XML defines the logical contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="WSsimple" call="CreateXML">
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
This XML defines the display for this report.
This is used to generate the XSLT stylesheets for both HTML and XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="WSsimple" style="standard">
 <document width="297mm" height="210mm" marginLeft="15mm" marginRight="15mm" marginTop="15mm" marginBottom="15mm"  referenceOrientation="0" orientation="portrait">
<!--<xslinclude href="CSP/samples/Report/fop.xsl" /> -->
<!--<xslinclude href="/CSP/bion/Report/fop.xsl"/>-->

<class name="block.arial12">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="font-weight" value="normal" />
 <att name="font-size" value="12pt" />
</class>
<class name="table.tableNoBorder">
</class>
<class name="td.tableNoBorder">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="text-align" value="left" />
 <att name="font-weight" value="normal" />
</class>
<class name="table.tableBorder">
  <att name="border-style" value="solid" />
  <att name="border-width" value="0.5pt" />
</class>
<class name="th.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="center" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
<class name="td.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="left" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
</document>

<body >
<focall method="Body"/>
</body>
 
</report>
]]></Data>
</XData>

<Method name="Body">
<Description>
Содержание отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	Set regTmp=..DataGlobal
	Set headerstream=..getStreamHeader($name(refTmp))
	Set page=""
	for {
		set page=$order(@refTmp@(page)) if page="" quit
		Do stream.CopyFrom(headerstream)
		Set tablestream=..ResultTable(page,$name(@refTmp))
		Do stream.CopyFrom(tablestream)
		Set footerstream=..getstreamFooter(pagenumber)
		Do stream.CopyFrom(footerstream)
	}	
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultTable">
<FormalSpec>pPageNumber:%Integer,pTotalPages:%Integer,pPageGlb:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	
	Set stream=##class(%GlobalCharacterStream).%New()
    quit stream
]]></Implementation>
</Method>

<Method name="CreateXML">
<ClassMethod>1</ClassMethod>
<PublicList>PAR</PublicList>
<Implementation><![CDATA[
	Set TypeWorkSheet = $Get(%request.Data("TypeWorkSheet")) if TypeWorkSheet="" set TypeWorkSheet="G001WL" ;"A030WL"
    Set NumWorkSheet = $Get(%request.Data("NumWorkSheet")) if NumWorkSheet="" set NumWorkSheet=1
    set refTmp=$name(^TMP("PRTWKSPSPB06",$j))
    set %page.DataGlobal=refTmp
    set ok=..getData(TypeWorkSheet,NumWorkSheet,refTmp)
    set ^test(111,"TypeWorkSheet")=TypeWorkSheet
    set ^test(111,"NumWorkSheet")=NumWorkSheet
    set ^test(111,"refTmp")=refTmp

    Write !,"<NameCompany>",##class(Report.FinancialEntity).getNameCompany(),"</NameCompany>"
    Write !,"<NameWS>",$piece($get(^TTAB("WS",TypeWorkSheet)),"\",1),"</NameWS>"
    Write !,"<CurrentDateTime>",$zd(+$h,4)_" "_$zt($piece($h,",",2),2),"</CurrentDateTime>"
    
    set flagClinic=$piece($get(@refTmp@("d")),"\",5)
    set nppEpis="",r="\",counterEpisode=0,counterTS=0
    for {
       set nppEpis=$order(@refTmp@("d",nppEpis)) if nppEpis="" quit
       set rec=^(nppEpis)
       set epis=$li(rec,1)
       set cito="" if $li(rec,2)="cito" set cito="Y"
       set counterEpisode=counterEpisode+1
       set rec=$get(^TEPI(epis)),recdop=$get(^TEPI(epis,0))
       set fioPatient=$$FullName^KSPCLUtils($piece(rec,r,1),$piece(rec,r,2),$piece(recdop,r,23),40)
       set dateOfBirth=$$DisplayDate^KSPCLUtils($piece(rec,r,4))
       set sex=$piece(rec,r,3)
       set commentTS=""
       set comment="",commentTS=""
       if flagClinic="Y",sex="Ж" {
          set cPregnantWeeks=$piece(rec,r,35) 
          if +cPregnantWeeks'=0 
          {
	          set comment="Бер.: "_cPregnantWeeks_" нед." 
          }
          else  
          {
	         set phase=$piece(recdop,r,17)
	         if phase'="" set comment="Фаза цикла: "_$Piece($get(^TTAB("CLC",phase)),r,1) 
          } 
       }
       set strEpisode1=epis_" / "_fioPatient
       set strEpisode2=sex_" / "_dateOfBirth 
       if comment'="" set strEpisode2=strEpisode2_"/"_comment
       Write !,"<Episode npp="""_nppEpis_""">"
       Write !,"<d>"""_strEpisode1_" "_strEpisode2_"""</d>"
       Write !,"<flagCito>"_$select(cito="Y":"U",1:"")_"</flagCito>"
            
       set nppTestSet=""
       for {
           set nppTestSet=$order(@refTmp@("d",nppEpis,nppTestSet)) if nppTestSet="" quit
           set rec=^(nppTestSet)
           set testset=$li(rec,1),tscnt=$li(rec,2) 
           set counterTS=counterTS+1
	       set test=""
	       for {
		       set test=$order(@refTmp@("test",testset,test)) if test="" quit
		       set rec=^(test)
		       Write !,"<Test code="""_test_""" header="""_$li(rec,1)_""">"
	           Write !,"<result>"_""_"</result>"
	           Write !,"</Test>"   
           }
       }
       Write !,"</Episode>"  
    }
    
    Write !,"<CounterEpisodes>",counterEpisode,"</CounterEpisodes>" 
    Write !,"<CounterTS>",counterTS,"</CounterTS>"
]]></Implementation>
</Method>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec>typeWS:%String,numWS:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set result=$$$OK
	try {
		kill @refTmp
		;флаги
		set rec=$get(^TTAB("WS",typeWS))
		set flagCito=$piece(rec,"\",6),flagSort=$piece(rec,"\",8),flagCalc=$piece(rec,"\",12),flagPrintAuthor=$piece(rec,"\",17)
		set flagClinic=$piece(rec,"\",10)
		;тесты РЛ
		set testset=""
		for {
			   set testset=$order(^TTAB("WS",typeWS,"10",testset)) if testset="" quit
			   set @refTmp@("test",testset)=$piece($get(^TTAB("TS",testset)),"\",1)
			   set spisTests=$piece($get(^TTAB("WS",typeWS,"10",testset)),"\",4)   
		       set counter=$length(spisTests,",")
		       for i=1:1:counter {
			        set test=$piece(spisTests,",",i)
			        if flagCalc'="Y",$d(^TTAB("TC",test,3,testset)) q
			        set rec=$get(^TTAB("TC",test))
		            s @refTmp@("test",testset,test)=$lb($piece(rec,"\",1),$piece(rec,"\",12))
		       }
		}     
		set epis=""
	    for {
		   set epis=$order(^TWKS(typeWS,"2",numWS,"EP",epis)) if epis="" quit
		   set key=epis,rec=$get(^TEPI(epis))
		   if flagSort="DT" set key=$p(rec,"\",10)_$c(1)_$p(rec,"\",11)
		   if flagSort="CR" set key="???"
		   
		   set node="o"
		   if flagCito="Y" {
		      set cito=$piece(rec,"\",23) ;???????
		      if cito'="" set node="cito"
		   }
		   set testset=""
		   for {
		       set testset=$order(^TWKS(typeWS,"2",numWS,"EP",epis,"TEST",testset)) if testset="" quit
		       set tscount="" 
		       for {
			       set tscount=$order(^TWKS(typeWS,"2",numWS,"EP",epis,"TEST",testset,tscount)) if tscount="" quit
			       ;set nppTS=nppTS+1
			       set @refTmp@(node,key,epis,testset,tscount)=""
		       }    	
	       }	
	    }
	    ;сортировка
	    set nppEpis=0
	    set node=""
	    for {
		    set node=$order(@refTmp@(node)) if node="" quit
		    if node="test" continue
		    set key="" 
		    for {
			  set key=$order(@refTmp@(node,key)) if key="" quit
			  set epis=""
			  for {
				 set epis=$order(@refTmp@(node,key,epis)) if epis="" quit
				 set nppEpis=nppEpis+1,nppTS=0 set @refTmp@("d",nppEpis)=$lb(epis,node)  
				 set testset=""
				 for {
					 set testset=$order(@refTmp@(node,key,epis,testset)) if testset="" quit
					 set tscnt=""
					 for {
						 set tscnt=$order(@refTmp@(node,key,epis,testset,tscnt)) if tscnt="" quit 
						 ;if flagPrintAuthor'="Y" if $$status^LVBVIS1(epis_"||"_testset_"||"_tscnt)="A" kill @refTmp@("d",nppEpis) set nppEpis=nppEpis-1,nppTS=0 quit 
						 set nppTS=nppTS+1
						 set @refTmp@("d",nppEpis,nppTS)=$lb(testset,tscnt)
					 }
				 }	 
			  }     
		    }    
	    }
	    if $data(@refTmp@("d")) set @refTmp@("d")=flagCito_"\"_flagSort_"\"_flagCalc_"\"_flagPrintAuthor_"\"_flagClinic
	    set nppEpis="",page=0,npp=0,rowsOnPage=3
	    for {
		    set nppEpis=$order(@refTmp@("d",nppEpis)) if nppEpis="" quit
		    set npp=npp+1
			if npp>rowsOnPage set page=page+1,npp=1
			set @regTmp@("dpage",page,nppEpis)=""
	    }   
	    
	}
	Catch exception
	{
	    Set result=exception.AsStatus()
	}    
    quit result
]]></Implementation>
</Method>

<Method name="%OnBeforeReport">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..TypeWorkSheet = $Get(%request.Data("TypeWorkSheet"))
	Set ..NumWorkSheet = $Get(%request.Data("NumWorkSheet"))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTypeWorkSheet:%String,pNumWorkSheet:%String,pFileName:%String</FormalSpec>
<PublicList>%request</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
	Set %request=##class(%CSP.Request).%New()
	Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("TypeWorkSheet")=pTypeWorkSheet
	Set %request.Data("NumWorkSheet")=pNumWorkSheet
	Set report = ##class(ReportZEN.WSsimple).%New()
	Do report.GenerateReport(pFileName,2)
  } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>
</Class>
</Export>
