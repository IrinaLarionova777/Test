<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="ReportZEN.WSrpt">
<Description>
ReportZEN.WSrpt
Предполагаем, что ширина столбца в настройках РЛ указана в миллиметрах </Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62374,63244.90789</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this report belongs to.</Description>
<Default>ReportZEN.ReportApplication</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
This is the default display mode for this report.</Description>
<Default>pdf</Default>
</Parameter>

<Parameter name="REPORTXMLNAMESPACE">
<Description>
This is the optional XML namespace used for the report.</Description>
</Parameter>

<Property name="TypeWorkSheet">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="NumWorkSheet">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="FlagPrintOnlyLastPages">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="ReportDefinition">
<Description>
This XML defines the logical contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="WSrpt" call="CreateXML">
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
This XML defines the display for this report.
This is used to generate the XSLT stylesheets for both HTML and XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="WSrpt" style='none'>
 <!--<focall method="getReport"/>-->
<document method="Document">
<!--<document>
 <focall method="Document"/>-->
<!--<document width="210mm" height="297mm" marginLeft="15mm" marginRight="15mm" marginTop="15mm" marginBottom="15mm" >--> <!-- referenceOrientation="90"> --> <!-- orientation="landscape">-->

<!--<xslinclude href="CSP/samples/Report/fop.xsl" /> -->
<!--<xslinclude href="/CSP/bion/Report/fop.xsl"/>-->
<!--
<class name="block.arial12">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="font-weight" value="normal" />
 <att name="font-size" value="12pt" />
</class>
<class name="table.tableNoBorder">
</class>
<class name="td.tableNoBorder">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="text-align" value="left" />
 <att name="font-weight" value="normal" />
</class>
<class name="table.tableBorder">
  <att name="border-style" value="solid" />
  <att name="border-width" value="0.5pt" />
</class>
<class name="th.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="center" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
<class name="td.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="left" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
-->
</document>

<body >
<focall method="getBody"/>
</body>
 
</report>
]]></Data>
</XData>

<Method name="Document">
<Description>
Содержание отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	
	Set TypeWorkSheet = $Get(%request.Data("TypeWorkSheet")) if TypeWorkSheet="" quit stream
    Set NumWorkSheet = $Get(%request.Data("NumWorkSheet")) if NumWorkSheet="" quit stream
    Set FlagPrintOnlyLastPages = $Get(%request.Data("FlagPrintOnlyLastPages")) if FlagPrintOnlyLastPages="" set FlagPrintOnlyLastPages="N"

 	Do stream.WriteLine("<fo:simple-page-master master-name='port' page-height='297mm' page-width='210mm'  margin-top='15mm' margin-bottom='15mm' margin-left='15mm' margin-right='15mm' reference-orientation='0'>")
	Do stream.WriteLine("<fo:region-body margin-top='0mm' margin-bottom='0mm'/>")
	Do stream.WriteLine("</fo:simple-page-master>")
  
	Do stream.WriteLine("<fo:simple-page-master master-name='land' page-width='210mm' page-height='297mm'  margin-top='15mm' margin-bottom='15mm' margin-left='15mm' margin-right='15mm' reference-orientation='90'>")
	Do stream.WriteLine("<fo:region-body margin-top='0mm' margin-bottom='0mm'/>")
	Do stream.WriteLine("</fo:simple-page-master>")
 
    set orientation="land"
    set ok=..getOrientation(TypeWorkSheet,NumWorkSheet,.orientation)
 
    Do stream.WriteLine("<fo:page-sequence-master master-name='main'>")
 	if orientation="port" Do stream.WriteLine("<fo:single-page-master-reference master-reference='port'>") if 1
	else  Do stream.WriteLine("<fo:single-page-master-reference master-reference='land'>")
	Do stream.WriteLine("</fo:single-page-master-reference>")
	Do stream.WriteLine("</fo:page-sequence-master>")  
    
    ;Do stream.WriteLine("<fo:page-sequence-master master-name='main'>")
	;Do stream.WriteLine("<fo:repeatable-page-master-alternatives>")
	;Do stream.WriteLine("<fo:conditional-page-master-reference page-position='page-port'  master-reference='port'/>")
	;Do stream.WriteLine("<fo:conditional-page-master-reference page-position='page-land' master-reference='land'/>")
	;Do stream.WriteLine("</fo:repeatable-page-master-alternatives>")
	;Do stream.WriteLine("</fo:page-sequence-master>")
    
    quit stream
]]></Implementation>
</Method>

<Method name="getBody">
<Description>
Содержание отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
    Set TypeWorkSheet = $Get(%request.Data("TypeWorkSheet")) if TypeWorkSheet="" quit stream
    Set NumWorkSheet = $Get(%request.Data("NumWorkSheet")) if NumWorkSheet="" quit stream
    Set FlagPrintOnlyLastPages = $Get(%request.Data("FlagPrintOnlyLastPages")) if FlagPrintOnlyLastPages="" set FlagPrintOnlyLastPages="N"
    
    set refTmp=$name(^||ws)  ;^TMP("PRTWKSPSPB06",$j))
    set ok=..getData(TypeWorkSheet,NumWorkSheet,refTmp,FlagPrintOnlyLastPages)
    
    if $data(^||ws("d")) {
	   Set headerstream=..getStreamHeader($name(@refTmp))
	   Do stream.CopyFrom(headerstream)
	   Set tablestream=..getStreamBody($name(@refTmp))
	   Do stream.CopyFrom(tablestream)
	   Set footerstream=..getStreamFooter($name(@refTmp))
	   Do stream.CopyFrom(footerstream)
    }
    
	kill @refTmp
	
	Quit stream
]]></Implementation>
</Method>

<Method name="getStreamHeader">
<FormalSpec>refTmp:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	
    set rec=$get(@refTmp)
	Do stream.WriteLine("<fo:table table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='50%'/>")
	Do stream.WriteLine("	<fo:table-column column-width='50%'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block> "_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block text-align='right' font-family='Arial'> "_$ZConvert($li(rec,1),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial'> "_$ZConvert("Рабочий лист """_$li(rec,2)_"""","o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block text-align='right' font-family='Arial'> "_$ZConvert("Дата и время формирования: "_$li(rec,3),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	Quit stream
]]></Implementation>
</Method>

<Method name="getStreamBody">
<FormalSpec>refTmp:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
  set stream=##class(%GlobalCharacterStream).%New()
  set heightString="5mm"
  set countPageH=+$get(@refTmp@("hpage"))
  set rec=$get(@refTmp@("d"))
  set widthColTest=$li(rec,6)
  set widthCol=$li(rec,8)
  set widthColFio=$li(rec,7)
  set orientation=$li(rec,9)
  set flagPrintOnlyLastPages=$li(rec,10)
  set pageHlast=$order(@refTmp@("hpage",""),-1)
  set pageHfirst=$order(@refTmp@("hpage",""))
  set pageLast=$order(@refTmp@("dpage",""),-1)
  Set page=""
  if flagPrintOnlyLastPages="Y" for ii=1:1:3 set page=$order(@refTmp@("dpage",page),-1) quit:page=""
  for {
	set page=$order(@refTmp@("dpage",page)) if page="" quit	
	for pageH=1:1:countPageH {
	    ;Do stream.WriteLine("    <fo:table xsl:use-attribute-sets='tableBorder' background-color='#EFEFEF' border-width='1pt' border-style='solid' table-layout='fixed' width='100%' border-collapse='separate'>")
	    ;do stream.WriteLine("    <fo:table background-color='#EFEFEF' border-width='0.5pt' border-style='solid' table-layout='fixed' width='100%' border-collapse='separate'>")
	    do stream.WriteLine("    <fo:table table-layout='fixed' width='100%' border-collapse='separate' >")
	    Do stream.WriteLine("	<fo:table-column column-width='10mm'/>")
	    Do stream.WriteLine("	<fo:table-column column-width='4mm'/>")
	    Do stream.WriteLine("	<fo:table-column column-width='25mm'/>")
	    Do stream.WriteLine("	<fo:table-column column-width='"_widthColFio_"mm'/>")
	    set nppTS=""
	    for {
		    set nppTS=$order(@refTmp@("hpage",pageH,nppTS)) if nppTS="" quit
		    set test=""
		    for {
			    set test=$order(@refTmp@("hpage",pageH,nppTS,test)) if test="" quit
			    Do stream.WriteLine("	<fo:table-column column-width='"_widthColTest_"mm'/>")
		    }
	    }
	    Do stream.WriteLine("<fo:table-header text-align='center' vertical-align='middle' >")	    
	    //шапка таблицы
	    
	    Do stream.WriteLine("        <fo:table-row line-height='"_heightString_"' >")
	    Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid' number-rows-spanned='2'><fo:block font-family='Arial' font-size='10pt'>"_$zcvt("N в р.л.","o","XML")_"</fo:block></fo:table-cell>")
    	Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid' number-rows-spanned='2'><fo:block font-family='Arial' font-size='10pt'>"_$zcvt("C","o","XML")_"</fo:block></fo:table-cell>")
    	Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid' number-rows-spanned='2'><fo:block font-family='Arial' font-size='10pt'>"_$zcvt("Номер эпизода","o","XML")_"</fo:block></fo:table-cell>")
    	Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid' number-rows-spanned='2'>")
    	Do stream.WriteLine("            <fo:block font-family='Arial' font-size='10pt'>"_$zcvt("ФИО/Пол/Д.Р.","o","XML"))
    	Do stream.WriteLine("            </fo:block>")
    	//Do stream.WriteLine("            <fo:block font-family='Arial' font-size='10pt'>"_$zcvt("Пол/Д.Р./Примечание","o","XML"))
    	//Do stream.WriteLine("            </fo:block>")
       	Do stream.WriteLine("          </fo:table-cell>")
    	set nppTS=""
	    for {
		    set nppTS=$order(@refTmp@("hpage",pageH,nppTS)) if nppTS="" quit
		    set rec=@refTmp@("h",nppTS),testset=$li(rec,1)
		    ;set testset=$piece(nppTS,$c(1),1)
		    set nameTS=$get(@refTmp@("test",testset)),colspan=+$get(@refTmp@("hpage",pageH,nppTS))
		    set widthField=colspan*widthCol //*4
		    set nameTS=$extract(nameTS,1,widthField)
		    Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid' "_$select(+colspan'=0:"number-columns-spanned='"_colspan_"' ",1:"")_"><fo:block font-family='Arial' font-size='10pt'>"_$zcvt(nameTS,"o","XML")_"</fo:block></fo:table-cell>")
	    }
	    Do stream.WriteLine("        </fo:table-row>")   
	    Do stream.WriteLine("        <fo:table-row line-height='"_heightString_"' >")
    	set nppTS=""
	    for {
		    set nppTS=$order(@refTmp@("hpage",pageH,nppTS)) if nppTS="" quit
		    set rec=@refTmp@("h",nppTS),testset=$li(rec,1)
		    ;set testset=$piece(nppTS,$c(1),1)
		    set test=""
		    for {
			    set test=$order(@refTmp@("hpage",pageH,nppTS,test)) if test="" quit
			    set nameTest=$extract($li($get(@refTmp@("test",testset,test)),1),1,5)
			    Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid'><fo:block font-family='Arial' font-size='8pt'>"_$zcvt(nameTest,"o","XML")_"</fo:block></fo:table-cell>")
		    }
	    }    
     	Do stream.WriteLine("        </fo:table-row>")
     	Do stream.WriteLine("      </fo:table-header>") 
     	
     	Do stream.WriteLine("      <fo:table-body>") 
        set nppEpis=""
	    for {
		    set nppEpis=$order(@refTmp@("dpage",page,nppEpis)) if nppEpis="" quit
    	    ;Set str="        <fo:table-row line-height='"_heightString_"' background-color='#00FFFF'>"
    	    Set str="        <fo:table-row line-height='"_heightString_"'>"
	        If nppEpis#2 {
	 	        ;Set str="        <fo:table-row line-height='"_heightString_"' background-color='#FFFFFF' vertical-align='middle'>"
	 	        Set str="        <fo:table-row line-height='"_heightString_"' >"
	        }
	        set rec=$get(@refTmp@("d",nppEpis))
	        set fio=$zcvt($li(rec,4),"o","XML") set fio=##class(Report.Function.general).getStringXMLnoBreak(fio)
	        set sex=$li(rec,5),dateOfBirth=$li(rec,6),comment=$li(rec,7)
	        Do stream.WriteLine(str)
	        Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid'><fo:block font-family='Arial' font-size='10pt'>"_$zcvt(nppEpis,"o","XML")_"</fo:block></fo:table-cell>")
	        Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid'><fo:block font-family='Arial' font-size='10pt'>"_$zcvt($li(rec,3),"o","XML")_"</fo:block></fo:table-cell>")
	        Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid'><fo:block font-family='Arial' font-size='10pt'>"_$zcvt($li(rec,1),"o","XML")_"</fo:block></fo:table-cell>")
	        Do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid'>")
        	Do stream.WriteLine("            <fo:block font-family='Arial' font-size='10pt'>"_fio_$zcvt("/"_sex_"/"_dateOfBirth,"o","XML"))
    	    Do stream.WriteLine("            </fo:block>")
    	    //Do stream.WriteLine("            <fo:block font-family='Arial' font-size='10pt'>"_$zcvt(sex_"/"_dateOfBirth_"/","o","XML"))
    	    //Do stream.WriteLine("            <fo:inline font-family='Arial' font-size='9pt'>"_$zcvt(comment,"o","XML")_"</fo:inline>")
        	//Do stream.WriteLine("            </fo:block>")
         	Do stream.WriteLine("          </fo:table-cell>")
  
	        set nppTS=""
	        for {
		       set nppTS=$order(@refTmp@("hpage",pageH,nppTS)) if nppTS="" quit
		       set test=""
		       for {
			       set test=$order(@refTmp@("hpage",pageH,nppTS,test)) if test="" quit
			       set result="н/р"
			       if $data(@refTmp@("d",nppEpis,nppTS,test)) set result=$get(@refTmp@("d",nppEpis,nppTS,test)) set result=$e(result,1,widthCol)
			       set result=$zcvt(result,"o","XML")
			       if $tr(result," ","")="" set result="&#160;" 
			       do stream.WriteLine("          <fo:table-cell border-width='0.5pt' border-style='solid' ><fo:block text-align='center' vertical-align='middle' font-family='Arial' font-size='10pt'>"_result_"</fo:block></fo:table-cell>")
		       }
	        }
    	    Do stream.WriteLine("        </fo:table-row>")
	    }	 
	    Do stream.WriteLine("      </fo:table-body>")
	    Do stream.WriteLine("    </fo:table>")
	    
	    if '((page=pageLast)&(pageH=pageHlast)) {
	      Do stream.WriteLine("<fo:table table-layout='fixed' width='100%' border-collapse='separate'>")
	      Do stream.WriteLine("	<fo:table-column column-width='30%'/>")
	      Do stream.WriteLine("	<fo:table-column column-width='30%'/>")
	      Do stream.WriteLine("	<fo:table-column column-width='40%'/>")
	      Do stream.WriteLine("	<fo:table-body>")
	      Do stream.WriteLine("		<fo:table-row><fo:table-cell><fo:block>&#160;</fo:block></fo:table-cell></fo:table-row>")
	      Do stream.WriteLine("		<fo:table-row>")
	      Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial'> </fo:block></fo:table-cell>")
	      Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial'> </fo:block></fo:table-cell>")
	    
		  set str="Страница "_page_" из "_pageLast
    	  if pageHfirst'=pageHlast set str=str_" (часть "_pageH_")"
	      Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial' text-align='right' font-size='9pt'>"_$zcvt(str,"o","XML")_"</fo:block></fo:table-cell>")
	      Do stream.WriteLine("		</fo:table-row>")
	      Do stream.WriteLine("	</fo:table-body>")
	      Do stream.WriteLine("</fo:table>")
	    }
	    
	    If pageH<$order(@refTmp@("hpage",""),-1) {
		    Do stream.WriteLine("<fo:block break-after='page'/>")
	    }
	}
	If page<pageLast {
	    Do stream.WriteLine("<fo:block break-after='page'/>")
	}
  }	 
	Quit stream
]]></Implementation>
</Method>

<Method name="getStreamFooter">
<FormalSpec>refTmp:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
    set rec=$get(@refTmp)
	Do stream.WriteLine("<fo:table table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='30%'/>")
	Do stream.WriteLine("	<fo:table-column column-width='30%'/>")
	Do stream.WriteLine("	<fo:table-column column-width='40%'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("		<fo:table-row><fo:table-cell><fo:block>&#160;</fo:block></fo:table-cell></fo:table-row>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial'> "_$zcvt("Итого эпизодов: "_$li(rec,4),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial'> "_$zcvt("Итого исследований: "_$li(rec,5),"o","XML")_"</fo:block></fo:table-cell>")
	set pageHfirst=$order(@refTmp@("hpage",""))
	set pageHlast=$order(@refTmp@("hpage",""),-1)
	set pageLast=$order(@refTmp@("dpage",""),-1)
	set str="Страница "_pageLast_" из "_pageLast
	if pageHfirst'=pageHlast set str=str_" (часть "_pageHlast_")"
	Do stream.WriteLine("			<fo:table-cell ><fo:block font-family='Arial' text-align='right' font-weight='normal' font-size='9pt'>"_$zcvt(str,"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	Quit stream
]]></Implementation>
</Method>

<Method name="getOrientation">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[typeWS:%String,numWS:%String,&orientation:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set result=$$$OK, orientation="land" 
	try {
		set rec=$get(^TTAB("WS",typeWS)),orientation=$piece(rec,"\",18)
		set orientation=$select(orientation="V":"port",1:"land")
		;если в настройках для РЛ стоит альбомная, но тестов в настройках на книжную, то меняем на книжную  
		set widthCol=$piece(rec,"\",4),flagCalc=$piece(rec,"\",12)
		    ;тесты РЛ
		    set testset="",countTest=0
		    for {
			   set testset=$order(^TTAB("WS",typeWS,"10",testset),1,rects) if testset="" quit
			   set spisTests=""
			   if ..GetSpisTests(typeWS,testset,.spisTests) 
			   
		       set counter=$length(spisTests,",")
		       for i=1:1:counter {
			        set test=$piece(spisTests,",",i)
			        if flagCalc'="Y",$d(^TTAB("TC",test,3,testset)) continue
                    set countTest=countTest+1
		       }
		    }
		    // считаем, что ширина столбца указана в мм
        if (widthCol*countTest+99)<(210-30) set orientation="port" 
        //set ^test("ws","ori",typeWS,numWS)= orientation
	}
	Catch exception
	{
	    Set result=exception.AsStatus() 
	}    
    quit result
]]></Implementation>
</Method>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec>typeWS:%String,numWS:%String,refTmp:%String,flagPrintOnlyLastPages:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set result=$$$OK,r="\" 
	try {
		kill @refTmp
		set flagPrintOnlyLastPages=$select($get(flagPrintOnlyLastPages)="":"N",1:flagPrintOnlyLastPages)
		set nameOrg=##class(Report.FinancialEntity).getNameCompany()
        set nameWS=$piece($get(^TTAB("WS",typeWS)),"\",1)
        set datetime=$zd(+$h,4)_" "_$zt($piece($h,",",2),2)
        
        $$$ThrowOnError(..getOrientation(typeWS, numWS, .orientation))
        
        set widthDocument=297-30 if orientation="port" set widthDocument=210-30
  
        set @refTmp=$lb(nameOrg,nameWS,datetime,0,0)
		;флаги
		set rec=$get(^TTAB("WS",typeWS))
		set flagCito=$piece(rec,"\",6),flagSort=$piece(rec,"\",13),typeSort=$piece(rec,"\",8),flagCalc=$piece(rec,"\",12),flagPrintAuthor=$piece(rec,"\",17)
		set flagSinonimForTestSet=$piece(rec,"\",11)
		set flagClinic=$piece(rec,"\",10),flagSinonimForTest=$piece(rec,"\",20),widthCol=$piece(rec,"\",4)
		set widthColTest=widthCol //(widthCol+1)*3
		set colOnPage= (widthDocument-93)\widthColTest
		set widthColFio=60 //+((widthDocument-93)#widthColTest)
		;тесты РЛ
		set testset=""
		for {
			   set testset=$order(^TTAB("WS",typeWS,"10",testset)) if testset="" quit
			   set rec=$get(^TTAB("TS",testset))
			   set nameTS=$piece(rec,"\",1) if flagSinonimForTestSet="Y" set nameTS=$piece(rec,"\",2) if nameTS="" set nameTS=testset
			   set @refTmp@("test",testset)=nameTS
			   set spisTests=""
			   if ..GetSpisTests(typeWS,testset,.spisTests)   
		       set counter=$length(spisTests,",")
		       for i=1:1:counter {
			        set test=$piece(spisTests,",",i)
			        if flagCalc'="Y",$d(^TTAB("TC",test,3,testset)) continue  ;вычисляемые тесты не брать 
			        set rec=$get(^TTAB("TC",test))
			        set nameTest=$piece(rec,"\",1)
			        if flagSinonimForTest="Y" set nameTest=$piece(rec,"\",12) if nameTest="" set nameTest=test
		            s @refTmp@("test",testset,test)=$lb(nameTest)
		       }
		} 
		// если сортировка включена и она по дате забора материала (collection) тогда проверяем: 
		// если дата или время забора пустрое у какого-нибудь эпизода то переключаемся на сортировку по дате ввода (entry)
		if flagSort="Y"&&(typeSort="DT") {
			set epis="",exit=0
	        for {
		        set epis=$order(^TWKS(typeWS,"2",numWS,"EP",epis)) if epis=""||(exit=1) quit
		        set rec=$get(^TEPI(epis))
		        set dateCollection=$translate($piece(rec,"\",10)," ",""),timeCollection=$translate($piece(rec,"\",11)," ","")
			    if dateCollection=""||(timeCollection="") set typeSort="CR",exit=1
   	        }
		}           
		set epis="",countTS=0
	    for {
		   set epis=$order(^TWKS(typeWS,"2",numWS,"EP",epis)) if epis="" quit
		   set recWS=$get(^(epis)),npp=+recWS
		   set key=$select(npp'=0:npp,1:epis)
		   set rec=$get(^TEPI(epis))
		   if flagSort="Y" {
			   if typeSort="E" set key=epis
		       if typeSort="DT" {
			       set dateCollection=$p(rec,"\",10),timeCollection=$p(rec,"\",11)
			       set key=dateCollection_$c(1)_$tr($j(timeCollection,7)," ","0")_$char(1)_key
		       }
		       if typeSort="CR" {
			       set dateEntry=$p(rec,"\",8),timeEntry=$p(rec,"\",9)
			       set key=dateEntry_$c(1)_$tr($j(timeEntry,7)," ","0")_$char(1)_key
		       }
		   }
		   
		   set node="o"
		   if flagCito="Y" {
		      if $piece(rec,"\",15)="U" set node="cito"
		   }
		   set testset=""
		   for {
		       set testset=$order(^TWKS(typeWS,"2",numWS,"EP",epis,"TEST",testset)) if testset="" quit
		       set tscount="" 
		       for {
			       set tscount=$order(^TWKS(typeWS,"2",numWS,"EP",epis,"TEST",testset,tscount)) if tscount="" quit
			       set @refTmp@(node,key,epis,testset,tscount)=""
			       set countTS=countTS+1
			       ;set @refTmp@("vr",epis_$c(1)_testset_$c(1)_tscount)=countTS
		       }    	
	       }	
	    }
	    ;сортировка
	    set nppEpis=0
	    for node="cito","o" {
		    if '$data(@refTmp@(node)) continue
		    set key="" 
		    for {
			  set key=$order(@refTmp@(node,key)) if key="" quit
			  set epis=""
			  for {
				 set epis=$order(@refTmp@(node,key,epis)) if epis="" quit
                 set rec=$get(^TEPI(epis)),recdop=$get(^TEPI(epis,0))
                 ;set fioPatient=$$FullName^KSPCLUtils($piece(rec,r,1),$piece(rec,r,2),$piece(recdop,r,23),40)
                 set fioPatient=##class(Report.Function.general).getFioShort($piece(rec,r,1),$piece(rec,r,2),$piece(recdop,r,23))
                 set dateOfBirth=$$DisplayDate^KSPCLUtils($piece(rec,r,4))
                 set sex=$piece(rec,r,3),cito=$piece(rec,r,15)
                 set comment=""
                 if flagClinic="Y",sex="Ж" {
                    set cPregnantWeeks=$piece(rec,r,35) 
                    if +cPregnantWeeks'=0 
                    {
	                      set comment="Бер.: "_cPregnantWeeks_" нед." 
                    }
                    else  
                    {
	                set phase=$piece(recdop,r,17)
	                if phase'="" set comment="Ф/ц: "_$Piece($get(^TTAB("CLC",phase)),r,1) 
	                set comment=$extract(comment,1,20)
                    }
                 } 
                 ;set dataEpisode=fioPatient_$c(1)_sex_" "_$c(1)_dateOfBirth 
                 ;if comment'="" set dataEpisode=dataEpisode_" "_$c(1)_comment
                 set nppEpis=nppEpis+1,nppTS=0 set @refTmp@("d",nppEpis)=$lb(epis,node,cito,fioPatient,sex,dateOfBirth,comment)  
				 set testset=""
				 for {
					 set testset=$order(@refTmp@(node,key,epis,testset)) if testset="" quit
					 set tscnt=""
					 for {
						 set tscnt=$order(@refTmp@(node,key,epis,testset,tscnt)) if tscnt="" quit 
						 ;if flagPrintAuthor'="Y" if $$status^LVBVIS1(epis_"||"_testset_"||"_tscnt)="A" kill @refTmp@("d",nppEpis) set nppEpis=nppEpis-1,nppTS=0 quit 
						 ;set nppTS=nppTS+1
						 set nppTS=testset_$c(1)_tscnt
						 set @refTmp@("d",nppEpis,nppTS)=$lb(testset,tscnt)
						 set test=""
						 for {
						    set test=$order(@refTmp@("test",testset,test)) if test="" quit
						    ;set resulttest=##class(Report.Function.TestSet).getResultTest(epis,testset,tscnt,test)
						    set res=$piece($get(^TEPI(epis,1,testset,tscnt,"DATA",test)),"\",1)
						   set resulttest=$$RESULT^UDFSPARM001(test,"",res,,,,1)
						    set @refTmp@("d",nppEpis,nppTS,test)=resulttest 	 
						 }
					 }
				 }	 
			  }     
		    }    
	    }
	    if $data(@refTmp@("d")) set @refTmp@("d")=$lb(flagCito,flagSort,flagCalc,flagPrintAuthor,flagClinic,widthColTest,widthColFio,widthCol,orientation,flagPrintOnlyLastPages)
	    set $li(@refTmp,4)=nppEpis
	    set $li(@refTmp,5)=countTS
	    
	    set nppEpis="",page=1,npp=0
	    set rowsOnPage=26 if orientation="port" set rowsOnPage=40
	    for {
		    set nppEpis=$order(@refTmp@("d",nppEpis)) if nppEpis="" quit
		    set npp=npp+1
			if npp>rowsOnPage set page=page+1,npp=1
			set @refTmp@("dpage",page,nppEpis)=""
		    set nppTS=""
			for {
				 set nppTS=$order(@refTmp@("d",nppEpis,nppTS)) if nppTS="" quit
				 set rec=^(nppTS)
				 if $order(@refTmp@("d",nppEpis,nppTS,""))'="" set @refTmp@("h",nppTS)=rec 
				 set test=""
				 for {
					 set test=$order(@refTmp@("d",nppEpis,nppTS,test)) if test="" quit 
					 set @refTmp@("h",nppTS,test)=""
				 }
			}
	    }
	    set nppTS="",npp=0,pageH=1
	    for {
		    set nppTS=$order(@refTmp@("h",nppTS)) if nppTS="" quit
		    set test=""
		    for {
			    set test=$order(@refTmp@("h",nppTS,test)) if test="" quit
			    s npp=npp+1
			    if npp>colOnPage set pageH=pageH+1,npp=1
			    set @refTmp@("hpage",pageH,nppTS,test)=""  
		    }   
	    }
	    set pageH="",countPageH=0
	    for {
		    set pageH=$order(@refTmp@("hpage",pageH)) if pageH="" quit
		    set nppTS="",countPageH=countPageH+1
		    for {
			    set nppTS=$order(@refTmp@("hpage",pageH,nppTS)) if nppTS="" quit
			    set test="",countTest=0
			    for {
				    set test=$order(@refTmp@("hpage",pageH,nppTS,test)) if test="" quit
				    set countTest=countTest+1
			    } 
			    set @refTmp@("hpage",pageH,nppTS)=countTest  
		    }
	    }
	    set @refTmp@("hpage")=countPageH
	    //m ^test("ws","data",typeWS,numWS)=@refTmp
	}
	Catch exception
	{
	    Set result=exception.AsStatus()
	    do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()) 
	}    
    quit result
]]></Implementation>
</Method>

<Method name="%OnBeforeReport">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..TypeWorkSheet = $Get(%request.Data("TypeWorkSheet"))
	Set ..NumWorkSheet = $Get(%request.Data("NumWorkSheet"))
	Set ..FlagPrintOnlyLastPages = $Get(%request.Data("FlagPrintOnlyLastPages"))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTypeWorkSheet:%String,pNumWorkSheet:%String,pFileName:%String,flagPrintOnlyLastPages:%String</FormalSpec>
<PublicList>%request</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
	Set %request=##class(%CSP.Request).%New()
	Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("TypeWorkSheet")=pTypeWorkSheet
	Set %request.Data("NumWorkSheet")=pNumWorkSheet
	Set %request.Data("FlagPrintOnlyLastPages")=$select($get(flagPrintOnlyLastPages)="":"N",1:flagPrintOnlyLastPages)
	Set report = ##class(ReportZEN.WSrpt).%New()
	set portRenderServer=##class(TCLEx.Report.Function).GetPortRenderServer()
	Do report.GenerateReport(pFileName,2,"",portRenderServer)
	//Do report.GenerateReport(pFileName,2)
  } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="printPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTypeWorkSheet:%String,pNumWorkSheet:%String,USER:%String,flagPrintOnlyLastPages:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
     if $get(flagPrintOnlyLastPages)="" set flagPrintOnlyLastPages="N"
     set reportID=$G(^TMP("REPORTSPB",$j)) if reportID="" set reportID="WKSP"
     if reportID="" $$$ThrowOnError($$$ERROR($$$GeneralError,"Идентификатор отчета не определен"))
  
	 $$$ThrowOnError(##class(Report.rpt).getPathFileReportGroup(.pathFileReport,$get(USER)))
     
     set fileReport=pathFileReport_"/"_$zn_(+$h)_USER_".pdf"
     s ^test("ws","fileReport")=fileReport
     $$$ThrowOnError(##class(ReportZEN.WSrpt).GetPDF(pTypeWorkSheet,pNumWorkSheet,fileReport,flagPrintOnlyLastPages))
     /*
     $$$ThrowOnError(##class(Report.rpt).getNamePrinterForReport(reportID,$get(USER),.printerName)) 
     //s ^test("ws","printerName")=printerName_"*"_reportID
     if ##class(%File).Exists(fileReport) {
	     set flagSilence=1
         $$$ThrowOnError(##class(TCLEx.Report.FunctionsJava).startPdfBoxFacade(fileReport,printerName,flagSilence))
         //чтобы переключалось на кнопку Повторная печать 
         //set date=+$h,time=$piece($h,",",2),rowid=pTypeWorkSheet_"||"_pNumWorkSheet
         //if '$$select^LVBWKSR(rowid) set PLIST(7)=date,PLIST(5)=time if $$update^LVBWKSR(rowid)
     }*/
     set printercode=""
     $$$ThrowOnError(##class(TCLEx.Function.Printer).getDestinationPrinter(reportID,USER,,,.printercode))
     if printercode="" {
	     set ret=$$$ERROR($$$GeneralError,"Не удалось найти принтер для печати рабочего листа ")
	     quit
     }
     
     if (##class(%File).Exists(fileReport))&&(printercode'="") {
	     set ret=##class(TCLEx.Report.DRP).printPDF(fileReport,printercode,1)
	     quit
     }

     
   } catch(exception)
  {
	  set ret=exception.AsStatus()
	  do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()) 
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="GetSpisTests">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTypeWS:%String,pTestSet:%String,&pSpisTest:%String]]></FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK,pSpisTest=""
	try {
		set rects=$get(^TTAB("WS",pTypeWS,"10",pTestSet))
        if $piece(rects,"\",2)="Y" {
				   set pSpisTest=$piece(rects,"\",4)   
		} else {
				   set sqlcode=$$getall2^LVBCTTC(pTestSet)
				   if sqlcode=0 {
					  set ii="" 
					  for {
						  set ii=$order(PLIST(ii)) if ii="" quit
						  set pSpisTest=pSpisTest_$select(pSpisTest'="":",",1:"")_$piece(PLIST(ii),$c(2),1) 
					  }
				   }
		}	
    
 } catch(e) {
	set ok=e.AsStatus()
  }
  quit ok
]]></Implementation>
</Method>

<Method name="CreateXML">
<ClassMethod>1</ClassMethod>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method outputs the contents of the PDF report
/// RenderServer is set to the port of the hot JVM server
/// There is also a queuing hot JVM server which queues files for PDF rendering later
/// This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  
Method %DisplayPDF1(DisplayLog As %Boolean = 0, RenderServer As %String = "", async As %Boolean = 0, ByRef xmlfile As %String, ByRef xslfile As %String, ByRef pdffile As %String, ByRef lockfile As %String, fromGenerateReport As %Boolean, outputfilename As %String) As %Status [ Internal ]
{
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		//Set ..xmlfile = xmlfile
		Set tSC = ..%MakeToXSLFOFile(.xslfile,xmlfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		; delete logfile so user does not see "ghost" of old logfile when using $REPORTNAME
		i $g(logfile)'="" Do ##class(%File).Delete(logfile)
		if (fromGenerateReport=0 || (DisplayLog=1)) {
			if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
			if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		} else {
			Set pdffile = outputfilename
		}
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		//s ^test("pdf")=xmlfile_"||"_xslfile_"||"_pdffile_"||"_logfile
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile), DisplayLog)

#if 0 ; 11-04-11
		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
#else		
		If $$$ISOK(tSC),'async,('fromGenerateReport||(DisplayLog=1)) {
			Set stream=##class(%FileBinaryStream).%New()
			If DisplayLog {
				Set stream.Filename=logfile
			}
			Else {
				Set stream.Filename=pdffile
			}
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
#endif		
		
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile,.xmlfiles,.pdfiles,0,fromGenerateReport)
	} While (0)

	Quit tSC
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
