<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="ReportZEN.ListLoadIM">
<Description>
ReportZEN.ListLoadIM</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62431,61626.420649</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this report belongs to.</Description>
<Default>ReportZEN.ReportApplication</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
This is the default display mode for this report.</Description>
<Default>xml</Default>
</Parameter>

<Parameter name="REPORTXMLNAMESPACE">
<Description>
This is the optional XML namespace used for the report.</Description>
</Parameter>

<Property name="listload">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="glMatrix">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"$name(^test(""matrix""))"</InitialExpression>
</Property>

<Property name="listloadDate">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="ReportDefinition">
<Description>
This XML defines the logical contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="ListLoadIM" call="CreateXML">
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
This XML defines the display for this report.
This is used to generate the XSLT stylesheets for both HTML and XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="ListLoadIM" style='none'>
 <!--<focall method="getReport"/>-->
<document method="Document">
</document>
<body >
<focall method="getBody"/>
</body>
 
</report>
]]></Data>
</XData>

<Method name="Document">
<Description>
Содержание отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	
 	Do stream.WriteLine("<fo:simple-page-master master-name='port' page-height='297mm' page-width='210mm'  margin-top='30mm' margin-bottom='15mm' margin-left='15mm' margin-right='15mm' reference-orientation='0'>")
	Do stream.WriteLine("<fo:region-body margin-top='0mm' margin-bottom='0mm'/>")
	Do stream.WriteLine("</fo:simple-page-master>")
  
	Do stream.WriteLine("<fo:simple-page-master master-name='land' page-width='297mm' page-height='210mm'  margin-top='30mm' margin-bottom='15mm' margin-left='15mm' margin-right='15mm' reference-orientation='0'>")
	Do stream.WriteLine("<fo:region-body margin-top='0mm' margin-bottom='0mm'/>")
	Do stream.WriteLine("</fo:simple-page-master>")
 
    Do stream.WriteLine("<fo:page-sequence-master master-name='main'>")
	Do stream.WriteLine("<fo:single-page-master-reference master-reference='land'>")
	Do stream.WriteLine("</fo:single-page-master-reference>")
	Do stream.WriteLine("</fo:page-sequence-master>")  
    
    quit stream
]]></Implementation>
</Method>

<Method name="getBody">
<Description>
Содержание отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	set pMaxtrixGlb=..glMatrix 
    Set stream=##class(%GlobalCharacterStream).%New()
    //подсчет кол-ва страниц
    Set testcode="",countPage=0
	For  {
		Set testcode=$Order(@pMaxtrixGlb@(testcode)) If testcode="" Quit
		Set testcodeobj=##class(User.CTTestCode).%OpenId(testcode)
		If '$IsObject(testcodeobj) Continue
		set numMatrix=""
		for {
			set numMatrix=$order(@pMaxtrixGlb@(testcode,numMatrix)) if numMatrix="" quit
			set countPage=countPage+1
		}
	}
    // Проход по тестам
	Set testcode="",count=0
	For  {
		Set testcode=$Order(@pMaxtrixGlb@(testcode)) If testcode="" Quit
		Set testcodeobj=##class(User.CTTestCode).%OpenId(testcode)
		If '$IsObject(testcodeobj) Continue
		set numMatrix="" set countMatrixAll=$order(@pMaxtrixGlb@(testcode,""),-1)
		for {
			set numMatrix=$order(@pMaxtrixGlb@(testcode,numMatrix)) if numMatrix="" quit
			set count=count+1
		    Set header="Список загрузки № "_(..listload)_" от "_(..listloadDate)_" по исследованию "_testcode_" "_testcodeobj.CTTCSynonym_" (плашка "_numMatrix_" из "_countMatrixAll_")"
		    Set headerstream=..getStreamHeader(header)
	        Do stream.CopyFrom(headerstream)
	        set flagBreakPage=$select(count<countPage:1,1:0)
	        Set tablestream=..getStreamTable(testcode,numMatrix,flagBreakPage)
	        Do stream.CopyFrom(tablestream) 

		}
	}	
	Quit stream
]]></Implementation>
</Method>

<Method name="getStreamHeader">
<FormalSpec>strHeader:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("<fo:table table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='100%'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block text-align='center' font-family='Arial'> "_$ZConvert($get(strHeader),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	Quit stream
]]></Implementation>
</Method>

<Method name="getStreamTable">
<FormalSpec>testcode:%String,numMatrix:%String,flagBreakPage:%Integer</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
  set ref=..glMatrix   
  Kill ^||PCLMatrix
  Do TurnMatrix^MIF152RU02($name(@ref),$Name(^||PCLMatrix),testcode,numMatrix)				// транспонирование матрицы для вывода данных по строкам, а не по столбцам, как для файла прибора

  set stream=##class(%GlobalCharacterStream).%New()
  set heightString="8mm"
  set fontsize="8pt"
  do stream.WriteLine("    <fo:table table-layout='fixed' width='100%' border-collapse='separate' >")
  //столбцы
  Do stream.WriteLine("	<fo:table-column column-width='5mm'/>")
  for col=1:1:12 {
	    Do stream.WriteLine("	<fo:table-column column-width='22mm'/>")
  }
  Do stream.WriteLine("<fo:table-header text-align='center' vertical-align='middle' >")	    
  //шапка таблицы
  Do stream.WriteLine("<fo:table-row line-height='"_heightString_"' >")
  set begStr="<fo:table-cell border-width='0.5pt' border-style='solid' ><fo:block font-size='"_fontsize_"'>"
  Do stream.WriteLine(begStr_" "_"</fo:block></fo:table-cell>")
  for col=1:1:12 {
    	Do stream.WriteLine(begStr_col_"</fo:block></fo:table-cell>")
  }
  Do stream.WriteLine("</fo:table-row>")
  Do stream.WriteLine("      </fo:table-header>") 

  // table
  Do stream.WriteLine("      <fo:table-body text-align='center'>") 
  set row=""
  for {
	    set row=$order(^||PCLMatrix(row)) if row="" quit
	    Do stream.WriteLine("<fo:table-row line-height='"_heightString_"' >")
	    Do stream.WriteLine("<fo:table-cell border-width='0.5pt' border-style='solid' ><fo:block font-size='"_fontsize_"'>"_$zcvt(row,"o","XML")_"</fo:block></fo:table-cell>")
	    set col=""
	    for {
		    set col=$order(^||PCLMatrix(row,col)) if col="" quit
		    set value=$get(^||PCLMatrix(row,col))
		    Do stream.WriteLine("<fo:table-cell border-width='0.5pt' border-style='solid' ><fo:block font-size='"_fontsize_"'>"_$zcvt(value,"o","XML")_"</fo:block></fo:table-cell>")
	    }
	    Do stream.WriteLine("</fo:table-row>")
  }
  Do stream.WriteLine("      </fo:table-body>") 
  Do stream.WriteLine("    </fo:table>")
	    
  If flagBreakPage=1 {
		    Do stream.WriteLine("<fo:block break-after='page'/>")
   }
	Quit stream
]]></Implementation>
</Method>

<Method name="GetPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>listload:%String,glMatrix:%String,loadlisthdate:%String,fileReport:%String</FormalSpec>
<PublicList>%request</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
	;Set %request=##class(%CSP.Request).%New()
	;Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	;Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	;Set %request.Data("listload")=listload
	;Set %request.Data("glMatrix")=glMatrix
	Set report = ##class(ReportZEN.ListLoadIM).%New()
	set report.listload=listload
	set report.glMatrix=glMatrix
	set report.listloadDate=loadlisthdate
	Do report.GenerateReport(fileReport,2)
  } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="printPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>listload:%String,glMatrix:%String,fileReport:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
     $$$ThrowOnError(##class(ReportZEN.ListLoadIM).GetPDF(listload, glMatrix, fileReport))
     $$$ThrowOnError(##class(Report.rpt).getNamePrinterForReport(reportID,.printerName)) 
     if ##class(%File).Exists(fileReport) {
        $$$ThrowOnError(##class(Report.rpt).startPdfBoxFacade(fileReport,printerName))
     }
   } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="CreateXML">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="%DisplayPDF1">
<Description>
This method outputs the contents of the PDF report
RenderServer is set to the port of the hot JVM server
There is also a queuing hot JVM server which queues files for PDF rendering later
This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  </Description>
<FormalSpec><![CDATA[DisplayLog:%Boolean=0,RenderServer:%String="",async:%Boolean=0,&xmlfile:%String,&xslfile:%String,&pdffile:%String,&lockfile:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		Set tSC = ..%MakeToXSLFOFile(.xslfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
		if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile))

		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			if (..#HANG'=0) hang ..#HANG
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile)
	} While (0)

	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
