<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.rptEpisode">
<Super>%Persistent</Super>
<TimeCreated>62294,59757.973059</TimeCreated>

<Method name="getStructure">
<ClassMethod>1</ClassMethod>
<FormalSpec>setTest:%String,ref:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	set npp="" 
    for {
	   set npp=$order(^TTAB("TS",setTest,0,npp)) if npp="" quit
	   set rec=^(npp)
	   set reportable=$piece(rec,"\",13) if reportable'="Y" quit
	   set nameText=$piece(rec,"\",1)
	   set nameUnits="units 2222222222222"
	   set nameRange="range 11111111111111111111" 
	   set test=$piece(rec,"\",8)
	   set lineNumber=$piece(rec,"\",4)
	   set offsetResult=$piece(rec,"\",5)
	   set offsetText=$piece(rec,"\",3) if nameText="" set offsetText=0
	   set offsetUnits=$piece(rec,"\",10)
	   set offsetRange=$piece(rec,"\",12)
					   
	   for type="Text","Result","Units","Range" {
		   set offset=@("offset"_type) if offset="" quit
		   set value=$get(@("name"_type))
	       set conterOffsetInString=$order(@ref@("structSetTest",setTest,"1",lineNumber,offset,""),-1)+1
	       set @ref@("structSetTest",setTest,"1",lineNumber,offset,conterOffsetInString)=$listbuild(test,type,value)
	   }
    }
    set lineNumber=""
	for {
	    set lineNumber=$order(@ref@("structSetTest",setTest,"1",lineNumber)) if lineNumber="" quit
	    set offset=""
	    for {
	       set offset=$order(@ref@("structSetTest",setTest,"1",lineNumber,offset)) if offset="" quit
		   set counterOffsetInString=""
		   for {
			   set counterOffsetInString=$order(@ref@("structSetTest",setTest,"1",lineNumber,offset,counterOffsetInString)) if counterOffsetInString="" quit
			   set @ref@("structSetTest",setTest,"2",offset,counterOffsetInString)=""
		   }
		}
	}
	set offset="",numberField=0 
	for {
	       set offset=$order(@ref@("structSetTest",setTest,"2",offset)) if offset="" quit
		   set counterOffsetInString=""
		   for {
			   set counterOffsetInString=$order(@ref@("structSetTest",setTest,"2",offset,counterOffsetInString)) if counterOffsetInString="" quit
			   set numberField=numberField+1
			   set @ref@("structSetTest",setTest,"2",offset,counterOffsetInString)=numberField
			   set @ref@("structSetTest",setTest,"field",numberField)=offset
		   }
		}
	set @ref@("structSetTest",setTest,"field")=numberField ;quantity of fields
	set lineNumber=""
	for {
	   set lineNumber=$order(@ref@("structSetTest",setTest,"1",lineNumber)) if lineNumber="" quit
	   set offset=""
	   for {
	      set offset=$order(@ref@("structSetTest",setTest,"1",lineNumber,offset)) if offset="" quit
		  set counterOffsetInString=""
		  for {
		     set counterOffsetInString=$order(@ref@("structSetTest",setTest,"1",lineNumber,offset,counterOffsetInString)) if counterOffsetInString="" quit
		     set rec=^(counterOffsetInString)
		     set numberField=@ref@("structSetTest",setTest,"2",offset,counterOffsetInString)
		     set $li(rec,4)=offset
		     set @ref@("structSetTest",setTest,"struct",lineNumber,numberField)=rec
		  }
	   }
	}
]]></Implementation>
</Method>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberEpisode:%String,ref:%String</FormalSpec>
<Implementation><![CDATA[
   	//set ref=$na(^test(1))
   	kill @ref
   	set r=$char(0),r1=$char(1)
   	set setTest="" 
   	for {
	   set setTest=$order(^TEPI(numberEpisode,1,setTest)) if setTest="" quit
	   if '$data(@ref@("structSetTest",setTest)) do ..getStructure(setTest,ref)
	   set department=$e(setTest,1)
	   set counter=""
	   for {
		   set counter=$order(^TEPI(numberEpisode,1,setTest,counter)) if counter="" quit
		   set test=""
		   for {
			   set test=$order(^TEPI(numberEpisode,1,setTest,counter,"DATA",test)) if test="" quit
			   set result=$piece(^(test),"\",1)
			   set @ref@("data",department,setTest_"\"_counter,test)=result
			   
		   }
	   }	   	   
   	}
]]></Implementation>
</Method>

<Query name="queryRpt">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeDepartment:%String, codeSetTest:%String"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=""
  	set $li(qHandle,3)=""
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1) ;if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set item1=$listget(qHandle,2)
	set item2=$listget(qHandle,3)
   	if item1="" set item1=$order(@refTmp@("data",item1)) if item1="" set Row="",AtEnd=1 quit $$$OK
	set item2=$order(@refTmp@("data",item1,item2)) 
	if item2="" {
		set item1=$order(@refTmp@("data",item1)) if item1="" set Row="",AtEnd=1 quit $$$OK
		set item2=$order(@refTmp@("data",item1,item2))
	}
	
	set $li(Row,1)=item1
	set $li(Row,2)=item2
	set $li(qHandle,2)=item1
	set $li(qHandle,3)=item2
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.rptEpisode:queryRpt")
  do rset.Execute($na(^test(2)))
  while rset.Next() { 
     w !,rset.Data("codeDepartment")," ",rset.Data("codeSetTest")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryStructSetTest">
<Description>
Query for generate setTest report</Description>
<Type>%Query</Type>
<FormalSpec>setTest:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="numberField:%Integer, offsetField:%Integer"/>
</Query>

<Method name="queryStructSetTestExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,setTest:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	set $li(qHandle,3)=setTest
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructSetTestClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryStructSetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructSetTestFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryStructSetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set setTest=$listget(qHandle,3)
	;if refTmp=""!(refTmp=$c(0))!(setTest="") set Row="",AtEnd=1 quit $$$OK
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("structSetTest",setTest,"field",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set offset=$get(@refTmp@("structSetTest",setTest,"field",item))
	set $li(Row,1)=item
	set $li(Row,2)=offset
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryStructSetTest">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set refTmp=$na(^test(2))
  set setTest=$o(@refTmp@("structSetTest","")) if setTest="" quit
  SET rset=##class(%ResultSet).%New("Report.rptEpisode:queryStructSetTest")
  do rset.Execute(setTest,refTmp)
  while rset.Next() { 
     w !,rset.Data("numberField")," ",rset.Data("offsetField")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="querySetTest">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>department:%String,setTestCounter:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="Field1:%String,Field2:%String,Field3:%String,Field4:%String,Field5:%String,Field6:%String,Field7:%String,Field8:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String"/>
</Query>

<Method name="querySetTestExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,department:%String,setTestCounter:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=department
  	set $li(qHandle,3)=setTestCounter
  	set $li(qHandle,4)=refTmp
  	set columnsCount=$get(@refTmp@("structSetTest",$piece(setTestCounter,"\",1),"field"))
  	set $li(qHandle,5)=columnsCount
  	
  	/*set metainfo="" ;^oddCOM("Report.rptEpisode","q","querySetTest",21)
 	
  	set $li(^oddCOM("Report.testQuery","q","queryRpt",21),1)=metainfo
  	
  	set numField="",setTest=$p(setTestCounter,"\",1),npp=0
  	for {
	  	set numField=$order(@refTmp@("structSetTest",setTest,"field",numField)) if numField=""  quit
	  	set npp=npp+1
	  	set nameField="Field"_numField
	  	set colmeta=$listbuild(nameField,10,nameField)
	  	set $li(metainfo,npp)=colmeta
  	}  	
  	set $li(^oddCOM("Report.rptEpisode","q","querySetTest",21),1)=metainfo*/
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="querySetTestClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>querySetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="querySetTestFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>querySetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;@ref@("structSetTest",setTest,"struct",lineNumber,numberField)
	set refTmp=$listget(qHandle,4)
	set setTestCounter=$listget(qHandle,3) 
	set setTest=$piece(setTestCounter,"\",1)
	set department=$listget(qHandle,2) 
	;if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set lineNumber=$listget(qHandle,1)
	set lineNumber=$order(@refTmp@("structSetTest",setTest,"struct",lineNumber)) 
	if lineNumber="" set Row="",AtEnd=1 quit $$$OK
	set numField="" 
	;b:setTest="E001"  
	for {
		set numField = $order(@refTmp@("structSetTest",setTest,"struct",lineNumber,numField)) if numField="" quit
		set rec=$get(@refTmp@("structSetTest",setTest,"struct",lineNumber,numField))
		set test=$li(rec,1),type=$li(rec,2),value=$li(rec,3)
		;set @ref@("data",department,setTest_$char(1)_counter,test)
		if type="Result" set value=$get(@refTmp@("data",department,setTestCounter,test))
		if value="" set value="000"
	    set $li(Row,numField)=value
	}
	set $li(qHandle,1)=lineNumber
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testquerySetTest">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

  set refTmp=$na(^test(2))
  set department=$o(@refTmp@("data","")) if department="" quit
  set deparment="E"
  set setTestCounter=$o(@refTmp@("data",department,"")) if setTestCounter="" quit
  set setTestCounter="E001\1"
  w !,"setTestCounter=",setTestCounter,!
  SET rset=##class(%ResultSet).%New("Report.rptEpisode:querySetTest")
  do rset.Execute(department, setTestCounter, refTmp)
  set qColumns=rset.GetColumnCount() w !,"ColumnCount=",qColumns
  while rset.Next() {
	  w !,"---" 
     for i=1:1:qColumns {
	     set columnName=rset.GetColumnName(i)
         w !,columnName,"=",rset.Data(columnName)
     }
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.rptEpisodeD</DataLocation>
<DefaultData>rptEpisodeDefaultData</DefaultData>
<IdLocation>^Report.rptEpisodeD</IdLocation>
<IndexLocation>^Report.rptEpisodeI</IndexLocation>
<StreamLocation>^Report.rptEpisodeS</StreamLocation>
<Data name="rptEpisodeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
