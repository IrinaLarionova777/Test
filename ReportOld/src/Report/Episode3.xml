<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.Episode3">
<Super>%Persistent</Super>
<TimeCreated>62302,58357.800419</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("1",department,page,line,num)=$lb(offset,value,style)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("2",department,offset,page,line,num)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("3",department,page,line,offset,num)="" - for define widthField

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("field",department,numField)=$lb(offset,widthField)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("data",department,line,numField)=$lb(offset,value,style)

]]></Content>
</UDLText>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[codeEpisode:%String,refTmp:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set result=$$$OK
  try {
   	set ref=$na(^||episode)
   	kill @ref,@refTmp
   	//Do ##class(TCLEx.Function.Episode).PCLResult(100904001102)
   	//Do ##class(TCLEx.Function.Episode).PCLResult(269100010101)
   	Do ##class(TCLEx.Function.Episode).PCLResult(codeEpisode,.pTestSets)
   	set r=$char(0),r1=$char(1)
   	set offsetPrev=0,offset=0,value="",style="~NORMAL",styleWrite="",num=0
   	set department="" 
   	for {
	   set department=$order(@ref@(department)) if department="" quit
	   set page=""
	   for {
		   set page=$order(@ref@(department,page)) if page="" quit
		   set line=""
		   for {
			   set linep=line,line=$order(@ref@(department,page,line)) if line="" quit
			   set npp=""
			   for {
				   set npp=$order(@ref@(department,page,line,npp)) if npp="" quit
				   set rec=^(npp),firstSymbol=$extract(rec),len=$l(rec)
				   if firstSymbol=$c(13) continue
				   if firstSymbol="!" {
					   if linep'="" {
						   if offset=0!(value="") 
					       {
						       if '$data(@refTmp@("1",department,page,linep)) set @refTmp@("1",department,page,linep)="" 
					       }
					       else     
					       {
					           set num=num+1
					           set @refTmp@("1",department,page,linep,num)=$lb(offset,value,$s(styleWrite'="":styleWrite,1:style))
					           set @refTmp@("3",department,page,linep,offset,num)=""
					           set @refTmp@("2",department,offset,page,linep,num)=""
					           ;set styleWrite=style
					       }
					   }
					   set offsetPrev=0,offset=0,value="",num=0
					   continue
				   }
				   if firstSymbol="?" {
					   set offsetPrev=offset
					   set offset=+$extract(rec,2,4)
					   if (offset'=offsetPrev)&(offsetPrev'=0) {
					      set num=num+1
					      set @refTmp@("1",department,page,line,num)=$lb(offsetPrev,value,$s(styleWrite'="":styleWrite,1:style))   
					      set @refTmp@("3",department,page,line,offsetPrev,num)=""
					      set @refTmp@("2",department,offsetPrev,page,line,num)=""
					      set value=""
					   }   
					   set value=$extract(rec,5,len)
					   set styleWrite=style
					   continue
				   }	   
				   if firstSymbol="~" {
					   set style=$extract(rec,2,len)
					   continue
				   }
				   set value=rec
				   
			   }
			 		   
		   }
	   }	   	   
   	}
    	
   	//width fields
   	set department="" 
   	for {
	   set department=$order(@refTmp@("3",department)) if department="" quit
	   set page=""
	   for {
	      set page=$order(@refTmp@("3",department,page)) if page="" quit
	      set line=""
	          for {
	              set line=$order(@refTmp@("3",department,page,line)) if line="" quit
	              set offset=""
	              for {
	                  set offset=$order(@refTmp@("3",department,page,line,offset)) if offset="" quit
	                  set offsetNext=$order(@refTmp@("3",department,page,line,offset))
	                  set width=0 if offsetNext'="" set width=offsetNext-offset
	                  set num="" 
	                  for {
		                  set num=$order(@refTmp@("3",department,page,line,offset,num)) if num="" quit
		                  set $li(@refTmp@("1",department,page,line,num),4)=width
	                  }
		          }
	          }
   	    }
   	}
   	set department=""
	for {
	   	set department=$o(@refTmp@("2",department)) if department="" quit
	   	set countLines=$order(@refTmp@("1",department,""),-1)
   	    set offset="",numField=0
   	    for {
	        set offset=$order(@refTmp@("2",department,offset)) if offset="" quit
	        set numField=numField+1
	        set @refTmp@("2",department,offset)=numField
	        set @refTmp@("field",department,numField)=$lb(offset)
		   	set page=""
		   	for {
		   	   	set page=$order(@refTmp@("2",department,offset,page)) if page="" quit
		   	    set countLines=$order(@refTmp@("1",department,page,""),-1)
		        set lineNumNew=0
		        for line=1:1:countLines {
			        set lineNumNew=lineNumNew+1 
			        set @refTmp@("data",department,lineNumNew)=page
			        set num="" 
			     	for {
				    	set num=$order(@refTmp@("2",department,offset,page,line,num)) if num="" quit
				    	set rec=$get(@refTmp@("1",department,page,line,num))
				    	set width=$listget(rec,4) if $lg(@refTmp@("field",department,numField),2)="" set $li(@refTmp@("field",department,numField),2)=width
				    	set @refTmp@("data",department,lineNumNew,numField)=rec
			    	}
		    	}
		   	}
	   	}
     	set offsetLast=$o(@refTmp@("2",department,""),-1)
     	set widthLetter=6 if offsetLast>80 set widthLetter=4
   	    set @refTmp@("field",department)=numField_$c(0)_offsetLast_$c(0)_widthLetter  //init page for this department
    }
   	set @refTmp@("data")=codeEpisode
   	
   	//догенерим снизу пустые строки до полной страницы (47 for department H D, 45 - for other)- для полосатости на всей странице и для листания как в PCL
   	set department=""
   	for {
	   	set department = $order(@refTmp@("data",department)) if department="" quit
	   	set maxCountLine=45 if department="H"!(department="D") set maxCountLine=47
	   	set line="",counterLilesOnPage=0,page=0,pagePrev=0
	   	for {
		   	set line=$order(@refTmp@("data",department,line)) if line="" quit
		   	set pagePrev=page,page=+$get(@refTmp@("data",department,line))
		   	if (pagePrev'=0)&(page'=pagePrev) {
			   	if counterLilesOnPage<maxCountLine {
				   for i=counterLilesOnPage+1:1:maxCountLine set @refTmp@("data",department,line)=page
			   	}
			   	set counterLilesOnPage=0 
		   	}
		   	set counterLilesOnPage=counterLilesOnPage+1
	   	}
	   	if counterLilesOnPage<maxCountLine {
	      	for line=(counterLilesOnPage+1):1: maxCountLine {
		      	set @refTmp@("data",department,line)=page
	    	}
	   	}
	}
	
	//counte pages
   	set department="",counterPages=0 
   	for {
	   set department=$order(@refTmp@("1",department)) if department="" quit
	   set page=""
	   for {
	      set page=$order(@refTmp@("1",department,page)) if page="" quit
	      set counterPages=counterPages+1
	   }
	   set $piece(@refTmp@("field",department),$c(0),4)=counterPages-1
   	}
   	//all pages
   set @refTmp@("field")=counterPages
   
   if $data(@refTmp@("data"))<10 k @refTmp
  }
  catch exception {
	  Set result=exception.AsStatus()
  }
  k ^test("epi",codeEpisode)
  s ^test("epi",codeEpisode)="$j="_$j
  m ^test("epi",codeEpisode,"PCL")=@ref
  m ^test("epi",codeEpisode,"data")=@refTmp
  kill @ref
  quit result
]]></Implementation>
</Method>

<Query name="queryRpt">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>department:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="Field1:%String,Field2:%String,Field3:%String,Field4:%String,Field5:%String,Field6:%String,Field7:%String,Field8:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field17:%String,Field18:%String,Field19:%String,Field20:%String,Field21:%String,Field22:%String,Field23:%String,Field24:%String,Field25:%String,Field26:%String,Field27:%String,Field28:%String,Field29:%String,Field30:%String,Field31:%String,Field32:%String,Field33:%String,Field34:%String,Field35:%String,Field36:%String,Field37:%String,Field38:%String,Field39:%String,Field40:%String,Field41:%String,Field42:%String,Field43:%String,Field44:%String,Field45:%String,Field46:%String,Field47:%String,Field48:%String,Field49:%String,Field50:%String"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,department:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=department
  	set $li(qHandle,3)=""
   	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRpt2Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRpt2Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1)
	set department=$listget(qHandle,2)
	set line=$listget(qHandle,3)
   	set line=$order(@refTmp@("data",department,line)) 
   	set Row=$lb("")
	if line="" set Row="",AtEnd=1 quit $$$OK
	set numField="" 
	for {
		set numField=$order(@refTmp@("data",department,line,numField)) if numField="" quit
		set rec=^(numField)
		set $li(Row,numField)=$li(rec,2)
	}
	//set ^test("epi2","line",$o(^test("epi2","line",""),-1)+1)=Row
	set $li(qHandle,3)=line
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.Episode3:queryRpt")
  do rset.Execute("B",$na(^test(3)))
  while rset.Next() { 
     w !,rset.Data("Field1")," ",rset.Data("Field2")," ",rset.Data("Field3")," ",rset.Data("Field4")
     w " ",rset.Data("Field5")," ",rset.Data("Field6")," ",rset.Data("Field7")," ",rset.Data("Field8")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryStruct">
<Description>
Query for generate setTest report</Description>
<Type>%Query</Type>
<FormalSpec>department:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="numberField:%Integer, offsetField:%Integer, widthField:%Integer"/>
</Query>

<Method name="queryStructExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,department:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	set $li(qHandle,3)=department
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryStructExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryStructExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set department=$listget(qHandle,3)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("field",department,item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set rec=$get(@refTmp@("field",department,item))
	set $li(Row,1)=item
	set $li(Row,2)=$listget(rec,1)
	set $li(Row,3)=$listget(rec,2)
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryStruct">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set refTmp=$na(^||episodeUse)
  SET rset=##class(%ResultSet).%New("Report.Episode3:queryStruct")
  do rset.Execute("B",refTmp)
  while rset.Next() { 
     w !,rset.Data("numberField")," ",rset.Data("offsetField")," ",rset.Data("widthField")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryDepartments">
<Description>
Query all departments from refTmp</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="department:%String,nameDepartment:%String,fioDoctor:%String,dateOut:%String,initPage:%Integer"/>
</Query>

<Method name="queryDepartmentsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	set $li(qHandle,3)=$get(@refTmp@("data")) 
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryDepartmentsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryDepartmentsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryDepartmentsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryDepartmentsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set codeEpisode=$listget(qHandle,3)
	set department=$listget(qHandle,1)
	set department=$order(@refTmp@("data",department)) 
	if department="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=department
	set $li(qHandle,1)=department
	do SetVals^PRTDR0RU02(codeEpisode,department,$na(@refTmp@("paramDep",department)))
	set nameDepartment=$get(@refTmp@("paramDep",department,"Vals","TS_DepartmentName"))
	set fioDoctor=$get(@refTmp@("paramDep",department,"Vals","TS_AuthorisedDoctor"))
	//if fioDoctor="" set fioDoctor=$get(@refTmp@("params","Vals","Doctor"))
	set dateOut=$get(@refTmp@("paramDep",department,"Vals","TS_DateOfAuthorisation"))
	set $li(Row,1)=department
	set $li(Row,2)=nameDepartment
	set $li(Row,3)=fioDoctor
	set $li(Row,4)=dateOut	
	set $li(Row,5)=+$piece($get(@refTmp@("field",department)),$c(0),4)
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getInfoFields">
<ClassMethod>1</ClassMethod>
<FormalSpec>department:%String,refTmp:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[  quit $get(@refTmp@("field",department))
]]></Implementation>
</Method>

<Method name="getcodeEpisode">
<ClassMethod>1</ClassMethod>
<FormalSpec>refTmp:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[  quit $get(@refTmp@("data"))
]]></Implementation>
</Method>

<Method name="getFIOpatient">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,department:%String</FormalSpec>
<Implementation><![CDATA[
	set ref=$na(^test("hat",codeEpisode, department))
	if '$data(@ref) do SetVals^PRTDR0RU02(codeEpisode,department,$na(@ref))
	quit $get(@ref@("Vals","FullName"))
]]></Implementation>
</Method>

<Method name="getFIOpatient2">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "fio"
]]></Implementation>
</Method>

<Projection name="javaProjection">
<Type>%Projection.Java</Type>
<Parameter name="ROOTDIR" value="C:\java\work\workspace\JasperPCL"/>
</Projection>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.Episode3D</DataLocation>
<DefaultData>Episode3DefaultData</DefaultData>
<IdLocation>^Report.Episode3D</IdLocation>
<IndexLocation>^Report.Episode3I</IndexLocation>
<StreamLocation>^Report.Episode3S</StreamLocation>
<Data name="Episode3DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
