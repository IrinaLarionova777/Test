<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.JasperReportGenerateTemplate">
<Super>%RegisteredObject</Super>
<TimeCreated>62290,75122.25478</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//SELECT CTTSF_LabelText As Name,CTTSF_Reportable As Result, CTTSF_CL_Units As Units, CTTSF_CL_Text As Bounds from SQLUser.CT_TestSetFields where CT_TestSetFields.CTTSF_ParRef='A010'

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//SELECT CTTSF_LabelText As Text, CTTSF_CL_Text as offsetText, CTTSF_CL_Prompt as offsetResult, CTTSF_CL_Units As offsetUnits, CTTSF_CL_NormalRanges As offsetBounds from SQLUser.CT_TestSetFields where CT_TestSetFields.CTTSF_ParRef='A010'

]]></Content>
</UDLText>

<Query name="queryDepartments">
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeDepartment:%String"/>
</Query>

<Method name="queryDepartmentsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryDepartmentsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryDepartmentsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryDepartmentsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryDepartmentsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$lg(qHandle,1) if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set item=$lg(qHandle,2)
	set item=$o(@refTmp@(item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	//set itemvals1=$g(@refTmp@(item))
	set codeDepartment=item
	//set invoiceSum=$ListGet(itemvals1,2)
	set $li(Row,1)=codeDepartment
	set $li(qHandle,2)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryDepartments">
<ClassMethod>1</ClassMethod>
<FormalSpec>refTmp:%String</FormalSpec>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.JasperReportGenerateTemplate:queryDepartments")
  do rset.Execute(refTmp)
  while rset.Next() { 
     w !,rset.Data("codeDepartment")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryRpt">
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeDepartment:%String, codeSetTest:%String"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=""
  	set $li(qHandle,3)=""
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//set refTmp=$na(^test(1))
	set refTmp=$listget(qHandle,1) if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set item1=$listget(qHandle,2)
	set item2=$listget(qHandle,3)
   	if item1="" set item1=$order(@refTmp@(item1)) if item1="" set Row="",AtEnd=1 quit $$$OK
	set item2=$order(@refTmp@(item1,item2)) 
	if item2="" {
		set item1=$order(@refTmp@(item1)) if item1="" set Row="",AtEnd=1 quit $$$OK
		set item2=$order(@refTmp@(item1,item2))
	}
	
	set $li(Row,1)=item1
	set $li(Row,2)=item2
	set $li(qHandle,2)=item1
	set $li(qHandle,3)=item2
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.JasperReportGenerateTemplate:queryRpt")
  do rset.Execute($na(^test(1)))
  while rset.Next() { 
     w !,rset.Data("codeDepartment")," ",rset.Data("codeSetTest")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Method name="countDepartments">
<ClassMethod>1</ClassMethod>
<FormalSpec>refTmp:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
  	set count=0
  	set item="" for { set item=$o(@refTmp@(item))  quit:item=""  set count=count+1 }  	
  	Quit count
]]></Implementation>
</Method>

<Query name="query1">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT CTTSF_LabelText As Name,CTTSF_Reportable As offsetResult, CTTSF_CL_Units As Units, CTTSF_CL_Text As Bounds from SQLUser.CT_TestSetFields where CT_TestSetFields.CTTSF_ParRef='A010'</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="executeQuery1">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("User.JasperReportGenerateTemplate:query1")
  do rset.Execute()
  while rset.Next() { 
     w !,rset.Data("Name")," ",rset.Data("offsetResult")
    w " ",rset.Data("Units")," ",rset.Data("Bounds") 
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Method name="StartRpt">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set fileReport="c:\JasperTest\testQuery1.pdf"	
  	
  set gateway=##class(Report.JasperReportTune).getNameGateway() if gateway="" quit "0^В настройках не указано имя Java gateway"
  
  set msg="1^Файл отчета "_fileReport_" успешно сформирован"
  
  // открываем gateway	
  try {
	set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
	set jgw = ##class(%Net.Remote.Gateway).%New()
	set status=jgw.%Connect(jvm.Server,jvm.Port) 
	if +status=0 {
		set msg="0^Не удалось открыть JDBC gateway "_gateway_". Возможно, он не запущен"
		quit
	}
	//строка с параметрами
	set paramsHashMap = ##class(java.util.HashMap).%New(jgw)
	} catch e { 
      set msg="0^Не удалось открыть JDBC gateway "_gateway 
    }
    
  //формирование отчета
  if +msg=1 {
     set connectURL = ##class(Report.JasperReportTune).getConnectURL()
     set typeFileReport="pdf"  ;##class(Report.JasperReportTune).getTypeFileReport()
     try {
        do ##class(isc.jasper.JasperReportGenerateTemplate1).executeAndSave(jgw,connectURL, typeFileReport, paramsHashMap, fileReport) 
     } catch e { 
         //w $System.Status.GetErrorText(%objlasterror) 
         set msg="0^Не удалось сформировать файл с отчетом "
     }
  }
  set status=jgw.%Disconnect() 
    
  quit msg
]]></Implementation>
</Method>
</Class>
</Export>
