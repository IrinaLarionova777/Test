<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.EpisodeMB">
<Super>%Persistent</Super>
<TimeCreated>62322,56000.448092</TimeCreated>

<Query name="queryTestSets">
<Description>
Query all TestSets from Episode </Description>
<Type>%Query</Type>
<FormalSpec>codeEpisode:%String,codeDepartment:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeTestSet:%String,nameTestSet:%String"/>
</Query>

<Method name="queryTestSetsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,codeEpisode:%String,codeDepartment:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if $tr($get(refTmp),$c(0),"")="" set refTmp=$na(^CacheTempUserEpi($j))
	set flagKillGlob=0 if '$data(@refTmp) if ..getDataEpisode(codeEpisode,codeDepartment,refTmp) set flagKillGlob=1
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	set $li(qHandle,3)=flagKillGlob
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryTestSetsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryTestSetsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set testsetid=$listget(qHandle,1)
	set refTmp=$listget(qHandle,2)
	set testsetid=$order(@refTmp@(testsetid)) if testsetid="" set Row="",AtEnd=1 quit $$$OK
    Set testsetobj=##class(User.CTTestSet).%OpenId(testsetid)
	set $li(Row,1)=testsetid
	set $li(Row,2)=testsetobj.CTTSName
	set $li(qHandle,1)=testsetid
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryTestSetsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryTestSetsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $listget(qHandle,3)=1 set refTmp=$listget(qHandle,2) if refTmp'="" k @refTmp
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryTestSets">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,codeDepartment:%String,refTmp:%String</FormalSpec>
<Implementation><![CDATA[
  if codeEpisode="" set codeEpisode="269100010101"
  SET rset=##class(%ResultSet).%New("Report.EpisodeMB:queryTestSets")
  do rset.Execute(codeEpisode,codeDepartment,refTmp)
  while rset.Next() { 
     w !,rset.Data("codeTestSet")," ",rset.Data("nameTestSet")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryEpisodes">
<Description>
Query all select Episodes  </Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeEpisode:%String"/>
</Query>

<Method name="queryEpisodesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryEpisodesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryEpisodesExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set episodeid=$listget(qHandle,1)
	set refTmp=$listget(qHandle,2)
	set episodeid=$order(@refTmp@(episodeid)) 
	if episodeid="" set Row="",AtEnd=1 quit $$$OK
   	set $li(Row,1)=episodeid
   	set $li(qHandle,1)=episodeid
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryEpisodesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryEpisodesExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryEpisodes">
<ClassMethod>1</ClassMethod>
<FormalSpec>refTmp:%String</FormalSpec>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.EpisodeMB:queryEpisodes")
  do rset.Execute(refTmp)
  while rset.Next() { 
     w !,rset.Data("codeEpisode")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryParameters">
<Description>
Query all parameters for Episode  </Description>
<Type>%Query</Type>
<FormalSpec>codeEpisode:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="node:%String,value:%String"/>
</Query>

<Method name="queryParametersExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,codeEpisode:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	do ..moveParameters( $na(@refTmp@(codeEpisode)), .params )
    merge qHandle("params")=params 
   	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set node=$listget(qHandle,1)
	set node=$order(qHandle("params",node)) if node="" set Row="",AtEnd=1 quit $$$OK
   	set $li(Row,1)=node
   	set $li(Row,2)=qHandle("params",node)
   	set $li(qHandle,1)=node
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String</FormalSpec>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.EpisodeMB:queryParameters")
  do rset.Execute(codeEpisode, refTmp)
  while rset.Next() { 
     w !,rset.Data("node")," ",rset.Data("value")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Method name="getDataEpisode">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,codeDepartment:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	k @refTmp
  	set dateEntry=$piece(^TEPI(codeEpisode),"\",8)
	Set ts="",r="\"
	For  {
		set ts=$order(^TEPI(codeEpisode,1,ts)) if ts="" quit
		if $extract(ts,1)'=codeDepartment continue
		set tscnt=""
		for {
			set tscnt=$order(^TEPI(codeEpisode,1,ts,tscnt)) if tscnt="" quit
			;берем только один отдет (Микробиология - H)
			//не пользуемся этой функцией, так как супернаборов по микробиологии не будет и для ускорения процесса по простому можно проверить отдел
			//If '$$IsTestSet4Department^PRTDR0RU02(testsetobj,codeDepartment) Continue
						
		    //set specimen = ##class(Report.Function.TestSet).getSpeciman(testsetobj)
		    set specimen=$piece(^TEPI(codeEpisode,1,ts,tscnt),r,46)
		    set specimenName=""
		    if specimen'="" {
			    set specimenName=$piece($get(^TTAB("SPEC",specimen)),r,1)
		    }
		    if specimenName="" {
			    set specimenName=$$TestSpecimen^KSReportSQL(ts)
		     }
		     set @refTmp@(ts)=$lb(specimenName)
		}
	}
	if $data(@refTmp) set @refTmp=$lb($zdate(dateEntry,8))
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getDataEpisodeOld">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,codeDepartment:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	k @refTmp
  	set episobj=##class(User.EPVisitNumber).%OpenId(codeEpisode)
  	If '$IsObject(episobj) quit $$$OK
	set dateEntry=episobj.EPVISDateOfEntry
	Set key=""
	For  {
			Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			if key="" Quit
			If '$IsObject(testsetobj) Continue
			;берем только один отдет (Микробиология - H)
			If '$$IsTestSet4Department^PRTDR0RU02(testsetobj,codeDepartment) Continue
						
			;If '##class(TCLEx.Function.TestSet).IsPrintable(testsetobj) Continue ; Пропускаем неавторизованные или отмененные TestSet-ы
			set testsetspr=testsetobj.VISTSTestSetDR
			if '$IsObject(testsetspr) continue
			set specimen = ##class(Report.Function.TestSet).getSpeciman(testsetobj)
			set @refTmp@(testsetspr.%Id())=$lb(specimen)
	}
	if $data(@refTmp) set @refTmp=$lb($zdate(dateEntry,8))
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec>dateFrom:%String,dateTo:%String,timeFrom:%String,timeTo:%String,codeDepartment:%String,refTmp:%String,episode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set result=$$$OK
 try {
  	k @refTmp
  if episode="" {	
  	s date=dateFrom-1
  	for {
	  	s date=$o(^TDAY(4,date)) if date="" quit
	  	if date>dateTo quit
	  	set epis=""
	  	for {
		  	set epis=$order(^TDAY(4,date,0,epis)) if epis="" quit
		  	set timeEntry=$piece($get(^TEPI(epis)),"\",9)
		  	if timeEntry'="" {
		  	   if date=dateFrom if timeEntry<timeFrom 
		  	   if date=dateTo if timeEntry>timeTo quit
		  	}
		  	do ..getDataEpisode(epis,codeDepartment,$na(@refTmp@(epis,"ts")))
	        if $data(@refTmp@(epis)) {
		          do ..doParams2(epis,$na(@refTmp@(epis)),codeDepartment)
		    }
	  	}
	 }
  }
  else  {
	  if $IsObject(##class(User.EPVisitNumber).%OpenId(episode)) do ..getDataEpisode(episode,codeDepartment,$na(@refTmp@(episode,"ts")))
  }
	set epis=""
	for {
		set epis=$order(@refTmp@(epis)) if epis="" quit
		do ..doParams2(epis,$na(@refTmp@(epis)),codeDepartment)
	}
 } catch(exception) {
	   Set result=exception.AsStatus()	
	}
  	Quit result
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//формирование каждого отчета (по каждому эпизоду) в отдельных файлах

]]></Content>
</UDLText>

<Method name="startRptMB">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,codeDepartment:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
	set repFormat=..getFormatReport()
    try {
	    if '$data(@refTmp) set ret=$$$ERROR($$$GeneralError,"Нет данных по эпизоду "_codeEpisode_" (отдел "_codeDepartment_")") quit
        do ..moveParameters( refTmp, .params )
        set dateEntry=$listget(@refTmp@("ts"),1)
        set fileReport=..getFileReport(.err, codeEpisode, dateEntry, repFormat) if 'err $$$ThrowOnError(err) 
        set fileJasper=..getFileJasper()
        $$$ThrowOnError(##class(Report.rpt).startRptFacade(fileReport, .params, fileJasper, repFormat))
        //do ##class(Report.rpt).startRptFacade(fileReport, .params, fileJasper, repFormat)	
    } catch(exception)
    {
	   Set ret=exception.AsStatus()
    }
    k @refTmp
    quit ret
]]></Implementation>
</Method>

<Method name="startRptMBepisode">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,codeDepartment:%String="H",fileReport:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
	set repFormat=..getFormatReport()
    try {
	    set refTmp=$na(^CacheTempUserEpi($j)) kill @refTmp
	    do ..getDataEpisode(codeEpisode, codeDepartment, $na(@refTmp@("ts")))
	    if '$data(@refTmp@("ts")) set ret=$$$ERROR($$$GeneralError,"Нет данных по эпизоду "_codeEpisode_" (отдел "_codeDepartment_")") quit
	    do ..doParams2(codeEpisode,$na(@refTmp),codeDepartment)
        do ..moveParameters( refTmp, .params )
        set fileJasper=..getFileJasper()
        $$$ThrowOnError(##class(Report.rpt).startRptFacade(fileReport, .params, fileJasper, repFormat))
    } catch(exception)
    {
	   Set ret=exception.AsStatus()
    }
    k @refTmp
    quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//формирование нескольких отчетов (по нескольким эпизодам) в одном файле

]]></Content>
</UDLText>

<Method name="startRptMBgroup">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileReport:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set result=$$$OK
  try {
	   k params set params("refTmp")=refTmp
	   set fileJasper=..getFileJasper()
	   set $piece(fileJasper,".",$length(fileJasper,"."))="jasper"
	   set repFormat=..getFormatReport()
	   ;$$$ThrowOnError(##class(Report.rpt).getPathFileReport00(.pathFileReport))
	   ;set fileReport=pathFileReport_"\"_"PRTCLNRUS49"_$j_"."_repFormat
       $$$ThrowOnError(##class(Report.rpt).startRptNew("isc.jasper.rptEpisodeMB", "startReport", fileReport, .params, repFormat , fileJasper ))
      }
  catch exception
		{
			Set result=exception.AsStatus()
		}     
 quit result
]]></Implementation>
</Method>

<Method name="startRptMBepisodeAuto">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,codeDepartment:%String="H",pathReportTemp:%String,pathReportAuto:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
    try {
	    // формат отчета - pdf
	    set repFormat=..getFormatReport()
	    
	    // пути
	    if $get(pathReportTemp)="" set pathReportTemp=##class(TCLEx.UI.MicrobiologyQueueManager).getPathTempFiles()
	    if $get(pathReportAuto)="" set pathReportAuto=##class(TCLEx.UI.MicrobiologyQueueManager).getPathBaseFiles()
	    
	    // временный файл (имя)
	    set fileReportTemp=pathReportTemp_..getNameFileReportAuto(codeEpisode,repFormat)
	    if ##class(%File).Exists(fileReportTemp) {
		    do ##class(%File).Delete(fileReportTemp)
	    }
	    
	    // формирование временного файла
	    set refTmp=$na(^CacheTempUserEpi($j)) kill @refTmp
	    do ..getDataEpisode(codeEpisode, codeDepartment, $na(@refTmp@("ts")))
	    if '$data(@refTmp@("ts")) set ret=$$$ERROR($$$GeneralError,"Нет данных по эпизоду "_codeEpisode_" (отдел "_codeDepartment_")") quit
	    do ..doParams2(codeEpisode,$na(@refTmp),codeDepartment)
        do ..moveParameters( refTmp, .params )
        set fileJasper=..getFileJasper()
        $$$ThrowOnError(##class(Report.rpt).startRptFacade(fileReportTemp, .params, fileJasper, repFormat))
        
        // окончательный файл
 	    set fileReportAuto=pathReportAuto_..getNameFileReportAuto(codeEpisode,repFormat)
	    if ##class(%File).Exists(fileReportAuto) {
		    do ##class(%File).Delete(fileReportAuto)
	    }
	    // копирование временного файла в окончательный
	    //set ^test(222,"fileReportTemp")=fileReportTemp
	    //set ^test(222,"fileReportAuto")=fileReportAuto
        if ##class(%File).CopyFile(fileReportTemp, fileReportAuto) {
		   do ##class(%File).Delete(fileReportTemp)
        }
        k @refTmp
       
    } catch(exception)
    {
	   Set ret=exception.AsStatus()
	   if $get(refTmp)'="" k @refTmp
    }
    quit ret
]]></Implementation>
</Method>

<Method name="moveParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[refTmp:%String,&params:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill params
    for node="NumEpisode","NumOrder","codeDepartment","refTmp","CardNumber","FullName","DOB","Sex","Нospital","Doctor","DateOfReceiving","DateTimeOfCollection","TS_Specimen" {
	    set params(node)=$get(@refTmp@("params","Vals",node))  
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="doParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String,codeDepartment:%String=""</FormalSpec>
<Implementation><![CDATA[
 	  k @refTmp
	  do SetVals^PRTDR0RU02(codeEpisode,codeDepartment,$na(@refTmp))
	  set @refTmp@("Vals","NumOrder")=##class(Report.Function).getNumOrder(codeEpisode)
	  set @refTmp@("Vals","NumEpisode")=codeEpisode
	  Set episobj=##class(User.EPVisitNumber).%OpenId(codeEpisode)
	  if $IsObject(episobj) {
		  set obj=episobj.EPVISDebtorNumberDR
		  if $IsObject(obj) set @refTmp@("Vals","CardNumber")=obj.DEBDebtorCode
	  }
	  
	  // optional fields in prog  SetVals^PRTDR0RU02
	  for node="Doctor","Sex","SexCode","CyclePhase","Р_ospitalCode","Р_ospital","nameDepartment","fioDoctor","dateOut" {
	      if $get(@refTmp@("Vals",node))="" set @refTmp@("Vals",node)=""
	  }
]]></Implementation>
</Method>

<Method name="doParams2">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String,codeDepartment:%String=""</FormalSpec>
<Implementation><![CDATA[
		do ..doParams(codeEpisode,$na(@refTmp@("params")),codeDepartment)
		set @refTmp@("params","Vals","codeDepartment")=codeDepartment
		set @refTmp@("params","Vals","refTmp")=$na(@refTmp@("ts"))
		;тип образца
		set testsetid="",specimen="" 
		for {
		     set testsetid=$order(@refTmp@("ts",testsetid),-1) if testsetid="" quit
		     set specimen=$listget(^(testsetid),1) if specimen '= "" quit   
		} 
		set @refTmp@("params","Vals","TS_Specimen")=specimen
]]></Implementation>
</Method>

<Method name="getFileJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit ##class(Report.JasperReportTune).getPathFileJasper()_"\rptEpisodeMB.jasper"
]]></Implementation>
</Method>

<Method name="getNameFileReport">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,repFormat:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit codeEpisode_"_printform"_"."_$select(repFormat="":..getFormatReport(),1:repFormat)
]]></Implementation>
</Method>

<Method name="getFileReport">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&err:%Status,codeEpisode:%String,dateEntry:%String,repFormat:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set err=$$$OK
    set pathFileReport=..getPathReport(dateEntry, .err)	if 'err quit "" 	
	if $get(repFormat)="" set repFormat=..getFormatReport()	
	
    quit pathFileReport_"/"_..getNameFileReport(codeEpisode,repFormat)
]]></Implementation>
</Method>

<Method name="getFileReportGroup">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&err:%Status,USER:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set err=$$$OK
	set err=##class(Report.rpt).getPathFileReport00(.pathFileReport,USER)
	if 'err quit "" 	
	
	if $get(repFormat)="" set repFormat=..getFormatReport()	
	
    quit pathFileReport_"\"_"PRTCLNRUS49"_$j_"."_repFormat
]]></Implementation>
</Method>

<Method name="getPathReport">
<Description>
date - ggggmmdd</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%String,&err:%Status]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set err=$$$OK,path=""
	try {
		set path=$$Path^REPORTSPB() if $e(path,1)="*" s err=$$$ERROR($$$GeneralError,path),path="" quit 
		set path=path_"\Бактериология\"
		if $get(date) set path=path_"\"_date
		if '##class(%File).Exists(path) do ##class(%File).CreateDirectoryChain(path) 
    } 
	catch(exception) 
	{
	   set err=exception.AsStatus()	
	}
	quit path
]]></Implementation>
</Method>

<Method name="getFormatReport">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit "pdf"
]]></Implementation>
</Method>

<Method name="getReportName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "episodeMB"
]]></Implementation>
</Method>

<Method name="getFileReportAuto">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set err=$$$OK
    set pathFileReport=..getPathReportAuto()	
	set repFormat=..getFormatReport()	
    quit pathFileReport_"/"_..getNameFileReportAuto(codeEpisode,repFormat)
]]></Implementation>
</Method>

<Method name="getPathReportAuto">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
    set path=$get(^Settings("Microbiology","pathBase"))
    if path="" {
	    set path=$$Path^REPORTSPB()_"\Microbiology\base"
    }
    if '##class(%File).DirectoryExists(path) {
	    do ##class(%File).CreateDirectoryChain(path)
    }
	quit path
]]></Implementation>
</Method>

<Method name="getPathReportTemp">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set path=$get(^Settings("Microbiology","pathTemp"))
    if path="" {
	    set path=$$Path^REPORTSPB()_"\Microbiology\temp"
    }
    if '##class(%File).DirectoryExists(path) {
	    do ##class(%File).CreateDirectoryChain(path)
    }
	quit path
]]></Implementation>
</Method>

<Method name="getNameFileReportAuto">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,repFormat:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "BP"_$get(codeEpisode)_"."_repFormat
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.EpisodeMBD</DataLocation>
<DefaultData>EpisodeMBDefaultData</DefaultData>
<IdLocation>^Report.EpisodeMBD</IdLocation>
<IndexLocation>^Report.EpisodeMBI</IndexLocation>
<StreamLocation>^Report.EpisodeMBS</StreamLocation>
<Data name="EpisodeMBDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
