<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.rpt23">
<Super>%RegisteredObject</Super>
<TimeCreated>62242,62903.271623</TimeCreated>

<Query name="queryRpt">
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="FioPatient:%String,EpisNum:%String,EntryDate:%String,EpisCode:%String"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=refTmp
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$lg(qHandle,1)
	set ^test(111,"qq",$i(^test(111,"qq")))=refTmp
	m ^test(111,"qqD",$i(^test(111,"qqD")))=@refTmp
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1) if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set item1=$listget(qHandle,2)
	set item2=$listget(qHandle,3)
   	if item1="" set item1=$order(@refTmp@("REPORT",item1)) if item1="" set Row="",AtEnd=1 quit $$$OK
	set item2=$order(@refTmp@("REPORT",item1,item2)) 
	if item2="" {
		set item1=$order(@refTmp@("REPORT",item1)) if item1="" set Row="",AtEnd=1 quit $$$OK
		set item2=$order(@refTmp@("REPORT",item1,item2))
	}
	
	set rec=$get(@refTmp@("REPORT",item1,item2))
	set entryDate=$listget(rec,1)
	set fioPatient=$listget(rec,4)
	set $li(Row,1)=fioPatient
	set $li(Row,2)=item2
	set $li(Row,3)=$tr($zd(entryDate,15),"/",".")
	set $li(qHandle,2)=item1
	set $li(qHandle,3)=item2
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 s refTmp=$na(^temp($j))
 set pDateFrom=62100,pDateTo=62300,pHospital=2011,pSortByDate=""
 d BODY^PRTCLNRUS23(pDateFrom,pDateTo,pHospital,pSortByDate,refTmp)
 Set result=##class(%ResultSet).%New("Report.rpt23:queryRpt")
 Do result.Execute($na(@refTmp))
 //Do result.Execute("") 
 For  Quit:'result.Next()  Do
 . Write result.Data("FioPatient")," ",result.Data("EpisNum")," ",result.Data("EntryDate"),!
]]></Implementation>
</Method>

<Query name="queryRptSub">
<Type>%Query</Type>
<FormalSpec>refTmp:%String,codeEpis:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="CodeTest:%String,NameTest:%String,Kol:%Integer,Sum:%Float"/>
</Query>

<Method name="queryRptSubExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String,codeEpis:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=codeEpis
  	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptSubClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptSubExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptSubFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptSubExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1) 
	set codeEpis=$listget(qHandle,2)
	if refTmp=""!(refTmp=$c(0))!(codeEpis="") set Row="",AtEnd=1 quit $$$OK
	set item=$listget(qHandle,3)
	set item=$order(@refTmp@("REPORT-EP",codeEpis,item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set rec=$get(@refTmp@("REPORT-EP",codeEpis,item))
	set kol=$listget(rec,1)
	set sum=$listget(rec,2)
	set nameTest=$get(@refTmp@("REPORT-TS",item))
	set $li(Row,1)=$piece(item,$char(1),1)
	set $li(Row,2)=nameTest
	set $li(Row,3)=kol
	set $li(Row,4)=sum
	set $li(qHandle,3)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestqueryRptSub">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 s refTmp=$na(^temp($j))
 set pDateFrom=62100,pDateTo=62300,pHospital=2011,pSortByDate=""
 d BODY^PRTCLNRUS23(pDateFrom,pDateTo,pHospital,pSortByDate,refTmp)
 set sort=$order(@refTmp@("REPORT","")) if sort="" quit
 set epis=$order(@refTmp@("REPORT",sort,"")) if epis="" quit
 Set result=##class(%ResultSet).%New("Report.rpt23:queryRptSub")
 Do result.Execute($na(@refTmp),epis)
 //Do result.Execute("") 
 For  Quit:'result.Next()  Do
 . Write result.Data("CodeTest")," ",result.Data("NameTest")," ",result.Data("Kol")," ",result.Data("Sum"),!
]]></Implementation>
</Method>

<Query name="queryHospitals">
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeHospital:%String"/>
</Query>

<Method name="queryHospitalsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $li(qHandle,1)=""
	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryHospitalsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryHospitalsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryHospitalsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptSubExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set codeHospital=$listget(qHandle,1)
	set refTmp=$listget(qHandle,2)
	set codeHospital = $order(@refTmp@(codeHospital)) if codeHospital="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=codeHospital
	set $li(qHandle,1)=codeHospital
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestqueryHospitals">
<ClassMethod>1</ClassMethod>
<FormalSpec>refTmp:%String</FormalSpec>
<Implementation><![CDATA[
 Set result=##class(%ResultSet).%New("Report.rpt23:queryHospitals")
 Do result.Execute(refTmp)
 For  Quit:'result.Next()  Do
 . Write result.Data("codeHospital"),!
]]></Implementation>
</Method>

<Query name="queryParameters">
<Description>
Query all parameters forcodeHospital </Description>
<Type>%Query</Type>
<FormalSpec>codeHospital:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="node:%String,value:%String"/>
</Query>

<Method name="queryParametersExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,codeHospital:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=$name(@refTmp@(codeHospital))
   	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set node=$listget(qHandle,1)
	set refTmp=$listget(qHandle,2)
	set node=$order(@refTmp@("params",node)) if node="" set Row="",AtEnd=1 quit $$$OK
   	set $li(Row,1)=node
   	set $li(Row,2)=@refTmp@("params",node)
   	set $li(qHandle,1)=node
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String</FormalSpec>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.EpisodeMB:queryParameters")
  do rset.Execute(codeEpisode, refTmp)
  while rset.Next() { 
     w !,rset.Data("node")," ",rset.Data("value")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Method name="StartRpt">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pHospital:%String,pSortByDate:%String,refTmp:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set fileReport="",error=$$$OK
 try {
	 
  //set nameReport=..getReportName()
  	
  set ret=##class(Report.rpt25).getFileReport( pDateTo, pHospital, "Оплата по услугам" ) 
  if +ret=0 {
	  set str=$p(ret,$char(1),2)
	  //if nameReport'="" do ##class(Report.rpt).Log(nameReport,str)
	  set err=str quit 
  }
  s fileReport=$p(ret,$c(1),2) 

  ;if ##class(%File).Exists(fileReport)&&('##class(%File).Delete(fileReport)) {
  ;	  set str="Файл "_fileReport_" занят другим приложением"
  ;	  do ##class(Report.rpt).Log(nameReport,str)
  ;	  quit "0^"_str
  ;}
  
  if $order(@refTmp@("REPORT",""))="" {
	  set str="Нет данных. Плательщик "_##class(User.CTPaymentCode).%OpenId(pHospital).CTPCDesc  
	  //if nameReport'="" do ##class(Report.rpt).Log(nameReport,str)
	  set err=str quit //$$$ERROR($$$GeneralError,str) quit  
  }

  //строка с параметрами
  do ..doParams(pDateFrom, pDateTo, pHospital, pSortByDate, refTmp, .params )
  
  //файл с шаблоном Jasper 
  set fileJasper = ..getFileJasper()
  
  //формат файла
  set reportFormat=##class(Report.JasperReportTune).getTypeFileReport()
  
  //set answer=##class(Report.rpt).StartRpt(fileReport, fileJasper, .params, nameReport )
  set err = ##class(Report.rpt).startRptFacade(fileReport, .params, fileJasper, reportFormat)
  //if nameReport'="" do ##class(Report.rpt).Log(nameReport,str)
 }
 catch(exception) 
 {
	 set err = $ZERROR
	 set fileReport=""
 }   
 quit $select(+err=1:"1^"_fileReport,1:"0^"_err)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//формирование нескольких отчетов (по нескольким плательщикам ) в одном файле (нумерация у каждого отчета с 1)- универсвльной функцикцией

]]></Content>
</UDLText>

<Method name="startRptgroup">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pHospital:%String,pSortByDate:%String,fileReport:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set result=$$$OK
  s refTmp=$name(^CacheTempUserEpi($j)) kill @refTmp
  try {
	   set repFormat=##class(Report.JasperReportTune).getTypeFileReport()
	   if fileReport="" {
		   set fileReport=..getFileReportGroup(.result, "", repFormat) if 'result quit 
	   }
	   for i=1:1:$length(pHospital,$c(1)) {
	      set codeHospital=$piece(pHospital,$c(1),i) 
	      if codeHospital="" continue
	      kill @refTmp@(codeHospital)
	      do BODY^PRTCLNRUS23(pDateFrom,pDateTo,codeHospital,pSortByDate,$na(@refTmp@(codeHospital)))
	      if $d(@refTmp@(codeHospital,"REPORT"))<10 kill @refTmp@(codeHospital) continue
	   }
	   k params set params("refTmp")=refTmp
	   set fileJasper=..getFileJasper()
	   set $piece(fileJasper,".",$length(fileJasper,"."))="jasper"
	   set params("query")="call Report.rpt23_queryHospitals(?)"
	   set params("query2")="call Report.rpt23_queryParameters(?,?)"
	   set params("kolParametersQuery")=1
	   set params("queryParam1")=refTmp
	   set params("query2Param1")="1"
	   set params("query2Param2")=$c(0)_"1"
       $$$ThrowOnError(##class(Report.rpt).startRptNew("isc.jasper.groupReport1", "startReport", fileReport, .params, repFormat , fileJasper ))
       kill @refTmp
  }
  catch exception
		{
			Set result=exception.AsStatus()
		}     
 quit result
]]></Implementation>
</Method>

<Method name="doParams">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pDateFrom:%String,pDateTo:%String,pHospital:%String,pSortByDate:%String,refTmp:%String,&params:%String]]></FormalSpec>
<Implementation><![CDATA[
	kill params
	merge params = @refTmp@("params")
	/*
  	set params("pDateFrom")=$get(@refTmp@("pDateFrom"))$tr($zd(pDateFrom,15),"/",".")
    set params("pDateTo")=$tr($zd(pDateTo,15),"/",".")
    
	set params("pNameHospital")=##class(User.CTPaymentCode).%OpenId(pHospital).CTPCDesc 
		
	s sumItog=$j(+$g(@refTmp@("REPORT-A")),0,2)
	set params("pSumItog")=$tr(sumItog,".",",")
	
	s kolItog=$j(+$li(@refTmp@("REPORT"),1),0)
	set params("pKolItog")=kolItog
		
	set params("prefTmp")=$name(@refTmp)
	*/
]]></Implementation>
</Method>

<Method name="moveParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[refTmp:%String,&params:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill params
    for node="NumEpisode","NumOrder","codeDepartment","refTmp","CardNumber","FullName","DOB","Sex","Нospital","Doctor","DateOfReceiving","DateTimeOfCollection","TS_Specimen" {
	    set params(node)=$get(@refTmp@("params","Vals",node))  
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="getFileReportGroup">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&err:%Status,USER:%String="",repFormat:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set err=$$$OK
	set pathFileReport=""
	set err=##class(Report.rpt).getPathFileReportGroup(.pathFileReport,$get(USER))
	if 'err quit "" 	
	
	if $get(repFormat)="" set repFormat=##class(Report.JasperReportTune).getTypeFileReport()	
	
    quit pathFileReport_"\"_"PRTCLNRUS23"_$j_"."_repFormat
]]></Implementation>
</Method>

<Method name="getFileJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit ##class(Report.JasperReportTune).getPathFileJasper()_"/rpt23.jasper"
]]></Implementation>
</Method>

<Method name="getReportName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "rpt23"
]]></Implementation>
</Method>
</Class>
</Export>
