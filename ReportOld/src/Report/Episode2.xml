<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.Episode2">
<Super>%Persistent</Super>
<TimeCreated>62298,46630.576646</TimeCreated>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String</FormalSpec>
<Implementation><![CDATA[
   	set ref=$na(^||episode)
   	kill @ref,@refTmp
   	//Do ##class(TCLEx.Function.Episode).PCLResult(100904001102)
   	//Do ##class(TCLEx.Function.Episode).PCLResult(269100010101)
   	Do ##class(TCLEx.Function.Episode).PCLResult(codeEpisode)
   	set r=$char(0),r1=$char(1)
   	set department="" 
   	for {
	   set department=$order(@ref@(department)) if department="" quit
	   set page=""
	   for {
		   set page=$order(@ref@(department,page)) if page="" quit
		   set line=""
		   for {
			   set line=$order(@ref@(department,page,line)) if line="" quit
			   set npp="",num=0,offset=0,value="",style=""
			   for {
				   set npp=$order(@ref@(department,page,line,npp)) if npp="" quit
				   set rec=^(npp),firstSymbol=$extract(rec),len=$l(rec)
				   if firstSymbol="!" {
					   if '$d(@refTmp@("1",department,line)) set @refTmp@("1",department,line)="" //$lb("-","","","")
					   continue
				   }
				   if firstSymbol=$c(13) {
					   if value="" { 
					      set offset=0,value="",style="" 
					      continue
					   }
					   set num=num+1
					   set @refTmp@("1",department,line,num)=$lb(offset,value,style)
					   set @refTmp@("3",department,line,offset,num)=""
					   set offset=0,value="",style=""
					   continue
				   }
				   if firstSymbol="?" {
					   set offset=+$extract(rec,2,4)
					   set value=$extract(rec,5,len)
					   continue
				   }
				   if firstSymbol="~" {
					   set style=$extract(rec,4,len)
					   continue
				   }
				   set value=rec
				   
			   }
			 		   
		   }
	   }	   	   
   	}
   	//width fields
   	set department="" 
   	for {
	   set department=$order(@refTmp@("3",department)) if department="" quit
	   set line=""
	   for {
	      set line=$order(@refTmp@("3",department,line)) if line="" quit
	      set offset=""
	      for {
	         set offset=$order(@refTmp@("3",department,line,offset)) if offset="" quit
	         set offsetNext=$order(@refTmp@("3",department,line,offset))
	         set width=0 if offsetNext'="" set width=offsetNext-offset
	         set num="" 
	         for {
		         set num=$order(@refTmp@("3",department,line,offset,num)) if num="" quit
		         set $li(@refTmp@("1",department,line,num),4)=width
	         }
		  }
	   }
   	}
   	set department="" 
   	for {
	   set department=$order(@refTmp@("1",department)) if department="" quit
	   set line=""
	   for {
	      set line=$order(@refTmp@("1",department,line)) if line="" quit
	      set num=""
	      for {
	         set num=$order(@refTmp@("1",department,line,num)) if num="" quit
		     set rec=^(num)
		     set offset=+$li(rec,1)
		     set @refTmp@("2",offset,department,line,num)=""
		  }
	   }
   	}
   	set offset="",numField=0
   	for {
	   	set offset=$order(@refTmp@("2",offset)) if offset="" quit
	   	set numField=numField+1
	   	set @refTmp@("2",offset)=numField
	   	set @refTmp@("field",numField)=$lb(offset)
	   	set department=""
	   	for {
		   	set department=$o(@refTmp@("2",offset,department)) if department="" quit
		   //	set line=""
		   //	for {
		   //	   	set line=$order(@refTmp@("2",offset,department,line)) if line="" quit
		    set countLines=$order(@refTmp@("2",offset,department,""),-1)
		    for line=1:1:countLines {
			    if ('$data(@refTmp@("2",offset,department,line))) {
				    set rec="" set $li(rec,numField)=""
				    set @refTmp@("data",department,line)=$lb("")
				    continue   
			    }
			   	set num=""
			   	for {
				   	set num=$order(@refTmp@("2",offset,department,line,num)) if num="" quit
				   	set rec=$get(@refTmp@("1",department,line,num))
				   	set width=$listget(rec,4) if $lg(@refTmp@("field",numField),2)="" set $li(@refTmp@("field",numField),2)=width
				   	set @refTmp@("data",department,line,numField)=rec
			   	}
		   	}
	   	}
   	}
   	//догенерим снизу пустые строки до полной страницы - для полосатости на всей странице
   	;@refTmp@("data",department,line,numField)
   	set heightPage=842,heightTopMargin=30,heightPageHeader=290,heightPageFooter=115
   	set maxCountLine=(heightPage-heightTopMargin-heightPageHeader-heightPageFooter)\15
   	set department=""
   	for {
	   	set department = $order(@refTmp@("data",department)) if department="" quit
	   	set lineLast=$order(@refTmp@("data",department,""),-1)
	   	if lineLast'<maxCountLine quit
	   	for line=(lineLast+1):1: maxCountLine {
		   	set rec="" set $li(rec,numField)=""
		   	set @refTmp@("data",department,line)=$lb("")
	   	}
   	}   	
	set @refTmp@("field")=numField
   	set @refTmp@("data")=codeEpisode
]]></Implementation>
</Method>

<Query name="queryRpt">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="department:%String,nameDepartment:%String,fioDoctor:%String,dateOut:%String,Field1:%String,Field2:%String,Field3:%String,Field4:%String,Field5:%String,Field6:%String,Field7:%String,Field8:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set codeEpisode=$get(@refTmp@("data"))
  	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=""
  	set $li(qHandle,3)=""
  	set $li(qHandle,4)=codeEpisode
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1) ;if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set department=$listget(qHandle,2)
	set item2=$listget(qHandle,3)
   	if department="" set department=$order(@refTmp@("data",department)) if department="" set Row="",AtEnd=1 quit $$$OK
	set item2=$order(@refTmp@("data",department,item2)) 
	if item2="" {
		set department=$order(@refTmp@("data",department)) if department="" set Row="",AtEnd=1 quit $$$OK
		set item2=$order(@refTmp@("data",department,item2))
	}
	s Row=""
	if '$data(@refTmp@("paramDep",department)) {
		set codeEpisode=$listget(qHandle,4)
		do SetVals^PRTDR0RU02(codeEpisode,department,$na(@refTmp@("paramDep",department)))
	}
	set nameDepartment=$get(@refTmp@("paramDep",department,"Vals","TS_DepartmentName"))
	set fioDoctor=$get(@refTmp@("paramDep",department,"Vals","TS_AuthorisedDoctor"))
	//if fioDoctor="" set fioDoctor=$get(@refTmp@("params","Vals","Doctor"))
	set dateOut=$get(@refTmp@("paramDep",department,"Vals","TS_DateOfAuthorisation"))
	set $li(Row,1)=department
	set $li(Row,2)=nameDepartment
	set $li(Row,3)=fioDoctor
	set $li(Row,4)=dateOut
	set numField="" 
	for {
		set numField=$order(@refTmp@("data",department,item2,numField)) if numField="" quit
		set rec=^(numField)
		set $li(Row,numField+4)=$li(rec,2)
	}
	set $li(qHandle,2)=department
	set $li(qHandle,3)=item2
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.Episode2:queryRpt")
  do rset.Execute($na(^||episodeUse))
  while rset.Next() { 
     w !,rset.Data("department")," ",rset.Data("Field1")," ",rset.Data("Field2")," ",rset.Data("Field3")," ",rset.Data("Field4")
     w " ",rset.Data("Field5")," ",rset.Data("Field6")," ",rset.Data("Field7")," ",rset.Data("Field8")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryRpt2">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>department:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="Field1:%String,Field2:%String,Field3:%String,Field4:%String,Field5:%String,Field6:%String,Field7:%String,Field8:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String"/>
</Query>

<Method name="queryRpt2Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,department:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=department
  	set $li(qHandle,3)=""
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRpt2Close">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRpt2Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRpt2Fetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRpt2Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1)
	set department=$listget(qHandle,2)
	set line=$listget(qHandle,3)
   	set line=$order(@refTmp@("data",department,line)) 
   	set Row=$lb("")
	if line="" set Row="",AtEnd=1 quit $$$OK
	set numField="" 
	for {
		set numField=$order(@refTmp@("data",department,line,numField)) if numField="" quit
		set rec=^(numField)
		set $li(Row,numField)=$li(rec,2)
	}
	set $li(qHandle,3)=line
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryRpt2">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.Episode2:queryRpt2")
  do rset.Execute("B",$na(^test(3)))
  while rset.Next() { 
     w !,rset.Data("Field1")," ",rset.Data("Field2")," ",rset.Data("Field3")," ",rset.Data("Field4")
     w " ",rset.Data("Field5")," ",rset.Data("Field6")," ",rset.Data("Field7")," ",rset.Data("Field8")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryStruct">
<Description>
Query for generate setTest report</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="numberField:%Integer,offsetField:%Integer,widthField:%Integer"/>
</Query>

<Method name="queryStructExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryStructExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryStructSetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("field",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set rec=$get(@refTmp@("field",item))
	set $li(Row,1)=item
	set $li(Row,2)=$li(rec,1)
	set $li(Row,3)=$li(rec,2)
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryStruct">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set refTmp=$na(^temp($j))
  SET rset=##class(%ResultSet).%New("Report.Episode2:queryStruct")
  do rset.Execute(refTmp)
  while rset.Next() { 
     w !,rset.Data("numberField")," ",rset.Data("offsetField")," ",rset.Data("widthField")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="querySetTest">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>department:%String,setTestCounter:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="Field1:%String,Field2:%String,Field3:%String,Field4:%String,Field5:%String,Field6:%String,Field7:%String,Field8:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String"/>
</Query>

<Method name="querySetTestExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,department:%String,setTestCounter:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=department
  	set $li(qHandle,3)=setTestCounter
  	set $li(qHandle,4)=refTmp
  	set columnsCount=$get(@refTmp@("structSetTest",$piece(setTestCounter,"\",1),"field"))
  	set $li(qHandle,5)=columnsCount
  	
  	/*set metainfo="" ;^oddCOM("Report.rptEpisode","q","querySetTest",21)
 	
  	set $li(^oddCOM("Report.testQuery","q","queryRpt",21),1)=metainfo
  	
  	set numField="",setTest=$p(setTestCounter,"\",1),npp=0
  	for {
	  	set numField=$order(@refTmp@("structSetTest",setTest,"field",numField)) if numField=""  quit
	  	set npp=npp+1
	  	set nameField="Field"_numField
	  	set colmeta=$listbuild(nameField,10,nameField)
	  	set $li(metainfo,npp)=colmeta
  	}  	
  	set $li(^oddCOM("Report.rptEpisode","q","querySetTest",21),1)=metainfo*/
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="querySetTestClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>querySetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="querySetTestFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>querySetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;@ref@("structSetTest",setTest,"struct",lineNumber,numberField)
	set refTmp=$listget(qHandle,4)
	set setTestCounter=$listget(qHandle,3) 
	set setTest=$piece(setTestCounter,"\",1)
	set department=$listget(qHandle,2) 
	;if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set lineNumber=$listget(qHandle,1)
	set lineNumber=$order(@refTmp@("structSetTest",setTest,"struct",lineNumber)) 
	if lineNumber="" set Row="",AtEnd=1 quit $$$OK
	set numField="" 
	;b:setTest="E001"  
	for {
		set numField = $order(@refTmp@("structSetTest",setTest,"struct",lineNumber,numField)) if numField="" quit
		set rec=$get(@refTmp@("structSetTest",setTest,"struct",lineNumber,numField))
		set test=$li(rec,1),type=$li(rec,2),value=$li(rec,3)
		;set @ref@("data",department,setTest_$char(1)_counter,test)
		if type="Result" set value=$get(@refTmp@("data",department,setTestCounter,test))
		if value="" set value="000"
	    set $li(Row,numField)=value
	}
	set $li(qHandle,1)=lineNumber
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testquerySetTest">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

  set refTmp=$na(^test(2))
  set department=$o(@refTmp@("data","")) if department="" quit
  set deparment="E"
  set setTestCounter=$o(@refTmp@("data",department,"")) if setTestCounter="" quit
  set setTestCounter="E001\1"
  w !,"setTestCounter=",setTestCounter,!
  SET rset=##class(%ResultSet).%New("Report.rptEpisode:querySetTest")
  do rset.Execute(department, setTestCounter, refTmp)
  set qColumns=rset.GetColumnCount() w !,"ColumnCount=",qColumns
  while rset.Next() {
	  w !,"---" 
     for i=1:1:qColumns {
	     set columnName=rset.GetColumnName(i)
         w !,columnName,"=",rset.Data(columnName)
     }
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryDepartments">
<Description>
Query all departments from refTmp</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="department:%String"/>
</Query>

<Method name="queryDepartmentsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryDepartmentsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryDepartmentsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryDepartmentsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryDepartmentsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("data",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryDepartments">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set refTmp=$na(^test(3))
  SET rset=##class(%ResultSet).%New("Report.Episode2:queryDepartments")
  do rset.Execute(refTmp)
  while rset.Next() { 
     w !,rset.Data("department")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryParameters">
<Description>
Query all parameters from refTmp</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="parameterName:%String,parameterValue:%String"/>
</Query>

<Method name="queryParametersExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("params","Vals",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(Row,2)=$get(@refTmp@("params","Vals",item))
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryParameters">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set refTmp=$na(^temp($j)) k @refTmp
  if '$data(@refTmp) do ..doParams("269100010101",refTmp)
  SET rset=##class(%ResultSet).%New("Report.Episode2:queryParameters")
  do rset.Execute(refTmp)
  while rset.Next() { 
     w !,rset.Data("parameterName")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Method name="getFIOpatient">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,department:%String</FormalSpec>
<Implementation><![CDATA[
	set ref=$na(^test("hat",codeEpisode, department))
	if '$data(@ref) do SetVals^PRTDR0RU02(codeEpisode,department,$na(@ref))
	quit $get(@ref@("Vals","FullName"))
]]></Implementation>
</Method>

<Method name="getFIOpatient2">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "fio"
]]></Implementation>
</Method>

<Method name="startRpt">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //set refTmp="^test(3)"
  //set refTmp="^||episodeUse"
  set refTmp=$na(^temp($j))
  set format="pdf"
  set targetFileName = "c:\\temp\\rptEpisode2."_format
  //set codeEpisode="269100010101"
  do ..getData(codeEpisode,refTmp)
  

 // открываем gateway
  set gateway=##class(Report.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")

  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port)) ;,,ClassPath
		Try
		{
			set paramsHashMap = ##class(java.util.HashMap).%New(jgw)
			do ..doParams(codeEpisode, refTmp)
	    	s node="" 
	        for {
	            s node=$order(@refTmp@("params","Vals",node)) if node="" quit
	            s value=$get(@refTmp@("params","Vals",node))  
	            do paramsHashMap.put(node,value)
	        }
			//формирование отчета
            set connectURL = ##class(Report.JasperReportTune).getConnectURL()
            do ##class(isc.jasper.rptEpisodePCL).startReport(jgw,connectURL,format, targetFileName, paramsHashMap, refTmp) 
  
		}
		Catch exception
		{
			Set result=exception.AsStatus()
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
	}
	Catch exception
	{
		Set result=exception.AsStatus()
	}
		
 quit result
]]></Implementation>
</Method>

<Method name="doParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set result=$$$OK
    try {
	  kill params
	  k @refTmp@("params")
	  do SetVals^PRTDR0RU02(codeEpisode,"",$na(@refTmp@("params")))
	  set @refTmp@("params","Vals","NumOrder")=""
	  set @refTmp@("params","Vals","NumEpisode")=codeEpisode
	  //"TS_AuthorisedDoctor"
	  if $get(@refTmp@("params","Vals","Doctor"))="" set @refTmp@("params","Vals","Doctor")=""
	  
	}
	Catch exception
	{
		Set result=exception.AsStatus()
	}
	quit result
]]></Implementation>
</Method>

<Projection name="javaProjection">
<Type>%Projection.Java</Type>
<Parameter name="ROOTDIR" value="C:\java\work\workspace\JasperPCL"/>
</Projection>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.Episode2D</DataLocation>
<DefaultData>Episode2DefaultData</DefaultData>
<IdLocation>^Report.Episode2D</IdLocation>
<IndexLocation>^Report.Episode2I</IndexLocation>
<StreamLocation>^Report.Episode2S</StreamLocation>
<Data name="Episode2DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
