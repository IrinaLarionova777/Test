<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.Function">
<Super>%Persistent</Super>
<TimeCreated>62306,53011.997345</TimeCreated>

<Query name="queryKey1">
<Description>
Query from refTmp all first keys</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String,executeString:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="P1:%String"/>
</Query>

<Method name="queryKey1Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String,executeString:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if executeString'="" x executeString
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	//s ^test("epi","refTmpquery")=refTmp
  	//s ^test("epi","refTmpdata")=$d(@refTmp)
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryKey1Fetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryKey1Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	if refTmp="" set Row="",AtEnd=1 quit $$$OK
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@(item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryKey1Close">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryKey1Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Query name="queryTest1">
<Description>
Query from refTmp all first keys</Description>
<Type>%Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="P1:%String"/>
</Query>

<Method name="queryTest1Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
  	set $li(qHandle,1)=""
  	//set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryTest1Fetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryTest1Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$na(^episodeList) ;$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@(item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryTest1Close">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryTest1Execute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryTest1">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.Function:queryTest1")
  do rset.Execute()
  while rset.Next() { 
     w !,rset.Data("P1")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Method name="getNumOrder">
<Description>
номер заказа</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
  quit $e(codeEpisode,1,10)
]]></Implementation>
</Method>

<Method name="countHospitals">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set code="",counter=0
	for {
		set code=$order(^TTAB( "BI",code)) if code="" quit
		set counter=counter+1
	}
	quit counter
]]></Implementation>
</Method>

<Method name="countNodes">
<ClassMethod>1</ClassMethod>
<FormalSpec>refGlob:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if $get(refGlob)="" quit 0
	set code="",counter=0
	for {
		set code=$order(@refGlob@(code)) if code="" quit
		set counter=counter+1
	}
	quit counter
]]></Implementation>
</Method>

<Method name="stringNodes">
<ClassMethod>1</ClassMethod>
<FormalSpec>refGlob:%String,delimeter:%String=","</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if $get(refGlob)="" quit ""
	set code="",str=""
	for {
		set code=$order(@refGlob@(code)) if code="" quit
		set str=str_$select(str'="":",",1:"")_code
	}
	quit str
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.FunctionD</DataLocation>
<DefaultData>FunctionDefaultData</DefaultData>
<IdLocation>^Report.FunctionD</IdLocation>
<IndexLocation>^Report.FunctionI</IndexLocation>
<StreamLocation>^Report.FunctionS</StreamLocation>
<Data name="FunctionDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
