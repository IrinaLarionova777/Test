<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.rpt24">
<Super>%RegisteredObject</Super>
<TimeCreated>62234,2615.013398</TimeCreated>

<Query name="queryRpt">
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="Code:%String,Desc:%String,Count:%Float,Amount:%Float,SumAmount:%Float"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$lg(qHandle,2)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$lg(qHandle,2) if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set item=$lg(qHandle,1)
	set item=$o(@refTmp@("REPORT",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set itemvals1=$g(@refTmp@("REPORT",item))
	set desc=$g(@refTmp@("REPORT-TS",item))
	set code=$p(item,$c(1),1)
	set itemcnt=$ListGet(itemvals1,1)
	set price=$ListGet(itemvals1,2)
	set itemsum=$ListGet(itemvals1,3)
	set $li(Row,1)=code
	set $li(Row,2)=desc
	set $li(Row,3)=itemcnt
	set $li(Row,4)=price
	set $li(Row,5)=itemsum
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 Set result=##class(%ResultSet).%New("Test.rpt:queryRpt")
 Do result.Execute("") 
 For  Quit:'result.Next()  Do
 . Write result.Data("Code")," ",result.Data("Desc")," ",result.Data("Count")," ",result.Data("Amount")," ",result.Data("SumAmount"),!
]]></Implementation>
</Method>

<Method name="StartRpt">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pDateAkt:%String,pHospital:%String,pSortByDate:%String,refTmp:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set nameReport=..getReportName()
  	
  set ret=##class(Report.rpt25).getFileReport( pDateTo, pHospital, "Акт" ) 
  if +ret=0 {
	  set str=$p(ret,$char(1),2)
	  do ##class(Report.rpt).Log(nameReport,str)
	  quit "0^"_str
  }
  s fileReport=$p(ret,$c(1),2) 

  if ##class(%File).Exists(fileReport)&&('##class(%File).Delete(fileReport)) {
	  set str="Файл "_fileReport_" занят другим приложением"
	  do ##class(Report.rpt).Log(nameReport,str)
	  quit "0^"_str
  }
  
  if $order(@refTmp@("REPORT",""))="" {
	  set str="Нет данных. Плательщик "_##class(User.CTPaymentCode).%OpenId(pHospital).CTPCDesc  
	  do ##class(Report.rpt).Log(nameReport,str)
	  quit "0^"_str  
  }
 
  //строка параметров
  do ..doParams(pDateFrom, pDateTo, pDateAkt, pHospital, pSortByDate, refTmp, .params )
  
  //файл с шаблоном Jasper 
  set fileJasper = ..getFileJasper()
  
  set answer=##class(Report.rpt).StartRpt(fileReport, fileJasper, .params, "rpt24" )
  
  quit answer
]]></Implementation>
</Method>

<Method name="doParams">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pDateFrom:%String,pDateTo:%String,pDateAkt:%String,pHospital:%String,pSortByDate:%String,refTmp:%String,&params:%String]]></FormalSpec>
<Implementation><![CDATA[
    kill params
	set params("pDateFrom")=$tr($zd(pDateFrom,15),"/",".")
    set params("pDateTo")=$tr($zd(pDateTo,15),"/",".")
    set params("pDateAkt")=$tr($zd(pDateAkt,15),"/",".")
  
    Set contractvals=$Get(@refTmp@("REPORT-P"))
    set params("pContractNo")=$ListGet(contractvals,1)
	set params("pContractDate")=$ListGet(contractvals,2)
	
	Set pcobj=##class(User.CTPaymentCode).%OpenId(pHospital)
	set params("pNameHospital")=pcobj.CTPCDesc
	set params("pPositionHospital")=$ListGet(contractvals,3)  ;##class(Report.FinancialEntity).getRoleBoss(pcobj)
	set params("pFioHospital")=$ListGet(contractvals,4) ;##class(Report.FinancialEntity).getFioBoss(pcobj)
			
	set params("pNameExecuter")=##class(Report.FinancialEntity).getNameCompany()
	set params("pPositionExecuter")=##class(Report.FinancialEntity).getRoleBossCompany()
	set params("pFioExecuter")=##class(Report.FinancialEntity).getFioBossCompany()
	
	s sumItog=$j(+$g(@refTmp@("REPORT")),0,2)
	//do params.put("pSumItog", ##class(java.lang.Double).%New(jgw,sumItog))
	set params("pSumItog")=$tr(sumItog,".",",")
	set params("pSumItogProp")=$$SumStr^PRTCLNRUS25(sumItog)
	
	set params("prefTemp")=$name(@refTmp)
]]></Implementation>
</Method>

<Method name="getFileJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit ##class(Report.JasperReportTune).getPathFileJasper()_"/rptAkt.jasper"
]]></Implementation>
</Method>

<Method name="refTempGlobal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit $name(^tmp24($j))
]]></Implementation>
</Method>

<Method name="getReportName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "rpt24"
]]></Implementation>
</Method>
</Class>
</Export>
