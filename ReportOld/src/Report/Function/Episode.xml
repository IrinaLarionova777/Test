<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.Function.Episode">
<Super>%Persistent</Super>
<TimeCreated>62323,40953.125991</TimeCreated>

<Method name="getEpisodes">
<Description>
typeRefTestSet - тип ссылки на набор тестов typeRefTestSet=1/2 - ссылка на ссылка на User.EPVisitTestSetData(codeTestSet)/User.EPVisitTestSet(codeEpisode||codeTestSet||1)
не правильно !!!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dateFrom:%Date,dateTo:%Date,refTmp:%String,typeRefTestSet:%String=1,codeDepartment:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  set result=$$$OK
  try {
	  kill @refTmp
	  set date=dateFrom-1
  	  for {
	   s date=$o(^TDAY(4,date)) if date="" quit
	   if date>dateTo quit
	   set codeEpisode=""
	   for {
		set codeEpisode=$order(^TDAY(4,date,0,codeEpisode)) if codeEpisode="" quit
  	    ;if $l(codeEpisode)<10 continue
	    Set episobj=##class(User.EPVisitNumber).%OpenId(codeEpisode) If '$IsObject(episobj) Quit 
	    set dateEntry=episobj.EPVISDateOfEntry
	    if (dateEntry<dateFrom)!(dateEntry>dateTo) quit
	    
	    Set key=""
		For  {
			Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			If key="" Quit
 			If '$IsObject(testsetobj) Continue
 			;берем только один отдел, если указан отдел
 			if (codeDepartment '= "" ) If '$$IsTestSet4Department^PRTDR0RU02(testsetobj,codeDepartment) Continue
 			;берем только печатаемые наборы тестов
   			If '##class(TCLEx.Function.TestSet).IsPrintable(testsetobj) Continue ; Пропускаем неавторизованные или отмененные TestSet-ы
   			set codeTestSet=""
    		if typeRefTestSet=1 
    		{
	    	    set testsetspr=testsetobj.VISTSTestSetDR
			    if '$IsObject(testsetspr) continue
			    set codeTestSet=testsetspr.%Id()
    		}    	
    		else
    		{	
	    		set codeTestSet=testsetobj.%Id()
    		}
    		if codeTestSet="" continue
			set @refTmp@(codeEpisode,codeTestSet)=""
		}
	    if $data(@refTmp@(codeEpisode)) set @refTmp@(codeEpisode)=""
      }
  	 } 
  } 
  catch(exception)
  { 
       Set result=exception.AsStatus() 
  }
  quit result
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.Function.EpisodeD</DataLocation>
<DefaultData>EpisodeDefaultData</DefaultData>
<IdLocation>^Report.Function.EpisodeD</IdLocation>
<IndexLocation>^Report.Function.EpisodeI</IndexLocation>
<StreamLocation>^Report.Function.EpisodeS</StreamLocation>
<Data name="EpisodeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
