<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="Report.util" type="INT" languagemode="0"><![CDATA[
 //Report.util

nameFieldsInFile(glob)
 if $get(glob)="" set glob=$na(^trakDEFi("fieldName"))
 set file="c:\temp\nameFields.html"
 set f=##class(%File).%New(file)
 do f.Open("wsn")
 do writeHeader()
 Do f.WriteLine("<br />")
 Do f.WriteLine("  <table>")
 set glname="" 
 for {
	 set glname=$order(@glob@(glname)) if glname="" quit
	 Do f.WriteLine("    <tr>")
	 Do f.WriteLine("      <td>")
	 Do f.WriteLine("         <a href=#"_glname_">"_glname_"</a>")
	 Do f.WriteLine("      </td>")
	 Do f.WriteLine("      <td>")
	 Do f.WriteLine("      </td>")
	 Do f.WriteLine("    </tr>")
 }
 Do f.WriteLine("  </table>")
 set glname="" 
 for {
	 set glname=$order(@glob@(glname)) if glname="" quit
	 Do f.WriteLine("<br />")
	 Do f.WriteLine("<a name="""_glname_"""><b>"_glname_"</b></a>")
	 Do f.WriteLine("<table>")
     set id="" 
     for {
	    set id=$order(@glob@(glname,id)) if id="" quit
	    Do f.WriteLine("    <tr>")
	    Do f.WriteLine("      <td>")
	    Do f.WriteLine("         "_id)
	    Do f.WriteLine("      </td>")
        Do f.WriteLine("      <td>")
	    Do f.WriteLine("         "_@glob@(glname,id))
	    Do f.WriteLine("      </td>")
	    Do f.WriteLine("    </tr>")
     }
 }
 Do f.WriteLine("  </table>")
 do writeFooter()
 do f.Close()
 quit

StructureClasses()
 set file="c:\temp\StructureClasses.html"
 set f=##class(%File).%New(file)
 do f.Open("wsn")
 do writeHeader()
 Do f.WriteLine("<br />")
 Do f.WriteLine("  <table>") 
 Set result = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
 Do result.Execute()
 /*While (result.Next()) {
	 set classname=result.Data("Name")
	 Do f.WriteLine("    <tr>")
	 Do f.WriteLine("      <td>")
	 Do f.WriteLine("         <a href=#"_classname_">"_classname_"</a>")
	 Do f.WriteLine("      </td>")
	 Do f.WriteLine("      <td>")
	 Do f.WriteLine("      </td>")
	 Do f.WriteLine("    </tr>")
 }*/
  Do f.WriteLine("  </table>")
  Do result.Execute()
  kill ^||struct,^||struct2
  While (result.Next()) {
	 set classname=result.Data("Name")
	 if $e(classname,1,4)'="User" continue
	 Do f.WriteLine("<br />")
	 Do f.WriteLine("<a name="""_classname_"""><b>"_classname_"</b></a>")
	 Do f.WriteLine("<table>")
	 
	 Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
	 if '$IsObject(classobj) continue
	 ;if $e(propname,1)="%" continue
	 ;if $e(propname,1,8)="Activate" continue
	 ;if $e(propname,1,3)="csp" continue
	 ;if $e(propname,1,4)="CSPX" continue
	 if $e(classname,1,4)'="User" continue
	 if classname'="User.EPVisitNumber" continue
	 Set keystorobj="" set mapCounter=0
	 For  {
			Set storobj=classobj.Storages.GetNext(.keystorobj) if keystorobj="" Quit
			If '$IsObject(storobj) Continue
			w !,classname," ",storobj.Name 
			set keymap=""
			for {
				set map=storobj.SQLMaps.GetNext(.keymap) if keymap="" quit
				set mapname=map.Name
				if $e(mapname,1,5)="Index" continue
				set mapCounter=mapCounter+1 if mapCounter>1 b  
				set globName=map.Global
				set ^||struct(classname,mapname)=$lb(globName)
				set ^||struct2(globName)=""
				set keysubscript=""
				for {
					set subscript=map.Subscripts.GetNext(.keysubscript) if keysubscript="" quit
					set subscriptNum=subscript.Name
				    if subscript="" continue 
				    set ^||struct(classname,mapname,"subscripts",subscriptNum)=$lb(subscript.Expression)
				    set ^||struct2(globName,"subscripts",subscriptNum)=$lb(subscript.Expression)	
				}
				set keymapdata=""
				for {
					set mapdata=map.Data.GetNext(.keymapdata) if keymapdata="" quit
					set piece=mapdata.Piece
					set node=mapdata.Node
					if piece'="",node="" {
						set ^||struct(classname,mapname,"properties","root",piece)=$lb(mapdata.Name,mapdata.Delimiter)	
						set ^||struct2(globName,"properties","root",piece)=$lb(mapdata.Name,mapdata.Delimiter)	
					}
					if piece="",node'="" {
						set ^||struct(classname,mapname,"properties",node)=$lb(mapdata.Name,mapdata.Delimiter)	
						set ^||struct2(globName,"properties",node)=$lb(mapdata.Name,mapdata.Delimiter)
					}
					if piece'="",node'="" {
						set ^||struct(classname,mapname,"properties",node,piece)=$lb(mapdata.Name,mapdata.Delimiter)	
						set ^||struct2(globName,"properties",node,piece)=$lb(mapdata.Name,mapdata.Delimiter)
					}
					;w !,mapdata.Name    
				}
			}    
	 }			
	 
	 
	    
     Set count = cdef.Properties.Count()
     For i = 1:1:count {
        set propname=cdef.Properties.GetAt(i).Name
        
     }
	 
	 
  }
 Do f.WriteLine("  </table>")
 do writeFooter()
 do f.Close()
 quit 	 
writeHeader()
 Do f.WriteLine("<html>")
 Do f.WriteLine("<head>")
 Do f.WriteLine("  <meta http-equiv=""Content-Type"" content=""text/html; charset=windows-1251"" /> ")
 Do f.WriteLine("</head>")
 Do f.WriteLine("<body>")
 quit
writeFooter()
 Do f.WriteLine("</body>")
 Do f.WriteLine("</html>")
 quit
 
RemovePoint()
 ;^TTAB( "TS", {CT_TestSet.CTTS_Code}, {CTTSF_LayoutOrder}, {CTTSF_Order_1} )
 kill ^log("trans2")
 set ts="" 
 for {
    set ts=$order(^TTAB("TS", ts)) if ts="" quit
    set lo=""
    for {
	    set lo=$order(^TTAB("TS", ts, lo)) if lo="" quit
	    set npp=""
	    for {
		   set npp=$order(^TTAB("TS", ts, lo, npp)) if npp="" quit
		   set stringOld=$piece($get(^TTAB("TS", ts, lo, npp)),"\",1)
		   if $tr(stringOld," ","")="" continue
		   set stringNew=$$RemovePointString(stringOld) 
    	   if $tr(stringNew," ","")'="",stringNew'=stringOld {
		           set $piece(^TTAB("TS", ts, lo, npp),"\",1)=stringNew
		           set ^log("trans2",1,ts,lo,npp,"Old")=stringOld
		           set ^log("trans2",1,ts,lo,npp,"new")=stringNew
		           if lo="0" {
			           set i=""
			           for {
				           set i=$order(^TTAB("TS", ts, "LAN", i)) if i="" quit
			               set npp2=""
		                   for {
			                   set npp2=$order(^TTAB("TS", ts, "LAN", i, npp2)) if npp2="" quit  
			                
			                   if npp2=stringOld {
				                   set ddOld=^TTAB("TS", ts, "LAN", i, npp2) 
				                   kill ^TTAB("TS", ts, "LAN", i, npp2) 
				                   set ^TTAB("TS", ts, "LAN", i, stringNew)=ddOld
			                   }
		                   }
		               }
		           }
		   }

	    }
    }       
 }
 
 set ts="" 
 for {
    set ts=$order(^TTAB("TS", ts)) if ts="" quit
    set lo=""
    for {
	    set lo=$order(^TTAB("TS", ts, lo)) if lo="" quit
	    if lo'="LAN" continue
	    set npp=""
	    for {
		   set npp=$order(^TTAB("TS", ts, lo, npp)) if npp="" quit
		   set stringOld=$piece($get(^TTAB("TS", ts, lo, npp)),"\",1)
		   set stringNew=$$RemovePointString(stringOld)
		   if $tr(stringNew," ","")'="",stringNew'=stringOld {
			        set $piece(^TTAB("TS", ts, lo, npp),"\",1)=stringNew
			        set ^log("trans2",2,ts,lo,npp,"Old")=stringOld
		            set ^log("trans2",2,ts,lo,npp,"new")=stringNew
		   }
	       set npp2=""
		   for {
			   set npp2=$order(^TTAB("TS", ts, lo, npp, npp2)) if npp2="" quit
		       set stringOld = $piece($get(^TTAB("TS", ts, lo, npp, npp2)),"\",1)
		       if stringOld="" continue
		       set stringNew=$$RemovePointString(stringOld)
		       if $tr(stringNew," ","")'="",stringNew'=stringOld {
			        set $piece(^TTAB("TS", ts, lo, npp, npp2),"\",1)=stringNew
			        set ^log("trans2",2,ts,lo,npp,npp2,"Old")=stringOld
		            set ^log("trans2",2,ts,lo,npp,npp2,"new")=stringNew
		       }
		   }
	    }
    }       
 }
 
 quit
 
 // найти все классы, которые имеют Relationship or Property with заданным классом
FindAllRefForClass(classfind) 
  Set result = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
  Do result.Execute()
  kill ^||struct
  While (result.Next()) {
	 set classname=result.Data("Name")
	 if $e(classname,1,4)'="User" continue
	 
	 Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
	 if '$IsObject(classobj) continue
	 if $e(classname,1,4)'="User" continue
	 ;w !,classname
	 ;if classname'="User.EPVisitNumber" continue
  	 Set keypropobj="",npp=0 
	 For  {
			Set propobj=classobj.Properties.GetNext(.keypropobj) if keypropobj="" Quit
			set relationship=propobj.Relationship
			;if 'relationship continue
			;if classname="User.EPVisitNumber" b  
			set name=propobj.Name
			set type=propobj.Type
			;w !,"   ",name_" : "_type r aa
			if type'=classfind continue
			set ^||struct(classname)=""
	 }

  }
  w !,"Смотри ^||struct"
 quit
 
 // найти класс по имени глобала
FindClassForGlob() 
  Set result = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
  Do result.Execute()
  kill ^||struct
  While (result.Next()) {
	 set classname=result.Data("Name")
	 if $e(classname,1,4)'="User" continue
	 
	 Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
	 if '$IsObject(classobj) continue
	 if $e(classname,1,4)'="User" continue
	 ;if classname'="User.EPVisitNumber" continue
	 Set keystorobj="" set mapCounter=0
	 For  {
			Set storobj=classobj.Storages.GetNext(.keystorobj) if keystorobj="" Quit
			If '$IsObject(storobj) Continue
			//w !,classname," ",storobj.Name 
			set keymap=""
			for {
				set map=storobj.SQLMaps.GetNext(.keymap) if keymap="" quit
				set mapname=map.Name
				;if $e(mapname,1,5)="Index" continue
				set mapCounter=mapCounter+1 if mapCounter>1 //b  
				set globName=map.Global
				;if globName'="^TRPT" continue
				if globName'="^THIR" continue
				w !,classname," ",storobj.Name 
				set keysubscript="",strKeys=""
				for {
					set subscript=map.Subscripts.GetNext(.keysubscript) if keysubscript="" quit
					set subscriptNum=subscript.Expression  ;subscript.Name
				    if subscript="" continue 
				    if subscript="RH" b  
				    set strKeys=strKeys_"/"_subscriptNum
				}
				if globName'="",strKeys'="" set ^||struct(globName,strKeys)=classname
 
			}
	 }
  }
  write !!,"Смотри ^||struct"
 quit
			
 //нельзя пользоваться через объекты
RemovePointobj()
 set ts="" 
 for {
    set ts=$order(^TTAB("TS",ts)) if ts="" quit
    set tsobj = ##class(User.CTTestSet).%OpenId(ts)
    If '$IsObject(tsobj) Continue
    Set key=""
	For  {
			Set tsfobj=tsobj.ChildCTTestSetFields.GetNext(.key)
			if key="" Quit
			If '$IsObject(tsfobj) Continue
            set stringOld=tsfobj.CTTSFLabelText
            if stringOld'="" {
	           set stringNew = $$RemovePointString(stringOld)   
	           if stringOld'=stringNew {
		          set tsfobj.CTTSFLabelText=stringNew
		          set ret=tsfobj.%Save()
		          if ret=1 set ^log("trans2",1,ts,"Old")=stringOld  set ^log("trans2",1,ts,"new")=stringNew
               }
            }
    }
    Set key=""
	For  {
			Set transobj=tsobj.ChildCTTestSetTranslation.GetNext(.key)
			if key="" Quit
			If '$IsObject(transobj) Continue
			set stringOld=transobj.CTTSZDescription
		       set stringNew = $$RemovePointString(stringOld) 
	           if stringOld'=stringNew {
		          set transobj.CTTSZDescription=stringNew
		          set ret=transobj.%Save()
		         if ret=1 set ^log("trans2",2,ts,key,"Old")=stringOld  set ^log("trans2",2,ts,key,"new")=stringNew
	           }
			Set key2=""
	        For  {
			   Set transLobj=transobj.ChildCTTestSetTranslLayout.GetNext(.key2)
			   if key2="" Quit
			   If '$IsObject(transLobj) Continue
		       set stringOld=transLobj.CTTSJTranslatedText
		       set stringNew = $$RemovePointString(stringOld) 
	           if stringOld'=stringNew {
		          set transLobj.CTTSJTranslatedText=stringNew
		          set ret=transLobj.%Save()
		         if ret=1 set ^log("trans2",2,ts,key,key2,"Old")=stringOld  set ^log("trans2",2,ts,key,key2,"new")=stringNew
	           }
	        }
	}
 }
 
 quit
    
 
 
RemovePointString(string) 
 new len,i,lenn,pp 
 set len=$length(string)
 for i=len:-1:1 {
   set pp=$e(string,i)
   if pp'=" " quit
   set string=$e(string,1,i-1) 
 }   
 set len=$length(string)
 if $e(string,len)=":" set string=$e(string,1,len-1) set len=len-1
 for i=len:-1:1 {
   set pp=$e(string,i)
   if pp'="." quit
   set string=$e(string,1,i-1)  
 }   
 quit string  
 
RemoveOldBadDataBAD(dateLimit)
 w !,"Не дописано " quit 
 if $get(dateLimit)="" quit
 kill ^||whoDel,^||whoChange
 set epis="" 
 for {
    set epis=$order(^TEPI(epis)) if epis="" quit
    set episobj=##class(User.EPVisitNumber).%OpenId(epis)
    if '$IsObject(episobj) continue
    
    set dateOfEntry=episobj.EPVISDateOfEntry
    if dateOfEntry'<dateLimit continue
    
    Set key="",ok=0
	For  {
			Set tsobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			if key="" Quit
			set dateOfEnrtyTS=tsobj.VISTSDateOfEntry
			if dateOfEntryTS'<dateLimit set ok=1 quit
			set dateOfAuthorisation=tsobj.VISTSDateOfAuthorisation
			if dateOfAuthorisation'="" set isAuthorisation=2 quit
	}
    if ok=1 continue  ;хотя бы одна дата ввода больше предельной
    
    Set key="",isResult=0
	For  {
			Set tsobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			if key="" Quit
			Set key2=""
	        For  {
	      		Set testobj=tsobj.ChildEPVisitTestSetData.GetNext(.key2)
			    if key2="" Quit
			    set isResult=1 quit
	        }
	}
	
    Set key="",isAuthorisation=0
	For  {
			Set tsobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			if key="" Quit
			;set dateOfEnrtyTS=tsobj.VISTSDateOfEntry
			;if dateOfEntryTS'<dateLimit continue
			set dateOfAuthorisation=tsobj.VISTSDateOfAuthorisation
			if dateOfAuthorisation'="" set isAuthorisation=2 quit
	}
	if isAuthorisation=2 {
	  Set key="",isAuthorisation=1
	  For  {
			Set tsobj=episibj.ChildEPVisitTestSet.GetNext(.key)
			if key="" Quit
			;set dateOfEnrtyTS=tsobj.VISTSDateOfEntry
			;if dateOfEntryTS'<dateLimit continue
			set dateOfAuthorisation=tsobj.VISTSDateOfAuthorisation
			if dateOfAuthorisation="" set isAuthorisation=2 quit
	  }
	} 
	
	if isAuthorisation=1 continue  ;полная авторизация 
	
	if isResult=0,isAuthorisation=0 set ^||whoDel(epis)="" set ^||whoDel=$get(^||whoDel)+1 continue
	if isResult=1 set ^||whoChange(epis)="" set ^||whoChange=$get(^||whoChange)+1	 
 }
 
 if $data(^||whoDel) {
	 Write !,"Удаляем "_^||whoDel_" эпизодов? " set ans="N" read ans if ans="N" quit
	 set epis="" 
     for {
        set epis=$order(^||whoDel(epis)) if epis="" quit
        set episobj=##class(User.EPVisitNumber).%OpenOd(epis)
        if '$IsObject(episobj) continue
        set dateOfEntry=episobj.EPVISDateOfEntry
        set fioPatient=episobj.EPVISSurname
        set doctror=episobj.EPVISDoctorCodeDR
        set fioDoctor="" if doctor'="" set fioDoctor=$piece(^TTAB( "DR", doctor ),"\",1)
        merge ^log("delEpisode",epis,"old")=^TEPI(epis)
        if episobj.%Delete() set ^log("delEpisode",epis)="del"
     }
 }
 
 if $data(^||whoChange) {
	 Write !,"Авторизуем "_^||whoChange_" эпизодов? " set ans="N" read ans if ans="N" quit
	 set epis="" 
     for {
        set epis=$order(^||whoChange(epis)) if epis="" quit
        set episobj=##class(User.EPVisitNumber).%OpenOd(epis)
        if '$IsObject(episobj) continue
        set dateOfEntry=episobj.EPVISDateOfEntry
        set fioPatient=episobj.EPVISSurname
        set doctror=episobj.EPVISDoctorCodeDR
        set fioDoctor="" if doctor'="" set fioDoctor=$piece(^TTAB( "DR", doctor ),"\",1)
        merge ^log("delEpisode",epis,"old")=^TEPI(epis)
        
        
        if episobj.%Save() merge ^log("autoEpisode",epis,"New")=^TEPI(epis) set ^log("autoEpisode",epis)="auto" 
     }
 }
 
 quit
 
 //dateOfLimit формат ggggmmdd
RemoveOldData(dateLimit)
 new (dateLimit)
 b  if $get(dateLimit)="" quit
 set dateLimit=$zdh(dateLimit,8)
 kill ^||whoDel,^||whoAutor
 set epis="" 
 for {
    set epis=$order(^TEPI(epis)) if epis="" quit
    w !,epis 
    set episobj=##class(User.EPVisitNumber).%OpenId(epis)
    if '$IsObject(episobj) continue
    
    set dateOfEntry=episobj.EPVISDateOfEntry
    if dateOfEntry'<dateLimit continue
    
    Set key=""
	  For  {
		Set tsobj=episobj.ChildEPVisitTestSet.GetNext(.key)
	    if key="" Quit
        if '$IsObject(tsobj) continue
      
        set dateOfEntry=tsobj.VISTSDateOfEntry
        if dateOfEntry'="" if dateOfEntry'<dateLimit continue
        
        set dateOfCreation=tsobj.VISTSDateOfCreation 
        if dateOfCreation'="" if dateOfCreation'<dateLimit continue
        
        if dateOfEntry="",dateOfCreation="" b  
        
        set dateOfAutorisation=tsobj.VISTSDateOfAuthorisation
        if dateOfAutorisation'="" continue  ;???????????????
        
        set status=tsobj.VISTSStatusResult
        
        if status="A" continue
        
        set key2="",isData=0
	        For  {
	      		Set testobj=tsobj.ChildEPVisitTestSetData.GetNext(.key2)
			    if key2="" Quit
			    set isData=1 quit
	        }
	    set fioPatient=episobj.EPVISSurname
        set doctor=episobj.EPVISDoctorCodeDR
        set fioDoctor="" if $IsObject(doctor) set fioDoctor=doctor.CTDRSurname ;$piece(^TTAB( "DR", doctor ),"\",1) 
	    	        
	    set id=tsobj.%Id()
        if status="C",isData=0 set ^||whoDel(id)=$lb($zd(dateOfEntry),$zd(dateOfCreation),fioPatient,doctror,fioDoctor) set ^||whoDel=$get(^||whoDel)+1 continue
        if status="E",isData=1 set ^||whoAutor(id)=$lb($zd(dateOfEntry),$zd(dateOfCreation),fioPatient,doctror,fioDoctor) set ^||whoAutor=$get(^||whoAutor)+1 continue
        
     }
 } 
 
 b   if $data(^||whoDel) {
	 Write !,"Отменяем "_^||whoDel_" наборов тестов? " set ans="N" read ans if ans="N" quit
	 set reason=##class(User.CTReason).%OpenId("OLD") b  
     if $IsObject(reason) {
	  set tsid=""
	  for {
        set tsid=$order(^||whoDel(tsid)) if tsid="" quit
        set epis=$piece(tsid,"||",1),ts=$piece(tsid,"||",2),npp=$piece(tsid,"||",3)
        lock +^TEPI(epis):5 if $t=0 continue
        ;set tsobj=##class(User.EPVisitTestSet).%OpenId(tsid)
        kill vr merge vr=^TEPI(epis,1,ts,npp)
        set tsobj=##class(User.EPVisitTestSet).%OpenId(tsid)
        set date=tsobj.VISTSDateOfEntry if date="" set date=tsobj.VISTSDateOfCreation
        set time=tsobj.VISTSTimeOfEntry if time="" set time=tsobj.VISTSTimeOfCreation
        set user=tsobj.VISTSUserEnteredDR
        if date=""!(+time=0)!(user="") {
	       set episobj=##class(User.EPVisitNumber).%OpenId(epis)
           if date="" set date=episobj.EPVISDateOfEntry 
           if +time=0 set time=episobj.EPVISTimeOfEntry*60
           if user="" set user=episobj.EPVISUserIDDR
        }
        if date=""!(+time=0)!(user="") b  
        set tsobj.VISTSReasonDR=reason
        set tsobj.VISTSDateOfReason=date
        set tsobj.VISTSTimeOfReason=time
        set tsobj.VISTSUserReasonDR=user
        set tsobj.VISTSStatusResult="A"
        set tsobj.VISTSDateOfLastChange=date
        set tsobj.VISTSTimeOfLastChange=time
        kill vr merge vr=^TEPI(epis,1,ts,npp)
        b  
        if tsobj.%Save() {
	        set ^log("delTestSet",tsid)=$lb(date,time,user.%Id(),"A","OLD") 
	        merge ^log("delTestSet",tsid,"old")=vr 
	        set ^log("delTestSet",tsid,"par")=^||whoDel(tsid)
        }
        ;if ##class(User.EPVisitTestSet).%DeleteId(tsid) {
	    ;    set ^log("deltestSet",tsid)="del" 
	    ;    merge ^log("delTestSet",tsid,"old")=vr 
	    ;    set ^log("delTestSet",tsid,"par")=^||whoDel(tsid)
	    ;    if $$NoTestSet(epis) {
		;       kill vr merge vr=^TEPI(epis)
		;       b  set sc=##class(User.EPVisitNumber).%DeleteId(epis)
		;       if sc merge ^log("delTestSet",epis,"old")=vr   set ^log("delTestSet",epis)="del" 
	    ;    }  
        ;}
        lock -^TEPI(epis)
	 }
   }
 }
 
 if $data(^||whoAutor) {
	 Write !,"Авторизуем "_^||whoAutor_" наборов тестов? " set ans="N" read ans if ans="N" quit
	 set tsid="" 
     for {
        set tsid=$order(^||whoAutor(tsid)) if tsid="" quit
        set epis=$piece(tsid,"||",1),ts=$piece(tsid,"||",2),npp=$piece(tsid,"||",3)
        lock +^TEPI(epis):5 if $t=0 continue
        set tsobj=##class(User.EPVisitTestSet).%OpenId(tsid)
        set date=tsobj.VISTSDateOfEntry if date="" set date=tsobj.VISTSDateOfCreation
        set time=tsobj.VISTSTimeOfEntry if time="" set time=tsobj.VISTSTimeOfCreation
        set user=tsobj.VISTSUserEnteredDR
        if date=""!(+time=0)!(user="") {
	       set episobj=##class(User.EPVisitNumber).%OpenId(epis)
           if date="" set date=episobj.EPVISDateOfEntry 
           if +time=0 set time=episobj.EPVISTimeOfEntry*60
           if user="" set user=episobj.EPVISUserIDDR
        }
        if date=""!(+time=0)!(user="") b  
        
        set tsobj.VISTSDateOfAuthorisation=date
        set tsobj.VISTSTimeOfAuthorisation=time
        set tsobj.VISTSUserAuthorisedDR=user
        set tsobj.VISTSStatusResult="A"
        set tsobj.VISTSDateOfLastChange=date
        set tsobj.VISTSTimeOfLastChange=time
        kill vr merge vr=^TEPI(epis,1,ts,npp)
        b  
        if tsobj.%Save() {
	        set ^log("autorTestSet",tsid)=$lb(date,time,user.%Id(),"A") 
	        merge ^log("autorTestSet",tsid,"old")=vr 
	        set ^log("autorTestSet",tsid,"par")=^||whoAutor(tsid)
        }
        lock -^TEPI(epis)
        
     }
   
 }
 
 
 quit   
 
NoTestSet(epis)
 new (epis)
 set episobj=##class(User.EPVisitNumber).%OpenId(epis)
 if '$IsObject(episobj) quit 0
 set key="",isData=0
	 For  {
	      Set tsobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		  if key="" Quit
	      set isData=1 quit
	 }
 quit $s(isData=0:1,1:0)	
 
 // создание файлов для дистрибутива системы с Jasper
ExportJasperRoutines(dir)
  if $get(dir)="" set dir="c:\work\jasperdistr"
  try {
	  if $get(dir)="" write !,"Введите директорию, где создавать файлы" quit
	  set dir=$tr(dir,"/","\")
      set dir=dir_$select($extract(dir,$length(dir))'="\":"\",1:"")
      
	  // выгрузка файлов для установки системы
      kill items
      set items("Report.Jasper.install.INT")=""
      set items("Report.JasperReportTune.CLS")=""
      set items("Report.ReportStartJasper.CLS")=""
      set items("ReportZEN.settings.CLS")=""
      set fileName=dir_"prginstall.xml"  
      do CreateFileWithRoutines(fileName,.items)
      
      // выгрузка файлов для работы системы
      kill items
      set items("Report.JasperReportTune.CLS")=""
      set items("Report.rpt.CLS")=""
      set items("ReportZEN.ReportApplication.CLS")=""
      set items("ReportZEN.downloadFile.CLS")=""
      set items("ReportZEN.closepage.CLS")=""
      set items("ReportZEN.progressReport.CLS")=""
      set items("ReportZEN.genReportJasper.CLS")=""
      set items("ReportZEN.genReportJasper0.CLS")=""
      set items("ReportZEN.reportJasperAbstract.CLS")=""
      set items("ReportZEN.reportJasperAbstract0.CLS")=""
      set items("ReportZEN.settings.CLS")=""
      set items("TCLEx.VBReport.INT")=""
      set fileName=dir_"genJasperReport.xml"  
      do CreateFileWithRoutines(fileName,.items)
       
      // выгрузка proxy-файлов for isc.jasper 
      kill items
      set items("isc.jasper.Func.CLS")=""
      set items("isc.jasper.JasperFacade.CLS")=""
      set items("isc.jasper.JasperFacadeDop.CLS")=""
      set items("isc.pdfbox.PdfboxFacade.CLS")=""
      set items("isc.jodconverter.jodconverterFacade.CLS")=""
      set items("isc.WordToPDF.CreatePDFfromWordEMC.CLS")=""
      set items("isc.utils.processUtils.CLS")=""
      set fileName=dir_"isc.jasper.xml"  
      do CreateFileWithRoutines(fileName,.items) 
      
      /*
      // программы для печати рабочих листов
      kill items
      // программы для печати рабочих листов
      //set items("Report.Function.general.CLS")=""
      //set items("Report.Function.TestSet.CLS")=""
      //set items("Report.FinancialEntity.CLS")=""
      //set items("ReportZEN.WSrpt.CLS")=""
      //set items("ReportZEN.WSsimple.CLS")=""
      //set items("PRTWKSPRU01.INT")=""
      //set items("PRTWKSPSPB06.INT")=""
      //set items("PRTWKSPSPB06a.INT")=""
      //set items("KSPCLUtils.INT")=""
      //set items("UDFSPARM001.INT")=""
      // эта программа Сергея , я добавляла туда функцию 
      //set items("KSReportSQL.MAC")=""
      set fileName=dir_"reports.xml"  
      do CreateFileWithRoutines(fileName,.items)
      */
      
      // вспомогательные классы для ZEN report
      set nsold=$zu(5)
      zn "%SYS"
      kill items
      set items("%ZEN.Report.Display.focall.CLS")=""
      set items("%ZEN.Report.Display.document.CLS")=""
      set fileName=dir_"zendop.xml" 
      do CreateFileWithRoutines(fileName,.items)
      zn nsold
      
  } catch(exception) {
	  do $system.OBJ.DisplayError(exception.AsStatus())
  }
 quit
 
CreateFileWithRoutines(fileName,items) 
 try {
	  if ##class(%File).Exists(fileName) do ##class(%File).Delete(fileName)
	  kill errorlog
	  write !,"Export if file "_fileName
      do $System.OBJ.Export(.items,fileName,"",.errorlog)
      if $data(errorlog) zw errorlog
 } catch(exception) {
	  do $system.OBJ.DisplayError(exception.AsStatus())
 }
  quit 
  
]]></Routine>
</Export>
