<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Report.EpisodePCL">
<Super>%Persistent</Super>
<TimeCreated>62306,36351.87447</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("1",department,line,num)=$lb(offset,value,style)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("2",offset_$c(1)_width_$c(1)_lastRightPoint)=numField - for collect all offsets

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("3",department,line,offset,num)="" - for define widthField

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("field",numField)=$lb(offset,widthField,factorProporcional)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//@refTmp@("data",department,line,numField)=$lb(offset,value,style)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//2321000345 - микробиология

]]></Content>
</UDLText>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[codeEpisode:%String,refTmp:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set result=$$$OK
  try {
    set r=$char(0),r1=$char(1),r2=$char(2)
    kill @refTmp	
    do ##class(Report.EpisodePCL2).getVspData(codeEpisode, refTmp, .pTestSets)

   	set numField=0,margin=3
   	set department="" 
   	for {
	   set department=$order(@refTmp@("2",department)) if department="" quit
	   set maxCountLine=45 if department="H"!(department="D") set maxCountLine=47 
	   set pageMax=$order(@refTmp@("1",department,""),-1) 
   	   set key=""
   	   for {
	        set key=$order(@refTmp@("2",department,key)) if key="" quit
	   	    set numField=numField+1
	   	    set offset=$piece(key,r1,1)+margin
	   	    set width=$piece(key,r1,2),lastRightPoint=$piece(key,r1,3)+margin
	   	    set factor=0,specSign=$piece(key,r1,4),style=$piece(key,r1,5)
	   	    set @refTmp@("field",numField)=$lb(offset,width,factor,lastRightPoint,specSign,style)
	   	    set @refTmp@("field2",department,numField)=""
	  	   	set lineNumNew=0 
		   	for page=1:1:pageMax {
		   	    for line=1:1:maxCountLine {
			        set lineNumNew=lineNumNew+1 
			        if '$data(@refTmp@("data",department,lineNumNew)) set @refTmp@("data",department,lineNumNew)=page
			        set num="" 
			     	for {
				    	set num=$order(@refTmp@("2",department,key,page,line,num)) if num="" quit
				    	set rec=$get(@refTmp@("1",department,page,line,num))
				    	set value=$li(rec,2) ;set specSign=##class(Report.EpisodePCL2).specSign(value)
				    	set @refTmp@("data",department,lineNumNew,numField)=rec
				    }
		    	}
	     	}
	     	;if specSign'="" set $li(@refTmp@("field",numField),5)=specSign
	   }
   	   
    }
   	
   	set @refTmp@("data")=codeEpisode
   	set @refTmp@("field")=$lb(numField)  ;_$c(0)_offsetLast_$c(0)_widthLetter
   	 
   	set department="" 
   	for {
	   set department=$order(@refTmp@("field2",department)) if department="" quit
   	   set numField="",maxLastRightPoint=0
       for {
	        set numField=$order(@refTmp@("field2",department,numField)) if numField="" quit
	        set lastRightPoint=$li(@refTmp@("field",numField),4)
	        if lastRightPoint>maxLastRightPoint set maxLastRightPoint=lastRightPoint
       }
       set factor=##class(Report.EpisodePCL).getFactorProportional(maxLastRightPoint)
       set numField=""
       for {
	        set numField=$order(@refTmp@("field2",department,numField)) if numField="" quit
	        set $li(@refTmp@("field",numField),3)=factor
	   }
   	}   	
   	/*
   	set offsetLast=$o(@refTmp@("2",""),-1)
   	s field="" 
   	for {
	   	set field = $order(@refTmp@("field",field)) if field="" quit
	   	set style=$listget(^(field),4) 
	   	s widthLetter=6.2
	   	;if style="NORMAL" set widthLetter=6
	   	;if style="RES-UNITS" set widthLetter=6
	   	;if style="RES-RR" set widthLetter=6
	   	;if style="RES-ABNORMAL" set widthLetter=6
	   	set $li(@refTmp@("field",field),3)=widthLetter
   	}
   	set widthLetter=6.2 if offsetLast>80 set widthLetter=5
   	set @refTmp@("field")=numField_$c(0)_offsetLast_$c(0)_widthLetter
  	*/	
	
	if $data(@refTmp@("data"))<10 k @refTmp
	
	if $data(@refTmp) do ..doParams(codeEpisode, refTmp)
  	 	
  }  
  catch exception 
  {
	  Set result=exception.AsStatus()
  }
  k ^test("epi",codeEpisode,"data")
  m ^test("epi",codeEpisode,"data")=@refTmp
 
  quit result
]]></Implementation>
</Method>

<Method name="doParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>codeEpisode:%String,refTmp:%String</FormalSpec>
<Implementation><![CDATA[
	  k @refTmp@("params"),@refTmp@("paramDep")
	  do ##class(Report.EpisodeMB).doParams(codeEpisode,$na(@refTmp@("params")),"")
	  ;do SetVals^PRTDR0RU02(codeEpisode,,$na(@refTmp@("params")))
	  ;set numOrder=##class(Report.Function).getNumOrder(codeEpisode)
	  ;set @refTmp@("params","Vals","NumOrder")=numOrder
	  ;set @refTmp@("params","Vals","NumEpisode")=codeEpisode
	  
	  // optional fields in prog  SetVals^PRTDR0RU02
	  ;for node="Doctor","Sex","SexCode","CyclePhase","НospitalCode","Нospital","nameDepartment","fioDoctor","dateOut" {
	  ;    if $get(@refTmp@("params","Vals",node))="" set @refTmp@("params","Vals",node)=""
	  ;}
	  set recField=$get(@refTmp@("field"))
	  set kolAllPages=+$listget(recField,2)
	  set @refTmp@("params","Vals","kolAllPages")=kolAllPages
	  set @refTmp@("params","Vals","refTmp")=refTmp
	  set @refTmp@("params","Vals","kolFields")=+$listget(recField,1)
	  set @refTmp@("params","Vals","pathJRXML")=##class(Report.JasperReportTune).getPathFileJasper()
	  
      set department="" 
   	  for {
	      set department=$order(@refTmp@("data",department)) if department="" quit
	      do ##class(Report.EpisodeMB).doParams(codeEpisode,$na(@refTmp@("paramDep",department)),department)
	      ;do SetVals^PRTDR0RU02(codeEpisode,department,$na(@refTmp@("paramDep",department)))
	      ;set @refTmp@("paramDep",department,"Vals","NumOrder")=numOrder
	      ;set @refTmp@("paramDep",department,"Vals","NumEpisode")=codeEpisode
	      // optional fields in prog  SetVals^PRTDR0RU02
	      ;for node="Doctor","Sex","SexCode","CyclePhase","НospitalCode","Нospital","nameDepartment","fioDoctor","dateOut" {
	      ;   if $get(@refTmp@("paramDep",department,"Vals",node))="" set @refTmp@("paramDep",department,"Vals",node)=""
	      ;}
	      set @refTmp@("paramDep",department,"Vals","sectionName")=$$ResultsHeader^PRTDR0RU02(codeEpisode,department)
	      set @refTmp@("paramDep",department,"Vals","initPage")=+$piece($get(@refTmp@("field",department)),$c(0),4)
	      set @refTmp@("paramDep",department,"Vals","kolAllPages")=kolAllPages
   	}
]]></Implementation>
</Method>

<Method name="getFactorProportional">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastRightPoint:%Integer</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	if lastRightPoint<98 quit 5.9
	if lastRightPoint<103 quit 5.6
	if lastRightPoint<109 quit 5.3
	if lastRightPoint<115 quit 5
	if lastRightPoint<120 quit 4.8
	if lastRightPoint<125 quit 4.6
	if lastRightPoint<131 quit 4.4
	quit 4
]]></Implementation>
</Method>

<Query name="queryRpt">
<Description>
Query for main report</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="department:%String,nameDepartment:%String,fioDoctor:%String,dateOut:%String,sectionName:%String,numPage:%String,Field1:%String,Field2:%String,Field3:%String,Field4:%String,Field5:%String,Field6:%String,Field7:%String,Field8:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field9:%String,Field10:%String,Field11:%String,Field12:%String,Field13:%String,Field14:%String,Field15:%String,Field16:%String,Field17:%String,Field18:%String,Field19:%String,Field20:%String,Field21:%String,Field22:%String,Field23:%String,Field24:%String,Field25:%String,Field26:%String,Field27:%String,Field28:%String,Field29:%String,Field30:%String,Field31:%String,Field32:%String,Field33:%String,Field34:%String,Field35:%String,Field36:%String,Field37:%String,Field38:%String,Field39:%String,Field40:%String,Field41:%String,Field42:%String,Field43:%String,Field44:%String,Field45:%String,Field46:%String,Field47:%String,Field48:%String,Field49:%String,Field50:%String"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set codeEpisode=$get(@refTmp@("data"))
  	set $li(qHandle,1)=refTmp
  	set $li(qHandle,2)=""
  	set $li(qHandle,3)=""
  	set $li(qHandle,4)=codeEpisode
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,1) ;if refTmp=""!(refTmp=$c(0)) set Row="",AtEnd=1 quit $$$OK
	set department=$listget(qHandle,2)
	set line=$listget(qHandle,3)
   	if department="" set department=$order(@refTmp@("data",department)) if department="" set Row="",AtEnd=1 quit $$$OK
	set line=$order(@refTmp@("data",department,line)) 
	if line="" {
		set department=$order(@refTmp@("data",department)) if department="" set Row="",AtEnd=1 quit $$$OK
		set line=$order(@refTmp@("data",department,line))
	}
	s Row=""
	set nameDepartment=$get(@refTmp@("paramDep",department,"Vals","TS_DepartmentName"))
	set fioDoctor=$get(@refTmp@("paramDep",department,"Vals","TS_AuthorisedDoctor"))
	//if fioDoctor="" set fioDoctor=$get(@refTmp@("params","Vals","Doctor"))
	set dateOut=$get(@refTmp@("paramDep",department,"Vals","TS_DateOfAuthorisation"))
	set sectionName=$get(@refTmp@("paramDep",department,"Vals","sectionName"))
	set numPage=+$get(@refTmp@("data",department,line))
	set $li(Row,1)=department
	set $li(Row,2)=nameDepartment
	set $li(Row,3)=fioDoctor
	set $li(Row,4)=dateOut
	set $li(Row,5)=sectionName
	set $li(Row,6)=numPage
	set numField="" 
	for {
		set numField=$order(@refTmp@("data",department,line,numField)) if numField="" quit
		set rec=^(numField)
		set $li(Row,numField+6)=$li(rec,2)
	}
	set $li(qHandle,2)=department
	set $li(qHandle,3)=line
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("Report.EpisodePCL:queryRpt")
  do rset.Execute($na(^temp($j,"result")))
  while rset.Next() { 
     w !,rset.Data("department")," ",rset.Data("Field1")," ",rset.Data("Field2")," ",rset.Data("Field3")," ",rset.Data("Field4")
     w " ",rset.Data("Field5")," ",rset.Data("Field6")," ",rset.Data("Field7")," ",rset.Data("Field8")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryStruct">
<Description>
Query for generate setTest report</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="numberField:%Integer,offsetField:%Integer,widthField:%Integer,factorProportional:%Float,specSign:%String,specStyle:%String"/>
</Query>

<Method name="queryStructExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryStructExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryStructFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryStructSetTestExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("field",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set rec=$get(@refTmp@("field",item))
	set $li(Row,1)=item
	set $li(Row,2)=$li(rec,1)
	set $li(Row,3)=$li(rec,2)
	set $li(Row,4)=+$li(rec,3)
	set $li(Row,5)=$listget(rec,5)
	set $li(Row,6)=$listget(rec,6)
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryStruct">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set refTmp=$na(^temp($j))
  SET rset=##class(%ResultSet).%New("Report.EpisodePCL:queryStruct")
  do rset.Execute(refTmp)
  while rset.Next() { 
     w !,rset.Data("numberField")," ",rset.Data("offsetField")," ",rset.Data("widthField")
  }	
  do rset.Close()
]]></Implementation>
</Method>

<Query name="queryParameters">
<Description>
Query all parameters from refTmp - не используется</Description>
<Type>%Query</Type>
<FormalSpec>refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="parameterName:%String,parameterValue:%String"/>
</Query>

<Method name="queryParametersExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryParametersFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryParametersExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@("params","Vals",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(Row,2)=$get(@refTmp@("params","Vals",item))
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="startRptNew">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[codeEpisode:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //set refTmp="^||episodeUse"
  set refTmp=$na(^CacheTempUserEpi($j)) k @refTmp
  set format="pdf"
  set fileReport = "c:\\temp\\"_##class(TCLEx.Function.PCL2PDF).PCLFileName(codeEpisode,.pTestSets) ;"c:\\temp\\epi"_codeEpisode_"."_format
  set $p(fileReport,".",$length(fileReport,"."))=format
  
  //set codeEpisode="269100010101"
  //для варианта с group
  set sc=..getData(codeEpisode, $na(@refTmp@("result")), .pTestSets ) if 'sc quit sc
  //для варианта с отдельными отчетами по каждому отделу
  //set sc=##class(Report.EpisodePCL2).getData(codeEpisode, $na(@refTmp@("result")), .pTestSets ) if 'sc quit sc
  if '$data(@refTmp@("result")) Quit $$$ERROR($$$GeneralError,"Нет данных по эпизоду "_codeEpisode)
  
  set result=$$$OK
  try {
	   k params merge params=@refTmp@("result","params","Vals")
	   //для варианта с отдельными отчетами по каждому отделу
	   //$$$ThrowOnError(##class(Report.rpt).startRptNew("isc.jasper.rptEpisodePCL2", "startReport", fileReport, .params))
	   //для варианта с group
       $$$ThrowOnError(##class(Report.rpt).startRptNew("isc.jasper.rptEpisodePCL", "startReport", fileReport, .params))
  }
  catch exception
		{
			Set result=exception.AsStatus()
		}     
  
 kill @refTmp		
 quit result
]]></Implementation>
</Method>

<Method name="getPrintableTestSets">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[codeEpisode:%String,&pTestSets:%String]]></FormalSpec>
<Implementation><![CDATA[
	   Set episobj=##class(User.EPVisitNumber).%OpenId(codeEpisode)
	    If '$IsObject(episobj) quit
		Set key=""
		For  {
			Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			If key="" Quit
			If '$IsObject(testsetobj) Continue
			If '##class(TCLEx.Function.TestSet).IsPrintable(testsetobj) Continue ; Пропускаем неавторизованные или отмененные TestSet-ы
			set pTestSets(testsetobj.%Id())=""
		}
]]></Implementation>
</Method>

<Query name="queryListEpisodes">
<Description>
Query all parameters from refTmp</Description>
<Type>%Query</Type>
<FormalSpec>dateFrom:%Date,dateTo:%Date,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="codeEpisode:%String"/>
</Query>

<Method name="queryListEpisodesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,dateFrom:%Date,dateTo:%Date,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if refTmp="" Quit $$$ERROR($$$GeneralError,"Пустая ссылка")
  	//if ..getEpisodes(dateFrom, dateTo , refTmp)
  	//if '$data(@refTmp) Quit $$$ERROR($$$GeneralError,"Нет данных")
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryListEpisodesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryListEpisodesExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2)
	set item=$listget(qHandle,1)
	set item=$order(@refTmp@(item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryListEpisodesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryListEpisodesExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="vspSpecSign">
<ClassMethod>1</ClassMethod>
<FormalSpec>refTmp:%String</FormalSpec>
<Implementation><![CDATA[
	set dep=""
	for {
	    set dep=$order(@refTmp@("PCL",dep)) if dep="" quit
	    set page=""
	    for {
		    set page=$order(@refTmp@("PCL",dep,page)) if page="" quit
		    set line=""
		    for {
			    set line=$order(@refTmp@("PCL",dep,page,line)) if line="" quit
			    set npp=""
			    for {
				    set npp=$order(@refTmp@("PCL",dep,page,line,npp)) if npp="" quit
				    set rec=^(npp)
				    if $find(rec,"FLAG-HIGH")!$find(rec,"FLAG-LOW") w !,dep," ",page," ",line," ",npp b  
			    }
		    }
	    }	
	}
]]></Implementation>
</Method>

<Projection name="javaProjection">
<Type>%Projection.Java</Type>
<Parameter name="ROOTDIR" value="C:\work\jasper"/>
</Projection>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Report.EpisodePCLD</DataLocation>
<DefaultData>EpisodePCLDefaultData</DefaultData>
<IdLocation>^Report.EpisodePCLD</IdLocation>
<IndexLocation>^Report.EpisodePCLI</IndexLocation>
<StreamLocation>^Report.EpisodePCLS</StreamLocation>
<Data name="EpisodePCLDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
