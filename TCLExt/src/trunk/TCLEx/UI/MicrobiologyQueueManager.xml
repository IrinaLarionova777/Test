<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.UI.MicrobiologyQueueManager">
<Description>
Обработка очереди создания pdf-файлов по заказанным микробиологическим наборам тестов (liv)</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>62649,40906.540356</TimeCreated>

<Parameter name="QUEUERESOURCENAME">
<Description>
Имя ресурса, соответствующего очереди </Description>
<Default>^TCLEx("Microbiology","episode")</Default>
</Parameter>

<Parameter name="STOPPINGQUEUERESOURCENAME">
<Description>
Имя ресурса-семафора, наличие которого сигнализирует о том, что выполняется штатный останов процесса/процессов обработки очереди </Description>
<Default>^Settings("Microbiology","stop")</Default>
</Parameter>

<Parameter name="PATHTEMPFILES">
<Description>
Путь к временным файлам</Description>
<Default>^Settings("Microbiology","pathTemp")</Default>
</Parameter>

<Parameter name="PATHBASEFILES">
<Description>
Путь к окончательным файлам</Description>
<Default>^Settings("Microbiology","baseTemp")</Default>
</Parameter>

<Parameter name="WAITINTERVAL">
<Description>
Продолжительность (в секундах) каждой итерации ожидания появления нового сообщения в очереди</Description>
<Default>3</Default>
</Parameter>

<Method name="getResourceName">
<Description>
Имя ресурса, соответствующего очереди</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ..#QUEUERESOURCENAME
]]></Implementation>
</Method>

<Method name="getStoppingResourceName">
<Description>
Имя ресурса-семафора, наличие которого сигнализирует о том, что выполняется штатный останов процесса/процессов обработки очереди</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ..#STOPPINGQUEUERESOURCENAME
]]></Implementation>
</Method>

<Method name="getWaitInterval">
<Description>
Время паузы</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ..#WAITINTERVAL
]]></Implementation>
</Method>

<Method name="getPathTempFiles">
<Description>
Путь к временным файлам</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=$get(@..#PATHTEMPFILES)
	if path="" {
		set path=$$Path^REPORTSPB()_"\Microbiology\temp\"
	}
	quit path
]]></Implementation>
</Method>

<Method name="getPathBaseFiles">
<Description>
Путь к окончательным файлам</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=$get(@..#PATHBASEFILES)
	if path="" {
		set path=$$Path^REPORTSPB()_"\Microbiology\base\"
	}
	quit path
]]></Implementation>
</Method>

<Method name="setPathTempFiles">
<Description>
Установить путь к временным файлам</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $get(path)="" quit $$$ERROR($$$GeneralError, "Путь к временным файлам не указан")
	set sc=$$$OK
	try {
		set path=$translate(path,"/","\")
	    if $extract(path,$length(path))'="\" set path=path_"\"
	    set @..#PATHTEMPFILES=path
	} catch(exception) {
		set sc=exception.AsStatus()
	}    
	quit sc
]]></Implementation>
</Method>

<Method name="setPathBaseFiles">
<Description>
Установить путь к временным файлам</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $get(path)="" quit $$$ERROR($$$GeneralError, "Путь к файлам не указан")
	set sc=$$$OK
	try {
		set path=$translate(path,"/","\")
	    if $extract(path,$length(path))'="\" set path=path_"\"
	    set @..#PATHBASEFILES=path
	} catch(exception) {
		set sc=exception.AsStatus()
	}    
	quit sc
]]></Implementation>
</Method>

<Method name="dequeueLoop">
<Description>
Обработка очереди</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set sc=$$$OK
  try {
    // необходимые пути
	set pathReportTemp=..getPathTempFiles()
	set pathReportBase=..getPathBaseFiles()
	if pathReportTemp=""||(pathReportBase)="" $$$ThrowOnError($$$ERROR($$$GeneralError,"Не указаны пути к файлам"))
	// если директории не существуют, то создаем
	if '##class(%File).Exists(pathReportTemp) do ##class(%File).CreateDirectoryChain(pathReportTemp)
	if '##class(%File).Exists(pathReportBase) do ##class(%File).CreateDirectoryChain(pathReportBase)
    // интервал пауза
	set waitinterval=..getWaitInterval()

    set ref=..getResourceName()
    Lock +@ref:5 else  quit	
	// "вечный" цикл обработки очереди
	while (1)
	{
		set department=""
		for {
			set department=$order(@ref@(department)) if department="" quit
			if ..isStopping() quit  // ...проверяем, не инициирован ли останов
			set episode=""
			for {
				set episode=$order(@ref@(department,episode)) if episode="" quit
				if ..isStopping() quit  // ...проверяем, не инициирован ли останов
				
				set horologQuery=$get(@ref@(department,episode))
				set horolog=$h
				// печатаем только эпизоды, для которых с момента выставления на печать прошло более 2 секунд (чтобы исключить промежуточные формирования файла)
				if (+horologQuery=+horolog)&&(($piece(horolog,",",2)-$piece(horologQuery,",",2))<2) continue
				
				// if episod had been suspended more 7 days - delete it
				if ((horolog-horologQuery)>7) {
					kill @ref@(department,episode)
					continue
				}
				
				lock +@ref@(department,episode)
				set sc=##class(Report.EpisodeMB).startRptMBepisodeAuto(episode,department,pathReportTemp,pathReportBase)
				if sc {
					// если за время формирования файла, этот же эпизод изменился, то оставляем задание
					if $get(@ref@(department,episode))=horologQuery {
					    kill @ref@(department,episode)
					}
				}
				else {
	                 if $extract($System.Status.GetErrorText(sc),1,35)="ОШИБКА #5001: Нет данных по эпизоду" {
		                if $get(@ref@(department,episode))=horologQuery {
					       kill @ref@(department,episode)
					    }       
	                 }
	                 else {
		                 set ^logError("Microbiology",department,episode,+horolog)=sc	
	                 }
				}
				lock -@ref@(department,episode)
			}
		}
		if ..isStopping() quit // ...проверяем, не инициирован ли останов
		hang waitinterval
	}
	Lock -@ref
  } catch ex {
	   set sc=ex.AsStatus()
	   if $get(ref)'="" Lock -@ref
	   set ^logError("Microbiology",$i(^logError("Microbiology")))=$h_"\"_$get(department)_"|"_$get(episode)_"\"_sc
  }
]]></Implementation>
</Method>

<Method name="enqueue">
<Description>
Помещение нового сообщения в очередь</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>department:%String,episode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status
	set sc=$$$OK
    
    // проверяем наличие ресурса-семафора, наличие которого сигнализирует о том, что выполняется штатный останов
	if ..isStopping() quit $$$ERROR($$$GeneralError, "Выполняется штатный останов процесса/процессов обработки очереди")

    Try {
	     // проверяем наличие ресурса, соответствующего очереди
	     if '..isStarted() $$$ThrowOnError(..start())
         // lock не поставлен сознательно
   	     set @..getResourceName()@(department,episode)=$h
   	     
	} catch(exception) {
		set sc=$$$ERROR($$$GeneralError, "Не удалось поместить эпизод "_$get(episode)_" в очередь: "_exception.AsStatus())
		set ^logError("Microbiology",$i(^logError("Microbiology")))=$h_"\"_department_"|"_episode_"\"_exception.AsStatus()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="start">
<Description>
Запуск процессов обработки очереди.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// запускаем процесс обработки очереди
	set sc=$$$OK
	try
	{
		// на всякий случай удаляем ресурс-семафор, наличие которого сигнализирует о том, что выполняется штатный останов
	    set @..getStoppingResourceName()=0
		
		job ..dequeueLoop()
	}
	catch ex
	{
		set sc = ex.AsStatus()
		//do ..stopImmediately()
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="stop">
<Description>
Инициирование штатного останова, предусматривающего обработку оставшихся в очереди сообщений</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// создаем ресурс-семафор, наличие которого сигнализирует о том, что выполняется штатный останов
	set @..getStoppingResourceName()=1
	quit $$$OK
]]></Implementation>
</Method>

<Method name="nostop">
<Description>
Инициирование штатной отмены флага на останов</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// создаем ресурс-семафор, наличие которого сигнализирует о том, что выполняется штатный останов
	set @..getStoppingResourceName()=0
	quit $$$OK
]]></Implementation>
</Method>

<Method name="isStopping">
<Description>
Проверка, не выполняется ли штатный останов процесса обработки очереди</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit +$get(@..getStoppingResourceName())
]]></Implementation>
</Method>

<Method name="isStarted">
<Description>
Проверка того, что был запущен процесс обработки очереди</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	l +@..getResourceName():0 else  quit 1
	l -@..getResourceName()
	quit 0
]]></Implementation>
</Method>
</Class>
</Export>
