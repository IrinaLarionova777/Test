<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.ReportZEN.menuTreeView">
<Description>
Использование дерева отчетов</Description>
<Super>%ZEN.Component.page</Super>
<TimeCreated>62724,40375.41104</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>JasperWrap.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Contents">
<Description>
This Style block contains page-specific CSS style definitions.
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">
<html id="title">Меню отчетов</html>
<vgroup width="100%">
<expando id="%forInnerUseMenuMain" caption="Меню отчетов" childIndent="25px" >
</expando>
</vgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	 $$$ThrowOnError(..refresh())
     } catch(exception) 
  {
	   set ok=exception.AsStatus()	
  }
  quit ok
]]></Implementation>
</Method>

<Method name="refresh">
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
    set ref=$na(^test("menu"))
    set len=$length(ref) if $extract(ref,len)=")" set len=len-1
	set pattern=$extract(ref,1,len)
    set id=$query(@ref@("")) 
    if id'=""&&($extract(id,1,len)=pattern) {
	    set qnodes=$length(id,",")
        do ..createItem(id,len)
	        for {
		        set id=$query(@id) if id=""||($extract(id,1,len)'=pattern) quit
		        //s ^test(5,$i(^test(5)))=id   
		        set qnodescur=$length(id,",")
                do ..createItem(id,len)
            }
     }
  } catch(exception) 
  {
	   set ok=exception.AsStatus()	
  }
  quit ok
]]></Implementation>
</Method>

<Method name="createItem">
<FormalSpec>ref:%String,len:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	// name of parent
	set nameparent=$piece($extract(ref,len+2,$length(ref)),")",1)
	set nameparent=$piece(nameparent,",",1,$length(nameparent,",")-1)
	set nameparent="%forInnerUseMenuMain"_"*"_$translate(nameparent,"*"," ")
	//s ^test(1,$i(^test(1)))=nameparent
	set parent=%page.%GetComponentById(nameparent)
	if '$IsObject(parent) {
		set parent=%page.%GetComponentById("%forInnerUseMenuMain")
		set nameparent="%forInnerUseMenuMain"
	}
	// name of item
	set nameItem=$piece($piece(ref,")",1),",",$length(ref,","))
	set nameItem=nameparent_"*"_$translate(nameItem,"*"," ")
	
	// test exist item
	set itemobj=%page.%GetComponentById(nameItem)
	if $IsObject(itemobj) quit

	if parent'=""&&($IsObject(parent)) {
		if $data(@ref)'<10	{
			Set item = ##class(%ZEN.Component.expando).%New()
			set item.caption=$piece($get(@ref),$char(0),1)
			set item.childIndent="35px"
		}
		else {
			 //Set item = ##class(%ZEN.Component.button).%New()
			 Set item = ##class(%ZEN.Component.link).%New()
			 set item.caption=$piece($get(@ref),$char(0),1)
		}
		set item.id=nameItem
		//s ^test(3,$i(^test(3)))=ref_"*"_parent_"*"_nameparent_"*"_nameItem_"*"_len
		do parent.%AddChild(item)
		Set spacer = ##class(%ZEN.Component.spacer).%New()
        Set spacer.height=1
        do parent.%AddChild(spacer)	
	}
]]></Implementation>
</Method>
</Class>
</Export>
