<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.ReportZEN.TurnaroundTimeData">
<Super>%RegisteredObject</Super>
<TimeCreated>62728,59228.807254</TimeCreated>

<Query name="queryRpt">
<Type>%Query</Type>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pTestSet:%String,pPatientLocations1:%String,pPatientLocations2:%String,pPatientType:%String,pTestGroup:%String,pPatientLocationType:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="date:%String,total:%Float,mean:%Float,median:%Float,val90:%Float,totalI:%Float,meanI:%Float,medianI:%Float,val90I:%Float"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pDateFrom:%String,pDateTo:%String,pTestSet:%String,pPatientLocations1:%String,pPatientLocations2:%String,pPatientType:%String,pTestGroup:%String,pPatientLocationType:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ret=$$$OK
 if $tr(pDateFrom,$char(0),"")=""||($tr(pDateTo,$char(0),"")="") quit $$$OK
 try {
  	set $li(qHandle,1)=""
  	
  	set pPatientType="" //$tr(pPatientType,$char(0),"")
  	set pTestSet=$tr(pTestSet,$char(0),"")
  	set pTestGroup="" //$tr(pTestGroup,$char(0),"")
  	set pPatientLocationType="" //$tr(pPatientLocationType,$char(0),"")
  	set pPatientLocations=pPatientLocations1_pPatientLocations2
  	set pPatientLocations=$tr(pPatientLocations,$char(0),"")
    do ##class(TCLEx.ReportZEN.TurnaroundTimeData).getData(pPatientLocations,pPatientType,$zdh(pDateFrom,3),$zdh(pDateTo,3),pTestSet,pTestGroup,pPatientLocationType)
    kill ^||TMP($j,"query")
    set refTmp=$name(^||TMP($j,"Report"))
    set refTmpI=$name(^||TMP($j,"ReportI"))
    set group="",npp=0,r=$char(1)
    for {
       set group=$order(^||TMP($j,"Report",group)) if group="" quit
       set npp=npp+1
       set ^||TMP($j,"query",npp)=$zd(group,4)_r_$get(^||TMP($j,"Report",group))_r_$get(^||TMP($j,"Report"))
    }
    //m ^test(111,"query")=^||TMP($j,"query")
 } catch(exception)
 {
     set ret=exception.AsStatus()
 }	
 quit ret
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try {
	set item=$listget(qHandle,1)
	set item=$order(^||TMP($j,"query",item))
	if item="" {
		set Row="",AtEnd=1
	} 
	else {
	  set rec=$get(^||TMP($j,"query",item))
	  //ROWSPEC = "date:%String,total:%Float,mean:%Float,median:%Float,val90:%Float,totalI:%Float,meanI:%Float,medianI:%Float,val90I:%Float"
	  set $li(Row,1)=$piece(rec,$char(1),1)
	  set result=$piece(rec,$char(1),2)
	  set $li(Row,2)=$piece(result,"\",1)
	  set $li(Row,3)=$piece(result,"\",2)
	  set $li(Row,4)=$piece(result,"\",3)
	  set $li(Row,5)=$piece(result,"\",4)
	  set result=$piece(rec,$char(1),3)
	  //set resultI=$get(^||TMP($j,"Report"))
	  set $li(Row,6)=$piece(result,"\",1)
	  set $li(Row,7)=$piece(result,"\",2)
	  set $li(Row,8)=$piece(result,"\",3)
	  set $li(Row,9)=$piece(result,"\",4)
	  set $li(qHandle,1)=item
	  set AtEnd=0
	}
 } catch(exception)
  {
     set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="TestqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 Set result=##class(%ResultSet).%New("TCLEx.ReportZEN.TurnaroundTimeData:queryRpt")
 Do result.Execute("2012-08-01","2012-09-30","A005","AMB,AXIS,D1,D10,D2,D3,D4,D5,D6,D7,D8,D9,DBT,PH,REAN","","","")
 For  Quit:'result.Next()  Do
 . Write result.Data("date")," ",result.Data("total")," ",result.Data("mean"),!
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// pTestGroup Не используется (до вызова этой функциии учше из групп сразу создать pTestSet)

]]></Content>
</UDLText>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pPatientLocations:%String,pPatientType:%String,pDateFrom:%String,pDateTo:%String,&pTestSet:%String,pTestGroup:%String,pPatientLocationType:%String]]></FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ret=$$$OK
 try {
 kill ^||TMP($j)
 /*
 ; check authorised date
 set date=pDateFrom-1,cnt=0,total=0 
 for {
     set date=$order(^TEPIi("AUTHORISED",date)) 
     if date=""||(date>pDateTo) quit
     set epis=""
	 for {
	    set epis=$order(^TEPIi("AUTHORISED",date,epis))
	    if epis="" quit
	    */
 kill ^||TMP($j)
 
 set index=4 //^TDAY( 4, {EPVIS_DateOfEntry}, {EPVIS_StatusPatient}, {EPVIS_VisitNumber} )
   set date=pDateFrom-1 
   for {
	set date=$order(^TDAY(index,date)) 
	if date=""||(date>pDateTo) quit
	set status=""
	for {
	  set status=$order(^TDAY(index,date,status))
	  if status="" quit
	  set epis=""
	  for {
		set epis=$order(^TDAY(index,date,status,epis))
		if epis="" quit
		if $data(^||TMP($j,"epis",epis)) continue
		set ^||TMP($j,"epis",epis)=""
		// обработка эпизода
	    if $$select^LVBEPVIS(epis,"Y") continue
	    merge VISIT=PLIST kill PLIST
        if $l(pPatientLocations) {
	        if VISIT(22)="" continue
	        if VISIT(22)'=""&&((","_pPatientLocations_",")'[(","_VISIT(22)_",")) continue  // Hospital code DR
        }
        if $l(pPatientType) {
	        if VISIT(93)="" continue
	        if VISIT(93)'=""&&((","_pPatientType_",")'[(","_VISIT(93)_",")) continue 
        } 
        if $l(pPatientLocationType)&&('$$select^LVBCTHOS(VISIT(22),"Y"))&&(PLIST(19)'=pPatientLocationType) continue
        // datetime begin for TAT
        set time1=""
        set ts="" 
        for {
	       set ts=$order(^TEPI(epis,1,ts)) if ts=""||(time1=0) quit
           if $data(pTestSet),'$data(pTestSet(ts)) continue
           /*
           if time1="" {
	           // datetime begin for TAT
               set time1=..GetDateStartForTAT(.VISIT)
               if +time1=0 continue 
           }
           */
           set seq=""
           for {
	           set seq=$order(^TEPI(epis,1,ts,seq),1,rects) if seq="" quit
	           set rec=^(seq)
               set dateAuthorised=$piece(rec,"\",4)
               set timeAuthorised=$piece(rec,"\",5)
               if +dateAuthorised=0||(+timeAuthorised=0) continue
                  
               set dateOfCollection=$piece(rects,"\",44)
               set timeOfCollection=$piece(rects,"\",45)
               set dateOfReceiving=$piece(rects,"\",57)
               set timeOfReceiving=$piece(rects,"\",58)
               set dateOfCreation=$piece(rects,"\",21)
               set timeOfCreation=$piece(rects,"\",22)
               
               set info=##class(TCBI.UtilsRu).GetAllDateTestSet(epis_"||"_ts_"||"_seq,dateOfCollection,timeOfCollection,dateOfReceiving,timeOfReceiving,dateOfCreation,timeOfCreation,dateAuthorised,timeAuthorised)
               set delta=$listget(info,7)
                /*              
               set time2=(+dateAuthorised*86400)+(timeAuthorised*60)
               set delta=time2-time1
               */
               set group=date
               set key=$i(cnt)
               set ^||TMP($j,"Process",group,key)=epis_"\\"_delta
               set ^||TMP($j,"Sort",group,delta,key)=""
               set ^||TMP($j,"SortI",delta,key)=""
               
               /*
               set tsidid=epis_"||"_ts_"||"_seq
               // set tatBI=$lg($get(^test("tat",tsidid)),7)
               set tatBI=$piece($get(^test("tat2",tsidid)),"*",1)
               set tat=$j(delta,0,0)
               if +tat'=+tatBI if $data(^test("tat2",tsidid)) b  s ^test("tatcp",tsidid)="tat="_tat_", tatBI="_tatBI_", time1="_time1_", time1BI="_$piece($get(^test("tat2",tsidid)),"*",10)_", time2="_time2
               */
           }	    
       }  
	 }
	 set ret=..proceedGetData()
	 if 'ret quit
	}
 }
 } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="proceedGetData">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set ret=$$$OK
 try { 	    
 ; calculate totals	
 set group=""
 for {
	 set group=$order(^||TMP($j,"Process",group)) if group="" quit
	 set npp="",tot=0,total=0
	 for {
		 set npp=$order(^||TMP($j,"Process",group,npp)) if npp="" quit 
		 set delta=+$piece($get(^(npp)),"\",3)
		 set tot=tot+1
		 set total=total+delta
	 }
     ; calculate mean
     set (mean,median,percentile75,percentile90)=""
     // mean
     if tot'=0 {
	 	 set mean=total/tot
     }
     ; calculate median
     set parity=tot#2
     set tot10=$j(tot/10,0,0)+1  // for calculation 90th percentile
     set tot15=$j(tot/4,0,0)+1 // for calculation 75th percentile
     set tot0=tot\2,tot1=(tot+1)\2,tot2=(tot+2)\2 // for calculation median
     // median
     set delta="",cnt=0,stop=0
     for {
	     set delta=$order(^||TMP($j,"Sort",group,delta)) if delta=""!(stop=1) quit
         set npp=""
         for {
             set npp=$order(^||TMP($j,"Sort",group,delta,npp)) if npp="" quit 
	         set cnt=cnt+1
		     if parity'=0,tot1=cnt set stop=1,median=delta quit
		     if parity=0,tot0=cnt set median=delta
		     if parity=0,tot2=cnt set stop=1,median=(median+delta)/2 quit 
	     }
	     if stop=1 quit
      }
      ;  calculate 75th percentile, 90th percentile
      set delta="",cnt=0,stop75=0,stop90=0
      for {
	      set delta=$order(^||TMP($j,"Sort",group,delta),-1) if delta=""||((stop75=1)&&(stop90=1)) quit
          set npp=""
          for {
              set npp=$order(^||TMP($j,"Sort",group,delta,npp)) if npp="" quit 
	          set cnt=cnt+1
              if tot10=cnt set stop90=1,percentile90=delta 
              if tot15=cnt set stop75=1,percentile75=delta  
              if (stop75=1)&&(stop90=1) quit
	      }
      }
      //set ^||TMP($j,"Report",group)=tot_"\"_(mean\60)_"\"_(median\60)_"\"_(percentile90\60)_"\"_total_"\"_(percentile75\60)
      set ^||TMP($j,"Report",group)=tot_"\"_(mean)_"\"_(median)_"\"_(percentile90)_"\"_total_"\"_(percentile75)
 }
 if '$data(^||TMP($j,"Report")) quit
 
 // считаем итоговые величины
 set (mean,median,percentile75,percentile90)=""
 set group="",tot=0,total=0
 for {
	 set group=$order(^||TMP($j,"Report",group)) if group="" quit
	 set rec=$get(^(group))
	 set tot=tot++$piece(rec,"\",1)
	 set total=total+$piece(rec,"\",5) 
 }
 // mean
 if tot'=0 {
	  set mean=total/tot
 }
 ; calculate median
 set parity=tot#2
 set tot10=$j(tot/10,0,0)+1  // for calculation 90th percentile
 set tot15=$j(tot/4,0,0)+1 // for calculation 75th percentile
 set tot0=tot\2,tot1=(tot+1)\2,tot2=(tot+2)\2 // for calculation median
 set delta="",cnt=0,stop=0
 for {
	     set delta=$order(^||TMP($j,"SortI",delta)) if delta=""!(stop=1) quit
         set npp=""
         for {
             set npp=$order(^||TMP($j,"SortI",delta,npp)) if npp="" quit 
	         set cnt=cnt+1
		     if parity'=0,tot1=cnt set stop=1,median=delta quit
		     if parity=0,tot0=cnt set median=delta
		     if parity=0,tot2=cnt set stop=1,median=(median+delta)/2 quit 
	     }
         if stop=1 quit
  }
  ;  calculate 90th percentile
  set delta="",cnt=0,stop75=0,stop90=0
  for {
	      set delta=$order(^||TMP($j,"SortI",delta),-1) if delta=""||((stop75=1)&&(stop90=1)) quit
          set npp=""
          for {
              set npp=$order(^||TMP($j,"SortI",delta,npp)) if npp="" quit 
	          set cnt=cnt+1
              if tot10=cnt set stop90=1,percentile90=delta 
              if tot15=cnt set stop75=1,percentile75=delta  
              if (stop75=1)&&(stop90=1) quit 
	      }
  }
  if +tot'=0 {
	  set ^||TMP($j,"Report")=tot_"\"_(mean\60)_"\"_(median\60)_"\"_(percentile90\60)_"\"_total_"\"_(percentile75\60)
  }
 //k ^test("dataZEN") m ^test("dataZEN")=^||TMP		 
 } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Получить дату начала отчета ТАТ по данным из PLIST EPVisitNumber

]]></Content>
</UDLText>

<Method name="GetDateStartForTAT">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pVisitData:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		set returnValue=0
		set str=""
		if (pVisitData(12)'="")&&(pVisitData(13)'="") {
	        set returnValue=(pVisitData(12)*86400)+pVisitData(13) // date of collection
        } elseif (pVisitData(61)'="")&&(pVisitData(62)'="") {
	        set returnValue=(pVisitData(61)*86400)+pVisitData(62)  // date of recieve
        }  elseif (pVisitData(10)'="")&&(pVisitData(11)'="") { 
	        set returnValue=(pVisitData(10)*86400)+pVisitData(11) // date of enter
        }
        quit returnValue
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method workEpis(pEpisode As %String, date As %Integer) [ PublicList = PLIST ]
{
	set ret=$$$OK
	try {
		if $$select^LVBEPVIS(pEpisode,"Y") quit
	    merge VISIT=PLIST kill PLIST
        if $l(..PatientLocations),(","_..PatientLocations_",")'[(","_VISIT(22)_",") quit  // Hospital code DR
        if $l(..PatientType),(","_..PatientType_",")'[(","_VISIT(93)_",") quit  
        if $l(..PatientLocationType),'$$select^LVBCTHOS(VISIT(22),"Y"),PLIST(19)'=..PatientLocationType quit 
        set ts="" 
        for {
	       set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
	       if $l(..TestSet),..TestSet'=ts continue
           if $l(..TestGroup),'$data(^TTAB("GR",..TestGroup,"TS",ts)) continue
           set seq=""
           for {
	           set seq=$order(^TEPI(pEpisode,1,ts,seq)) if seq="" quit
	           set rec=^(seq)
               //set collected=VISIT(12)_","_VISIT(13)
               set received=VISIT(61)_","_VISIT(62)
               set authorised=$piece(rec,"\",4)_","_($p(rec,"\",5)*60) set:authorised=",0" authorised=""
               set hospitalCodeDR=$select(VISIT(22)="":" ",1:VISIT(22))
               set patientType=$select(VISIT(93)="":" ",1:VISIT(93))
               //set ^||TMP($j,"Process",hospitalCodeDR,date,patientType,pEpisode,ts,seq)=collected_"\"_received_"\"_authorised
               set ^||TMP($j,"Process",hospitalCodeDR,date,patientType,pEpisode,ts,seq)=""_"\"_received_"\"_authorised
           }
        }
    } catch(exception)
    {
	  set ret=exception.AsStatus()
    }	
    quit ret
}
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Получение данных о ТАТ по рабочим группам наборов тестов (Code Tables-TestSet-Work Group TestSet)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Ищем эпизоды, в которых есть все наборы тестов из группы, начальное время - время первого сбора материала (или регистрации) в группе

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// конечное время - время авторизации последнеего набора тестов 

]]></Content>
</UDLText>

<Method name="getDataGroup">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pPatientLocations:%String,pPatientType:%String,pDateFrom:%String,pDateTo:%String,&pTestSet:%String,pPatientLocationType:%String]]></FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 ; check dates - 1. collection
 ;               6. received
 set ret=$$$OK
 try {
 kill ^||TMP($j)
 
 set index=4 //^TDAY( 4, {EPVIS_DateOfEntry}, {EPVIS_StatusPatient}, {EPVIS_VisitNumber} ) 
 set date=pDateFrom-1 
 for {
	set date=$order(^TDAY(index,date)) if date=""||(date>pDateTo) quit
	set status=""
	for {
	  set status=$order(^TDAY(index,date,status))
	  if status="" quit
	  set epis=""
	  for {
		 set epis=$order(^TDAY(index,date,status,epis))
		 if epis="" quit
         // рассмотрение на уровне epis
	     if $data(^||TMP($j,"epis",epis)) continue
		 set ^||TMP($j,"epis",epis)=""
	     // обработка эпизода
	     if $$select^LVBEPVIS(epis,"Y") continue
	     merge VISIT=PLIST kill PLIST
	     
	     if $l(pPatientLocations) {
	        if VISIT(22)="" continue
	        if VISIT(22)'=""&&((","_pPatientLocations_",")'[(","_VISIT(22)_",")) continue  // Hospital code DR
         }
         if $l(pPatientType) {
	        if VISIT(93)="" continue
	        if VISIT(93)'=""&&((","_pPatientType_",")'[(","_VISIT(93)_",")) continue 
         } 
         if $l(pPatientLocationType)&&('$$select^LVBCTHOS(VISIT(22),"Y"))&&(PLIST(19)'=pPatientLocationType) continue

         // проверяем, есть ли в эпизоде все наборы тестов из pTestSet(ts) и все ли авторизованы
         set ts="",flagAllTestSet=1
         kill temp
         for {
	        set ts=$order(pTestSet(ts)) if ts="" quit
	        if '$data(^TEPI(epis,1,ts)) {
		        set flagAllTestSet=0
		        quit
	        }
		    set tscnt=""
            for {
	           set tscnt=$order(^TEPI(epis,1,ts,tscnt)) if tscnt="" quit
	           set rec=^(tscnt)
	           set dateAuthorised=$piece(rec,"\",4)
	           /*
	           if (dateAuthorised<pDateFrom)||(dateAuthorised>pDateTo) {
		          set flagAllTestSet=0
		          quit 
	           }*/
	           set timeAuthorised=$p(rec,"\",5) 
	           if (+dateAuthorised'=0)&&(+timeAuthorised'=0) {
		          set valAuthorised=(dateAuthorised*86400)+(timeAuthorised*60)
	              set temp(valAuthorised)=dateAuthorised
	           } else {
		           set flagAllTestSet=0
		           quit
	           }
            }
         }
         if flagAllTestSet=1 {
	        set datetime2=$order(temp(""),-1)
	        if datetime2="" quit
	        set dateAuthorised=temp(datetime2)
	        set datetime1=..GetDateStartForTAT(.VISIT)  // datetime begin for TAT
            set datetime2=$order(temp(""),-1)           // datetime end for TAT
            set delta=datetime2-datetime1
            set group=date // дата регистрации эпизода
            set key=$i(cnt)
            set ^||TMP($j,"Process",group,key)=epis_"\\"_delta
            set ^||TMP($j,"Sort",group,delta,key)=""
            set ^||TMP($j,"SortI",delta,key)=""
         }
	 }
	}
 }
 //k ^test(11) m ^test(11)=^||TMP($j) 
 set ret=..proceedGetData()
	 if 'ret quit
     
 } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>
</Class>
</Export>
