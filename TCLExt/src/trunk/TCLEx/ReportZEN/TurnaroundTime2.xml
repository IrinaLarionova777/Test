<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.ReportZEN.TurnaroundTime2">
<Description>
Отчет о среднем времени выполнения набора тестов</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62629,39500.33375</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит этот отчет.</Description>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
Это способ отображения по умолчанию для этого отчета.</Description>
<Default>xml</Default>
</Parameter>

<Parameter name="REPORTXMLNAMESPACE">
<Description>
Это опциональная XML область, используемая для отчета.</Description>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
//PAR1

]]></Content>
</UDLText>

<Property name="PatientLocations">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//PAR2

]]></Content>
</UDLText>

<Property name="PatientType">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//PAR3

]]></Content>
</UDLText>

<Property name="DateFrom">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//PAR4

]]></Content>
</UDLText>

<Property name="DateTo">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//PAR5

]]></Content>
</UDLText>

<Property name="TestSet">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//PAR6

]]></Content>
</UDLText>

<Property name="TestGroup">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//PAR7

]]></Content>
</UDLText>

<Property name="PatientLocationType">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//User

]]></Content>
</UDLText>

<Property name="User">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="ReportDefinition">
<Description>
Этот XML блок описывает логическое содержение этого отчета.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="TurnaroundTime" >
 <call method="CreateXML"/> 
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
Этот XML блок описывает отображение этого отчета.
Это используется для создания XSLT стиля, как для HTML, так и для XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="TurnaroundTime" style="standard">
 <document width="297mm" height="210mm" marginLeft="15mm" marginRight="15mm" marginTop="15mm" marginBottom="15mm" referenceOrientation="0">

<class name="block.arial12">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="font-weight" value="normal" />
 <att name="font-size" value="12pt" />
</class>
<class name="table.tableNoBorder">
</class>
<class name="td.tableNoBorder">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="text-align" value="left" />
 <att name="font-weight" value="normal" />
</class>
<class name="table.tableBorder">
  <att name="border-style" value="solid" />
  <att name="border-width" value="0.5pt" />
</class>
<class name="th.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="center" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
<class name="td.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="left" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
</document>
 <body>
 
 <!-- Заголовок -->
 <header>
   <table orient="col" class="tableNoBorder">
      <block class="arial12"  style="text-align:left;">
        <item width="200mm" value="Отчет о времени выполнения исследований (TAT)" style="text-align:left"/>
      </block>
     <item  field="InfoAboutReport" width="90mm" style="text-align:right"/>
   </table>
   <fo><line pattern="empty"/></fo>
  <!-- Параметры --> 
  <table orient="row" class="tableNoBorder">
     <item value="Местоположение пациента:" style="text-align:left"/>
     <item  field="PationLocations" style="text-align:left"/>
     <item value="Группа наборов тестов:" style="text-align:left" />
     <item field="TestGroup" style="text-align:left;"/>
     <item value="Период:" style="text-align:left" />
     <item field="Period" style="text-align:left;"/>
   </table>
   <fo><line pattern="empty"/></fo>
  </header>

<!-- Местоположение пациента -->
<group name="PationLocation" pagebreak="true" line='1px'>

<header>
<line pattern="empty"/>
<table orient="row" width="260mm" class='table2'>
<item field="@location" width="150mm"><caption value="Метоположение пациента:" width="10mm"/></item>
</table>
</header>


   <table orient="col" group="String" width="260mm"  class="tableBorder">
        <item field="@date" width="10mm" style="text-align:left;text-indent:0.5mm;font-size:12pt;font-family:Arial" > 
          <caption value="Дата" />
        </item>
        <item field="flagCito" width="9mm" style="text-align:center;text-indent:0.5mm;font-size:12pt;font-family:Arial">
          <caption value="CITO" />
        </item>
        <item field="@num" width="25mm" style="text-align:left;text-indent:1mm;font-size:12pt;font-family:Arial">
          <caption value="Номер эпизода"/>
        </item>
        <item field="fioPatient" width="50mm" style="text-align:left;text-indent:0.5mm;font-size:11pt;font-family:Arial" >
          <caption value="ФИО пациента"/>
        </item>
        <item field="dateOfCollection" width="23mm" style="text-align:left;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Дата забора"/>
        </item>
        <item field="sex" width="7mm" style="text-align:left;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Пол" />
        </item>
        <item field="dateOfBirth" width="23mm" style="text-align:left;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Дата рождения"/>
        </item>
        <item field="comment" width="30mm" style="text-align:left;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Примечание"/>
        </item>
        <item field="nameTestSet" width="70mm" style="text-align:left;text-indent:1mm;font-size:11pt;font-family:Arial" >
           <caption value="Название исследования (Все исследования из эпизода, попадающие в данный рабочий лист)"/>
        </item>
        <item field="commentTS" width="30mm" style="text-align:left;text-indent:1mm;font-size:11pt;font-family:Arial"  >
        <caption value="Комментарий" />
        </item>
     
     </table>
</group> 
         
<fo><line pattern="empty"/></fo> 
   
    
   
  </body>
 
 
</report>
]]></Data>
</XData>

<Method name="CreateXML">
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
    if ..getData()'=$$$OK quit

    Write !,"<PatientLocations>",..getPatientLocationsString(),"</PatientLocations>"
    Write !,"<TestGroup>",..TestGroup,"</TestGroup>"
    Write !,"<Period>","c "_$zdate(..DateFrom,4)_" по "_$zdate(..DateTo,4),"</DateFrom>"
    Write !,"<InfoAboutReport>","Дата: "_$zdate(+$h,4)_" Время:"_$ztime($piece($h,",",2))_" Пользователь: "_..User,"</InfoAboutReport>"
    
    //set ^||TMP($zn,$j,"Report",loc,date,ptype,ts)=tot_"\"_medianRC_"\"_meanRC_"\"_percentileRC_"\"_medianAR_"\"_meanAR_"\"_percentileAR
    set refTmp=$name(^||TMP($zn,$j,"Report"))
    set loc=""
    for {
       set loc=$order(@refTmp@(loc)) if loc="" quit
       if '$$select^LVBHOSP(loc) s location=PLIST(3) k PLIST
       Write !,"<PationLocation location="""_location_""">"
       set date=""
       for {
           set date=$order(@refTmp@(loc,date)) if date="" quit
           set ptype=""
           for {
	          set ptype=$order(@refTmp@(loc,date,ptype)) if ptype="" quit
	          set pationType=$s(..PationType="I":"Стац.",..PationType="Y":"Амбул.",1:"GP Practice")
	          set ts=""
	          for {
		          set ts=$order(@refTmp@(loc,date,ptype,ts)) if ts="" quit
		          set rec=^(ts)
		          Write !,"<String date="""_$zdate(date,4)_""" pationType="""_pationType_""" testset="""_ts_""">" 
                  Write !,"<total>"_$piece(rec,"\",1)_"</total>"
                  Write !,"<CollRecMedian>"_$piece(rec,"\",2)_"</CollRecMedian>"
                  Write !,"<CollRecMean>"_$piece(rec,"\",3)_"</CollRecMean>"
                  Write !,"<CollRec90>"_$piece(rec,"\",4)_"</CollRec90>"
                  Write !,"<RecAuthMedian>"_$piece(rec,"\",5)_"</RecAuthMedian>"
                  Write !,"<RecAuthMean>"_$piece(rec,"\",6)_"</RecAuthMean>"
                  Write !,"<RecAuth90>"_$piece(rec,"\",7)_"</RecAuth90>"
                  Write !,"</String>"
	          }
           }
       }
       Write !,"</PationLocation>" 
       
    }
]]></Implementation>
</Method>

<Method name="getData">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 ; check dates - 1. collection
 ;               6. received
 set ret=$$$OK
 try {
 kill ^||TMP($zn,$j)
 for index=1,6 {
     set date=..DateFrom-1 
     for {
	     set date=$order(^TDAY(index,date)) 
	     if date=""||(date>..DateTo) quit
	     set status=""
	     for {
		     set status=$order(^TDAY(index,date,status))
		     if status="" quit
		     set epis=""
		     for {
			     set epis=$order(^TDAY(index,date,status,epis))
			     if epis="" quit
			     if $data(^||TMP($zn,$j,"epis",epis)) continue
			     set ^||TMP($zn,$j,"epis",epis)=""
			     $$$ThrowOnError(..wortEpis(epis))
		     }
	     }
     }
 }
 ; check authorised date
 set date=..DateFrom-1 
 for {
     set date=$order(^TEPIi("AUTHORISED",date)) 
     if date=""||(date>..DateTo) quit
     set epis=""
	 for {
	     set epis=$order(^TEPIi("AUTHORISED",date,epis))
	     if epis="" quit
	     if $data(^||TMP($zn,$j,"epis",epis)) continue
		 set ^||TMP($zn,$j,"epis",epis)=""
	     $$$ThrowOnError(..wortEpis(epis))
	 }
 }    
 ; check delta's - received & collected
 ;               - authorised & received
 set loc="" 
 for {
	 set loc=$order(^||TMP($zn,$j,"Process",loc)) i loc="" quit
	 set date="" 
	 for {
		 set date=$order(^||TMP($zn,$j,"Process",loc,date)) if date="" quit
		 set ptype="" 
		 for {
			 set ptype=$order(^||TMP($zn,$j,"Process",loc,date,ptype)) if ptype="" quit
			 set epis=""
			 for {
				 set epis=$order(^||TMP($zn,$j,"Process",loc,date,ptype,epis)) if epis="" quit
				 set ts="" 
				 for {
					 set ts=$order(^||TMP($zn,$j,"Process",loc,date,ptype,epis,ts)) if ts="" quit
					 set seq="" 
					 for {
						 set seq=$order(^||TMP($zn,$j,"Process",loc,date,ptype,epis,ts,seq)) if seq="" quit
						 set detail=^(seq)
						 set coll=$p(detail,"\",1),recd=$p(detail,"\",2),auth=$p(detail,"\",3)
						 set collected=($p(coll,",")*86400)+$p(coll,",",2),received=($p(recd,",")*86400)+$p(recd,",",2)
						 set:auth="" auth=$h
						 set authorised=($p(auth,",")*86400)+$p(auth,",",2)
						 set cnt=$i(^TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count"))
						 set ^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",cnt,"AR")=(authorised-received)
						 set ^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",cnt,"RC")=(received-collected)
						 
					 }
				 }
			 }
		 }
	 }	 
 }
 ; calculate totals	 
 set loc="" 
 for {
	 set loc=$order(^||TMP($zn,$j,"Delta",loc)) if loc="" quit
	 set date="" 
	 for {
		 set date=$order(^||TMP($zn,$j,"Process",loc,date)) if date="" quit
		 set ptype="" 
		 for {
			 set ptype=$order(^||TMP($zn,$j,"Delta",loc,date,ptype)) if ptype="" quit
			 set ts="" 
			 for {
				 set ts=$order(^||TMP($zn,$j,"Delta",loc,date,ptype,ts)) if ts="" quit
				 set (totalRC,totalAR,tot,cnt)="" 
				 for {
					 set cnt=$order(^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",cnt)) if cnt="" quit
					 set RC=^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",cnt,"RC")
					 set AR=^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",cnt,"AR")
					 set totalRC=totalRC+RC,totalAR=totalAR+AR,tot=tot+1
					 set ^||TMP($zn,$j,"Sort",loc,date,ptype,ts,"RC",RC,cnt)=""
					 set ^||TMP($zn,$j,"Sort",loc,date,ptype,ts,"AR",AR,cnt)=""
				 }
				 ; calculate mean
				 set (meanRC,meanAR,medianRC,medianAR,percentileRC,percentileAR)=""
				 if tot s meanRC=totalRC/tot,meanAR=totalAR/tot
				 ; calculate median
				 set parity=tot#2,tot10=$j(tot/10,0,0)+1,tot0=tot\2,tot1=(tot+1)\2,tot2=(tot+2)\2
				 for node="RC","AR" {
					 set (cnt,stop,x1)="" 
				     for {
					     set x1=$order(^||TMP($zn,$j,"Sort",loc,date,ptype,ts,node,x1)) 
					     if x1="" quit  
					     set x2="" 
					     for {
						     set x2=$order(^||TMP($zn,$j,"Sort",loc,date,ptype,ts,node,x1,x2)) 
						     if x2=""||(stop=1) quit
						     set cnt=cnt+1
						     if parity'=0,tot1=cnt set stop=1,@("median"_node)=^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",x2,node) quit
						     if parity=0,tot0=cnt set @("median"_node)=^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",x2,node)
						     if parity=0,tot2=cnt set stop=1,@("median"_node)=(@("median"_node)+^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",x2,node))/2 quit
					     }
					     if stop=1 quit
				     }
                     ; calculate 90th percentile
                     set (cnt,stop,x1)="" 
                     for {
	                     set x1=$order(^||TMP($zn,$j,"Sort",loc,date,ptype,ts,"RC",x1),-1) 
	                     if x1="" quit
	                     set x2="" 
	                     for {
		                     set x2=$order(^||TMP($zn,$j,"Sort",loc,date,ptype,ts,node,x1,x2),-1) 
		                     if x2="" quit  
		                     set cnt=cnt+1
		                     if tot10=cnt set stop=1,@("percentile"_node)=^||TMP($zn,$j,"Delta",loc,date,ptype,ts,"Count",x2,node) quit
	                     }
	                     if stop=1 quit    
                     }
				 }
				 set ^||TMP($zn,$j,"Report",loc,date,ptype,ts)=tot_"\"_medianRC_"\"_meanRC_"\"_percentileRC_"\"_medianAR_"\"_meanAR_"\"_percentileAR
			 }
		 }
	 }
 }		 
 } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="workEpis">
<FormalSpec>pEpisode:%String</FormalSpec>
<Implementation><![CDATA[
	set ret=$$$OK
	try {
		if $$select^LVBEPVIS(epis,"Y") quit
	    merge VISIT=PLIST kill PLIST
        if $l(..PatientLocations),(","_..PatientLocations_",")'[(","_VISIT(22)_",") quit  // Hospital code DR
        if $l(..PatientType),(","_..PatientType_",")'[(","_VISIT(93)_",") quit  
        if $l(..PatientLocationType),'$$select^LVBCTHOS(VISIT(22),"Y"),PLIST(19)'=..PatientLocationType quit 
        set ts="" 
        for {
	       set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
	       if $l(..TestSet),..TestSet'=ts quit
           if $l(..TestGroup),'$d(^TTAB("GR",..TestGroup,"TS",ts)) quit
           set seq=""
           for {
	           set seq=$order(^TEPI(epis,1,ts,seq)) if seq="" quit
	           set rec=^(seq)
               set collected=VISIT(12)_","_VISIT(13),received=VISIT(61)_","_VISIT(62)
               set authorised=$piece(rec,"\",4)_","_($p(rec,"\",5)*60) set:authorised=",0" authorised=""
               set hospitalCodeDR=$select(VISIT(22)="":" ",1:VISIT(22))
               set patientType=$select(VISIT(93)="":" ",1:VISIT(93))
               set ^||TMP($zn,$j,"Process",hospitalCodeDR,date,patientType,epis,ts,seq)=collected_"\"_received_"\"_authorised
           }
        }
    } catch(exception)
    {
	  set ret=exception.AsStatus()
    }	
    quit ret
]]></Implementation>
</Method>

<Method name="getPatientLocationsString">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set loc=""	
  if $length(..PatientLocations) {
	  set loc="" 
	  for i=1:1:$l(..PatientLocations,",") {
		  set xx=$piece(..PatientLocations,",")
		  set loc=loc_$select($l(loc):", ",1:"")_$piece(^TTAB("RH",xx),"\")
	  }
  }
  quit loc
]]></Implementation>
</Method>

<Method name="GetPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>params:%String,pFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
    //Set report = %this.%New()
    Set %request=##class(%CSP.Request).%New()
	Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("PatientLocations")=$piece(params,$char(1),1)
	Set %request.Data("PatientType")=$piece(params,$char(1),2)
	Set report = ##class(TCLEx.ReportZEN.TurnaroundTime).%New()
	set report.PatientLocations=$piece(params,$char(1),1)
	set report.PatientType=$piece(params,$char(1),2)
	set report.DateFrom=$piece(params,$char(1),3)
	set report.DateTo=$piece(params,$char(1),4)
	set report.TestSet=$piece(params,$char(1),5)
	set report.TestGroup=$piece(params,$char(1),6)
	set report.PatientLocationType=$piece(params,$char(1),7)
	set report.User=$piece(params,$char(1),8)
	Do report.GenerateReport(pFileName,2)
  } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// for test

]]></Content>
</UDLText>

<Method name="%OnBeforeReport">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..PatonLocations = 2011
	Set ..DateFrom = $zdh("01/01/2011",4)
	Set ..DateTo = $zdh("01/02/2011",4)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
