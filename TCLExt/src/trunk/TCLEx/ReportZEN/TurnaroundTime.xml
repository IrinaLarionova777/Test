<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.ReportZEN.TurnaroundTime">
<Description>
Отчет о среднем времени выполнения набора тестов</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62628,42516.704335</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит этот отчет.</Description>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
Это способ отображения по умолчанию для этого отчета.</Description>
<Default>xml</Default>
</Parameter>

<Parameter name="REPORTXMLNAMESPACE">
<Description>
Это опциональная XML область, используемая для отчета.</Description>
</Parameter>

<XData name="ReportDefinition">
<Description>
Этот XML блок описывает логическое содержение этого отчета.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="TurnaroundTime" call="CreateXML">
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
Этот XML блок описывает отображение этого отчета.
Это используется для создания XSLT стиля, как для HTML, так и для XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="TurnaroundTime" style="standard">
 <document height="297mm" width="210mm" marginLeft="15mm" marginRight="15mm" marginTop="15mm" marginBottom="15mm" referenceOrientation="0"> <!-- referenceOrientation 0,90,270,...-->

<class name="block.arial12">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="font-weight" value="normal" />
 <att name="font-size" value="11pt" />
</class>
<class name="block.arial10">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="font-weight" value="normal" />
 <att name="font-size" value="10pt" />
</class>
<class name="table.tableNoBorder">
</class>
<class name="td.tableNoBorder">
 <att name="border" value="none" />
 <att name="font-family" value="Arial" />
 <att name="text-align" value="left" />
 <att name="font-weight" value="normal" />
</class>
<class name="table.tableBorder">
  <att name="border-style" value="solid" />
  <att name="border-width" value="0.5pt" />
</class>
<class name="th.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="center" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
<class name="td.tableBorder">
 <att name="border" value="1px solid black" />
 <att name="font-family" value="Courier New" />
 <att name="text-align" value="left" />
 <att name="font-size" value="10pt" />
 <att name="font-weight" value="normal" />
</class>
</document>

<pagefooter>
<table orient="col" class="tableNoBorder" width="180mm">
   <item  field="InfoAboutReport" width="135mm" style="text-align:left;text-indent:0.5mm;font-size:10pt;font-family:Arial" />
   <item value="Страница " width="27mm" style="text-align:right;text-indent:0.5mm;font-size:10pt;font-family:Arial" />
   <item special="page-number" width="15mm" style="text-align:left;text-indent:0.5mm;font-size:10pt;font-family:Arial"/>
</table>
</pagefooter>


 <body>
 <!-- Заголовок -->
 <header>
   <table orient="row" class="tableNoBorder">
      <block class="arial12"  style="text-align:left;">
        <item width="180mm" value="Отчет о времени выполнения исследований (TAT)" style="text-align:left"/>
      </block>
   </table>
   <fo><line pattern="empty"/></fo>
  <!-- Параметры --> 
  <table orient="row" class="tableNoBorder">
     <item  field="PatientLocations" style="text-align:left">
        <caption value="Местоположение пациента: " width="55mm"/>
     </item>
     <item  field="TestGroup" style="text-align:left">
        <caption value="Группа наборов тестов: " width="55mm"/>
     </item>
     <item  field="Period" style="text-align:left">
        <caption value="Период: " width="55mm" />
     </item>
   </table>
   <fo><line pattern="empty"/></fo>
  </header>

<!-- Местоположение пациента -->
<group name="PatientLocation" pagebreak="true">

<header>
<line pattern="empty"/>
<table orient="row" width="260mm" class='tableNoBorder'>
<item field="@location" width="150mm"><caption value="Метоположение пациента:" width="55mm"/></item>
</table>
</header>


   <table orient="col" group="String" width="260mm"  class="tableBorder" >
        <item field="@date" width="25mm" style="text-align:center;text-indent:0.5mm;font-size:12pt;font-family:Arial" > 
          <caption value="Дата" />
        </item>
        <item field="@pationType" width="35mm" style="text-align:center;text-indent:0.5mm;font-size:12pt;font-family:Arial">
          <caption value="Тип пациента" />
        </item>
        <item field="@testset" width="20mm" style="text-align:left;text-indent:1mm;font-size:12pt;font-family:Arial">
          <caption value="Набор тестов"/>
        </item>
        <item field="total" width="15mm" style="text-align:right;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Всего исслед."/>
        </item>
        <!--
        <item field="CollRecMean" width="18mm" style="text-align:right;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Заб-Зак среднее"/>
        </item>
        <item field="CollRecMedian" width="18mm" style="text-align:right;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Заб-Зак середина" />
        </item>
        <item field="CollRec90" width="18mm" style="text-align:right;text-indent:1mm;font-size:11pt;font-family:Arial" >
          <caption value="Заб-Зак 90%-ая"/>
        </item>
        -->
        <item field="RecAuthMean" width="25mm" style="text-align:right;text-indent:2mm;font-size:11pt;font-family:Arial" >
          <caption value="Зак-Вып среднее (мин)"/>
        </item>
        <item field="RecAuthMedian" width="25mm" style="text-align:right;text-indent:2mm;font-size:11pt;font-family:Arial" >
           <caption value="Зак-Вып середина (мин)"/>
        </item>
        <item field="RecAuth90" width="25mm" style="text-align:right;text-indent:2mm;font-size:11pt;font-family:Arial"  >
        <caption value="Зак-Вып 90% (мин)" />
        </item>
     
     </table>
</group> 
         
<fo><line pattern="empty"/></fo> 
   
    
   
  </body>
 
 
</report>
]]></Data>
</XData>

<Method name="CreateXML">
<ClassMethod>1</ClassMethod>
<PublicList>PLIST</PublicList>
<Implementation><![CDATA[
	Set PatientLocations = $Get(%request.Data("PatientLocations")) 
    Set PatientType = $Get(%request.Data("PatientType"))
    Set DateFrom = $Get(%request.Data("DateFrom"))
    Set DateTo = $Get(%request.Data("DateTo"))
    Set TestSet = $Get(%request.Data("TestSet"))
    Set TestGroup = $Get(%request.Data("TestGroup"))
    Set PatientLocationType = $Get(%request.Data("PatientLocationType"))
    Set User = $Get(%request.Data("User")) 
	
 try {
    $$$ThrowOnError(..getData(PatientLocations,PatientType,DateFrom,DateTo,TestSet,TestGroup,PatientLocationType))

    write !,"<PatientLocations>"_..getPatientLocationsString(PatientLocations)_"</PatientLocations>"
    write !,"<TestGroup>"_$select(TestGroup'="":$piece(^TTAB("GR",TestGroup),"\")_"("_TestGroup_")",1:"")_"</TestGroup>"
    write !,"<Period>"_"c "_$zdate(DateFrom,4)_" по "_$zdate(DateTo,4)_"</Period>"
    write !,"<InfoAboutReport>"_"Дата: "_$zdate(+$h,4)_" Время:"_$ztime($piece($h,",",2))_" Пользователь: "_User_"</InfoAboutReport>"
    
    //set ^||TMP($j,"Report",loc,date,ptype,ts)=tot_"\"_medianRC_"\"_meanRC_"\"_percentileRC_"\"_medianAR_"\"_meanAR_"\"_percentileAR
    set refTmp=$name(^||TMP($j,"Report"))
    set loc=""
    for {
       set loc=$order(@refTmp@(loc)) if loc="" quit
       set location=loc_" " if '$$select^LVBCTHOS(loc) s location=location_PLIST(3) k PLIST
      write !,"<PatientLocation location="""_location_""">"
       set date=""
       for {
           set date=$order(@refTmp@(loc,date)) if date="" quit
           set ptype=""
           for {
	          set ptype=$order(@refTmp@(loc,date,ptype)) if ptype="" quit
	          set pationType=$select(ptype="I":"Стац.",ptype="Y":"Амбул.",1:"")
	          set ts=""
	          for {
		          set ts=$order(@refTmp@(loc,date,ptype,ts)) if ts="" quit
		          set rec=^(ts)
		          write !,"<String date="""_$zdate(date,4)_""" pationType="""_pationType_""" testset="""_ts_""">"
                  write !,"<total>"_$piece(rec,"\",1)_"</total>"
                  //write !,"<CollRecMedian>"_$piece(rec,"\",2)_"</CollRecMedian>"
                  //write !,"<CollRecMean>"_$piece(rec,"\",3)_"</CollRecMean>"
                  //write !,"<CollRec90>"_$piece(rec,"\",4)_"</CollRec90>"
                  write !,"<RecAuthMedian>"_$piece(rec,"\",5)_"</RecAuthMedian>"
                  write !,"<RecAuthMean>"_$piece(rec,"\",6)_"</RecAuthMean>"
                  write !,"<RecAuth90>"_$piece(rec,"\",7)_"</RecAuth90>"
                  write !,"</String>"
	          }
           }
       }
       write !,"</PatientLocation>"
       
    }
    } catch(exception)
  {
	  set stream=""
	  s ^logError("reportZEN",$this,$i(^logError("reportZEN",$this)))=exception.AsStatus()
  }
]]></Implementation>
</Method>

<Method name="getData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPatientLocations:%String,pPatientType:%String,pDateFrom:%String,pDateTo:%String,pTestSet:%String,pTestGroup:%String,pPatientLocationType:%String</FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 ; check dates - 1. collection
 ;               6. received
 set ret=$$$OK
 try {
 kill ^||TMP($j)
 /*
 for index=1,6 {
     set date=pDateFrom-1 
     for {
	     set date=$order(^TDAY(index,date)) 
	     if date=""||(date>pDateTo) quit
	     set status=""
	     for {
		     set status=$order(^TDAY(index,date,status))
		     if status="" quit
		     set epis=""
		     for {
			     set epis=$order(^TDAY(index,date,status,epis))
			     if epis="" quit
			     //if $data(^||TMP($j,"epis",epis)) continue
			     set ^||TMP($j,"epis",epis)=""
			     $$$ThrowOnError(..workEpis(epis,date))
		     }
	     }
     }
 }
 */
 ; check authorised date
 set date=pDateFrom-1 
 for {
     set date=$order(^TEPIi("AUTHORISED",date)) 
     if date=""||(date>pDateTo) quit
     set epis=""
	 for {
	     set epis=$order(^TEPIi("AUTHORISED",date,epis))
	     if epis="" quit
	     //if $data(^||TMP($j,"epis",epis)) continue
		 set ^||TMP($j,"epis",epis)=""
	     //$$$ThrowOnError(..workEpis(epis,date))
	     // обработка эпизода
	     if $$select^LVBEPVIS(epis,"Y") continue
	    merge VISIT=PLIST kill PLIST
        if $l(pPatientLocations),(","_pPatientLocations_",")'[(","_VISIT(22)_",") continue  // Hospital code DR
        if $l(pPatientType),(","_pPatientType_",")'[(","_VISIT(93)_",") continue  
        if $l(pPatientLocationType),'$$select^LVBCTHOS(VISIT(22),"Y"),PLIST(19)'=pPatientLocationType continue
        set ts="" 
        for {
	       set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
	       if $l(pTestSet),pTestSet'=ts  continue
           if $l(pTestGroup),'$data(^TTAB("GR",pTestGroup,"TS",ts)) continue
           set seq=""
           for {
	           set seq=$order(^TEPI(epis,1,ts,seq)) if seq="" quit
	           set rec=^(seq)
               //set collected=VISIT(12)_","_VISIT(13)
               set received=VISIT(61)_","_VISIT(62)
               set authorised=$piece(rec,"\",4)_","_($p(rec,"\",5)*60) set:authorised=",0" authorised=""
               set hospitalCodeDR=$select(VISIT(22)="":" ",1:VISIT(22))
               set patientType=$select(VISIT(93)="":" ",1:VISIT(93))
               //set ^||TMP($j,"Process",hospitalCodeDR,date,patientType,pEpisode,ts,seq)=collected_"\"_received_"\"_authorised
               set ^||TMP($j,"Process",hospitalCodeDR,date,patientType,epis,ts,seq)=""_"\"_received_"\"_authorised
           }
        }  
	 }
 }    
 ; check delta's - received & collected
 ;               - authorised & received
 set loc="" 
 for {
	 set loc=$order(^||TMP($j,"Process",loc)) i loc="" quit
	 set date="" 
	 for {
		 set date=$order(^||TMP($j,"Process",loc,date)) if date="" quit
		 set ptype="" 
		 for {
			 set ptype=$order(^||TMP($j,"Process",loc,date,ptype)) if ptype="" quit
			 set epis=""
			 for {
				 set epis=$order(^||TMP($j,"Process",loc,date,ptype,epis)) if epis="" quit
				 set ts="" 
				 for {
					 set ts=$order(^||TMP($j,"Process",loc,date,ptype,epis,ts)) if ts="" quit
					 set seq="" 
					 for {
						 set seq=$order(^||TMP($j,"Process",loc,date,ptype,epis,ts,seq)) if seq="" quit
						 set detail=^(seq)
						 //set coll=$p(detail,"\",1)
						 set recd=$p(detail,"\",2)
						 set auth=$p(detail,"\",3)
						 //set collected=($p(coll,",")*86400)+$p(coll,",",2)
						 set received=($p(recd,",")*86400)+$p(recd,",",2)
						 set:auth="" auth=$h
						 set authorised=($p(auth,",")*86400)+$p(auth,",",2)
						 set cnt=$i(^||TMP($j,"Delta",loc,date,ptype,ts,"Count"))
						 set ^||TMP($j,"Delta",loc,date,ptype,ts,"Count",cnt,"AR")=(authorised-received)
						 //set ^||TMP($j,"Delta",loc,date,ptype,ts,"Count",cnt,"RC")=(received-collected)
						 
					 }
				 }
			 }
		 }
	 }	 
 }
 ; calculate totals	 
 set loc="" 
 for {
	 set loc=$order(^||TMP($j,"Delta",loc)) if loc="" quit
	 set date="" 
	 for {
		 set date=$order(^||TMP($j,"Delta",loc,date)) if date="" quit
		 set ptype="" 
		 for {
			 set ptype=$order(^||TMP($j,"Delta",loc,date,ptype)) if ptype="" quit
			 set ts="" 
			 for {
				 set ts=$order(^||TMP($j,"Delta",loc,date,ptype,ts)) if ts="" quit
				 set (totalRC,totalAR,tot,cnt)="" 
				 for {
					 set cnt=$order(^||TMP($j,"Delta",loc,date,ptype,ts,"Count",cnt)) if cnt="" quit
					 //set RC=^||TMP($j,"Delta",loc,date,ptype,ts,"Count",cnt,"RC")
					 set AR=^||TMP($j,"Delta",loc,date,ptype,ts,"Count",cnt,"AR")
					 //set totalRC=totalRC+RC
					 set totalAR=totalAR+AR
					 set tot=tot+1
					 //set ^||TMP($j,"Sort",loc,date,ptype,ts,"RC",RC,cnt)=""
					 set ^||TMP($j,"Sort",loc,date,ptype,ts,"AR",AR,cnt)=""
				 }
				 ; calculate mean
				 set (meanRC,meanAR,medianRC,medianAR,percentileRC,percentileAR)=""
				 if tot {
					 //set meanRC=totalRC/tot
					 set meanAR=totalAR/tot
				 }
				 set strResult=tot_"\\"_(meanRC\60)_"\\\"_(meanAR\60)
				 ; calculate median
				 set parity=tot#2,tot10=$j(tot/10,0,0)+1,tot0=tot\2,tot1=(tot+1)\2,tot2=(tot+2)\2
				 for node="RC","AR" {
					 set (cnt,stop,x1)="" set median=""
				     for {
					     set x1=$order(^||TMP($j,"Sort",loc,date,ptype,ts,node,x1)) 
					     if x1="" quit  
					     set x2="" 
					     for {
						     set x2=$order(^||TMP($j,"Sort",loc,date,ptype,ts,node,x1,x2)) 
						     if x2=""||(stop=1) quit
						     set cnt=cnt+1
						     if parity'=0,tot1=cnt set stop=1,median=^||TMP($j,"Delta",loc,date,ptype,ts,"Count",x2,node) 
						     if parity=0,tot0=cnt set median=^||TMP($j,"Delta",loc,date,ptype,ts,"Count",x2,node)
						     if parity=0,tot2=cnt set stop=1,median=(median+^||TMP($j,"Delta",loc,date,ptype,ts,"Count",x2,node))/2 quit
					     }
					     if stop=1 quit
				     }
                     ; calculate 90th percentile
                     set (cnt,stop,x1)="" set percentile=""
                     for {
	                     set x1=$order(^||TMP($j,"Sort",loc,date,ptype,ts,node,x1),-1) 
	                     if x1="" quit
	                     set x2="" 
	                     for {
		                     set x2=$order(^||TMP($j,"Sort",loc,date,ptype,ts,node,x1,x2),-1) 
		                     if x2="" quit  
		                     set cnt=cnt+1
		                     if tot10=cnt set stop=1,percentile=^||TMP($j,"Delta",loc,date,ptype,ts,"Count",x2,node) quit
	                     }
	                     if stop=1 quit    
                     }
                     set $piece(strResult,"\",$select(node="RC":2,1:5))=(median\60)
                     set $piece(strResult,"\",$select(node="RC":4,1:7))=(percentile\60)
				 }
				 set ^||TMP($j,"Report",loc,date,ptype,ts)=strResult
			 }
		 }
	 }
 }
 //k ^test("dataZEN") m ^test("dataZEN")=^||TMP		 
 } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="workEpis">
<FormalSpec>pEpisode:%String,date:%Integer</FormalSpec>
<PublicList>PLIST</PublicList>
<Implementation><![CDATA[
	set ret=$$$OK
	try {
		if $$select^LVBEPVIS(pEpisode,"Y") quit
	    merge VISIT=PLIST kill PLIST
        if $l(..PatientLocations),(","_..PatientLocations_",")'[(","_VISIT(22)_",") quit  // Hospital code DR
        if $l(..PatientType),(","_..PatientType_",")'[(","_VISIT(93)_",") quit  
        if $l(..PatientLocationType),'$$select^LVBCTHOS(VISIT(22),"Y"),PLIST(19)'=..PatientLocationType quit 
        set ts="" 
        for {
	       set ts=$order(^TEPI(pEpisode,1,ts)) if ts="" quit
	       if $l(..TestSet),..TestSet'=ts continue
           if $l(..TestGroup),'$data(^TTAB("GR",..TestGroup,"TS",ts)) continue
           set seq=""
           for {
	           set seq=$order(^TEPI(pEpisode,1,ts,seq)) if seq="" quit
	           set rec=^(seq)
               //set collected=VISIT(12)_","_VISIT(13)
               set received=VISIT(61)_","_VISIT(62)
               set authorised=$piece(rec,"\",4)_","_($p(rec,"\",5)*60) set:authorised=",0" authorised=""
               set hospitalCodeDR=$select(VISIT(22)="":" ",1:VISIT(22))
               set patientType=$select(VISIT(93)="":" ",1:VISIT(93))
               //set ^||TMP($j,"Process",hospitalCodeDR,date,patientType,pEpisode,ts,seq)=collected_"\"_received_"\"_authorised
               set ^||TMP($j,"Process",hospitalCodeDR,date,patientType,pEpisode,ts,seq)=""_"\"_received_"\"_authorised
           }
        }
    } catch(exception)
    {
	  set ret=exception.AsStatus()
    }	
    quit ret
]]></Implementation>
</Method>

<Method name="getPatientLocationsString">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPatientLocations</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set loc=""	
  if $length(pPatientLocations) {
	  set loc="" 
	  for i=1:1:$l(pPatientLocations,",") {
		  set xx=$piece(pPatientLocations,",",i)
		  set loc=loc_$select($l(loc):", ",1:"")_$piece(^TTAB("RH",xx),"\")
	  }
  }
  if loc="" set loc="Все местоположения пациента"
  quit loc
]]></Implementation>
</Method>

<Method name="GetPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>params:%String,pFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
    Set %request=##class(%CSP.Request).%New()
    set %request.Data("$NODELETE",1)=1
	//Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	//Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("PatientLocations")=$piece(params,$char(1),1)
	Set %request.Data("PatientType")=$piece(params,$char(1),2)
	Set %request.Data("DateFrom")=$piece(params,$char(1),3)
	Set %request.Data("DateTo")=$piece(params,$char(1),4)
	Set %request.Data("TestSet")=$piece(params,$char(1),5)
	Set %request.Data("TestGroup")=$piece(params,$char(1),6)
	Set %request.Data("PatientLocationType")=$piece(params,$char(1),7)
	Set %request.Data("User")=$piece(params,$char(1),8)

	Set report = ##class(TCLEx.ReportZEN.TurnaroundTime).%New()
	Do report.GenerateReport(pFileName,2)
  } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="printPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>params:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
     set reportID=$G(^TMP("REPORTSPB",$j)) 
     if reportID="" $$$ThrowOnError($$$ERROR($$$GeneralError,"Идентификатор отчета не определен"))
  
     set USER=$piece(params,$char(1),8)
	 $$$ThrowOnError(##class(Report.rpt).getPathFileReportGroup(.pathFileReport,$get(USER)))
     
     set fileReport=pathFileReport_"/"_$this_USER_".pdf"
    // s ^test(111,"fileReport")=fileReport
     $$$ThrowOnError(##class(TCLEx.ReportZEN.TurnaroundTime).GetPDF(params,fileReport))
     $$$ThrowOnError(##class(Report.rpt).getNamePrinterForReport(reportID,$get(USER),.printerName)) 
     //s ^test(111,"printerName")=printerName
     if ##class(%File).Exists(fileReport) {
	     set flagSilence=1
         $$$ThrowOnError(##class(Report.rpt).startPdfBoxFacade(fileReport,printerName,flagSilence))

     }
   } catch(exception)
  {
	  set ret=exception.AsStatus()
	  set ^logError("reportZEN",$this,$i(^logError("reportZEN",$this)))=$System.Status.GetErrorText(exception.AsStatus())
  }	
  quit ret
]]></Implementation>
</Method>

<Query name="queryRpt">
<Type>%Query</Type>
<FormalSpec>pPpatientLocations:%String,pPatientType:%String,pDateFrom:%String,pDateTo:%String,pTestSet:%String="",pTestGroup:%String="",pPatientLocationType:%String=""</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="patientLocation:%String,date:%String,patientType:%String,testset:%String,total:%Float,mean:%Float,median:%Float,val90:%Float"/>
</Query>

<Method name="queryRptExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pPatientLocations:%String,pPatientType:%String,pDateFrom:%String,pDateTo:%String,pTestSet:%String="",pTestGroup:%String="",pPatientLocationType:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	set $li(qHandle,1)=""
  	if $tr(pDateFrom,$char(0),"")=""||($tr(pDateTo,$char(0),"")="")||($tr(pPatientLocations,$char(0),"")="") quit $$$OK
  	set pPatientType=$tr(pPatientType,$char(0),"")
  	set pTestSet=$tr(pTestSet,$char(0),"")
  	set pTestGroup=$tr(pTestGroup,$char(0),"")
  	set pPatientLocationType=$tr(pPatientLocationType,$char(0),"")
  	//s ^test(222,"params")=pPatientLocations_"@"_pPatientType_"@"_$zdh(pDateFrom,3)_"@"_$zdh(pDateTo,3)_"@"_pTestSet_"@"_pTestGroup_"@"_pPatientLocationType
    do ..getData(pPatientLocations,pPatientType,$zdh(pDateFrom,3),$zdh(pDateTo,3),pTestSet,pTestGroup,pPatientLocationType)
    kill ^||TMP($j,"query")
    set refTmp=$name(^||TMP($j,"Report"))
    set loc="",npp=0,r=$char(1)
    for {
       set loc=$order(@refTmp@(loc)) if loc="" quit
       set location=loc_" "_$piece($get(^TTAB("RH",loc)),"\")
       set date=""
       for {
           set date=$order(@refTmp@(loc,date)) if date="" quit
           set ptype=""
           for {
	          set ptype=$order(@refTmp@(loc,date,ptype)) if ptype="" quit
	          set ts=""
	          for {
		          set ts=$order(@refTmp@(loc,date,ptype,ts)) if ts="" quit
		          set rec=^(ts)
		          set npp=npp+1
		          set ^||TMP($j,"query",npp)=location_r_$zd(date,4)_r_ptype_r_ts_r_rec
	          }
           }
       }
    }
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryRptFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryRptExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set item=$listget(qHandle,1)
	set item=$order(^||TMP($j,"query",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set rec=$get(^||TMP($j,"query",item))
	//patientLocation:%String,date:%String,patientType:%String,testset:%String,total:%Float,mean:%Float,median:%Float,val90
	set $li(Row,1)=$piece(rec,$char(1),1)
	set $li(Row,2)=$piece(rec,$char(1),2)
	set $li(Row,3)=$piece(rec,$char(1),3)
	set $li(Row,4)=$piece(rec,$char(1),4)
	set result=$piece(rec,$char(1),5)
	set $li(Row,5)=$piece(result,"\",1)
	set $li(Row,6)=$piece(result,"\",5)
	set $li(Row,7)=$piece(result,"\",6)
	set $li(Row,8)=$piece(result,"\",7)
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestqueryRpt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 Set result=##class(%ResultSet).%New("TCLEx.ReportZEN.TurnaroundTime:queryRpt")
 Do result.Execute("2011","","2001-01-01","2011-02-01") //,"C030") 
 For  Quit:'result.Next()  Do
 . Write result.Data("patientLocation")," ",result.Data("date")," ",result.Data("testset")," ",result.Data("total")," ",result.Data("mean"),!
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
// for test
Method %OnBeforeReport() As %Status
{
	Set ..PatientLocations = 2011
	Set ..DateFrom = $zdh("01/01/2011",4)
	Set ..DateTo = $zdh("01/02/2011",4)
	Quit $$$OK
}*/
]]></Content>
</UDLText>
</Class>
</Export>
