<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Service.LabOrder">
<Description>
Web-сервисы для работы с заказами</Description>
<Super>%SOAP.WebService</Super>
<TimeCreated>62003,48825.282383</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
Namespace. Change this to the namespace used by the web service.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Default>TrakCareLabOrder</Default>
</Parameter>

<Method name="Import">
<Description>
Импорт объекта заказа в TrakCareLab </Description>
<FormalSpec>pOrder:TCLEx.Object.LabOrder</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	If '$IsObject(pOrder)||(pOrder.%ClassName(1)'="TCLEx.Object.LabOrder") Quit $$$ERROR($$$GeneralError,"Некорректный объект класса TCLEx.Object.LabOrder !")
	;
	Set patientid=pOrder.PatientId
	Set ok=..InsertPatient(.patientid)
	If 'ok Quit ok
	Set pOrder.PatientId=patientid
	;
	If '##class(User.EPVisitNumber).%ExistsId(pOrder.EpisId) {
		Set ok=..InsertEpisode(pOrder)
		If 'ok Quit ok
	}
	;
	Set ok=..InsertTestSets2(pOrder.EpisId,pOrder.TestSets,pOrder.Specimens,pOrder.Containers)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CorrectOrder">
<Description>
Корректирование существующего заказа </Description>
<FormalSpec>pOrderNumber:%String,pProperties:%String,pOrder:TCLEx.Object.LabOrder</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set patientid=pOrder.PatientId
	Set ok=..InsertPatient(.patientid)
	If 'ok Quit ok
	Set pOrder.PatientId=patientid 
	//
	Kill ^||Episodes
	Do ##class(TCLEx.Function.LabOrder).CreateOrderEpisodesGlb(pOrderNumber,$Name(^||Episodes))
	Set episode=""
	Set ok=$$$OK
	Kill emails
	For  {
		Set episode=$Order(^||Episodes(episode))
		If episode="" Quit
		Set episobj=##class(User.EPVisitNumber).%OpenId(episode)
		If '$IsObject(episobj) {
			Set ok=$$$ERROR($$$GeneralError,"Не удалось открыть объект эпизода "_episode_" !")
		}Else {
			Set email=episobj.EPVISPhoneWork
			If (email'="")&&('$Data(emails(email))) {
				Set emails(email)=""
				Do ##class(TCLEx.Function.EMail).DeletePatientEMail(pOrderNumber,email)
			}
			Set ok=..CorrectEpisode(episode,pProperties,pOrder)
			Do ##class(TCLEx.Function.Episode).ResendResult(episode)
		}
		If 'ok Quit
	}	
	Quit ok
]]></Implementation>
</Method>

<Method name="CorrectEpisode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisodeId:%String,pProperties:%String,pOrder:TCLEx.Object.LabOrder</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisodeId)
	If '$IsObject(episobj) Quit $$$ERROR($$$GeneralError,"Не удалось открыть объект эпизода "_pEpisodeId_" !")
	Set cnt=$Length(pProperties,",")
	For i=1:1:cnt {
		Set property=$Piece(pProperties,",",i)
		If property="PatientId" {
			Do episobj.EPVISDebtorNumberDRSetObjectId(pOrder.PatientId) 
		}ElseIf property="Surname" {
			Set episobj.EPVISSurname=pOrder.Surname
		}ElseIf property="Name" {
			Set episobj.EPVISGivenName=pOrder.Name
		}ElseIf property="FatherName" {
			Set episobj.EPVISName1=pOrder.FatherName
		}ElseIf property="DOB" {
			Set episobj.EPVISDateOfBirth=pOrder.DOB
		}ElseIf property="Sex" {
			Do episobj.EPVISSpeciesDRSetObjectId(pOrder.Sex) 
		}ElseIf property="DateOfRequest" {
			Set episobj.EPVISDateOfRequest=pOrder.DateOfRequest
		}ElseIf property="DateOfCollection" {
			Set episobj.EPVISDateOfCollection=pOrder.DateOfCollection
		}ElseIf property="TimeOfCollection" {
			Set episobj.EPVISTimeOfCollection=pOrder.TimeOfCollection
		}ElseIf property="Priority" {
			Do episobj.EPVISPriorityCodeDRSetObjectId(pOrder.Priority) 
		}ElseIf property="ClinicalConditions" {
			Do episobj.EPVISClinicalConditionsDRSetObjectId(pOrder.ClinicalConditions) 
		}ElseIf property="Pregnant" {
			Set episobj.EPVISPregnant=pOrder.Pregnant
		}ElseIf property="PregnantNumberOfWeeks" {
			Set episobj.EPVISPregnantNumberOfWeeks=pOrder.PregnantNumberOfWeeks
		}ElseIf property="HospitalDepartment" {
			Set episobj.EPVISExtra8=pOrder.HospitalDepartment
		}ElseIf property="Doctor" {
			Do episobj.EPVISDoctorCodeDRSetObjectId(pOrder.Doctor) 
		}ElseIf property="PatientAddress1" {
			Set episobj.EPVISPatientAddress1=pOrder.PatientAddress1
		}ElseIf property="PatientAddress2" {
			Set episobj.EPVISPatientAddress2=pOrder.PatientAddress2
		}ElseIf property="InsuranceCompany" {
			Set episobj.EPVISExtra9=pOrder.InsuranceCompany
		}ElseIf property="PolicySeries" {
			Set episobj.EPVISExtra10=pOrder.PolicySeries
		}ElseIf property="PolicyNumber" {
			Set episobj.EPVISExtra11=pOrder.PolicyNumber
		}ElseIf property="Pasport" {
			Set episobj.EPVISExtra12=pOrder.Pasport
		}ElseIf property="MobilePhone" {
			Set episobj.EPVISPhoneHome=pOrder.MobilePhone
		}ElseIf property="EMail" {
			Set episobj.EPVISPhoneWork=pOrder.EMail
		}ElseIf property="MedicalComment" {
			Set episobj.EPVISExtra13=pOrder.MedicalComment
		}ElseIf property="Height" {
			Set episobj.EPVISExtra5=pOrder.Height
		}ElseIf property="Weight" {
			Set episobj.EPVISExtra6=pOrder.Weight
		}ElseIf property="DailyDiuresis" {
			Set episobj.EPVISExtra7=pOrder.DailyDiuresis
		}
		
	}
	Quit episobj.%Save()
]]></Implementation>
</Method>

<Method name="InsertPatient">
<Description>
Добавление записи в  User.DEBDebtor, если PatinentID не заполнен или нет данных в User.DEBDebtor для этого PatinentID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pPatientId:%String]]></FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If pPatientId="" {
		Kill PLIST
		If '$$new^LVBDEB("") Set pPatientId=PLIST(1)
	} 
	If pPatientId="" Quit $$$ERROR($$$GeneralError,"Не удалось получить ID пациента для записи в таблице SQLUser.DEB_Debtor !")		
	If '$Data(^TDEB(pPatientId)) { ; Нет записи в User.DEBDebtor
		Kill PLIST
 		Set PLIST(2)=pPatientId,PLIST=$Order(PLIST(""),-1) 
 		If $$insert^LVBDEB() Quit $$$ERROR($$$GeneralError,"Не удалось добавить запись в таблицу SQLUser.DEB_Debtor (SQLCODE="_$Get(SQLCODE)_") !")
 	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertEpisode">
<Description>
Добавление записи в  User.EPVisitNumber</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:TCLEx.Object.LabOrder</FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If pOrder.EpisId="" Quit $$$ERROR($$$GeneralError,"Не заполнен номера заказа !")
	If $Data(^TEPI(pOrder.EpisId)) Quit $$$ERROR($$$GeneralError,"Уже есть запись для заказа номер "_pOrder.EpisId_"!")
	
	Kill PLIST
	Set PLIST(2)=pOrder.EpisId					;EPVIS_VisitNumber
	Set PLIST(20)=pOrder.PatientId				;EPVIS_DebtorNumber_DR
	Set PLIST(31)=pOrder.UserId					;EPVIS_UserID_DR
	Set PLIST(65)=","_pOrder.HospitalMRN		;EPVIS_Hospital_EpisodeUR_Number
	Set PLIST(66)=..LaboratoryCode()			; Location
	Set PLIST(86)=0								; EPVIS_StatusPatient (0=Fully Entered)
	
	;
	Set PLIST(3)=pOrder.Surname					;EPVIS_Surname
	Set PLIST(4)=pOrder.Name	 				;EPVIS_GivenName
	Set PLIST(99)=pOrder.FatherName 			;EPVIS_Name_1
	Set PLIST(6)=pOrder.DOB 					;EPVIS_DateOfBirth
	Set PLIST(26)=pOrder.Age 					;EPVIS_Age
	Set PLIST(5)=pOrder.Sex 					;EPVIS_Species_DR
	Set PLIST(63)=pOrder.Pregnant 				;EPVIS_Pregnant
	Set PLIST(64)=pOrder.PregnantNumberOfWeeks 	;EPVIS_PregnantNumberOfWeeks
	Set PLIST(98)=pOrder.ClinicalConditions 	;EPVIS_ClinicalConditions_DR
	Set horolog=$Horolog
	Set PLIST(10)=$Piece(horolog,",",1)			;EPVIS_DateOfEntry
	Set PLIST(61)=$Piece(horolog,",",1)			;EPVIS_DateOfReceiving
	Set PLIST(62)=$Piece(horolog,",",2)			;EPVIS_TimeOfReceiving
	Set PLIST(14)=pOrder.DateOfRequest 			;EPVIS_DateOfRequest
	Set PLIST(12)=pOrder.DateOfCollection 		;EPVIS_DateOfCollection
	Set PLIST(13)=pOrder.TimeOfCollection 		;EPVIS_TimeOfCollection
	Set PLIST(17)=pOrder.Priority 				;EPVIS_PriorityCode_DR
	Set PLIST(22)=pOrder.Hospital 				;EPVIS_HospitalCode_DR
	Set PLIST(9)=pOrder.Hospital 				;EPVIS_PaymentCode_DR
	Set PLIST(74)=pOrder.Hospital 				;EPVIS_BillLocation_DR
	Set PLIST(81)=pOrder.HospitalDepartment 	;EPVIS_Extra8
	Set PLIST(15)=pOrder.Doctor 				;EPVIS_DoctorCode_DR

	Set PLIST(32)=pOrder.PatientAddress1 		;EPVIS_PatientAddress1
	Set PLIST(33)=pOrder.PatientAddress2 		;EPVIS_PatientAddress2
	Set PLIST(82)=pOrder.InsuranceCompany 		;EPVIS_Extra9
	Set PLIST(83)=pOrder.PolicySeries 			;EPVIS_Extra10
	Set PLIST(114)=pOrder.PolicyNumber 			;EPVIS_Extra11
	Set PLIST(115)=pOrder.Pasport	 			;EPVIS_Extra12
	Set PLIST(117)="WebER"	 					;EPVIS_Extra14 - Признак, что заказ добавлен из WebER
	Set PLIST(118)=pOrder.ExternalOrderNumber	;EPVIS_Extra15

	;Set PLIST(32)=pOrder.Diagnosis 			;???
	;Set PLIST(33)=pOrder.Antibiotics 			;??
	Set PLIST(78)=pOrder.Height 				;EPVIS_Extra5
	Set PLIST(79)=pOrder.Weight 				;EPVIS_Extra6
	Set PLIST(80)=pOrder.DailyDiuresis 			;EPVIS_Extra7
	Set PLIST(116)=pOrder.MedicalComment		;EPVIS_Extra13
	Set PLIST(43)=pOrder.MobilePhone 			;EPVIS_PhoneHome
	Set PLIST(44)=pOrder.EMail		 			;EPVIS_PhoneWork
	Set sqlcode=$$insert^LVBEPVIS()
	Set sqlcode=$Piece(sqlcode,$Char(1),1)
	If sqlcode'=0 Quit $$$ERROR($$$GeneralError,"Не удалось добавить запись в таблицу SQLUser.EP_VisitNumber (SQLCODE="_$Get(sqlcode)_") !")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertTestSets">
<Description>
Добавление заказанных тестов в эпизод</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode,pTestSets:%String,pSpecimens:%String,pContainers:%String</FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set addsupersets=..SuperSetSummaryTestSets(pTestSets)
	If (addsupersets'="") {
		Set pTestSets=pTestSets_","_addsupersets
	}	
	Set err=""
	Set cnt=$Length(pTestSets,",")
	For i=1:1:cnt {
		Set testsetstr=$Piece(pTestSets,",",i)
		Set testset=$Piece(testsetstr,":",1)
		Set superset=$Piece(testsetstr,":",2)
		If testset="" Continue
		Kill PLIST
		Set PLIST(0)=pEpisode										// ID
		Set PLIST(2)=$Order(^TEPI(pEpisode,1,testset,""),-1)+1		// VISTS_TestSetCounter
		Set PLIST(3)=testset										// VISTS_TestSet_DR
		Set PLIST(32)=superset										// VISTS_SuperSet_DR
		Set specimenstr=$Piece(pSpecimens,",",i)
		If $Length(specimenstr,";")>1 {
			Set specimenstr=""
		}	
		Set PLIST(47)=specimenstr									// VISTS_SpecimenType_DR
		Set containerstr=$Piece(pContainers,",",i)
		If $Length(containerstr,";")=1 {							// Если 1 контейнер
			Set containerstr=$Piece(containerstr,":",1)				// то не нужен тип контейнера 
			If containerstr=pEpisode Set containerstr=""			// Если номер эпизода совпалает с номером контейнера, то не нужно дополнительное значение
		}	
		Set PLIST(48)=containerstr									// VISTS_SpecimenNo
		Set horolog=$Horolog
		Set PLIST(24)=+horolog										// VISTS_DateOfCreation
		Set PLIST(25)=$Piece(horolog,",",2)							// VISTS_TimeOfCreation
		Set PLIST(29)=..LaboratoryCode()
		Set PLIST(40)=..ReferralLaboratory4TestSet(testset)			// VISTS_MoveToReferralLab_DR
		Set SQLCODE=$$insert^LVBVISTS(pEpisode)
		Set SQLCODE=$Piece(SQLCODE,$Char(1),1)
		If SQLCODE'=0 Set err="SQLCODE="_SQLCODE_",TestSet="_testset
		If err'="" Quit
	}	
	If err'="" Quit $$$ERROR($$$GeneralError,"Не удалось добавить запись в таблицу SQLUser.EP_VisitTestSet ("_err_")!")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertTestSets2">
<Description>
Добавление заказанных тестов в эпизод
с проверкой Actions</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode,pTestSets:%String,pSpecimens:%String,pContainers:%String</FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set addsupersets=..SuperSetSummaryTestSets(pTestSets)
	If (addsupersets'="") {
		Set pTestSets=pTestSets_","_addsupersets
	}
	// Проверяем наличие actions на замену и добавление наборов тестов  и выполняем их
	set ok=..TestActionsReplaceAddTestSet(pEpisode,.pTestSets,pSpecimens,pContainers)
	
	Set ok=$$$OK
	kill inputDataForTSCheckLVBVIS7 // входящий массив PLIST для вызова $$TScheck^LVBVIS7
	Set cnt=$Length(pTestSets,",")
	For i=1:1:cnt {
		set ok1=..FillPLISTforVisitTestSet(pEpisode, pTestSets, pSpecimens, pContainers,i)
		if 'ok1 {
			set ok=$$$ADDSC(ok,ok1)
			continue
		}
		  
		set rowid=PLIST(0)_"||"_PLIST(3)_"||"_PLIST(2)  
		Set SQLCODE=$$insert^LVBVISTS(pEpisode)  
		Set SQLCODE=$Piece(SQLCODE,$Char(1),1)
		If SQLCODE'=0 {
			Set ok1=$$$ERROR($$$GeneralError,"SQLCODE="_SQLCODE_",TestSet="_rowid) 
			set ok=$$$ADDSC(ok,ok1)
			continue
		}
		
		// Проверяем наличие actions SD and SF и выполняем их
		set ok1=..ActionsTestSet(rowid,.inputDataForTSCheckLVBVIS7)
		if 'ok1 {
			set ok=$$$ADDSC(ok,ok1)
			continue
		} 
	}	
	If 'ok {
		do ##class(TCLEx.Function.General).WriteError($System.Status.GetErrorText(ok),$zn)
		set ok=$$$ERROR($$$GeneralError,"Не удалось добавить запись в таблицу SQLUser.EP_VisitTestSet ("_$SYSTEM.Status.GetErrorText(ok)_")!")
	}
	Quit ok
]]></Implementation>
</Method>

<Method name="FillPLISTforVisitTestSet">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode,pTestSets:%String,pSpecimens:%String,pContainers:%String,pNum:%Integer</FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		Set testsetstr=$Piece(pTestSets,",",pNum)
		set flagAddTestSetByAction=$piece(testsetstr,$char(1),2) // флаг, что набор тестов добавлен по Action
		set testsetstr=$piece(testsetstr,$char(1),1)
 		Set testset=$Piece(testsetstr,":",1)
		Set superset=$Piece(testsetstr,":",2)
		Set priority=$Piece(testsetstr,":",3)
		If testset="" quit
		set tscnt=$Order(^TEPI(pEpisode,1,testset,""),-1)+1
		Kill PLIST
		Set PLIST(0)=pEpisode										// ID
		Set PLIST(2)=tscnt		                                    // VISTS_TestSetCounter
		Set PLIST(3)=testset										// VISTS_TestSet_DR
		Set PLIST(32)=superset										// VISTS_SuperSet_DR
		Set PLIST(13)=priority 										// VISTS_Priority_DR
		Set specimenstr=$Piece(pSpecimens,",",pNum)
		If $Length(specimenstr,";")>1 {
			Set specimenstr=""
		}	
		Set PLIST(47)=specimenstr									// VISTS_SpecimenType_DR
		Set containerstr=$Piece(pContainers,",",pNum)
		If $Length(containerstr,";")=1 {							// Если 1 контейнер
			Set containerstr=$Piece(containerstr,":",1)				// то не нужен тип контейнера 
			If containerstr=pEpisode Set containerstr=""			// Если номер эпизода совпалает с номером контейнера, то не нужно дополнительное значение
		}	
		Set PLIST(48)=containerstr									// VISTS_SpecimenNo
		Set horolog=$Horolog
		Set PLIST(24)=+horolog										// VISTS_DateOfCreation
		Set PLIST(25)=$Piece(horolog,",",2)							// VISTS_TimeOfCreation
		Set PLIST(29)=..LaboratoryCode()
		//Set PLIST(40)=..ReferralLaboratory4TestSet(testset)			// VISTS_MoveToReferralLab_DR
		if flagAddTestSetByAction="Y" set PLIST(83)="Y"             // VISTS_AddedByAction
		set PLIST=$order(PLIST(""),-1)	
	} 
	catch(exception) 
	{
		set ok=exception.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestActionsReplaceAddTestSet">
<Description>
Проверка есть ли действия (actions) с Action Type=Replace TestSet (TR0), Add TestSet(TA0) and Action=Test Set Add (TA) (0 обозначает - No prompt)
и выполнение этих действий </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,&pTestSets:%String,pSpecimens:%String,pContainers:%String,flagRecurs:%Integer=0]]></FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		// строка "EPVIS" для входящего PLIST для функции $$TScheck^LVBVIS7
		set SQLCODE=$$select^LVBEPVIS(pEpisode)
		If +SQLCODE'=0 { 
		    Set ok=$$$ERROR($$$GeneralError,"select^LVBEPVIS: SQLCODE="_SQLCODE_",episode="_pEpisode) 
		    quit
		} 
		set strepis="" for j=1:1:PLIST set strepis=strepis_PLIST(j)_$char(28)
	    
	    kill plist  // PLIST для вызова функции $$TScheck^LVBVIS7 (будем этот массив все время дописывать)
	    kill addTS // массив добавленных Action
	    
	    
		Set allcnt=$Length(pTestSets,",")
		set testcnt=0
	    while (testcnt<allcnt) {
		    set testcnt=testcnt+1  
		    set ok1=..FillPLISTforVisitTestSet(pEpisode, pTestSets, pSpecimens, pContainers,testcnt)
		    if 'ok1 {
			    set ok=$$$ADDSC(ok,ok1)
			    continue
		    }
		    set rowid=PLIST(0)_"||"_PLIST(3)_"||"_PLIST(2)
		    set flagAddTestSetByAction=$get(PLIST(83))
		    //if flagAddTestSetByAction="Y" continue  // по рекурсии не добавляем и не заменяем наборы тестов
		    set PLIST(1)=rowid
		    set strtestset="" for j=1:1:PLIST set strtestset=strtestset_$piece($get(PLIST(j))_$char(28),$char(1),1)
		    
		    // Готовим PLIST Для функции $$TScheck^LVBVIS7
		    if '$data(plist) {
			    set plist(1)="EPVIS"_$char(1)_strepis
		    }
		    set plist($i(plist))="VISTS"_$char(1)_strtestset 
		    
		    kill PLIST
		    merge PLIST=plist
		    set PLIST=$order(PLIST(""),-1)
		    
		    // функция $$TScheck^LVBVIS7 проверяет условия срабатываения действий и возвращает действия, которые надо выполнить 
		    set SQLCODE=$$TScheck^LVBVIS7(rowid,"TA","","A","") 
		    If +SQLCODE'=0 {
			    //Set ok=$$$ADDSC(ok,$$$ERROR($$$GeneralError,"TScheck^LVBVIS7: SQLCODE="_SQLCODE_",rowid="_rowid))
			    continue
		    }
		    
			// выполнение действий (просто запись в строку pTestSets)
			kill actions merge actions=PLIST
			set flagReplaceTestSet=0
		    for j=1:1:actions {
		        set rec=$get(actions(j))
		        set typeAction=$piece(rec,$char(1),1)
		        // TR0-Replace Test Set, TA0- Test Set Add, SD - Set Data, SF - Set Field
		        if (typeAction="TR0")||(typeAction="TA0") {
			        set testsetnew=$piece($piece(rec,$char(1),2),$char(2),1)
			        if testsetnew="" continue
			        Set priority=$Piece($Piece(pTestSets,",",testcnt),":",3)
			        if '$data(^TTAB("TS",testsetnew)) continue
			        if typeAction="TR0" {
				        //if $find(pTestSets,testsetnew)'=0 continue  // если набор тестов уже есть, то не заменяем на него
				        If priority'="" Set $Piece(testsetnew,":",3)=priority
				        set $piece(pTestSets,",",testcnt)=testsetnew 
				        set flagReplaceTestSet=1
				        continue
			        }
			        if typeAction="TA0" {
				        //if $find(pTestSets,testsetnew)'=0 continue  // если набор тестов уже есть, то не добавляем его
				        If priority'="" Set $Piece(testsetnew,":",3)=priority
				        //set pTestSets=pTestSets_","_testsetnew_$char(1)_"Y"
				        set $piece(pTestSets,",",testcnt)=$piece(pTestSets,",",testcnt)_","_testsetnew_$char(1)_"Y"
				        set allcnt=allcnt+1
				        continue
			        }
		        }
		    }
		    if flagReplaceTestSet=1 set testcnt=testcnt-1 // для нового набора тестов тоже надо проверть actions => не увеличиваем счетчик
		}
	}
	catch (exeption) 
	{
		set ok=exeption.AsStatus()
	}
    //if 'ok s ^testError($i(^testError))=ok
	quit ok
]]></Implementation>
</Method>

<Method name="ActionsTestSet">
<Description>
Проверка есть ли действия (actions) с Action Type= Set Data (SD), Set Field (SF) and Action=Test Set Add (TA) (0 обозначает - No prompt)
и выполнение этих действий </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRowidVisitTestSet:%String,&inputDataForTSCheck:%String]]></FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set epis=$piece(pRowidVisitTestSet,"||",1)
		// строим входящий PLIST для функции $$TScheck^LVBVIS7
		if '$data(inputDataForTSCheck) {
			// строка EPVIS
		    set SQLCODE=$$select^LVBEPVIS(epis)
		    If +SQLCODE'=0 {
			   //set ok=$$$ERROR($$$GeneralError,"select^LVBEPVIS: SQLCODE="_SQLCODE_",rowid="_pRowidVisitTestSet) 
			   quit
		    } 
		    set ss="" for i=1:1:PLIST set ss=ss_$get(PLIST(i))_$char(28)
	        if $tr(ss,$char(28),"")'="" set inputDataForTSCheck($order(inputDataForTSCheck(""),-1)+1)="EPVIS"_$char(1)_ss
		}
		if '$data(inputDataForTSCheck) quit
	    // строки VISTS
	    set SQLCODE=$$select^LVBVISTS(pRowidVisitTestSet)
	    if +SQLCODE'=0 {
		    //Set ok=$$$ERROR($$$GeneralError,"select^LVBVISTS: SQLCODE="_SQLCODE_",rowid="_pRowidVisitTestSet) 
		    quit
	    }
	    set ss="" for i=1:1:PLIST set ss=ss_$piece($get(PLIST(i)),$char(1),1)_$char(28)
	    if $tr(ss,$char(28),"")'="" set inputDataForTSCheck($order(inputDataForTSCheck(""),-1)+1)="VISTS"_$char(1)_ss           
		if $order(inputDataForTSCheck(""),-1)<2 quit
		
	    // функция $$TScheck^LVBVIS7 проверяет условия срабатываения действий и возвращает действия, которые надо выполнить 
	    kill PLIST m PLIST=inputDataForTSCheck
	    set PLIST=$order(PLIST(""),-1)
		set SQLCODE=$$TScheck^LVBVIS7(pRowidVisitTestSet,"TA","","A","")  
		If +SQLCODE'=0 {
			//Set ok=$$$ERROR($$$GeneralError,"TScheck^LVBVIS7: SQLCODE="_SQLCODE_",rowid="_pRowidVisitTestSet) 
			quit
		}
		kill actions m actions=PLIST
		
		// выполнение действий
		for i=1:1:actions {
		    set rec=$get(actions(i))
		    set typeAction=$piece(rec,$char(1),1)
		    // TR0-Replace Test Set, TA0- Test Set Add, SD - Set Data, SF - Set Field
		    //if (typeAction'="SD")&&(typeAction'="SF") continue
		    if (typeAction'="SF")&&(typeAction'="VQ0") continue
		    // изменение указанного поля (Set Field)
		    if typeAction="SF" {
			    set numChangeField=$piece(rec,$char(1),6)
			    if numChangeField'>0 {
				    set ok=$$$ADDSC(ok,$$$ERROR($$$GeneralError,"Некорректное поле для изменения "_numChangeField))
				    continue
			    }
			    set value=$piece(rec,$char(1),2)
			    if numChangeField="" continue
			    set SQLCODE=$$select^LVBVISTS(pRowidVisitTestSet)
			    if +SQLCODE'=0 {
				    Set ok=$$$ADDSC(ok,$$$ERROR($$$GeneralError,"select^LVBVISTS: SQLCODE="_SQLCODE_",rowid="_pRowidVisitTestSet))
				    continue
			    }
			    if numChangeField>$get(PLIST) {
				    set ok=$$$ADDSC(ok,$$$ERROR($$$GeneralError,"Некорректное поле для изменения "_numChangeField))
				    continue
			    }
			    set PLIST(numChangeField)=value
			    set PLIST=$order(PLIST(""),-1)
			    set err=$$update^LVBVISTS(pRowidVisitTestSet) 
			    if +err'=0 {
				    set ok=$$$ADDSC(ok,$$$ERROR($$$GeneralError,err))
				    continue
			    }
		    }
		    // verification queue
		    if typeAction="VQ0" {
			   set codequeue=$piece(rec,$char(1),2) 
			   set err=$$VQ^LVBCOM13(pRowidVisitTestSet,codequeue)
			   if +err'=0 {
				    set ok=$$$ADDSC(ok,$$$ERROR($$$GeneralError,err))
				    continue
			  }
		    }
		    
		    // ввод данных по указанному тесту (Set Data)
		    /*
		    elseif typeAction="SD" {
			    set value=$piece(rec,$char(1),2)
			    set test=$piece(rec,$char(1),6)
			    if '$data(^TTAB("TC",test)) continue
			    kill PLIST
			    set rowid=pRowidVisitTestSet_"||"_test
			    set PLIST(1)=rowid_"\"_test_"\"_value
			    set PLIST=$order(PLIST(""),-1)
			    if $$save^LVBVIS4(rowid,"E")
		    }*/
		}
	}
	catch (exeption) 
	{
		set ok=exeption.AsStatus()
	} 
	
	quit ok
]]></Implementation>
</Method>

<Method name="SuperSetSummaryTestSets">
<Description>
Список итоговых наборов тестов для супернаборов, входящих в строку назначенных наборов тестов pTestSets</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSets:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=""
	Kill ^||tmp
	Set cnt=$Length(pTestSets,",")
	For i=1:1:cnt {
		Set testsetstr=$Piece(pTestSets,",",i)
		Set testset=$Piece(testsetstr,":",1)
		Set superset=$Piece(testsetstr,":",2)
		If (superset'="") {
			Set ^||tmp(superset)=""
		}	
	}
	Set (result,superset)=""
	For  {
		Set superset=$Order(^||tmp(superset))
		If superset="" Quit
		Set summaryts=##class(TCLEx.Function.SuperSet).SummaryTestSet(superset)
		If summaryts="" Continue
		If result'="" Set result=result_","
		Set result=result_summaryts_":"_superset
	}
	Quit result
]]></Implementation>
</Method>

<Method name="ReferralLaboratory4TestSet">
<Description>
Получение кода лаборатии, в случае аутсорсинга набора тестов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String</FormalSpec>
<PublicList>SQLCODE,laboratory,pTestSet</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set laboratory=""
	&sql(
		Select CTTSK_Value  Into :laboratory from SQLUser.CT_TestSetActions where CTTSK_ParRef=:pTestSet and CTTSK_FieldToSet=40 and CTTSK_ActiveFlag='Y'
	)
	Quit laboratory
]]></Implementation>
</Method>

<Method name="ValidateOrder">
<Description>
Проверка коррректности заполнения объекта заказа</Description>
<FormalSpec>pOrder:TCLEx.Object.LabOrder</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LaboratoryCode">
<Description>
Код лаборатории, которой передается эпизод (значение из справочника CTUserLocation, там должна быть только  запись)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "BION"
]]></Implementation>
</Method>
</Class>
</Export>
