<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Service.CodeTables">
<Super>%RegisteredObject</Super>
<TimeCreated>62068,73301.610453</TimeCreated>

<Query name="ClinicalConditions">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery> select CTCLC_Code,CTCLC_Description
 from SQLUser.CT_ClinicalConditions</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="ClinicalConditionsBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CClinicalConditions CURSOR FOR
	     select CTCLC_Code,CTCLC_Description
	     	into :code, :desc
		from SQLUser.CT_ClinicalConditions
	 )
	 &sql(OPEN CClinicalConditions)
	 &sql(FETCH CClinicalConditions)
	
	 While (SQLCODE = 0) {
		 If code'="" set ^||CTData(code)=$LB(desc)
		 &sql(FETCH CClinicalConditions)
	 }
	 &sql(CLOSE CClinicalConditions)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Species">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery> select CTSP_Code,CTSP_Desc
 from SQLUser.CT_Species</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="SpeciesBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CSpecies CURSOR FOR
	     select CTSP_Code,CTSP_Desc
	     	into :code, :desc
		from SQLUser.CT_Species
	 )
	 &sql(OPEN CSpecies)
	 &sql(FETCH CSpecies)
	
	 While (SQLCODE = 0) {
		 If code'="" set ^||CTData(code)=$LB(desc)
		 &sql(FETCH CSpecies)
	 }
	 &sql(CLOSE CSpecies)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Priority">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery> select CTPR_Code,CTPR_Desc
 from SQLUser.CT_Priority</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="PriorityBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CPriority CURSOR FOR
	     select CTPR_Code,CTPR_Desc
	     	into :code, :desc
		from SQLUser.CT_Priority
	 )
	 &sql(OPEN CPriority)
	 &sql(FETCH CPriority)
	
	 While (SQLCODE = 0) {
		 If code'="" set ^||CTData(code)=$LB(desc)
		 &sql(FETCH CPriority)
	 }
	 &sql(CLOSE CPriority)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Container">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery> SELECT CTCON_Code,CTCON_Description
 FROM SQLUser.CT_Container</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="ContainerBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CContainer CURSOR FOR
    SELECT CTCON_Code,CTCON_Description
    INTO :code, :name
    FROM SQLUser.CT_Container)
    &sql(OPEN CContainer)
    &sql(FETCH CContainer)
	While (SQLCODE = 0) {
		 If code'="" set ^||CTData(code)=$LB(name)
		&sql(FETCH CContainer)
	}
    &sql(CLOSE CContainer)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Doctor">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT  CTDR_Code,CTDR_Surname,CTDR_Company_DR,CTDR_ActiveFlag
    FROM SQLUser.CT_Doctor</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="DoctorBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CDoctor CURSOR FOR
	    SELECT  CTDR_Code,CTDR_Surname,CTDR_Company_DR,CTDR_ActiveFlag
	    	INTO :code,:name,:comp,:active
		     FROM SQLUser.CT_Doctor
	 )
	&sql(OPEN CDoctor)
	&sql(FETCH CDoctor)
	
	While (SQLCODE = 0) {
		If code=""||(comp="") {
			&sql(FETCH CDoctor)
			continue
		} 
		set ^||Doctor(comp,code)=$LB(name,active)
		&sql(FETCH CDoctor)
	}
    
	&sql(CLOSE CDoctor)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Hospital">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT  CTHOS_RowId,CTHOS_Name,CTHOS_ActiveFlag
    FROM SQLUser.CT_Hospital</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="HospitalBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CHospital CURSOR FOR
	    SELECT  CTHOS_RowId,CTHOS_Name,CTHOS_ActiveFlag
	    	INTO :code, :name, :active
		     FROM SQLUser.CT_Hospital
	 )
	&sql(OPEN CHospital)
	&sql(FETCH CHospital)
	
	While (SQLCODE = 0) {
		If code'="" set ^||Hospital(code)=$LB(name,active)
		&sql(FETCH CHospital)
	}
	&sql(CLOSE CHospital)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Specimen">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT CTSPE_Code,CTSPE_Desc,CTSPE_ActiveFlag
    FROM SQLUser.CT_Specimen</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="SpecimenBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CSpecimen CURSOR FOR
    SELECT CTSPE_Code,CTSPE_Desc,CTSPE_ActiveFlag
    INTO :code, :name, :active
    FROM SQLUser.CT_Specimen)
    &sql(OPEN CSpecimen)
    &sql(FETCH CSpecimen)
	While (SQLCODE = 0) {
		If code'="" set ^||CTData(code)=$LB(name,active)
		&sql(FETCH CSpecimen)
	}
    &sql(CLOSE CSpecimen)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="TestCode">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT CTTC_Code,CTTC_Desc,CTTC_ActiveFlag
    FROM SQLUser.CT_TestCode</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="TestCodeBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE CTestCode CURSOR FOR
    SELECT CTTC_Code,CTTC_Desc,CTTC_ActiveFlag
    INTO :code, :name, :active
    FROM SQLUser.CT_TestCode)
    &sql(OPEN CTestCode)
    &sql(FETCH CTestCode)
	While (SQLCODE = 0) {
		If code'="" set ^||CTData(code)=$LB(name,active)
		&sql(FETCH CTestCode)
	}
    &sql(CLOSE CTestCode)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="TestSet">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT CTTS_Code,CTTS_Name,CTTS_Synonym2,CTTS_ActiveFlag
    FROM SQLUser.CT_TestSet</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="TestSetBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Kill ^||TestSet
    ;
    &sql(DECLARE CTestSet CURSOR FOR
    SELECT CTTS_Code,CTTS_Name, CTTS_Synonym2,CTTS_ActiveFlag
    INTO :code, :name, :syn2, :active
    FROM SQLUser.CT_TestSet)
    &sql(OPEN CTestSet)
    &sql(FETCH CTestSet)
    While (SQLCODE = 0) {
        If code'="" Set ^||TestSet(code)=$LB(name,syn2,active)
        &sql(FETCH CTestSet)
    }
    &sql(CLOSE CTestSet)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="TestSetTestCode">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT CTTCS_ParRef,CTTCS_TestSet_DR
    FROM SQLUser.CT_TestCodeTestSet</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="TestSetTestCodeBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Kill ^||TestCodeTestSet
    ;
    &sql(DECLARE CTestSetTestCode CURSOR FOR
    SELECT CTTCS_ParRef,CTTCS_TestSet_DR
    INTO :testcode, :testset
    FROM SQLUser.CT_TestCodeTestSet)
    &sql(OPEN CTestSetTestCode)
    &sql(FETCH CTestSetTestCode)
    While (SQLCODE = 0) {
        If (testcode="")||(testset="") {
            &sql(FETCH CTestSetTestCode)
            Continue
        }
        Set ^||TestCodeTestSet(testset,testcode)=""
        &sql(FETCH CTestSetTestCode)
    }
    &sql(CLOSE CTestSetTestCode)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="TestCodeContainers">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT CTTCB_ParRef,CTTCB_Container_DR,CTTCB_Specimen_DR
    FROM SQLUser.CT_TestCodeContainers</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="TestCodeContainersBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Kill ^||TestCodeContainers
    Kill ^||TestCodeSpecimen
    ;
    &sql(DECLARE CTestCodeContainers CURSOR FOR
    SELECT CTTCB_ParRef,CTTCB_Container_DR,CTTCB_Specimen_DR
    INTO :testcode,:container,:specimen
    FROM SQLUser.CT_TestCodeContainers )
    &sql(OPEN CTestCodeContainers)
    &sql(FETCH CTestCodeContainers)
    While (SQLCODE = 0) {
        If testcode="" { 
            &sql(FETCH CTestCodeContainers)
            Continue
        }
        If (container'="") Set ^||TestCodeContainers(testcode,container)=""
        If (container'="")&&(specimen'="") Set ^||TestCodeContainers(testcode,container,specimen)=""
        &sql(FETCH CTestCodeContainers)
    }
    &sql(CLOSE CTestCodeContainers)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="Users">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery>    SELECT a.SSUSR_RowId,a.SSUSR_Name,a.SSUSR_Group,a.SSUSR_Password,a.SSUSR_Active,b.SSGRP_Desc
    FROM SQLUser.SS_User as a, SQLUser.SS_Group as b
	where  a.SSUSR_Group = b.SSGRP_RowId and (b.SSGRP_Desc = 'Регистратор' or b.SSGRP_Desc = 'Сканировщик')</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="UsersBuffer">
<Description>
Импортирование пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||Users
	set user=""
	
	&sql(DECLARE C1 CURSOR FOR
 	     SELECT a.SSUSR_RowId,a.SSUSR_Name,a.SSUSR_Group,a.SSUSR_Password,a.SSUSR_Active,b.SSGRP_Desc
	    	INTO :id, :name, :group, :pass, :activ, :desc
	     FROM SQLUser.SS_User as a, SQLUser.SS_Group as b
		 where  a.SSUSR_Group = b.SSGRP_RowId and (b.SSGRP_Desc = 'Регистратор' or b.SSGRP_Desc = 'Сканировщик')
	 )
	&sql(OPEN C1)
	&sql(FETCH C1)
	
	While (SQLCODE = 0) {
		 /*
		 set yes = ..YesImport(group) 
		 if 'yes {
			 &sql(FETCH C1)
			 continue
		 }*/
		 set ^||Users(id)=$LB(name,group,pass,activ,desc)

		 &sql(FETCH C1)
	 }
    
	&sql(CLOSE C1)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SuperSetBuffer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Kill ^||SuperSet
    ;
    &sql(DECLARE SuperSet CURSOR FOR
    SELECT CTSS_Code,CTSS_Desc,CTSS_Synonym
    INTO :code, :name, :syn
    FROM SQLUser.CT_SuperSet)
    &sql(OPEN SuperSet)
    &sql(FETCH SuperSet)
    While (SQLCODE = 0) {
        If code'="" Set ^||SuperSet(code)=$LB(name,syn)
        &sql(FETCH SuperSet)
    }
    &sql(CLOSE SuperSet)

    &sql(DECLARE SuperSetItems CURSOR FOR
    SELECT CTSSI_ParRef,CTSSI_TestSet_DR
    INTO :code, :testset
    FROM SQLUser.CT_SuperSetItems)
    &sql(OPEN SuperSetItems)
    &sql(FETCH SuperSetItems)
    While (SQLCODE = 0) {
        If (code'="")&&($Data(^||SuperSet(code))&&(testset'="")) {
	        If '##class(TCLEx.Function.SuperSet).IsSuperSetSummaryTestSet(code,testset) {
	        	Set ^||SuperSet(code,testset)=""
	        }
        }    
        &sql(FETCH SuperSetItems)
    }
    &sql(CLOSE SuperSetItems)
    
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Кого качаем
ClassMethod YesImport(pId) As %Boolean
{
	set obj = ##class(User.SSGroup).%OpenId(pId)
	quit:'obj 0
	set s=obj.SSGRPDesc
	if obj.SSGRPDesc = "Регистратор" quit 1
	if obj.SSGRPDesc = "Сканировщик" quit 1
	quit 0
}

ClassMethod GetObj(pId) As User.SSGroup [ CodeMode = expression ]
{
##class(User.SSGroup).%OpenId(pId)
}*/
]]></Content>
</UDLText>
</Class>
</Export>
