<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Function.PCL2TXT">
<Super>%RegisteredObject</Super>
<TimeCreated>62031,40251.45375</TimeCreated>

<Method name="EpisodeResults2TXTFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pTXTDir:%String,&pTXTFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pTXTFileName=""
	Set txtfilename=..TXTFileName(pEpis,.pTestSets)
	Set fulltxtfilename=pTXTDir_"\"_txtfilename
	If ##class(%File).Exists(fulltxtfilename) {
		Set fulltxtfilename=$$ArchiveFileName^KSUTIL1(fulltxtfilename)
		If ##class(%File).Exists(fulltxtfilename) Quit $$$ERROR($$$GeneralError,"Не удалось сформировать очередное имя файла для  "_fulltxtfilename_" !")
	}	

	Set ok=..CreateTxtFile(pEpis,.pTestSets,fulltxtfilename)
	If 'ok Quit ok
	Set pTXTFileName=fulltxtfilename
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateTxtFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pFileName:%String]]></FormalSpec>
<PublicList>REPID,VISIT,epis,line,DEST,DEVNAME</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ##class(TCLEx.Function.Episode).PCLResult(pEpis,.pTestSets)
	If '$Data(^||episode) Quit $$$ERROR($$$GeneralError,"Нет данных по эпизоду "_pEpis_" !") ;$$Error^%apiOBJ(5001,"Нет данных по эпизоду "_pEpis_" !")
	;
	If ##class(%File).Exists(pFileName) {
		Set ok=##class(%File).Delete(pFileName)
		If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pFileName_" !")
	}	
	;
	Set stream=##class(%FileCharacterStream).%New()
	Set stream.TranslateTable="CP1251"  
	Set stream.Filename=pFileName
	Kill ^||header
	Do ..Header(pEpis,$Name(^||header))
	Set i=""
	For  {
		Set i=$Order(^||header(i),1,val)
		If i="" Quit
		Do stream.WriteLine(val)	
	}
	Do ..RemovePCLCommands($Name(^||episode),$Name(^||result))
	Set i=""
	For  {
		Set i=$Order(^||result(i),1,val)
		If i="" Quit
		Do stream.WriteLine(val)	
	
	}	
	Set ok=stream.SaveStream()
	Quit $$$OK
	;
]]></Implementation>
</Method>

<Method name="CreateTxtFile4Order">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pFileName:%String,pPCLGlb:%String</FormalSpec>
<PublicList>REPID,VISIT,epis,line,DEST,DEVNAME</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ##class(%File).Exists(pFileName) {
		Set ok=##class(%File).Delete(pFileName)
		If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pFileName_" !")
	}	
	;
	Set stream=##class(%FileCharacterStream).%New()
	Set stream.TranslateTable="CP1251"  
	Set stream.Filename=pFileName
	Set epis=$Order(@pPCLGlb@(""))
	If epis="" {
		Quit $$$ERROR($$$GeneralError,"Нет данных по заказу "_pOrder_" !")
	
	}	
	Kill ^||header
	Do ..Header(epis,$Name(^||header))
	Set i=""
	For  {
		Set i=$Order(^||header(i),1,val)
		If i="" Quit
		Do stream.WriteLine(val)	
	}
	
	Set epis="" 
	For  {
		Set epis=$Order(@pPCLGlb@(epis))
		If epis="" Quit
		Kill ^||result
		Do ..RemovePCLCommands($Name(@pPCLGlb@(epis)),$Name(^||result))
		If ($Order(@pPCLGlb@(epis))'="") {
			Set i=$Order(^||result(""),-1)
			If (i'="")&&($Get(^||result(i))'="") {
				Set ^||result($Increment(^||result))=""
			}	
		}	
		Set i=""
		For  {
			Set i=$Order(^||result(i),1,val)
			If i="" Quit
			Do stream.WriteLine(val)	
		}	
	}	
	Set ok=stream.SaveStream()
	Quit $$$OK
	;
]]></Implementation>
</Method>

<Method name="Header">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String,pGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Kill ^||rep
	Do SetVals^PRTDR0RU02(pEpis,,$Name(^||rep))
	Set @pGlb@($Increment(@pGlb))="Ист.бол./Амб.карта:"_$Get(^||rep("Vals","CardNumber"))
	Set @pGlb@($Increment(@pGlb))="Ф.И.О.:"_$Get(^||rep("Vals","FullName"))
	Set @pGlb@($Increment(@pGlb))="Дата рождения:"_$Get(^||rep("Vals","DOB"))
	Set @pGlb@($Increment(@pGlb))="Пол:"_$Get(^||rep("Vals","Sex"))
	If $Get(^||rep("Vals","SexCode"))="Ж" {
		If $Get(^||rep("Vals","CyclePhase"))'=""  {
			Set @pGlb@($Increment(@pGlb))="Фаза цикла:"_$Get(^||rep("Vals","CyclePhase"))
		} ElseIf $Get(^||rep("Vals","PregnancyWeeks"))'="" {	
			Set @pGlb@($Increment(@pGlb))="Срок беременности:"_$Get(^||rep("Vals","PregnancyWeeks"))_" нед."
		}	
	}
	Set @pGlb@($Increment(@pGlb))="Адрес:"_$Get(^||rep("Vals","Address1"))_" "_$Get(^||rep("Vals","Address2"))
	Set @pGlb@($Increment(@pGlb))="Страховая компания:"_$Get(^||rep("Vals","InsCompany"))
	Set @pGlb@($Increment(@pGlb))="Стр. полис: Серия "_$Get(^||rep("Vals","InsSerial"))_" Номер "_$Get(^||rep("Vals","InsNumber"))
	Set @pGlb@($Increment(@pGlb))=""
	Set @pGlb@($Increment(@pGlb))="ЛПУ:"_$Get(^||rep("Vals","Нospital"))
	Set @pGlb@($Increment(@pGlb))="Отделение:"_$Get(^||rep("Vals","HospitalDepartment"))
	Set @pGlb@($Increment(@pGlb))="Ф.И.О. врача:"_$Get(^||rep("Vals","Doctor"))
	Set @pGlb@($Increment(@pGlb))="Дата/время взятия материала:"_$Get(^||rep("Vals","DateTimeOfCollection"))
	Set @pGlb@($Increment(@pGlb))="Дата доставки материала:"_$Get(^||rep("Vals","DateOfReceiving"))
	Set @pGlb@($Increment(@pGlb))="Номер заказа:"_$Extract(pEpis,1,10)
	Set @pGlb@($Increment(@pGlb))="Номер образца:"_pEpis
	Set @pGlb@($Increment(@pGlb))=""
	Set @pGlb@($Increment(@pGlb))="Результаты исследований:"
	Set @pGlb@($Increment(@pGlb))=""
]]></Implementation>
</Method>

<Method name="RemovePCLCommands">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPCLGlb:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Kill @pGlb
	Set n=1,currstr=""
	Set depcode=""
	For  {
		Set depcode=$Order(@pPCLGlb@(depcode))
		If depcode="" Quit
		Set page=""
		For  {
			Set page=$Order(@pPCLGlb@(depcode,page))
			If page="" Quit
			Set i="",curstr=""
			For  {
				Set i=$Order(@pPCLGlb@(depcode,page,i))
				If i="" Quit
				Set j=""
				For  {
					Set j=$Order(@pPCLGlb@(depcode,page,i,j),1,val)
					If j="" Quit
					If ($Extract(val,1,1)="~")||(val=$Char(13)) Continue
					If (val="!")||(val=$Char(12)) {
						Set @pGlb@($Increment(@pGlb))=currstr
						Set currstr=""
					}ElseIf $Extract(val,1,1)="?" {
						Set pos=+$Extract(val,2,4)
						If pos>0 {
							Set substr=$Extract(val,5,$Length(val))
							Set currstr=..CorrectStrLength(currstr,pos,substr)
						}	
					} Else {
						Set currstr=currstr_val
					}			
				}	
			}
			If currstr'="" {
				Set @pGlb@($Increment(@pGlb))=currstr
			}
			If ($Order(@pPCLGlb@(depcode,page))'="")||($Order(@pPCLGlb@(depcode))'="") {
				Set @pGlb@($Increment(@pGlb))=""
			
			}	
				
		}
	}
]]></Implementation>
</Method>

<Method name="CorrectStrLength">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOldValue:%String,pPos:%Integer,pNewValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=pOldValue
	If $Length(result)>pPos Set result=$Extract(result,1,pPos)
	Set result=$$LeftAlign^KSUTIL1(result,pPos)
	Quit result_pNewValue
]]></Implementation>
</Method>

<Method name="TXTFileName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit ""
	Set filename=episobj.EPVISSurname_"("_pEpis_"-"
	;Set totalcnt=##class(TCLEx.Function.Episode).TotalTestSetNumber(pEpis)
	;Set printablecnt=##class(TCLEx.Function.Episode).PrintableTestSetNumber(pEpis,.pTestSets)
	If ##class(TCLEx.Function.Episode).IsComplete(pEpis,.pTestSets) {
		Set filename=filename_"Окончательный"
	} Else {
		Set filename=filename_"Промежуточный"
	}		
	Set filename=filename_").txt"
	Quit filename
]]></Implementation>
</Method>
</Class>
</Export>
