<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Function.PCL2PDF">
<Super>%RegisteredObject</Super>
<TimeCreated>62031,40251.45375</TimeCreated>

<Method name="EpisodeResults2PDFFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pPCLDir:%String,pPDFDir:%String,&pPDFFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pPDFFileName=""
	Set pclfilename=..PCLFileName(pEpis,.pTestSets)
	Set fullpclfilename=pPCLDir_"\"_pclfilename
	Set ok=..EpisodeResults2PCLFile(pEpis,.pTestSets,fullpclfilename)
	If 'ok Quit ok
	
	Set pdffilename=$Piece(pclfilename,".pcl",1)_".pdf"
	Set fullpdffilename=pPDFDir_"\"_pdffilename
	If ##class(%File).Exists(fullpdffilename) {
		Set fullpdffilename=$$ArchiveFileName^KSUTIL1(fullpdffilename)
		If ##class(%File).Exists(fullpdffilename) Quit $$$ERROR($$$GeneralError,"Не удалось сформировать очередное имя файла для  "_pdffilename_" !")
	}	
	Set pdfdir=##class(%File).GetDirectory(fullpdffilename)
	If '$$TestDirectory^KSUTIL1(pdfdir) {
		Quit $$$ERROR($$$GeneralError,"Не удалось создать каталог  "_pdfdir_" !")
	}	
	Set cmd=..ConvertCommand(fullpclfilename,fullpdffilename)
	Lock +^|"%SYS"|PCL2PDF								// Ограничиваем, чтобы только 1 процесс мог запускать конвертер
	Set zfres=$ZF(-1,cmd)
	Lock -^|"%SYS"|PCL2PDF								// Ограничиваем, чтобы только 1 процесс мог запускать конвертер
	If (zfres'=0)||('##class(%File).Exists(fullpdffilename)) Quit $$$ERROR($$$GeneralError,"Не удалось преобразовать "_fullpclfilename_" в "_fullpdffilename_" !")
	Set ok=##class(%File).Delete(fullpclfilename)
	If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить файл "_fullpclfilename_" !")
	Set pPDFFileName=fullpdffilename
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EpisodeResults2PCLFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pFileName:%String]]></FormalSpec>
<PublicList>REPID,VISIT,epis,line,DEST,DEVNAME</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//*** Do ##class(TCLEx.Function.Episode).PCLResult(pEpis,.pTestSets)
	//*** If '$Data(^||episode) Quit $$$ERROR($$$GeneralError,"Нет данных по эпизоду "_pEpis_" !") ;$$Error^%apiOBJ(5001,"Нет данных по эпизоду "_pEpis_" !")
	Kill ^||PCL2PDF.Episode
	Do ##class(TCLEx.Function.Episode).PCLReport2Glb(pEpis,.pTestSets,1,$Name(^||PCL2PDF.Episode))
	
	If '$Data(^||PCL2PDF.Episode) Quit $$$ERROR($$$GeneralError,"Нет данных по эпизоду "_pEpis_" !") ;$$Error^%apiOBJ(5001,"Нет данных по эпизоду "_pEpis_" !")
	;
	Set (pclfilename,DEVNAME)=pFileName 
	If ##class(%File).Exists(pclfilename) {
		Set ok=##class(%File).Delete(pclfilename)
		If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pclfilename_" !")
	}	
	;
	Open DEVNAME:("WN"):5
	If '$Test Quit $$$ERROR($$$GeneralError,"Не удалось открыть на запись файл "_DEVNAME_" !")
	Use DEVNAME
	Do SetIO^%NLS("CP1251PRN")
	// *** Do ..EpisodeGlb2PCLFile(pEpis,DEVNAME,$Name(^||episode))
	Do ..EpisodeGlb2PCLFile(pEpis,DEVNAME,$Name(^||PCL2PDF.Episode))
	Use $Principal
	Close DEVNAME
	Quit $$$OK
	;
]]></Implementation>
</Method>

<Method name="EpisodePageCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set cnt=0
	Set depcode=""
	For  {
		Set depcode=$Order(@pGlb@(depcode))
		If depcode="" Quit
		Set cnt=cnt+$Order(^||episode(depcode,""),-1)
	}
	Quit cnt
]]></Implementation>
</Method>

<Method name="PCLFileName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit ""
	Set filename=episobj.EPVISSurname_"("_pEpis_"-"
	;Set totalcnt=##class(TCLEx.Function.Episode).TotalTestSetNumber(pEpis)
	;Set printablecnt=##class(TCLEx.Function.Episode).PrintableTestSetNumber(pEpis,.pTestSets)
	If ##class(TCLEx.Function.Episode).IsComplete(pEpis,.pTestSets) {
		Set filename=filename_"Окончательный"
	} Else {
		Set filename=filename_"Промежуточный"
	}		
	Set filename=filename_").pcl"
	Quit filename
]]></Implementation>
</Method>

<Method name="PCL2PDF">
<Description>
Конвертация PCL-файла pPCLFileName в PDF-файл pPDFFileName </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPCLFileName:%String,pPDFFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ##class(%File).Exists(pPDFFileName) {
		Do ##class(%File).Delete(pPDFFileName)
		If ##class(%File).Exists(pPDFFileName) Quit $$$ERROR($$$GeneralError,"Не удалось удалить файл "_pPDFFileName_" !")
	}	
	Set pdfdir=##class(%File).GetDirectory(pPDFFileName)
	If '$$TestDirectory^KSUTIL1(pdfdir) {
		Quit $$$ERROR($$$GeneralError,"Не удалось создать каталог  "_pdfdir_" !")
	}	
	Set cmd=..ConvertCommand(pPCLFileName,pPDFFileName)
	Lock +^|"%SYS"|PCL2PDF								// Ограничиваем, чтобы только 1 процесс мог запускать конвертер
	Set zfres=$ZF(-1,cmd)
	Lock -^|"%SYS"|PCL2PDF
	If (zfres'=0)||('##class(%File).Exists(pPDFFileName)) Quit $$$ERROR($$$GeneralError,"Не удалось преобразовать "_pPCLFileName_" в "_pPDFFileName_" !")
	Set ok=##class(%File).Delete(pPCLFileName)
	If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить файл "_pPCLFileName_" !")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Glb2PCL">
<Description>
Выгрузка глобала pPCLGlb с PCL командами в файл pFileName</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPCLGlb:%String,pFileName:%String</FormalSpec>
<PublicList>DEVNAME,REPID,DEST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Set fullname=$ZUTil(12)_"Temp\"_pFileName
	If ##class(%File).Exists(pFileName) {
		Set ok=##class(%File).Delete(pFileName)
		If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pFileName_" !")
	}	
	Set DEVNAME=pFileName
	Set REPID=0
	Set DEST(12)="PDF"
	Open DEVNAME:("WN"):5
	If '$Test Quit $$$ERROR($$$GeneralError,"Не удалось открыть на запись файл "_DEVNAME_" !")
	Use DEVNAME
	Do SetIO^%NLS("CP1251PRN")
	Set i="",line=0
	For  {
		Set i=$Order(@pPCLGlb@(i),1,val)
		If i="" Quit
		Do PDATA^SSPRINT(val,.line)
	}
	Close DEVNAME
	If '##class(%File).Exists(pFileName) {
		Quit $$$ERROR($$$GeneralError,"Не экспортировать PCL данные в файл "_pFileName_" !")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod EpisodeGlb2PCLFile(pEpis As %String, DEVNAME As %String, pEpisGlb As %String) As %Status [ PublicList = (REPID, VISIT, epis, line, DEST, DEVNAME) ]
{
	Kill VISIT,DEST
	Set REPID=0
	Set (VISIT(2),epis)=pEpis ; Задаем значения проносимых переменных для Header-а и Footer-а
	Set DEST(12)="PDF" 
	Lock +^PR(0)
	;
	Set depcode=""
	For  {
		Set depcode=$Order(@pEpisGlb@(depcode))
		If depcode="" Quit
		; Пропихиваем число страниц для печати его в Footer-е
		Set (pagecount,PAGECNT)=..EpisodePageCount(pEpisGlb) 
		Kill ^TMP("REPORT",$Job)
		Set ^TMP("REPORT",$Job,pagecount)=""
		Set REPID=0
		;
		Set page=""
		For  {
			Set page=$Order(@pEpisGlb@(depcode,page))
			If page="" Quit
			; Формируем header
			Kill ^PR(REPID),^||header
			Do Header^PRTDR0RU01(,,depcode)
			Set i=1
			For section="HDR","PRT" {
				Set j=""
				For  {
					Set j=$Order(^PR(REPID,section,j),1,val)
					If j="" Quit
					Set ^||header(i)=val
					Set i=i+1
				}
			}
			; Формируем footer
			Kill ^PR(REPID,"PRT"),^||footer
			Do Footer^PRTDR0RU01(page)
			Merge ^||footer=^PR(REPID,"PRT")
			; Пишем header в файл 
			Set i="",line=0
			For  {
				Set i=$Order(^||header(i),1,val)
				If i="" Quit
				Do PDATA^SSPRINT(val,.line)
			}
			Set i=""
			For  {
				Set i=$Order(@pEpisGlb@(depcode,page,i))
				If i="" Quit
				Set j=""
				For  {
					Set j=$Order(@pEpisGlb@(depcode,page,i,j),1,val)
					If j="" Quit
					Do PDATA^SSPRINT(val,.line)
				}	
			}
			For  {
				Set i=$Order(^||footer(i),1,val)
				If i="" Quit
				Do PDATA^SSPRINT(val,.line)
			}
		}	
	}	
	Lock -^PR(0)
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="EpisodeGlb2PCLFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String,DEVNAME:%String,pPCLRepGlb:%String</FormalSpec>
<PublicList>REPID,VISIT,epis,line,DEST,DEVNAME</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill VISIT,DEST
	Set (VISIT(2),epis)=pEpis ; Задаем значения проносимых переменных для Header-а и Footer-а
	Set DEST(12)="PDF" 
	;
	Set i1="",page=0,line=0
	For  {
		Set i1=$Order(@pPCLRepGlb@("PRT",i1),1,val1)
		If i1="" Quit
		If i1=$Get(@pPCLRepGlb@("Pages4PRT",(page+1))) {
			Set page=page+1
			Set i2=""
			For  {
				Set i2=$Order(@pPCLRepGlb@("HDR",i2),1,val2)
				If i2="" Quit
				Do PDATA^SSPRINT(val2,.line)
			}
				
		}
		Do PDATA^SSPRINT(val1,.line)	
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertCommand">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPCLFileName:%String,pPDFFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit "D:\BION2010\app\lab\JetPCL_EE\JpxWin32.exe -\x1B+ -AJTV6B45SUYGAUY6VWHOUH9KKZ83KGWWY7JHPQP10 -d300 -Ipcl -Opdf:Binary;Thumb;Rotate;Text=Nat;Sub=Res;Rect=Nat; """_pPCLFileName_""" """_pPDFFileName_""""
	;Quit $ZUtil(12)_"jet\jpxwin32.exe -\x1B+ -ADemoDevel -d300 -Ipcl -Opdf:Binary;Thumb;Rotate;Text=Nat;Sub=Res;Rect=Nat; """_pPCLFileName_""" """_pPDFFileName_""""
]]></Implementation>
</Method>
</Class>
</Export>
