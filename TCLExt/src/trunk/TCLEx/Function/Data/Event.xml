<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Data.Event">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>62741,65108.515196</TimeCreated>

<Property name="EventType">
<Description>
Код типа события</Description>
<Type>%String</Type>
</Property>

<Property name="Description">
<Description>
Описание (доп. параметры)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="EventDateTime">
<Description>
Дата/время события</Description>
<Type>%TimeStamp</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//(XMLTIMEZONE = "IGNORE");

]]></Content>
</UDLText>

<Property name="EventDate">
<Description>
Date of order edit</Description>
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}= ##class(TCLEx.Util.Date).TimeStamp2Horolog({EventDateTime}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="OrderNumber">
<Description>
Номер заказа</Description>
<Type>%String</Type>
</Property>

<Property name="Episode">
<Description>
Номер эпизода</Description>
<Type>%String</Type>
</Property>

<Property name="TestSet">
<Description>
Идентификатор исследования</Description>
<Type>%String</Type>
</Property>

<Property name="TestCode">
<Description>
Идентификатор теста</Description>
<Type>%String</Type>
</Property>

<Property name="ObjectType">
<Description>
Тип объекта</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ObjectID">
<Description>
Идентификатор объекта в ЛИС</Description>
<Type>%String</Type>
</Property>

<Property name="Hospital">
<Description>
Код заказчика (местоположения пациента)</Description>
<Type>%String</Type>
</Property>

<Property name="Initiator">
<Description>
Имя пользователя, инициировавшего событие</Description>
<Type>%String</Type>
</Property>

<Property name="Context">
<Description>
Контекст сообщения</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Extra1">
<Description>
Доп. поле 1</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Extra2">
<Description>
Доп. поле 2</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Extra3">
<Description>
Доп. поле 3</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="EventTypeIndex">
<Type>bitmap</Type>
<Properties>EventType</Properties>
</Index>

<Index name="OrderNumberIndex">
<Type>bitmap</Type>
<Properties>OrderNumber</Properties>
</Index>

<Index name="EpisodeIndex">
<Type>bitmap</Type>
<Properties>Episode</Properties>
</Index>

<Index name="TestSetIndex">
<Type>bitmap</Type>
<Properties>TestSet</Properties>
</Index>

<Index name="TestCodeIndex">
<Type>bitmap</Type>
<Properties>TestCode</Properties>
</Index>

<Index name="ObjectTypeIndex">
<Type>bitmap</Type>
<Properties>ObjectType</Properties>
</Index>

<Index name="HospitalIndex">
<Type>bitmap</Type>
<Properties>Hospital</Properties>
</Index>

<Index name="InitiatorIndex">
<Type>bitmap</Type>
<Properties>Initiator</Properties>
</Index>

<Index name="EventDateTimeIndex">
<Properties>EventDateTime</Properties>
</Index>

<Index name="EventDateIndex">
<Type>bitmap</Type>
<Properties>EventDate</Properties>
</Index>

<Index name="ObjectIDIndex">
<Type>bitmap</Type>
<Properties>ObjectID</Properties>
</Index>

<Query name="Events">
<Type>%Query</Type>
<FormalSpec>pMinId:%Integer,pEventCount:%Integer,pEventType:%String,pMinDateTime:%TimeStamp,pMaxDateTime:%TimeStamp,pOrderNumber:%String,pEpisode:%String,pTestSet:%String,pTestCode:%String,pObjectType:%String,pObjectId:%String,pHospital:%String,pInitiator:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%String,EventDateTime:%TimeStamp,EventType:%String,Description:%String,OrderNumber:%String,Episode:%String,TestSet:%String,TestCode:%String,ObjectType:%String,ObjectID:%String,Hospital:%String,Initiator:%String,Context:%String,Extra1:%String,Extra2:%String,Extra3:%String"/>
</Query>

<Method name="EventsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pMinId:%Integer,pEventCount:%Integer,pEventType:%String,pMinDateTime:%TimeStamp,pMaxDateTime:%TimeStamp,pOrderNumber:%String,pEpisode:%String,pTestSet:%String,pTestCode:%String,pObjectType:%String,pObjectId:%String,pHospital:%String,pInitiator:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sql="SELECT "
	If pEventCount>0 {
		Set sql=sql_" TOP "_pEventCount_" "
	}
	Set sql=sql_"%ID As ID,EventDateTime,EventType,Description,OrderNumber,Episode,TestSet,TestCode,ObjectType,ObjectID,Hospital,Initiator,Context,Extra1,Extra2,Extra3 "	
	Set sql=sql_" FROM TCLEx_Data.Event "
	Set where="WHERE "
	If pMinId'="" {
		Set where=where_"(%ID>="_pMinId_") AND "
	}	
	If pEventType'="" {
		Set where=where_"(EventType='"_pEventType_"') AND "
	}	
	If (pMinDateTime'="")||(pMaxDateTime'="") {
		If (pMinDateTime'="")&&(pMaxDateTime'="") {
			Set where=where_" (EventDateTime BETWEEN '"_pMinDateTime_"' AND '"_pMaxDateTime_"') AND "
		}ElseIf	pMinDateTime'="" {
			Set where=where_" (EventDateTime>='"_pMinDateTime_"' AND "
		}Else {
			Set where=where_" (EventDateTime<='"_pMaxDateTime_"' AND "
		}		
	}	
	If pOrderNumber'="" {
		Set where=where_" (OrderNumber='"_pOrderNumber_"') AND "
	}	
	If pEpisode'="" {
		Set where=where_" (Episode='"_pEpisode_"') AND "
	}	
	If pTestSet'="" {
		Set where=where_" (TestSet='"_pTestSet_"') AND "
	}	
	If pTestCode'="" {
		Set where=where_" (TestCode='"_pTestCode_"') AND "
	}	
	If pObjectType'="" {
		Set where=where_" (ObjectType='"_pObjectType_"') AND "
	}	
	If pObjectId'="" {
		Set where=where_" (ObjectId='"_pObjectId_"') AND "
	}	
	If pHospital'="" {
		Set where=where_" (Hospital='"_pHospital_"') AND "
	}	
	If pInitiator'="" {
		Set where=where_" (Initiator='"_pInitiator_"') AND "
	}	
	If where="WHERE " {
		Set where=""
	}	
	Set sql=sql_where
	If ($Extract(sql,$Length(sql)-4,$Length(sql))=" AND ") {
		Set $Extract(sql,$Length(sql)-4,$Length(sql))=""
	}	
	Kill ^||Events.Result
	Set qHandle=""
	Set statementobj=##class(%SQL.Statement).%New()
	Set statementobj.%ObjectSelectMode=0
	Set ok=statementobj.%Prepare(sql)
	If 'ok Quit ok
	Set resultset=statementobj.%Execute()
	While resultset.%Next() {
		Set id=resultset.ID
		If id'="" {
			Set ^||Events.Result(id)=$ListBuild(id,resultset.EventDateTime,resultset.EventType,resultset.Description,resultset.OrderNumber,resultset.Episode,resultset.TestSet,resultset.TestCode,resultset.ObjectType,resultset.ObjectID,resultset.Hospital,resultset.Initiator,resultset.Context,resultset.Extra1,resultset.Extra2,resultset.Extra3)
		}
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EventsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>GetEventsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||Events.Result
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EventsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>GetEventsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle=$Order(^||Events.Result(qHandle),1,Row)
	If qHandle="" {
		Set Row=""
		Set AtEnd=1
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEventType:%String,pOrderNumber:%String,pEpisode:%String,pTestSet:%String,pTestCode:%String,pObjectType:%String,pObjectId:%String,pHospital:%String,pInitiator:%String,pContext:%String,pExtra1:%String,pExtra2:%String,pExtra3:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$$NeedSave^Settings.Event($Get(pEventType),$Get(pOrderNumber),$Get(pEpisode),$Get(pTestSet),$Get(pTestCode),$Get(pObjectType),$Get(pObjectId),$Get(pHospital),$Get(pInitiator),$Get(pContext),$Get(pExtra1),$Get(pExtra2),$Get(pExtra3)) Quit $$$OK
	Set eventobj=..%New()
	Set eventobj.EventType=$Get(pEventType)
	Set eventobj.EventDateTime=$ZDateTime($Horolog,3)
	Set eventobj.Description=..GetEventDescription($Get(pEventType))
	Set eventobj.OrderNumber=$Get(pOrderNumber)
	Set eventobj.Episode=$Get(pEpisode)
	Set eventobj.TestSet=$Get(pTestSet)
	Set eventobj.TestCode=$Get(pTestCode)
	Set eventobj.ObjectType=$Get(pObjectType)
	Set eventobj.ObjectID=$Get(pObjectId)
	Set eventobj.Hospital=$Get(pHospital)
	Set eventobj.Initiator=$Get(pInitiator)
	Set eventobj.Context=$Get(pContext)
	Set eventobj.Extra1=$Get(pExtra1)
	Set eventobj.Extra2=$Get(pExtra2)
	Set eventobj.Extra3=$Get(pExtra3)
	Set ok=eventobj.%Save()
	If 'ok Do $system.OBJ.DisplayError(ok)
	Quit ok
]]></Implementation>
</Method>

<Method name="GetEventDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEventType</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Get(pEventType)="" Quit ""
	If (pEventType="ORDER_CREATE_WEBER") Quit "Создание заказа в WebER"
	If (pEventType="ORDER_STATUS_WEBER") Quit "Изменение статуса заказа в WebER"
	If (pEventType="ORDER_CANCEL") Quit "Отмена заказа в WebER"
	If (pEventType="ORDER_TRANS_LIS") Quit "Передача заказа в ЛИС"
	If (pEventType="ORDER_COMPLETE") Quit "Выполнение всего заказа в ЛИС"
	//
	If (pEventType="CONTAINER_SCAN") Quit "Сканирование контейнеров по заказу"
	If (pEventType="CONTAINER_CHANGE") Quit "Изменение типа\биоматериала контейнера"
	//
	If (pEventType="EPISODE_WEBER_CREATE") Quit "Автоматическое создание эпизода в ЛИС, пришедшего из WebER"
	If (pEventType="EPISODE_MAN_CREATE") Quit "Ручное создание эпизода в ЛИС"
	If (pEventType="EPISODE_COMPLETE") Quit "Выполнение всего эпизода в ЛИС"
	If (pEventType="EPISODE_FILE") Quit "Формирование файла с результатом в ЛИС"
	If (pEventType="EPISODE_PRINT") Quit "Формирование задания на печать в ЛИС"
	If (pEventType="EPISODE_EMAIL") Quit "Формирование электронного письма с результатом в ЛИС"
	//	
	If (pEventType="TESTSET_ADD") Quit "Добавление исследований в эпизод в ЛИС TrakCare LAB"
	If (pEventType="TESTSET_DEL") Quit "Удаление исследования в эпизоде в ЛИС TrakCare LAB"
	If (pEventType="TESTSET_AUTH") Quit "Авторизация исследования в ЛИС TrakCare LAB"
	If (pEventType="TESTSET_AUTH_CANCEL") Quit "Отмена авторизации исследования в ЛИС TrakCare LAB"
	If (pEventType="TESTSET_CANCEL") Quit "Отмена исследования в эпизоде в ЛИС TrakCare LAB"
	//
	If (pEventType="TESTCODE_ENTER") Quit "Внесение результата в исследование в ЛИС TrakCare LAB"
	If (pEventType="TESTCODE_CHANGE") Quit "Изменение результата исследования в ЛИС TrakCare LAB"
	
	If (pEventType="INSTRUMENT_REQUEST") Quit "Передача задания на анализатор"
	If (pEventType="INSTRUMENT_RESULT") Quit "Получение результата с анализатора"
	
	Quit ""
]]></Implementation>
</Method>

<Method name="GetLastEventIdByObjectId">
<Description>
Получение ID последнего события по типу объекта и его Id
Параметры:
pObjectType - тип объекта
pObjectID - ID объекта
pEventType - тип события
Возвращаемое значение
ID найденной записи или пусто</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObjectType:%String,pObjectID:%String,pEventType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ($Get(pObjectType)="")||($Get(pObjectID)="") Quit ""
	Set pEventType=$Get(pEventType)
	Set result=""
	If (pEventType="") {
		&sql(
			Select MAX(ID) Into :result 
			From TCLEx_Data.Event
			Where (ObjectType=:pObjectType)And(ObjectID=:pObjectID)
		)
	} Else {
		&sql(
			Select MAX(ID) Into :result 
			From TCLEx_Data.Event
			Where (ObjectType=:pObjectType)And(ObjectID=:pObjectID)And(EventType=:pEventType)
		)
	}	
	If SQLCODE'=100
	Quit result
]]></Implementation>
</Method>

<Method name="NeedLogEvent">
<Description>
Нужно ли сохранть событие (если было изменение свойств события)
Параметры:
pEventId - ID объекта события
pContext - новое значение свойства pContext
pExtra1 - новое значение свойства Extra1
pExtra2 - новое значение свойства Extra2
pExtra3 - новое значение свойства Extra3
Возвращаемое значение
0 - изменения не было
1 - нужно сохранить...</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEventId:%String,pContext:%String,pExtra1:%String,pExtra2:%String,pExtra3:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pEventId=$Get(pEventId),pContext=$Get(pContext),pExtra1=$Get(pExtra1),pExtra2=$Get(pExtra2),pExtra3=$Get(pExtra3)
	If pEventId="" Quit 1
	&Sql(
		Select Context,Extra1,Extra2,Extra3
		Into :context,:extra1,:extra2,:extra3
		From TCLEx_Data.Event
		Where ID=:pEventId
	)
	If SQLCODE'=0 Quit 1
	If ((context=pContext)&&(extra1=pExtra1)&&(extra2=pExtra2)&&(extra3=pExtra3)) Quit 0
	Quit 1
]]></Implementation>
</Method>

<Method name="CurrentUser">
<Description>
Текущий пользователь</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $Get(^TMP("USER",$Job))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^TCLEx.Data.EventD</DataLocation>
<DefaultData>EventDefaultData</DefaultData>
<IdLocation>^TCLEx.Data.EventD</IdLocation>
<IndexLocation>^TCLEx.Data.EventI</IndexLocation>
<StreamLocation>^TCLEx.Data.EventS</StreamLocation>
<Data name="EventDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventType</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>EventDateTime</Value>
</Value>
<Value name="5">
<Value>OrderNumber</Value>
</Value>
<Value name="6">
<Value>Episode</Value>
</Value>
<Value name="7">
<Value>TestSet</Value>
</Value>
<Value name="8">
<Value>TestCode</Value>
</Value>
<Value name="9">
<Value>ObjectType</Value>
</Value>
<Value name="10">
<Value>ObjectID</Value>
</Value>
<Value name="11">
<Value>Hospital</Value>
</Value>
<Value name="12">
<Value>Initiator</Value>
</Value>
<Value name="13">
<Value>Context</Value>
</Value>
<Value name="14">
<Value>Extra1</Value>
</Value>
<Value name="15">
<Value>Extra2</Value>
</Value>
<Value name="16">
<Value>Extra3</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
