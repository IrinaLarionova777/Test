<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Function.Episode">
<Super>%RegisteredObject</Super>
<TimeCreated>62031,40378.510786</TimeCreated>

<Method name="IsCito">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($get(pEpis)'="")&&($piece($get(^TEPI(pEpis)),"\",15)="U") Quit 1
	Quit 0
	/*
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit 0
	If '$IsObject(episobj.EPVISPriorityCodeDR) Quit 0
	If episobj.EPVISPriorityCodeDR.%Id()="U" Quit 1
 	Quit 0
 	*/
]]></Implementation>
</Method>

<Method name="IsCito2">
<Description>
if $$seldata^LVBCTPR(priority,4)="Y" quit 1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($get(pEpis)="") quit 0
	set priority=$piece($get(^TEPI(pEpis)),"\",15)
	if (priority'="")&&($$seldata^LVBCTPR(priority,4)="Y") quit 1
	Quit 0
]]></Implementation>
</Method>

<Method name="IsComplete">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	// Если существует класс TCLEx.Funclion.Episode(расширение для клиента) и в нем существует метод IsComplete, то вызывается клиентский метод 
	set clientext=$Piece($Get(^CF("SM",1)),"^",28)
	if (clientext'="") {
		set classmethod=$CLASSNAME()_clientext_"||IsComplete"
	    if ##class(%Dictionary.CompiledMethod).%ExistsId(classmethod) {
		    quit $ClassMethod($piece(classmethod,"||",1),$piece(classmethod,"||",2), $get(pEpis), .pTestSets)
	    }
	}
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit 0
	Set totalcnt=..TotalTestSetNumber(pEpis)
	Set printablecnt=..CompletedTestSetNumber(pEpis,.pTestSets)
	If totalcnt=printablecnt Quit 1
	Quit 0
]]></Implementation>
</Method>

<Method name="TotalTestSetNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit 0
	Set key="",cnt=0
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		Set cnt=cnt+1
	}
	Quit cnt
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Раньше использовался для определения является ли набор тестов завершенным. 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Корректнее испльзовать CompletedTestSetNumber - отмененные тесты также уже завершенные

]]></Content>
</UDLText>

<Method name="PrintableTestSetNumber">
<Description>
Число печатаемых наборов тестов (авторизованных или отмененных с печатаемой причиной отмены) из списка  pTestSets эпизода pEpis</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit 0
	Set cnt=0
	Set key=""
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		//
		If '##class(TCLEx.Function.TestSet).IsPrintable(testsetobj) Continue ; Пропускаем неавторизованные или отмененные TestSet-ы
		Set testsetid=testsetobj.%Id()
		If testsetid="" Continue
		//
		Set superset=""
		If $IsObject(testsetobj.VISTSSuperSetDR) Set superset=testsetobj.VISTSSuperSetDR.%Id()
		If (superset'="")&&('##class(TCLEx.Function.SuperSet).IsComplete(pEpis,superset)) Continue
		//
		If $Data(pTestSets) {
			If (superset'="")&&($Data(pTestSets(superset))) {
				Set cnt=cnt+1
			}	
			If (superset="")&&($Data(pTestSets(testsetid))) {
				Set cnt=cnt+1
			}	
		} Else {	
			Set cnt=cnt+1
		}
	}	
	Quit cnt
]]></Implementation>
</Method>

<Method name="CompletedTestSetNumber">
<Description>
Число печатаемых наборов тестов (авторизованных или отмененных с печатаемой причиной отмены) из списка  pTestSets эпизода pEpis</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit 0
	Set cnt=0
	Set key=""
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		//
		If '##class(TCLEx.Function.TestSet).IsCompleted(testsetobj) Continue ; Пропускаем неавторизованные и неотмененные TestSet-ы
		Set testsetid=testsetobj.%Id()
		If testsetid="" Continue
		//
		Set superset=testsetobj.VISTSSuperSetDRGetObjectId()
		If (superset'="")&&('##class(TCLEx.Function.SuperSet).IsComplete(pEpis,superset)) Continue
		//
		If $Data(pTestSets) {
			If (superset'="")&&($Data(pTestSets(superset))) {
				Set cnt=cnt+1
			}	
			If (superset="")&&($Data(pTestSets(testsetid))) {
				Set cnt=cnt+1
			}	
		} Else {	
			Set cnt=cnt+1
		}
	}	
	Quit cnt
]]></Implementation>
</Method>

<Method name="PCLResult">
<Description>
аналог теперь ##class(TCLEx.Report.ResultForm).PCLEpisodeResult</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<Implementation><![CDATA[
	
	Do ##class(TCLEx.Function.TestSet).Departments(pEpis,.pTestSets)
	; Составляем буфер результатов по отделам эпизода с разбивкой по страницам
	Kill ^||episode
	Set depcode=""
	For  {
		Set depcode=$Order(^||deptestsets(depcode))
		If depcode="" Quit
		// ***Set rowscnt=$$RowCount^PRTDR0RU01(depcode) ; Строк на страницу
		Set rowscnt=$$RowCount^PRTDR0RU02(depcode) ; Строк на страницу
		Set testsetid="",row=1,page=1,firstonpage=1
		For  {
			Set testsetid=$Order(^||deptestsets(depcode,testsetid))
			If testsetid="" Quit
			;
			Do ##class(TCLEx.Function.TestSet).PCLResult(testsetid,rowscnt,firstonpage)
			If '$Data(^||testset) Continue
			Do ..AddTestSetResult(depcode,rowscnt,.page,.row,.firstonpage)
			;
			If (row<rowscnt)&&(row>1)&&($Order(^||deptestsets(depcode,testsetid))'="") {	; Дополнительный отступ между TestSet-ами на странице
				Set ^||episode(depcode,page,row,1)="!"
				Set row=row+1
			}	
		}	
	}
]]></Implementation>
</Method>

<Method name="PCLTotalPages">
<Description>
Число страниц для PCL-отчета в буфере pPCLGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPCLGlb:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set result=0
	Set depcode=""
	For  {
		Set depcode=$Order(@pPCLGlb@(depcode))
		If depcode="" Quit
		Set page=""
		For  {
			Set page=$Order(@pPCLGlb@(depcode,page))
			If page="" Quit
			Set result=result+1
		}	
	}
	Quit result
]]></Implementation>
</Method>

<Method name="PCLReport2Glb">
<Description>
Формирование глобала PCL отчета для эпизода pEpis эпизодов pTestSets, pPDF=1 для вывода в PDF, pPDF=0 для вывода на печать
Результаты записать в глобал pPCLRepGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pPDF:%Boolean,pPCLRepGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	Kill @pPCLRepGlb
	Kill ^||episode
	Do ..PCLResult(pEpis,.pTestSets)
	Set totalpages=..PCLTotalPages($Name(^||episode))
	If '$Data(^||episode) Quit
	Set depcode="",pagenum=0,i1=0
	For  {
		Set depcode=$Order(^||episode(depcode))
		If depcode="" Quit
		Set page=""
		For  {
			Set page=$Order(^||episode(depcode,page))
			If page="" Quit
			Set pagenum=pagenum+1
			Kill ^||Episode.Header
			Do Header^PRTDR0RU02(pEpis,.pTestSets,depcode,pPDF,$Name(^||Episode.Header))
			If '$Data(@pPCLRepGlb@("HDR")) {
				Set i2=""
				For  {
					Set i2=$Order(^||Episode.Header("HDR",i2),1,val)
					If i2="" Quit
					Set @pPCLRepGlb@("HDR",i2)=val
				}	
			}
			Set i2=""
			For  {
				Set i2=$Order(^||Episode.Header("PRT",i2),1,val)
				If i2="" Quit
				Set i1=i1+1
				If '$Data(@pPCLRepGlb@("Pages4PRT",pagenum)) Set @pPCLRepGlb@("Pages4PRT",pagenum)=i1
				Set @pPCLRepGlb@("PRT",i1)=val
			}
			Set row=""
			For  {
				Set row=$Order(^||episode(depcode,page,row))
				If row="" Quit
				Set i2=""
				For  {
					Set i2=$Order(^||episode(depcode,page,row,i2),1,val)
					If i2="" Quit
					Set i1=i1+1
					If '$Data(@pPCLRepGlb@("Pages4PRT",pagenum)) Set @pPCLRepGlb@("Pages4PRT",pagenum)=i1
					Set @pPCLRepGlb@("PRT",i1)=val
				}
			}
			Kill ^||Episode.Footer
			Do Footer^PRTDR0RU02(pEpis,.pTestSets,depcode,pagenum,totalpages,$Name(^||Episode.Footer))
			Set i2=""
			For  {
				Set i2=$Order(^||Episode.Footer("PRT",i2),1,val)
				If i2="" Quit
				Set i1=i1+1
				If '$Data(@pPCLRepGlb@("Pages4PRT",pagenum)) Set @pPCLRepGlb@("Pages4PRT",pagenum)=i1
				Set @pPCLRepGlb@("PRT",i1)=val
				
			}
						
		}

	}
]]></Implementation>
</Method>

<Method name="NextPage">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pPage:%Integer,&pRow:%Integer,&pFirstOnPage:%Boolean]]></FormalSpec>
<Implementation><![CDATA[
	Set pPage=pPage+1
	Set pRow=1
	Set pFirstOnPage=1
]]></Implementation>
</Method>

<Method name="AddTestSetResult">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pDepDode:%String,pMaxRowCount:%Integer,&pPage:%Integer,&pRow:%Integer,&pFirstOnPage:%Boolean]]></FormalSpec>
<Implementation><![CDATA[
	Set testsetrows=##class(TCLEx.Function.TestSet).TotalRowCount($NA(^||testset))
	If ((pRow-1+testsetrows)>pMaxRowCount)&&('((pPage=1)&&(pRow=1))) {	; Переход на следующую страницу, если результаты TestSet-а не влазиют на текущую страницу
		Do ..NextPage(.pPage,.pRow,.pFirstOnPage)
	}	
	If pFirstOnPage { 
		Set pFirstOnPage=0
	}	
	Set j=""
	For  {
		Set j=$Order(^||testset(j))
		If j="" Quit
		If ($Get(^||testset(j,1))=$Char(12)) {						; Переход на следующую страницу, если встретили символ перевода страницы
			Do ..NextPage(.pPage,.pRow,.pFirstOnPage)
			Continue
		}	
		Set pFirstOnPage=0
		Merge ^||episode(pDepDode,pPage,pRow)=^||testset(j)
		Set pRow=pRow+1
		If (pRow#(pMaxRowCount+1)=0) {								; Переход на следующую страницу, если данные набора тестов не влазят на одну страницу
			Do ..NextPage(.pPage,.pRow,.pFirstOnPage)
		}	
	}
]]></Implementation>
</Method>

<Method name="PaymentDate">
<Description>
Дата платежа для выставления в счет
Возвращаем пусто, если в эризоде есть незавершенные наборы тестов
Завершенными считаются авторизованные и отмененные наборы тестов
Для завершенных наборов тестов ищем максимальную дату 
либо авторизации, либо ввода причины отмены
Также пропускаются наборы тестов с VISTSSupressBilling="Y"
Если есть неавторизованные, то возвращаем пусто  </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit ""
	Set key="",doneepis=1,maxdate=""
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		Set donetestset=0 			// Набор тестов выполнен, если он авторизован или отменен// Набор тестов выполнен, если он авторизован или отменен
		Set billable=0				// Набор тестов попадает в счет, если авторизован или отменен с причиной отмены у которой CTRBillable="Y"		 
		Set testsetdate=""
		If ##class(TCLEx.Function.TestSet).IsCanceled2(testsetobj) {		
			Set donetestset=1
			If ($IsObject(testsetobj.VISTSReasonDR))&&(testsetobj.VISTSReasonDR.CTRBillable="Y") {
				Set billable=1
				Set testsetdate=testsetobj.VISTSDateOfReason
			}	
		}
		If ##class(TCLEx.Function.TestSet).IsAuthorised(testsetobj) {
			Set donetestset=1
			Set billable=1
			Set testsetdate=testsetobj.VISTSDateOfAuthorisation
		}
		If 'donetestset {			// Если какой-то из наборов не выполнен, то эпизод в целом не выполнен
			Set doneepis=0
			Quit
		}	
		If (billable)&&(testsetobj.VISTSSupressBilling'="Y") {	// Пропускаем наборы с VISTSSupressBilling="Y"
			If testsetdate>maxdate Set maxdate=testsetdate
		}	
	}
	If 'doneepis Quit ""
	Quit maxdate
]]></Implementation>
</Method>

<Method name="HospitalId4Episode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisId)
	If '$IsObject(episobj) Quit ""
	Set hospobj=episobj.EPVISHospitalCodeDR
	If '$IsObject(hospobj) Quit ""
	Quit hospobj.%Id()
]]></Implementation>
</Method>

<Method name="MakeResultResport">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportType:%String,pHospital:%String</FormalSpec>
<PublicList>PLIST</PublicList>
<Implementation><![CDATA[
	If pReportType'="C" Quit
	Kill ^||Episode.Prn
	Set epis=""
	For  {
		Set epis=$Order(^TRPT(pReportType,pHospital,"H",pHospital,epis))
		If epis="" Quit
		Set testset=""
		For  {
			Set testset=$Order(^TRPT(pReportType,pHospital,"H",pHospital,epis,testset))
			If testset="" Quit
			Set testcnt=""
			For  {
				Set testcnt=$Order(^TRPT(pReportType,pHospital,"H",pHospital,epis,testset,testcnt))
				If testcnt="" Quit
				Set testsetid=epis_"||"_testset_"||"_testcnt
				If $$printable^LVBCTTS(testset,testsetid) {
					Set ^||Episode.Prn(epis,testsetid)=""
					Kill ^TRPT(pReportType,pHospital,"H",pHospital,epis,testset,testcnt)
				}		
			}	
		}	
		Kill ^TRPT(pReportType,pHospital,"H",pHospital,epis)
	}

	Kill ^||Episode.PCL
	Set epis="",episcnt=0
	For  {
		Set epis=$Order(^||Episode.Prn(epis))
		If epis="" Quit
		Kill ^||episode
		Kill testsets
		Set testsetid=""
		For  {
			Set testsetid=$Order(^||Episode.Prn(epis,testsetid))
			If testsetid="" Quit
			Set testsetobj=##class(User.EPVisitTestSet).%OpenId(testsetid)
			If '$IsObject(testsetobj) Quit
			Set superset=""
			If $IsObject(testsetobj.VISTSSuperSetDR) Set superset=testsetobj.VISTSSuperSetDR.%Id()
			If superset'="" {
				Set testsets(superset)=""
			} Else {
				Set testsets(testsetid)=""
			}		
		}	
		Do ..PCLReport2Glb(epis,.testsets,0,$Name(^||Episode.PCL(epis)))
		If $Data(^||Episode.PCL(epis)) Set episcnt=episcnt+1
	}
	If '$Data(^||Episode.PCL) Quit
	Kill ^||Episode.PCLReport
	Set epis="",i1=""
	For  {
		Set epis=$Order(^||Episode.PCL(epis))
		If epis="" Quit
		If '$Data(^||Episode.PCLReport("HDR")) {
			Merge ^||Episode.PCLReport("HDR")=^||Episode.PCL(epis,"HDR")
		}

		Set i2=""
		For  {
			Set i2=$Order(^||Episode.PCL(epis,"PRT",i2),1,val)
			If i2="" Quit
			If val="" Continue
			Set i1=i1+1
			Set ^||Episode.PCLReport("PRT",i1)=val
		}
		If $Order(^||Episode.PCL(epis))'="" { 								// Page break if not last episode
			Set i1=i1+1
			Set ^||Episode.PCLReport("PRT",i1)="#"
		}		
	}
	//
	Set epis=""
	For  {
		Set epis=$Order(^||Episode.Prn(epis))
		If epis="" Quit
		Set testsetid=""
		For  {
			Set testsetid=$Order(^||Episode.Prn(epis,testsetid))
			If testsetid="" Quit
			Set testsetobj=##class(User.EPVisitTestSet).%OpenId(testsetid)
			If $IsObject(testsetobj)&&(testsetobj.VISTSPrinted'="Y") {
				Set testsetobj.VISTSPrinted="Y"
				Set horolog=$Horolog
				Set testsetobj.VISTSDateOfLastChange=$Piece(horolog,",",1)
				Set testsetobj.VISTSTimeOfLastChange=$Piece(horolog,",",2)
				Do testsetobj.%Save()
			}	
		}	
	}
	//	
	Set repobj=##class(User.PRReport).%New()
	Set repid=$Get(^PR)
	If (repid="")||($Data(^PR(repid))) {
		Set repid=$Increment(^PR)
	}
	Set repobj.PRPRReportID=repid
	Set repobj.PRPRReportDR=##class(User.SSReportGeneric).%OpenId("DRP")
	Set repobj.PRPRContentType="I"
	Set hor=$Horolog
	Set repobj.PRPRCreatedDate=$Piece(hor,",",1)
	Set repobj.PRPRCreatedTime=$Piece(hor,",",2)
	Set repobj.PRPRParameters="C\"_pHospital
	Set repobj.PRPRREPORTPARAMETERS="C-"_pHospital_"-"_episcnt
	Set repobj.PRPRStatus="R"
	Set ok=repobj.%Save()
	If 'ok {
		;Do $system.OBJ.DisplayError(ok)
		Quit
	}	
	//
	Merge ^PR(repid,"HDR")=^||Episode.PCLReport("HDR")
	Merge ^PR(repid,"PRT")=^||Episode.PCLReport("PRT")
	//
	Kill PLIST
	Set PLIST(3)="MAIN" 
	Set PLIST(4)=1 
	Set PLIST(5)="R" 
	Set PLIST(6)=$Piece(hor,",",1) 
	Set PLIST(7)=$Piece(hor,",",2)
	Set sqlcode=$$insert^LVBPRPRD(repobj.%Id())
]]></Implementation>
</Method>

<Method name="GetMaxAuthorizationTime">
<Description>
Получить максимальное время авторизации наборов тестов эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit ""
	Set key="",result=""
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		If '##class(TCLEx.Function.TestSet).IsAuthorised(testsetobj) {
			Set ok=0
			Quit
		}
		Set date=testsetobj.VISTSDateOfAuthorisation
		Set time=testsetobj.VISTSTimeOfAuthorisation
		Set hor=date_","_(time*60)
		If hor]]result Set result=hor
	}
	Quit result
]]></Implementation>
</Method>

<Method name="PatientEMail4Episode">
<Description>
E-Mail пациента для эпизода pEpisId</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisId)
	If '$IsObject(episobj) Quit ""
	Quit episobj.EPVISPhoneWork
]]></Implementation>
</Method>

<Method name="DoctorName4Episode">
<Description>
Фамилия врача для эпизода pEpisId</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisId)
	If '$IsObject(episobj) Quit ""
	Set doctobj=episobj.EPVISDoctorCodeDR
	If '$IsObject(doctobj) Quit ""
	Set name=doctobj.CTDRSurname
	If name="-" Quit ""
	Quit name
]]></Implementation>
</Method>

<Method name="PatientFullName4Episode">
<Description>
Фамилия врача для эпизода pEpisId</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisId)
	If '$IsObject(episobj) Quit ""
	Quit $$FullName^KSPCLUtils(episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1)
]]></Implementation>
</Method>

<Method name="XMLResult2File">
<Description>
Формирование XML файла pFileName с результатами по эпизоду pEpis
pTestSets - список наборов тестов по которым выгружать данные</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set xmlobj=##class(TCLEx.XML.Episode).ResultObject(pEpis,.pTestSets)
	If '$IsObject(xmlobj) Quit $$$ERROR($$$GeneralError,"Не удалось создать XML объект с данными по эпизоду "_pEpis_" !")
	Set writer=##class(%XML.Writer).%New()
	Set writer.Indent=1
	Set ok=writer.OutputToFile(pFileName)
	If 'ok Quit ok
	Set ok=writer.RootObject(xmlobj)
	Quit ok
]]></Implementation>
</Method>

<Method name="ResultLanguages">
<Description>
Вернуть коды языков для печати результата для эпизода Epis</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit ""
	Set defaultlang=..GetDefaultLanguage()
	Set langcode=""
	If $IsObject(episobj.EPVISLanguageDR) {
		Set langcode=episobj.EPVISLanguageDR.%Id()
	}
	If langcode="" {												// Если язык не заполнен, то берем язык по умолчанию
		Set langcode=defaultlang
	}	
	Set result=$ListBuild(langcode)									
	If langcode=29 {												// Если язык 29-ENG/RUS, то возвращаем 2 языка 1-RUS,2-ENG
		Set result=$ListBuild(1,2)
	}
	Quit result
]]></Implementation>
</Method>

<Method name="GetDefaultLanguage">
<Description>
Язык по умолчанию</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	// Если существует класс TCLEx.Funclion.Episode(расширение для клиента) и в нем существует метод GetDefaultLanguage, то вызывается клиентский метод 
	set clientext=$Piece($Get(^CF("SM",1)),"^",28)
	if (clientext'="") {
		set classmethod=$CLASSNAME()_clientext_"||GetDefaultLanguage"
	    if ##class(%Dictionary.CompiledMethod).%ExistsId(classmethod) {
		    quit $ClassMethod($piece(classmethod,"||",1),$piece(classmethod,"||",2))
	    }
	}
	set returnValue=$p($get(^CF("SM",1)),"^",10)
	if returnValue="" set returnValue=20
	quit returnValue
]]></Implementation>
</Method>

<Method name="FirstAuthorizationDateTime">
<Description>
Вернуть дату-время авторизации первого набора тестов в заданном эпизоде
Параметры:
pEpisId - ID эпизода 
pTestSetId - возвращаемое по ссылке ID первого авторизованного набора тестов 
pUserAuthorsedId - возвращаемое по ссылке ID пользователя, авторизовавшегопервый набора тестов  
Возвращаемое значение:
Время (в формате $Horolog) авторизации первого набора тестов в эпизоде  </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisId:%String,pGlb:%String,&pTestSetId:%String,&pUserAuthorsedId:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pGlb=$Get(pGlb)
	Set (pTestSetId,pUserAuthorsedId)=""
	If pGlb="" {								// Если буфер с данными наборов тестов эпизода не передается, то формируем его
		Set pGlb=$Name(^||Episode.TestSets)
		Kill @pGlb
		Do ..MakeTestSetsBuf(pEpisId,pGlb)		
	}	
	Kill ^||Episode.AuthTimes
	Set testsetid=""
	For  {
		Set testsetid=$Order(@pGlb@(testsetid),1,vals)
		If testsetid="" Quit
		
		If ##class(TCLEx.Function.TestSet).IsAuthorisedLB(vals) {	// Выбираем только авторизованные
			Set authdate=##class(TCLEx.Function.TestSet).GetPropertyValue(vals,"VISTSDateOfAuthorisation")
			Set authtime=##class(TCLEx.Function.TestSet).GetPropertyValue(vals,"VISTSTimeOfAuthorisation")
			Set authuser=##class(TCLEx.Function.TestSet).GetPropertyValue(vals,"VISTSUserAuthorisedDR")
			Set hor=authdate_","_(60*authtime)
			Set ^||Episode.AuthTimes(hor)=$ListBuild(testsetid,authuser)
		}	
	}	
	Set result=$Order(^||Episode.AuthTimes(""),1,vals)				// Авторизованный эпизд с минимальный дата-время авторизации
	If result'="" {
		Set pTestSetId=$ListGet(vals,1)
		Set pUserAuthorsedId=$ListGet(vals,2)
	}	
	Quit result
]]></Implementation>
</Method>

<Method name="MakeTestSetsBuf">
<Description>
Создать буфер с данными наборов тестов заданного эпизода
Параметры:
pEpisId - ID эпизода 
pGlb - буфер в который будут записан результаты</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisId:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set (pTestSetId,pUserAuthorsedId)=""
	Kill @pGlb
	&Sql(
		Declare TestSetsCursor Cursor For
		Select VISTS_RowId,VISTS_TestSet_DR,VISTS_SuperSet_DR,VISTS_Priority_DR,VISTS_StatusResult,VISTS_DateOfAuthorisation,VISTS_TimeOfAuthorisation,VISTS_UserAuthorised_DR,VISTS_Reason_DR,VISTS_DateOfReason,VISTS_TimeOfReason,VISTS_UserReason_DR
		Into :testsetid,:testset,:superset,:priority,:status,:authdate,:authtime,:authuser,:reason,:reasondate,:reasontime,:reasonuser
		From SQLUser.EP_VisitTestSet
		Where VISTS_ParRef=:pEpisId
	)
	&Sql(Open TestSetsCursor)
	&Sql(Fetch TestSetsCursor)
	If SQLCODE=100 Quit ""											// Нет записей для этого набора тестов
	Set result=1
	While (SQLCODE = 0) {
		If testsetid'="" {
			Set @pGlb@(testsetid)=$ListBuild(testsetid,testset,superset,priority,status,authdate,authtime,authuser,reason,reasondate,reasontime,reasonuser)
		}	
		&Sql(Fetch TestSetsCursor)
	}
	&Sql(Close TestSetsCursor)
	Quit
]]></Implementation>
</Method>

<Method name="MakeTestSetsBufObj">
<Description>
Создать буфер с данными наборов тестов заданного эпизода (через объектный доступ)
Параметры:
pEpisId - ID эпизода 
pGlb - буфер в который будут записан результаты</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisId:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set (pTestSetId,pUserAuthorsedId)=""
	Kill @pGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisId)
	If '$IsObject(episobj) Quit
	Set key="",cnt=0
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		Set testsetid=testsetobj.%Id()
		Set testset=testsetobj.VISTSTestSetDRGetObjectId()
		Set superset=testsetobj.VISTSSuperSetDRGetObjectId()
		Set priority=testsetobj.VISTSPriorityDRGetObjectId()
		Set status=testsetobj.VISTSStatusResult
		Set authdate=testsetobj.VISTSDateOfAuthorisation
		Set authtime=testsetobj.VISTSTimeOfAuthorisation
		Set authuser=testsetobj.VISTSUserAuthorisedDRGetObjectId()
		Set reason=testsetobj.VISTSReasonDRGetObjectId()
		Set reasondate=testsetobj.VISTSDateOfReason
		Set reasontime=testsetobj.VISTSTimeOfReason
		Set reasonuser=testsetobj.VISTSUserReasonDRGetObjectId()
		Set @pGlb@(testsetid)=$ListBuild(testsetid,testset,superset,priority,status,authdate,authtime,authuser,reason,reasondate,reasontime,reasonuser)
	}
	Quit
]]></Implementation>
</Method>

<Method name="LogEvent">
<Description>
Сохранить событие об изменении эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRecordUpdateType:%String,pEpisId:%String,&pValues:%String,&pOldValues:%String]]></FormalSpec>
<Implementation><![CDATA[
	
	If (pRecordUpdateType'="Insert")||(pEpisId="") Quit
	Set episode=$Get(pValues(2))
	Set ordernumber=##class(TCLEx.Function.LabOrder).GetOrderByEpisode(episode)
	Set isweber=($Get(pValues(117))="WebER")
	Set hospital=$Get(pValues(22))
	Set user=$Get(pValues(31))		// EPVIS_UserID_DR
	If isweber {
		Set event="EPISODE_WEBER_CREATE"
		Set user="WebER"
	} Else {
		Set event="EPISODE_MAN_CREATE"
		Set ordernumber=""
	}
	Do ##class(TCLEx.Data.Event).Save(event,ordernumber,pEpisId,,,"User.EPVisitNumber",pEpisId,hospital,user)
]]></Implementation>
</Method>

<Method name="GetAccessionNumbers">
<Description>
get string with all Accession Numbers of episode</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pTestSet:%String,&pAccNumbers:%String]]></FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set pAccNumbers="",sc=$$$OK,pTestSet=$get(pTestSet)
  try {
	  if '$$getall^LVBVISDB(pEpisode) {
	        set nnn="" 
	        for {
		        set nnn=$order(PLIST(nnn)) quit:nnn="" 
		        set ts=$piece($piece(PLIST(nnn),$c(28),7),"||",2)
		        if pTestSet'="",ts'="" if pTestSet'=ts continue
		        set accnum=$piece($piece($get(PLIST(nnn)),$char(28),12),"||",2) 
		        if accnum'="" {
			        set pAccNumbers=pAccNumbers_$s(pAccNumbers'="":", ",1:"")_$$AccNoFormat^LVBCOM03(accnum)
		        }
	        }
        }	
  } catch(exception) {
	  set sc=exception.AsStatus()
	  set pAccNumbers=""
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ResendResult">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisode)
	If '$IsObject(episobj) Quit $$$ERROR($$$GeneralError,"Не удалось открыть объект эпизода "_pEpisode_" !")
	Set epispiority=episobj.EPVISPriorityCodeDRGetObjectId()
	// Составляем список наборов тестов для которых нужен результат
	Set key="",err="",mindatetime=""
	For  {
		Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testsetobj) Continue
		//
		If '##class(TCLEx.Function.TestSet).IsPrintable(testsetobj) Continue // Пропускаем непечатаемые, т.к. для них не нужен результат
		Set testsetid=testsetobj.%Id()
		If testsetid="" Continue
		//
		Set superset=testsetobj.VISTSSuperSetDRGetObjectId()
		If (superset'="") {
			If '##class(TCLEx.Function.SuperSet).IsSuperSetSummaryTestSet(superset,testsetid) // Смотрим только на заключительный набор тестов
			If '##class(TCLEx.Function.SuperSet).IsComplete(pEpisode,superset) Continue
			Set testsetid=superset
		}
		//
		Set datetime=""
		If ##class(TCLEx.Function.TestSet).IsAuthorised(testsetobj) {
			Set datetime=testsetobj.VISTSDateOfAuthorisation_","_(testsetobj.VISTSTimeOfAuthorisation*60)
		} ElseIf ##class(TCLEx.Function.TestSet).IsCanceled(testsetobj){
			Set datetime=testsetobj.VISTSDateOfReason_","_testsetobj.VISTSTimeOfReason
		}
		If datetime="" Continue
		If (mindatetime="")||(mindatetime]datetime) {			// Находим минимальное время авторизации в эпизоде
			Set mindatetime=datetime
		}
		Set priority=testsetobj.VISTSPriorityDRGetObjectId()
		If ##class(TCLEx.Function.Laboratory).IsCitoPriority(epispiority) {
			Set priority=epispiority
		}
		Set testset=testsetobj.VISTSTestSetDRGetObjectId()
		Set TestSets(testsetid)=$ListBuild(testset,priority,datetime)
	}
	If mindatetime="" Quit $$$OK
	// Определяем какие типы результата нужны по данному эпизоду
	Do ##class(TCLEx.Function.LabOrder).NeededResultModes(pEpisode,.needweber,.needhospitalemail,.needpatientemail,.needpatientsms)
	// Регистрируем необходимость формирования нужных результатов по наборам тестов
	Set testsetid=""
	For  {
		Set testsetid=$Order(TestSets(testsetid),1,vals)
		If testsetid="" Quit
		Set testset=$ListGet(vals,1)
		Set priority=$ListGet(vals,2)
		Set datetime=$ListGet(vals,3)
		If ##class(TCLEx.Function.TestSet).IsTime4Result2(testset,priority,mindatetime,datetime) {			// Проверка можно ли уже формировать результат
			Do ##class(TCLEx.Function.TestSet).SetAuthorisationStatus(pEpisode,testsetid,mindatetime,datetime,needweber,needhospitalemail,needpatientemail,needpatientsms)
		}	
	}	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
