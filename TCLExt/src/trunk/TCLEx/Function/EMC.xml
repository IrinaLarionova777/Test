<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Function.EMC">
<Super>%RegisteredObject</Super>
<TimeCreated>62291,42815.230175</TimeCreated>

<Method name="AddOrders">
<Description>
Создать новые заказы по данным из глобала pGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set epis=""
	For  {
		Set epis=$Order(@pGlb@(epis))
		If epis="" Quit
		Set orderobj=..Global2Object($Name(@pGlb@(epis)))
		If '$IsObject(orderobj) Continue
		Do ..AddOrder(orderobj)
	}
]]></Implementation>
</Method>

<Method name="AddOrder">
<Description>
Создать новый заказ по данным из объекта pOrderObj
Результат в формате %Status (= $$$OK, если создан объект временного буфера или обновлен эпизод в EPVisitNumber)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrderObj:TCLEx.Object.EMCOrder</FormalSpec>
<Implementation><![CDATA[
	Set epis=pOrderObj.RequestBioCode
	If '##class(User.EPVisitNumber).%ExistsId(epis) {						 	// Еще нет эпизода в User.EPVisitNumber
		Set hosppatobj=..EMCOrder2HospitalPatient(pOrderObj)					// Добавляем/обновляем User.HOSHospitalPatients
		Set ok=hosppatobj.%Save()
		If 'ok {
			Set errstr="Не удалось сохранить объект User.HOSHospitalPatients ("_$$Status2Str^KSUTIL1(ok)_")!"
			Set cnt=pOrderObj.RequestTestCodes.Count()							// Пробегаем по всем назначенным исследованиям заказ
			For i=1:1:cnt {
				Set teststr=pOrderObj.RequestTestCodes.GetAt(i)
				Set requestid=$ListGet(teststr,1)
				Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
			}									// Id записи буферной таблицы
			Quit
		}
		Kill ^||EMC.TestSets
		Do ..HospitalPatientTestSets(hosppatobj.%Id(),$Name(^||EMC.TestSets))	// Составляем буфер с уже имеющимися наборами тестов в User.HOSHospitalPatients
		Set maxcount=$ListGet($Get(^||EMC.TestSets),1)
		Set cnt=pOrderObj.RequestTestCodes.Count()							// Пробегаем по всем назначенным исследованиям заказ
		For i=1:1:cnt {
			Set teststr=pOrderObj.RequestTestCodes.GetAt(i)
			Set requestid=$ListGet(teststr,1)								// Id записи буферной таблицы
			Set testset=$ListGet(teststr,2)									// Код исследования
			Set doctorcode=$ListGet(teststr,3)								// Код врача
			Set orderlang=$ListGet(teststr,4)								// Код языка
			Set depcode=$ListGet(teststr,5)									// Код отделения
			Set orderpriority=$ListGet(teststr,6)							// Приоритет
			Set ok=..IsCorrectTestSet(testset,.errstr)						// Корректное исследование ?
			If 'ok {														// Если нет, то пишем ошибочный статус и идем на следущее исследование
				Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
				Continue
			}
			If $Data(^||EMC.TestSets(requestid_$Char(1)_testset)) {							// Исследование уже есть в HOSHospitalPatientsTSet 
				Set ok=1																	// Начальное значение статуса
				If $Data(^||EMC.TestSets(requestid_$Char(1)_testset))<10 {					// Если не супер-набор, то 1 значение набора тестов
					Set vals=$Get(^||EMC.TestSets(requestid_$Char(1)_testset))				// берем ID записи
					Set testsetid=$ListGet(vals,1)
					Set ok=..UpdateHospPatTestSet(testsetid,teststr)
				} Else {																	// Если супер-набор, то проходим по всем его элементам
					Set supersetitem=""
					For  {
						Set supersetitem=$Order(^||EMC.TestSets(requestid_$Char(1)_testset,supersetitem),1,vals)
						If supersetitem="" Quit
						Set testsetid=$ListGet(vals,1)
						Set ok=..UpdateHospPatTestSet(testsetid,teststr)
						If 'ok Quit
					}	
				}		
				Set ok=..UpdateHospitalPatientsProperties(hosppatobj.%Id())
				If ok {
					Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,4)
				} Else {
					Set errstr="Не удалось сохранить объект User.HOSHospitalPatientsTSet ("_$$Status2Str^KSUTIL1(ok)_")!"
					Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
				}	
				Continue
			}		
			If ##class(User.CTSuperSet).%ExistsId(testset) {				// Если это супер-набор
				Set superset=testset
				Kill ^||EMC.SuperSet
				Do ##class(TCLEx.Function.SuperSet).CreateItemsBuf(superset,$Name(^||EMC.SuperSet))	// определяем элементы супер-набора
				Set supersetitem="",supersetok=1
				For  {
					Set supersetitem=$Order(^||EMC.SuperSet(supersetitem))
					If supersetitem="" Quit
					If '$Data(^||EMC.TestSets(requestid_$Char(1)_superset,supersetitem)) {		// Если такого набора тестов нет в User.HOSHospitalPatientsTSet, то добавляем его
						Set maxcount=maxcount+1
						Set hosptestsetobj=##class(User.HOSHospitalPatientsTSet).%New()
						Set hosptestsetobj.HOSPTExtraExternalID=requestid
						Set hosptestsetobj.HOSPTCounter=maxcount
						Set hosptestsetobj.HOSPTHospitalRefNumber=hosppatobj
						Set hosptestsetobj.HOSPTSuperSetDR=##class(User.CTSuperSet).%OpenId(superset,0)
						Set hosptestsetobj.HOSPTTestSetDR=##class(User.CTTestSet).%OpenId(supersetitem,0)
						Set hosptestsetobj.HOSPTExtraDoctor=##class(User.CTDoctor).%OpenId(doctorcode,0)
						Set hosptestsetobj.HOSPTExtraLocation=##class(User.CTHospital).%OpenId(depcode,0)
						Set hosptestsetobj.HOSPTExtraPriority=##class(User.CTPriority).%OpenId(orderpriority,0)
						Set langcode=2
						If orderlang="RUS" Set langcode=1
						Set hosptestsetobj.HOSPTExtraLanguage=##class(User.SSLanguage).%OpenId(langcode,0)
						If orderpriority=1 {
							Set hosptestsetobj.HOSPTExtraPriority=##class(User.CTPriority).%OpenId("U",0)
						} Else {
							Set hosptestsetobj.HOSPTExtraPriority=""
						}	
 						Set ok=hosptestsetobj.%Save()
						If 'ok {
							Set supersetok=ok
						}	
					}	
				}
				If supersetok {
					Set supersetok=..UpdateHospitalPatientsProperties(hosppatobj.%Id())
				}	
				If supersetok {												// Проверка успешности добавления по всем элементам супер-набора
					Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,4)
				} Else {
					Set errstr="Не удалось сохранить объект User.HOSHospitalPatientsTSet ("_$$Status2Str^KSUTIL1(supersetok)_")!"
					Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
				}			
			} Else {														// Если обычный набор тестов (не супер-набор !!!)
				Set ok=1
				If '$Data(^||EMC.TestSets(requestid_$Char(1)_testset)) {						// Если такого набора тестов нет в User.HOSHospitalPatientsTSet, то добавляем его
					Set maxcount=maxcount+1
					Set hosptestsetobj=##class(User.HOSHospitalPatientsTSet).%New()
					Set hosptestsetobj.HOSPTExtraExternalID=requestid
					Set hosptestsetobj.HOSPTCounter=maxcount
					Set hosptestsetobj.HOSPTParRef=hosppatobj
					Set hosptestsetobj.HOSPTHospitalRefNumber=testset
					Set hosptestsetobj.HOSPTTestSetDR=##class(User.CTTestSet).%OpenId(testset,0)
					Set hosptestsetobj.HOSPTExtraDoctor=##class(User.CTDoctor).%OpenId(doctorcode,0)
					Set hosptestsetobj.HOSPTExtraLocation=##class(User.CTHospital).%OpenId(depcode,0)
					Set langcode=2
					If orderlang="RUS" Set langcode=1 
					Set hosptestsetobj.HOSPTExtraLanguage=##class(User.SSLanguage).%OpenId(langcode,0)
					If orderpriority=1 {
						Set hosptestsetobj.HOSPTExtraPriority=##class(User.CTPriority).%OpenId("U",0)
					} Else {
						Set hosptestsetobj.HOSPTExtraPriority=""
					}	
				Set ok=hosptestsetobj.%Save()
				}	
				If ok {
					Set ok=..UpdateHospitalPatientsProperties(hosppatobj.%Id())
				}	
				If ok {														// Проверка успешности добавления набора тестов
					Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,4)
				} Else {
					Set errstr="Не удалось сохранить объект User.HOSHospitalPatientsTSet ("_$$Status2Str^KSUTIL1(ok)_")!"
					Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
				}			
			}			
		}	
	} Else {																// Дозаказ наборов тестов в существующий эпизод
		Kill ^||EMC.TestSets
		Do ..EpisodeTestSets(epis,$Name(^||EMC.TestSets))
		Set cnt=pOrderObj.RequestTestCodes.Count()							// Пробегаем по всем назначенным исследованиям заказ
		For i=1:1:cnt {
			Set teststr=pOrderObj.RequestTestCodes.GetAt(i)
			Set requestid=$ListGet(teststr,1)								// Id записи буферной таблицы
			Set testset=$ListGet(teststr,2)									// Код исследования
			Set doctorcode=$ListGet(teststr,3)								// Код врача
			Set orderlang=$ListGet(teststr,4)								// Код языка
			Set langcode=2
			If orderlang="RUS" Set langcode=1 
			Set depcode=$ListGet(teststr,5)									// Код отделения
			Set orderpriority=$ListGet(teststr,6)							// Приоритет
			Set ok=..IsCorrectTestSet(testset,.errstr)						// Корректное исследование ?
			If 'ok {														// Если нет, то пишем ошибочный статус и идем на следущее исследование
				Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
				Continue
			}
			If $Data(^||EMC.TestSets(requestid_$Char(1)_testset)) {							// Если уже есть, то просто меняем статус в буферной таблице
				Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,5)
				Continue
			}
			Set ok=1
			If ##class(User.CTSuperSet).%ExistsId(testset) {				// Если это супер-набор
				Set superset=testset
				Kill ^||EMC.SuperSet
				Do ##class(TCLEx.Function.SuperSet).CreateItemsBuf(superset,$Name(^||EMC.SuperSet))	// определяем элементы супер-набора
				Set testset="",supersetok=1
				For  {
					Set testset=$Order(^||EMC.SuperSet(testset))
					If testset="" Quit
					If '$Data(^||EMC.TestSets(superset,testset)) {		// Если такого набора тестов нет в User.HOSHospitalPatientsTSet, то добавляем его
						Set supersetok=..InsertTestSet(requestid,epis,testset,superset,orderpriority)
						If 'supersetok {
							Set ok=supersetok
						}	
					}	
				}

			} Else {
				Set ok=..InsertTestSet(requestid,epis,testset,"",orderpriority)
			}
			If ok {
				Set ok=..UpdateEpisodeProperties(epis,langcode,doctorcode,orderpriority)
			}	
			If ok {												// Проверка успешности добавления по всем элементам супер-набора
				Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,5)
			} Else {
				Set errstr="Не удалось добавить запись в таблицу EP_VisitTestSet ("_$$Status2Str^KSUTIL1(ok)_")!"
				Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
			}			
		}		
	}
]]></Implementation>
</Method>

<Method name="UpdateHospitalPatientsProperties">
<Description>
Обновить значения свойств, которые зависят от значений полей для множества наборов тестов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pHospPatId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set hosppatobj=##class(User.HOSHospitalPatients).%OpenId(pHospPatId)
	If '$IsObject(hosppatobj) Quit $$$OK													// Нет такой записи -> нечего обновлять
	&sql(
		Declare HospTSDepCursor CURSOR FOR
		Select HOSPT_Counter,HOSPT_ExtraDoctor_DR,HOSPT_ExtraLocation_DR,HOSPT_ExtraLanguage_DR,HOSPT_ExtraPriority_DR
		INTO :counter,:doctor,:location,:lang,:priority
		From SQLUser.HOS_HospitalPatientsTSet 
		Where HOSPT_ParRef=:pHospPatId
	)
	&sql(Open HospTSDepCursor)
	&sql(Fetch HospTSDepCursor)

	Kill Vals
	While (SQLCODE = 0) {
		If counter'="" {
			If (doctor'="") {
				Set Vals("Docs",counter)=doctor
			}
			If location'="" {
				Set Vals("Locations",counter)=location
			}
		}
		If (lang'="")&&('$Data(Vals("Languages",lang))) {
			Set Vals("Languages")=$Get(Vals("Languages"))+1
			Set Vals("Languages",lang)="" 
		}
		If priority="U" {
			Set Vals("Priority")="U"
		}			
		&sql(Fetch HospTSDepCursor)
	}
	&sql(Close HospTSDepCursor)
	//Обработка языка эпизода
	If $Get(Vals("Languages"))>1 {
		Set language=29									// ENG+RUS
	} Else {
		Set language=$Order(Vals("Languages",""))
	}		
	If language="" {
		Set hosppatobj.EPVISLanguageDR=""
	} Else {
		Set hosppatobj.EPVISLanguageDR=##class(User.SSLanguage).%OpenId(language,0)
	}		
	// Обработка списка врачей
	Kill codes
	Set doctcodes="",counter=""
	For  {
		Set counter=$Order(Vals("Docs",counter),1,code)
		If counter="" Quit
		If code="" Continue
		If $Data(codes(code)) Continue
		Set codes(code)=""
		If doctcodes'="" Set doctcodes=doctcodes_","
		Set doctcodes=doctcodes_code
	}
	Set hosppatobj.HOSPDoctorReferringDR=##class(User.CTDoctor).%OpenId($Piece(doctcodes,",",1),0)		// Первый врач - это врач целиком эпизода
	Set hosppatobj.EPVISExtra4=..DoctorNames(doctcodes,language)
	// Обработка расположения
	Kill codes
	Set locatcodes="",counter=""
	For  {
		Set counter=$Order(Vals("Locations",counter),1,code)
		If counter="" Quit
		If code="" Continue
		If $Data(codes(code)) Continue
		Set codes(code)=""
		If locatcodes'="" Set locatcodes=locatcodes_","
		Set locatcodes=locatcodes_code
	}
	Set hosppatobj.HOSPLocationDR=##class(User.CTHospital).%OpenId($Piece(locatcodes,",",1),0)			// Первое расположение- это расположение целиком эпизода
	//	Обработка приоритета (если один из наборов CITO, то весь эпизод CITO)
	If $Get(Vals("Priority"))="U" {
		Do hosppatobj.EPVISPriorityCodeDRSetObjectId("U")
	} Else {
		Set hosppatobj.EPVISPriorityCodeDR=""
	}		
	Quit hosppatobj.%Save()
]]></Implementation>
</Method>

<Method name="UpdateHospPatTestSet">
<Description>
Обновить значения свойств класса User.HOSHospitalPatientsTSet
Параметры:
pTestSetId - ID записи User.HOSHospitalPatientsTSet
pValues - значения свойств в формате $LB
Возвращаемое значение:
Результат обновления записи в формате %Status</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pValues:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set hosptestsetobj=""
	If pTestSetId'="" {
		Set hosptestsetobj=##class(User.HOSHospitalPatientsTSet).%OpenId(pTestSetId)
	}	
	If '$IsObject(hosptestsetobj) {
		Quit $$$ERROR($$$GeneralError,"Не удалось отрыть объект User.HOSHospitalPatientsTSet с ID="_pTestSetId_" !")
	}	
	
	Set doctorcode=$ListGet(pValues,3)								// Код врача
	Set orderlang=$ListGet(pValues,4)								// Код языка
	Set depcode=$ListGet(pValues,5)									// Код отделения
	Set orderpriority=$ListGet(pValues,6)							// Приоритет

	Do hosptestsetobj.HOSPTExtraDoctorSetObjectId(doctorcode)
	Do hosptestsetobj.HOSPTExtraLocationSetObjectId(depcode)
	Set langcode=2
	If orderlang="RUS" Set langcode=1 
	Do hosptestsetobj.HOSPTExtraLanguageSetObjectId(langcode)
	If orderpriority=1 {
		Do hosptestsetobj.HOSPTExtraPrioritySetObjectId("U")
	} Else {
		Set hosptestsetobj.HOSPTExtraPriority=""
	}	
	Quit hosptestsetobj.%Save()
]]></Implementation>
</Method>

<Method name="UpdateEpisodeProperties">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pLanguage:%String,pDoctorCode:%String,pPriority:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpisode)
	If '$IsObject(episobj)										// Нет эпизода - нечего обновлять
	Set changed=0
	Set lang=""
	If $IsObject(episobj.EPVISLanguageDR) {
		Set lang=episobj.EPVISLanguageDR.%Id()
	}
	If (lang'=29)&&(lang'=pLanguage) {
		Set episobj.EPVISLanguageDR=##class(User.SSLanguage).%OpenId(29,0)
		Set pLanguage=29
		Set changed=1
	}
	Set doctor=""
	If $IsObject(episobj.EPVISDoctorCodeDR) {
		Set doctor=episobj.EPVISDoctorCodeDR.%Id()
	}
	If (doctor'="")&&(doctor'=pDoctorCode) {
		Set docname=..DoctorNames(pDoctorCode,pDoctorCode)
		If episobj.EPVISExtra4'[(","_docname_",") {
			Set names=episobj.EPVISExtra4
			If names'="" Set names=names_","
			Set names=names_docname
			Set episobj.EPVISExtra4=names
			Set changed=1
		}	
	}
	If 'changed Quit 1
	Quit episobj.%Save()
]]></Implementation>
</Method>

<Method name="InsertTestSet">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequestId:%String,pEpisode:%String,pTestSet:%String,pSuperSet:%String,pPriority:%Integer</FormalSpec>
<PublicList>SQLCODE,PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (pEpisode="")  Quit $$$ERROR($$$SQLCode,"Не заполнен номер эпизода !")
	If (pEpisode="")  Quit $$$ERROR($$$SQLCode,"Не заполнен код набора тестов !")
	Kill PLIST
	Set PLIST(0)=pEpisode										// ID
	Set PLIST(2)=$Order(^TEPI(pEpisode,1,pTestSet,""),-1)+1		// VISTS_TestSetCounter
	Set PLIST(3)=pTestSet										// VISTS_TestSet_DR
	Set PLIST(32)=pSuperSet										// VISTS_SuperSet_DR
	Set horolog=$Horolog
	Set PLIST(24)=+horolog										// VISTS_DateOfCreation
	Set PLIST(25)=$Piece(horolog,",",2)							// VISTS_TimeOfCreation
	Set PLIST(29)="LEMC"
	Set PLIST(58)="D"											// VISTS_Reason_DR (D - дозаказ)	
	Set PLIST(59)=+horolog										// VISTS_DateOfReason	
	Set PLIST(60)=$Piece(horolog,",",2)							// VISTS_TimeOfReason	
	Set PLIST(48)=pRequestId									// pRequestId передаем в VISTS_SpecimenNo
	If pPriority=1 {
		Set PLIST(13)="U"										// VISTS_Priority_DR
	}										
	Set SQLCODE=$$insert^LVBVISTS(pEpisode)
	Set SQLCODE=$Piece(SQLCODE,$Char(1),1)
	If SQLCODE=0 Quit $$$OK
	Quit $$$ERROR($$$SQLCode,SQLCODE)
]]></Implementation>
</Method>

<Method name="HospitalPatientTestSets">
<Description>
Формируем буфер pGlb с имеющимися наборами тестов для записи  HOSHospitalPatientsTSet  с Id=pHospPatId</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pHospPatId:%String,pGlb:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Kill @pGlb
	&sql(
		Declare HospTSCursor CURSOR FOR
		Select HOSPT_ExtraExternal_ID,HOSPT_RowID,HOSPT_Counter,HOSPT_TestSet_DR,HOSPT_SuperSet_DR
		INTO :requestid,:testsetid,:count,:testset,:superset
		From SQLUser.HOS_HospitalPatientsTSet 
		Where HOSPT_ParRef=:pHospPatId
	)
	&sql(Open HospTSCursor)
	&sql(Fetch HospTSCursor)

	Set maxcount=0
	While (SQLCODE = 0) {
		If (count'="")&&(testset'="") {
			If superset="" {
				Set @pGlb@(requestid_$Char(1)_testset)=$ListBuild(testsetid)
			} Else {
				Set @pGlb@(requestid_$Char(1)_superset)=$Get(@pGlb@(superset))_$ListBuild(testsetid)
				Set @pGlb@(requestid_$Char(1)_superset,testset)=$ListBuild(testsetid)
			}		
		}
		If count>maxcount {
			Set maxcount=count
		}		
		&sql(Fetch HospTSCursor)
	}
	&sql(Close HospTSCursor)
	Set @pGlb=$ListBuild(maxcount)
]]></Implementation>
</Method>

<Method name="HospitalPatientRequestId4TestSets">
<Description>
Формируем буфер pGlb с соответсвием request_id буферной таблицы наборам тестов 
для записи  HOSHospitalPatientsTSet  с Id=pHospPatId</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pHospPatId:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Kill @pGlb
	&sql(
		Declare HospTSCursor2 CURSOR FOR
		Select HOSPT_ExtraExternal_ID,HOSPT_TestSet_DR,HOSPT_SuperSet_DR,HOSPT_ExtraPriority_DR
		INTO :requestid,:testset,:superset,:cito
		From SQLUser.HOS_HospitalPatientsTSet 
		Where HOSPT_ParRef=:pHospPatId
	)
	&sql(Open HospTSCursor2)
	&sql(Fetch HospTSCursor2)

	Set maxcount=0
	While (SQLCODE = 0) {
		If (requestid'="")&&(testset'="") {
			If superset="" {
				Set @pGlb@(testset,requestid)=$ListBuild(cito)
			} Else {
				Set @pGlb@(superset,requestid)=$ListBuild(cito)
			}		
		}
		&sql(Fetch HospTSCursor2)
	}
	&sql(Close HospTSCursor2)
	/*If $Data(@pGlb) {
		Set @pGlb=pHospPatId
	}*/
]]></Implementation>
</Method>

<Method name="EpisodeTestSets">
<Description>
Формируем буфер pGlb с имеющимися наборами тестов для эпизода pEpisode</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pGlb:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Kill @pGlb
	&sql(
		Declare EpisodeCursor CURSOR FOR
		Select 	VISTS_SpecimenNo,VISTS_RowId,VISTS_TestSet_DR,VISTS_SuperSet_DR		
		INTO :requestid,:testsetid,:testset,:superset
		From SQLUser.EP_VisitTestSet
		Where VISTS_ParRef=:pEpisode
	)
	&sql(Open EpisodeCursor)
	&sql(Fetch EpisodeCursor)

	Set maxcount=0
	While (SQLCODE = 0) {
		If (testset'="")&&(testsetid'="") {
			If superset="" {
				Set @pGlb@(requestid_$Char(1)_testset)=""
			} Else {
				Set @pGlb@(requestid_$Char(1)_superset,testset)=$ListBuild(testsetid)
			}
		}			
		&sql(Fetch EpisodeCursor)
	}
	&sql(Close EpisodeCursor)
]]></Implementation>
</Method>

<Method name="IsCorrectTestSet">
<Description>
Является ли корректным код исследования pTestSet 
т.е. есть запись с этим кодом в User.CTSuperSet или в User.CTTestSet(для наборов также проверяем флаг активности CTTSActiveFlag)
возвращаем 1 (ok) или 0 и описание ошибки в pError</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSet:%String,&pError:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If pTestSet="" {
		Set pError="Не заполнен код исследования !"
		Quit 0
	}
	If ##class(User.CTSuperSet).%ExistsId(pTestSet) {
		Set obj=##class(User.CTSuperSet).%OpenId(pTestSet,0)
		If '$IsObject(obj) {
			Set pError="Неверный код исследования "_pTestSet_"!"
			Quit 0
		}
		Quit 1
		
	}	
	Set obj=##class(User.CTTestSet).%OpenId(pTestSet,0)
	If '$IsObject(obj) {
		Set pError="Неверный код исследования "_pTestSet_"!"
		Quit 0
	}
	If obj.CTTSActiveFlag'="Y" {
		Set pError="Исследование с кодом "_pTestSet_" деактивировано!"
		Quit 0
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="EMCOrder2HospitalPatient">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrderObj:TCLEx.Object.EMCOrder</FormalSpec>
<ReturnType>User.HOSHospitalPatients</ReturnType>
<Implementation><![CDATA[
	Set obj=##class(User.HOSHospitalPatients).%OpenId("EMC||EMC||"_pOrderObj.RequestBioCode)
	If '$IsObject(obj) {
		Set obj=##class(User.HOSHospitalPatients).%New()
		Set obj.HOSPDebtorNumber="EMC" //pOrderObj.PatientCode
		Set obj.HOSPVisit=pOrderObj.RequestBioCode
	}
	Set obj.HOSPLabTrakMRN=pOrderObj.PatientCode
	Set obj.HOSPParRef=##class(User.HOSHospitalDataBase).%OpenId("EMC",0)

	Set obj.HOSPAdmissionDate=$$TimeStamp2Horolog^KSUTIL1(pOrderObj.RequestDate)
	Set obj.EPVISDateOfCollection=$$TimeStamp2Horolog^KSUTIL1(pOrderObj.RequestBioDate)
	Set obj.EPVISTimeOfCollection=$$TimeStamp2Secunds^KSUTIL1(pOrderObj.RequestBioDate)

	Set obj.HOSPSurname=pOrderObj.PatientLastNameEng
	Set obj.HOSPGivenName=pOrderObj.PatientFirstNameEng
	Set obj.HOSPExtraName1=pOrderObj.PatientPatronymicEng
	Set obj.EPVISExtra1=pOrderObj.PatientLastNameRus
	Set obj.EPVISExtra2=pOrderObj.PatientFirstNameRus
	Set obj.EPVISExtra3=pOrderObj.PatientPatronymicRus
	If (pOrderObj.PatientSex'="")&&(##class(User.CTSpecies).%ExistsId(pOrderObj.PatientSex)) {
		Set obj.HOSPSexDR=##class(User.CTSpecies).%OpenId(pOrderObj.PatientSex,0)
	}
	Set obj.HOSPDOB=pOrderObj.PatientDOB
	If (pOrderObj.DoctorCode'="") {
		Do ..UpdateDoctor(pOrderObj.DoctorCode,pOrderObj.DoctorFIOEng,pOrderObj.DoctorFIORus)
		If obj.HOSPDoctorReferringDR="" {
			Set obj.HOSPDoctorReferringDR=##class(User.CTDoctor).%OpenId(pOrderObj.DoctorCode,0)
		}
	}
	set hospital=pOrderObj.RequestDepartmentCode
	If (hospital'="") {
		Do ..UpdateDepartment(hospital,pOrderObj.RequestDepartment)
		If (obj.HOSPLocationDR)="" {
			Set obj.HOSPLocationDR=##class(User.CTHospital).%OpenId(hospital,0)
		}
	} 	
	If (pOrderObj.RequestCito=1) {
		Set obj.EPVISPriorityCodeDR=##class(User.CTPriority).%OpenId("U",0)
	}
	Set langcode=""
	If pOrderObj.RequestLanguage="ENG" {
		Set langcode=2
	}	
	If pOrderObj.RequestLanguage="RUS" {
		Set langcode=1
	}	
	If (langcode'="") {
		If (obj.EPVISLanguageDR)="" {
			Set obj.EPVISLanguageDR=##class(User.SSLanguage).%OpenId(langcode,0)
		}
	}	
	
	// UserSite
	if pOrderObj.RequestTestCodes.Count()>0 {
		Do obj.HOSPPatientSiteDRSetObjectId(..GetPatientSiteByTestCodes(pOrderObj,hospital))
		//Do obj.HOSPPatientSiteDRSetObjectId(..GetPatientSiteByTestCodesOld($ListGet(pOrderObj.RequestTestCodes.GetAt(1),2),hospital))
	}
		
	Quit obj
]]></Implementation>
</Method>

<Method name="DoctorNames">
<Description>
Список имен врачей заказавших исследования для записи User.HOSHospitalPatients.
pDoctorCodes - список кодов врачей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDoctorCodes:%String,pLanguageCode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (pDoctorCodes="") Quit ""
	Set result=""
	Set len=$Length(pDoctorCodes,",")
	For i=1:1:len {
		Set code=$Piece(pDoctorCodes,",")
		If i>1 Set result=result_","
		Set name=""
		Set doctobj=##class(User.CTDoctor).%OpenId($Piece(pDoctorCodes,",",i),0)
		If $IsObject(doctobj) {
			If pLanguageCode=2 { // ENG							
				Set name=doctobj.CTDRSurname
			} Else {			 // RUS
				Set name=doctobj.CTDRExtraName1
			}	
		}
		Set result=result_name	
	}
	Quit result
]]></Implementation>
</Method>

<Method name="UpdateDoctor">
<Description>
Добавить(если нет записи)/Обновить(если отличаются данные) запись справочника User.CTDoctor по значениям
pDoctorCode-код врача, pDoctorSurnameEng- английская фамилия,pDoctorSurnameRus - русская фамилия </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDoctorCode:%String,pDoctorSurnameEng:%String,pDoctorSurnameRus:%String</FormalSpec>
<Implementation><![CDATA[
	If pDoctorCode="" Quit
	Set exists=##class(User.CTDoctor).%ExistsId(pDoctorCode)
	Set obj=##class(User.CTDoctor).%OpenId(pDoctorCode)
	If (exists)&&('$IsObject(obj)) Quit								// Запись блокирована другим пользователем - не пытаемся ее редактировать	
	Set needupdate=0
	If 'exists {
		Set obj=##class(User.CTDoctor).%New()
		Set obj.CTDRAddress1="EMC"
		Set obj.CTDRNoOfCopies=1
		//Set obj.CTDRCourierRunDR=##class(User.CTCourier).%OpenId("HP1200",0)
		Set obj.CTDRPrintFormatDR=##class(User.CTPrintFormat).%OpenId("IF",0)
		Set obj.CTDRCompanyDR=##class(User.CTCompany).%OpenId("LAB",0)
		Set obj.CTDRStartDate=+$Horolog
		Set obj.CTDRSpecialtyDR=##class(User.CTSpecialty).%OpenId("ВОП",0)
		Set obj.CTDRActiveFlag="Y"
		Set needupdate=1
	}	 
	If obj.CTDRCode'=pDoctorCode {
		Set obj.CTDRCode=pDoctorCode
		Set needupdate=1
	}	
	If obj.CTDRSurname'=pDoctorSurnameEng {
		Set obj.CTDRSurname=pDoctorSurnameEng
		Set needupdate=1
	}	
	If obj.CTDRExtraName1'=pDoctorSurnameRus {
		Set obj.CTDRExtraName1=pDoctorSurnameRus
		Set needupdate=1
	}	
	If needupdate Do obj.%Save()
]]></Implementation>
</Method>

<Method name="UpdateDepartment">
<Description>
Добавить(если нет записи)/Обновить(если отличаются данные) запись справочника User.CTHospital по значениям
pDepartmentCode- код отделения, pDepartment - наименование отделения </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDepartmentCode:%String,pDepartment:%String</FormalSpec>
<Implementation><![CDATA[
	If pDepartmentCode="" Quit
	Set exists=##class(User.CTHospital).%ExistsId(pDepartmentCode)
	Set obj=##class(User.CTHospital).%OpenId(pDepartmentCode)
	If (exists)&&('$IsObject(obj)) Quit								// Запись блокирована другим пользователем - не пытаемся ее редактировать	
	Set needupdate=0
	If 'exists {
		Set obj=##class(User.CTHospital).%New()
		Set obj.CTHOSCumulative="N"
		Set obj.CTHOSDisplaySequence=99999
		Set obj.CTHOSExcludeFromAutoFax="N"
		Set obj.CTHOSFaxAlways="N"
		Set obj.CTHOSUserBasedPrinting="N"
		Set obj.CTHOSNoOfCopies=1
		Set obj.CTHOSCourierRunDR=##class(User.CTCourier).%OpenId("HP1200",0) 
		Set obj.CTHOSPrintFormatDR=##class(User.CTPrintFormat).%OpenId("I",0) 
		
		Set needupdate=1
	}	 
	If obj.CTHOSCode'=pDepartmentCode {
		Set obj.CTHOSCode=pDepartmentCode
		Set needupdate=1
	}	
	If obj.CTHOSName'=pDepartment {
		Set obj.CTHOSName=pDepartment
		Set needupdate=1
	}
	If obj.CTHOSActiveFlag'="Y" {
		Set obj.CTHOSActiveFlag="Y"
		Set needupdate=1
	}
	If needupdate Do obj.%Save()
]]></Implementation>
</Method>

<Method name="Global2Object">
<Description>
Создать объект TCLEx.Object.EMCOrder из значений глобала pGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>TCLEx.Object.EMCOrder</ReturnType>
<Implementation><![CDATA[
	Set vals=$Get(@pGlb)
	If vals="" Quit ""
	Set orderobj=##class(TCLEx.Object.EMCOrder).%New()
	Set orderobj.RequestBioCode=$Translate($ListGet(vals,1),$Char(0),"")
	Set orderobj.RequestBioDate=$Translate($ListGet(vals,2),$Char(0),"")
	Set orderobj.PatientCode=$Translate($ListGet(vals,3),$Char(0),"")
	Set orderobj.PatientLastNameEng=$Translate($ListGet(vals,4),$Char(0),"")
	Set orderobj.PatientFirstNameEng=$Translate($ListGet(vals,5),$Char(0),"")
	Set orderobj.PatientPatronymicEng=$Translate($ListGet(vals,6),$Char(0),"")
	Set orderobj.PatientLastNameRus=$Translate($ListGet(vals,7),$Char(0),"")
	Set orderobj.PatientFirstNameRus=$Translate($ListGet(vals,8),$Char(0),"")
	Set orderobj.PatientPatronymicRus=$Translate($ListGet(vals,9),$Char(0),"")
	Set orderobj.PatientSex=$Translate($ListGet(vals,10),$Char(0),"")
	Set orderobj.PatientDOB=$$TimeStamp2Horolog^KSUTIL1($Translate($ListGet(vals,11),$Char(0),""))
	Set orderobj.DoctorCode=$Translate($ListGet(vals,12),$Char(0),"")
	Set orderobj.DoctorFIOEng=$Translate($ListGet(vals,13),$Char(0),"")
	Set orderobj.DoctorFIORus=$Translate($ListGet(vals,14),$Char(0),"")
	Set orderobj.RequestDepartmentCode=$Translate($ListGet(vals,15),$Char(0),"")
	Set orderobj.RequestDepartment=$Translate($ListGet(vals,16),$Char(0),"")
	Set orderobj.RequestCito=$Translate($ListGet(vals,17),$Char(0),"")
	Set orderobj.RequestDate=$Translate($ListGet(vals,18),$Char(0),"")
	Set orderobj.RequestLanguage=$Translate($ListGet(vals,19),$Char(0),"")
	Set requestid=""
	For  {
		Set requestid=$Order(@pGlb@(requestid),1,vals)
		If requestid="" Quit
		Set testset=$ListGet(vals,1)
		Set doctorcode=$ListGet(vals,2)
		Set langcode=$ListGet(vals,3)
		Set departmcode=$ListGet(vals,4)
		Set priority=$ListGet(vals,5)
		Do orderobj.RequestTestCodes.Insert($ListBuild(requestid,testset,doctorcode,langcode,departmcode,priority))
	}
	Quit orderobj
]]></Implementation>
</Method>

<Method name="DeleteOrders">
<Description>
Удалить исследования по существующим заказам в pGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set epis=""
	For  {
		Set epis=$Order(@pGlb@(epis))
		If epis="" Quit
		Do ..DeleteOrder(epis,$Name(@pGlb@(epis)))
	}
]]></Implementation>
</Method>

<Method name="DeleteOrder">
<Description>
Удалить исследования по существующим заказам в pGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set hosppatid=""
	Set existsepis=##class(User.EPVisitNumber).%ExistsId(pEpisode)
	If 'existsepis {
		Set hosppatid=..HospitalPatientId(pEpisode)
		If hosppatid'="" {
			Kill ^||EMC.TestSets
			Do ..HospitalPatientTestSets(hosppatid,$Name(^||EMC.TestSets))
		}	
	}	
	Set requestid=""
	For  {
		Set requestid=$Order(@pGlb@(requestid),1,vals)
		If requestid="" Quit
		Set testset=$ListGet(vals,1)
		If existsepis {
			Set errstr="Нельзя отменить исследование уже переданное в ЛИС!"
			Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
			Continue
		}
		If (hosppatid="")||('$Data(^||EMC.TestSets(requestid_$Char(1)_testset))) {
			Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,8)
			Continue
		}	

		Set ok=1,errstr=""
		If ##class(User.CTSuperSet).%ExistsId(testset) {				// Если это супер-набор
			Set superset=testset
			Set supersetitem="",supersetok=1
			For  {
				Set supersetitem=$Order(^||EMC.TestSets(requestid_$Char(1)_superset,supersetitem),1,vals)
				Set testsetid=$ListGet(vals,1)
				If testsetid'="" {
					Set supersetok=##class(User.HOSHospitalPatientsTSet).%DeleteId(testsetid)
				}
				If 'supersetok {
					Set ok=supersetok
				}		
			}
		} Else {														// Обычный набор тестов
			Set vals=$Get(^||EMC.TestSets(requestid_$Char(1)_testset))
			Set testsetid=$ListGet(vals,1)
			If testsetid'="" {
				Set ok=##class(User.HOSHospitalPatientsTSet).%DeleteId(testsetid)
			}
		}
		If ok {
			Set ok=..UpdateHospitalPatientsProperties(hosppatid)
		}	
		If ok {
			Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,8)
		} Else {
			Set errstr="Не удалось удалить объект User.HOSHospitalPatientsTSet ("_$$Status2Str^KSUTIL1(ok)_")!"
			Do ##class(dbo.EMCInterfaceLaboRequest).UpdateStatus(requestid,2,errstr)
		}
		Set testsetcount=..HospitalPatientTestSetCount(hosppatid)		// Сколько осталост наборов тестов в записи HOS_HospitalPatientsTSet
		If testsetcount=0 {	
			Do ##class(User.HOSHospitalPatients).%DeleteId(hosppatid)	// Если 0, то удаляем и целиком запись HOS_HospitalPatientsTSet
		}			
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Вернуть ID записи в HOS_HospitalPatients для эпизода pEpisode

]]></Content>
</UDLText>

<Method name="HospitalPatientId">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set hosppatid=""
	&sql(
		Select HOSP_RowID Into :hosppatid From SQLUser.HOS_HospitalPatients where HOSP_Visit=:pEpisode
	)
	If SQLCODE=0 Quit hosppatid
	Quit ""
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Вернуть ID записи в HOS_HospitalPatients для эпизода pEpisode

]]></Content>
</UDLText>

<Method name="HospitalPatientTestSetCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHospitalPatientId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set testsetcount=0
	&sql(
		Select Count(*) Into :testsetcount
		From SQLUser.HOS_HospitalPatientsTSet 
		Where HOSPT_ParRef=:pHospitalPatientId	)
	If SQLCODE=0 Quit testsetcount
	Quit 0
]]></Implementation>
</Method>

<Method name="TestSetTrigger">
<Description>
Регистрация авторизации\деавторизации набора тестов для последующих действий (отправка E-Mail, передача результата в WebER...)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTrigger:%String,pRequestId:%String,pEpisode:%String,pTestSetId:%String,&pValues:%String,&pOldValues:%String]]></FormalSpec>
<Implementation><![CDATA[
	If (pEpisode="")||(pTestSetId="") Quit
	Set testset=$Get(pValues(3)) 											// SQLUser.EP_VisitTestSet\VISTS_TestSet_DR
	If pTrigger="AfterDelete" {
		Set testset=$Get(pOldValues(3)) 
	}
	If testset="" Quit
	If pTrigger="AfterInsert" {
		Set datetimeofcreation=$Get(pValues(24))_","_(60*$Get(pValues(25)))
		Do ..LogRequestStatus(pRequestId,pEpisode,testset,pTestSetId,5,$ListBuild(datetimeofcreation))		// 5 - заказ передан в ЛИС
	} ElseIf pTrigger="AfterDelete" {
		Do ..LogRequestStatus(pRequestId,pEpisode,testset,pTestSetId,7)									// 7 - заказ отменен в ЛИС
	} ElseIf pTrigger="AfterUpdate" {
		If ..IsTestSetAuthorized(pEpisode,pTestSetId,.pValues,.pOldValues){					// Авторизация набора тестов
			If ##class(TCLEx.Function.TestSet).NeedRemoveFromGroupPrinting(pTestSetId) {
				Do ##class(TCLEx.Function.TestSet).RemoveFromGroupPrinting(pTestSetId)
			}	
			Set datetimeofauth=$Get(pValues(7))_","_(60*$Get(pValues(8)))
			Do ..LogRequestStatus(pRequestId,pEpisode,testset,pTestSetId,6,$ListBuild(datetimeofauth,$Get(pValues(9))))
		} ElseIf ..IsTestSetCanceled(pEpisode,pTestSetId,.pValues,.pOldValues){				// Отмена набора тестов
			Do ..LogRequestStatus(pRequestId,pEpisode,testset,pTestSetId,7,$ListBuild($Get(pValues(58))))
		} ElseIf (..IsTestSetUndoOfAuthorization(pEpisode,pTestSetId,.pValues,.pOldValues)) {		// Деавторизация набора тестов
			Set datetimeofcreation=$Get(pValues(24))_","_(60*$Get(pValues(25)))
			Do ..LogRequestStatus(pRequestId,pEpisode,testset,pTestSetId,10,$ListBuild(datetimeofcreation))	
		} ElseIf (..IsTestSetUndoOfCancelation(pEpisode,pTestSetId,.pValues,.pOldValues)) {		// Анулирование отмены набора тестов
			Set datetimeofcreation=$Get(pValues(24))_","_(60*$Get(pValues(25)))
			Do ..LogRequestStatus(pRequestId,pEpisode,testset,pTestSetId,5,$ListBuild(datetimeofcreation))	
		}	
	}
	If (pTrigger="AfterInsert")||(pTrigger="AfterDelete") {			// Меняем число наборов тестов в эпизоде
		Do ..UpdateTestSetCount4Episode(pEpisode)
	}
]]></Implementation>
</Method>

<Method name="IsTestSetAuthorized">
<Description>
Была ли авторизация набора тестов при вызове триггера для эпизода pEpisode, Id набора тестов  pTestSetId, новых значений pValues, старых значений pOldValues</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pTestSetId:%String,&pValues:%String,&pOldValues:%String]]></FormalSpec>
<Implementation><![CDATA[
	If (pEpisode="")||(pTestSetId="") Quit 0
	;
	Set dateofauthorisation=$Get(pValues(7))
	Set authoriseduser=$Get(pValues(9)) 
	If (dateofauthorisation="")||(authoriseduser="") Quit 0			// Дата авторизации и авторизовавший пользователь должны быть заполнены

	Set olddateofauthorisation=$Get(pOldValues(7))
	Set oldauthoriseduser=$Get(pOldValues(9)) 
	If (olddateofauthorisation="")&&(oldauthoriseduser="") Quit 1	// а старой даты авторизации и авторизовавшего пользователя не должно быть
	Quit 0
	;
]]></Implementation>
</Method>

<Method name="IsTestSetCanceled">
<Description>
Была ли отмена  набора тестов при вызове триггера для эпизода pEpisode, Id набора тестов  pTestSetId, новых значений pValues, старых значений pOldValues
Для EMC не являются настоящей причиной отмены причины с CTRBillable="Y" (например, 	Дозаказ и Материал ожидается, т.е. это как бы откладывание набора тестов)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pTestSetId:%String,&pValues:%String,&pOldValues:%String]]></FormalSpec>
<Implementation><![CDATA[
	If (pEpisode="")||(pTestSetId="") Quit 0
	;
	Set reason=$Get(pValues(58))
	Set notreason=0
	Set reasonobj=##class(User.CTReason).%OpenId(reason,0)
	If ($IsObject(reasonobj))&&(reasonobj.CTRBillable="Y") {
		Set notreason=1
	}	
	If (reason="")||(notreason)  Quit 0								// Новая причина должна быть и у этой причины отмены не должно быть CTRBillable="Y"
	//
	Set oldreason=$Get(pOldValues(58))							 
	Set notreason=0
	Set reasonobj=##class(User.CTReason).%OpenId(oldreason,0)
	If ($IsObject(reasonobj))&&(reasonobj.CTRBillable="Y") {
		Set notreason=1
	}
	If (oldreason="")||(notreason)  Quit 1							// а также старой причины отмены не должно быть или у нее было CTRBillable="Y"
	Quit 0
]]></Implementation>
</Method>

<Method name="IsTestSetUndoOfCancelation">
<Description>
Была ли анулирование отмены набора тестов при вызове триггера для эпизода pEpisode, Id набора тестов  pTestSetId, новых значений pValues, старых значений pOldValues</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pTestSetId:%String,&pValues:%String,&pOldValues:%String]]></FormalSpec>
<Implementation><![CDATA[
	If (pEpisode="")||(pTestSetId="") Quit 0
	;
	Set oldreason=$Get(pOldValues(58))							 
	Set notreason=0
	Set reasonobj=##class(User.CTReason).%OpenId(oldreason,0)
	If ($IsObject(reasonobj))&&(reasonobj.CTRBillable="Y") {
		Set notreason=1
	}
	If (oldreason="")||(notreason)  Quit 0							// Старая причина отмены должна быть и у нее не должно быть CTRBillable="Y"
	//
	Set reason=$Get(pValues(58))
	Set notreason=0
	Set reasonobj=##class(User.CTReason).%OpenId(reason,0)
	If ($IsObject(reasonobj))&&(reasonobj.CTRBillable="Y") {
		Set notreason=1
	}	
	If (reason="")||(notreason)  Quit 1								// и новая причины отмены не должна быть заполнена или у нее CTRBillable="Y"
	Quit 0
]]></Implementation>
</Method>

<Method name="IsTestSetUndoOfAuthorization">
<Description>
Была ли анулирование авторизации набора тестов при вызове триггера для эпизода pEpisode, Id набора тестов  pTestSetId, новых значений pValues, старых значений pOldValues</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pTestSetId:%String,&pValues:%String,&pOldValues:%String]]></FormalSpec>
<Implementation><![CDATA[
	If (pEpisode="")||(pTestSetId="") Quit 0
	;
	Set status=$Get(pValues(33))
	Set oldstatus=$Get(pOldValues(33))
	Set result=0
	If (status="E")&&((oldstatus="A")||(oldstatus="")) { 							// Была деавторизация набора тестов (иногда старый значение становится пусто, а не "А")
		Set result=1
	}	
	Quit result
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Регистрация нового статуса pStatus для эпизода pEpisode, Id набора тестов pTestSetId с кодом pTestSet. pValues - дополнительные значения в формате $LB

]]></Content>
</UDLText>

<Method name="LogRequestStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequestId:%String,pEpisode:%String,pTestSet:%String,pTestSetId:%String,pStatus:%Integer,pValues:%String</FormalSpec>
<Implementation><![CDATA[
	If (pRequestId="")||(pEpisode="")||(pTestSetId="")||(pTestSet="")||(pStatus="") Quit
	Set pValues=$Get(pValues)
	Set horolog=$Horolog
	Lock +^TCLEx("RequestStatus",pRequestId,horolog)
	Set ^TCLEx("RequestStatus",pRequestId,horolog)=$ListBuild(pEpisode,pTestSet,pTestSetId,pStatus,pValues)
	Lock -^TCLEx("RequestStatus",pRequestId,horolog)
]]></Implementation>
</Method>

<Method name="ProcessUpdatedStatuses">
<Description>
Обработка измененных статусов эпизодов</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set requestid=""
	For  {
		Set requestid=$Order(^TCLEx("RequestStatus",requestid))
		If requestid="" Quit
		Set horolog=""
		For  {
			Set horolog=$Order(^TCLEx("RequestStatus",requestid,horolog),1,vals)
			If horolog="" Quit
			Set epis=$ListGet(vals,1)
			Set testset=$ListGet(vals,2)
			Set testsetid=$ListGet(vals,3)
			Set status=$ListGet(vals,4)
			Set extravals=$ListGet(vals,5)
			// Для того чтобы сохранялась историческая последовательность обработки статусов
			if (epis'="")&&($data(^TCLEx("ResultFiles",epis))) {
				set ii="",istestset=0
				for {
					set ii=$order(^TCLEx("ResultFiles",epis,ii),1,recii) if ii="" quit
					if $ListGet(recii,3)=testsetid {
						set istestset=1
						//set iiiii=$i(^test("itest","find"))
						//set ^test("itest","find",iiiii)=epis_"*"_testsetid_"*"_$h_"*"_$g(recii)
						//m ^test("itest","find",iiiii,"rf")=^TCLEx("ResultFiles")
						quit
					}
				}	
				if istestset=1 {
					continue
				}
			}
			
			Lock +^TCLEx("RequestStatus",requestid,horolog)
			Set ok=0
			If status=5 {								// Набор тестов создан в ЛИС
				Set datetimeofcreation=horolog
				If extravals'="" {
					Set datetimeofcreation=$ListGet(extravals,1)
				}	
				Set ok=##class(dbo.EMCInterfaceLaboRequest).UpdateStatus2CreateEpisode(requestid,datetimeofcreation)
				If 'ok {
					Do ..DeleteLog4NonExistingRequest(requestid,horolog)
				}	
			}
			If status=6 {								// Набор тестов авторизован в ЛИС								
				Set datetimeofauth="",authdoctor=""
				If extravals'="" {
					Set datetimeofauth=$ListGet(extravals,1)
				}	
				Set ok=0
				If ..IsTime4ResultFiles(epis,testsetid,datetimeofauth) {
					Lock +^TCLEx("ResultFiles",epis,requestid)		// Регистрируем для формирования файлов с результатами
					Set ^TCLEx("ResultFiles",epis,requestid)=vals
					Lock -^TCLEx("ResultFiles",epis,requestid)
					Set ok=1
				}
			}
			If status=7 {								// Набор тестов удален в ЛИС или установлена причина по которой его не будут делать
				Do ..DeletePreviousStatuses(requestid,horolog,$ListBuild(6))	// Удаляем информацию об авторизации, которые ждут своего тайм-аута
				Set reason="Набор тестов удален"
				If extravals'="" {
					Set reasoncode=$ListGet(extravals,1)
					Set reasonobj=##class(User.CTReason).%OpenId(reasoncode,0)
					If $IsObject(reasonobj) {
						Set reason="Набор тестов отменен. Причина отмены - "_reasonobj.CTRDescription
					}
				}	
				Set ok=##class(dbo.EMCInterfaceLaboRequest).UpdateStatus2Canceled(requestid,reason)
				If 'ok {
					Do ..DeleteLog4NonExistingRequest(requestid,horolog)
					}	
			}
			If status=10 {								// Была деавторизация набора
				Do ..DeletePreviousStatuses(requestid,horolog,$ListBuild(6))	// Удаляем информацию об авторизации, которые ждут своего тайм-аута
				Lock +^TCLEx("ResultFiles",epis,requestid)			// Регистрируем для формирования файлов с результатами
				Set ^TCLEx("ResultFiles",epis,requestid)=vals
				Lock -^TCLEx("ResultFiles",epis,requestid)
				Set ok=1
			}	
			If ok {
				if $g(epis)'="" {
					set hor=$h_"*"_$zts
					set iii=$i(^TCLExlog(epis,requestid,"RequestStatus"))
					set ^TCLExlog(epis,requestid,"RequestStatus",iii)=hor_"*"_$get(status)
					m ^TCLExlog(epis,requestid,"RequestStatus",iii,horolog)=^TCLEx("RequestStatus",requestid,horolog)
				}
				Kill ^TCLEx("RequestStatus",requestid,horolog)
			}
			Lock -^TCLEx("RequestStatus",requestid,horolog)
		}
	}
	Do ..GenerateResultFiles()
]]></Implementation>
</Method>

<Method name="DeletePreviousStatuses">
<Description>
Удалить предыдущие статусы заявки, которые попадают в список pStatusValuesList
Параметры:
pRequestId - ID запроса буферной таблицы
pHorolog - время в формате $Horolog, до которого анализировать предыдущие записи
pStatusValuesList - список с перечнем статусов, которые стоит удалять</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequestId:%String,pHorolog:%String,pStatusValuesList:%String</FormalSpec>
<Implementation><![CDATA[
	Set hor=""
	For  {
		Set hor=$Order(^TCLEx("RequestStatus",pRequestId,hor),1,vals)
		If (hor="")||(hor=pHorolog)||((hor]pHorolog)) Quit				// Время заполнено и время раньше, чем pHorolog
		Set status=$ListGet(vals,4)
		If $ListFind(pStatusValuesList,status)>0 {
			Kill ^TCLEx("RequestStatus",pRequestId,hor)	
		}	
	}
]]></Implementation>
</Method>

<Method name="GenerateResultFiles">
<Description>
Создание файлов c результатами</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set reportclassname=$$PCLResultClassName^Settings.Reports()
	Set logdir=$ZUtil(12)_"LIS"
	set dirPDFResultsFromBion=..GetPathForPDFResultsFromBion()
	Set epis=""
	For  {
		Set epis=$Order(^TCLEx("ResultFiles",epis))
		If epis="" Quit
		Lock +^TCLEx("ResultFiles",epis)
		Kill ^||EMC.TestSets
		Do ##class(TCLEx.Function.Episode).MakeTestSetsBuf(epis,$Name(^||EMC.TestSets))
		Set firstauth=##class(TCLEx.Function.Episode).FirstAuthorizationDateTime(epis,$Name(^||EMC.TestSets))
		Kill testsets,testsetsWord
		kill testsetsBion // наборы тестов, которые отправлялись на внешний аутсорсинг в Бион и по ним есть Pdf-результаты, пришедшие из Биона
		//set refLabBION=..GetRefLaboratoryBION()
		//set orderBion=$extract($piece($get(^TEPI(epis,8)),"\",17),1,10)  // EPVIS_Extra15
		Set testsetid=""											// Формируем список печатаемых наборов тестов эпизода
		For  {
			Set testsetid=$Order(^||EMC.TestSets(testsetid),1,vals)
			If testsetid="" Quit
			//set refLab=$piece(vals,"\",37) // код внешней лаборатории
			set isWord=##class(TCLEx.Function.TestSet).IsTestSetWordToPDF($piece(testsetid,"||",2))
			If ##class(TCLEx.Function.TestSet).IsPrintableLB(vals) {
				If ##class(TCLEx.Function.TestSet).IsAuthorisedLB(vals) {
					Set authdate=##class(TCLEx.Function.TestSet).GetPropertyValue(vals,"VISTSDateOfAuthorisation")
					Set authtime=##class(TCLEx.Function.TestSet).GetPropertyValue(vals,"VISTSTimeOfAuthorisation")
					Set authhor=authdate_","_(60*authtime)
					If ..IsTime4ResultFiles(epis,testsetid,authhor) {		// Для авторизованных смотрим тайм-ауты для других типов сразу печатаем
					    if ..IsTestSetBindEMC(testsetid) {
						    set testsetsBion(testsetid)=""
					    } else {
						    If isWord {
							   Set testsetsWord(testsetid)=""
						    } Else {
							   Set testsets(testsetid)=""
						    }
						}
					}	
				} Else {
					if ..IsTestSetBindEMC(testsetid) {
						    set testsetsBion(testsetid)=""
					} else {
						    If isWord {
							   Set testsetsWord(testsetid)=""
					        } Else {
							   Set testsets(testsetid)=""
					        }
					}
				}	
			}
		}
		
		// печать noWord наборов тестов в эпизоде
		kill ^||EMC.EpisodePCL
		if $data(testsets) Do ##class(TCLEx.Report.ResultForm).PCLEpisodeResult(reportclassname,epis,.testsets,,$Name(^||EMC.EpisodePCL)) 
		// Проверяем есть ли печатамый результат
		Set noresult=($Data(^||EMC.EpisodePCL)=0)
		if noresult=1 {
			set testsetid=""
		    for {
			    set testsetid=$order(testsetsWord(testsetid)) if testsetid="" quit
			    if ##class(TCLEx.Report.WordEMC).isResult(testsetid) {
				    set noresult=0
				    quit
			    }
		    }
		}			
		if (noresult=1)&&($data(testsetsBion)) {
			set episBion=""
	        for {
		       set episBion=$order(^BindEMCBION(orderBion,episBion)) if episBion="" quit
		       set langbion=""
		       for {
			      set langbion=$order(^BindEMCBION(pOrderBion,episBion,langbion),1,fileBion) if langbion="" quit
			      if (fileBion'="")&&(##class(%File).Exists(fileBion)) {
				      set noresult=0
				      quit
			      }
		       }
	        }
		}					
		
		Set ok=1
		If 'noresult {
			merge testsets=testsetsWord
			merge testsets=testsetsBion
			//m ^TCLEx("ResultFilesLog",epis,$h)=testsets
			Set ok=..ExportResult2Files(epis,.testsets)
		}
		
		/*
		// печать Word наборов тестов в эпизоде (каждый набор тестов в отдельном файле)
		set noresult2=1,ok2=1
		set testsetid=""
		for {
			set testsetid=$order(testsetsWord(testsetid)) if testsetid="" quit
			if ##class(TCLEx.Report.WordEMC).isResult(testsetid) {
				set noresult2=0
				//s ^TCLEx("ResultFilesWordLog",epis,$h)=testsetid
				set okpr=##class(TCLEx.Report.WordEMC).CreatePDFall(epis,testsetid)
				if okpr'=1 set ok2=okpr
			}
		}
		
		// Копирование pdf-результатов, приехавших из внешнего аутсорсинга из Биона
		set noresult3=1,ok3=1
	    if $data(testsetsBion) {
		    set ok3=..CopyPDFResultsFromBion(epis,orderBion,logdir,.noresult3)
	    }   
		
    	set ok=$select((ok1=1)&&(ok2=1)&&(ok3=1):1,1:0)
		set noresult=$select((noresult1=1)&&(noresult2=1)&&(noresult3=1):1,1:0)
		*/
		If ok {
			Set requestid=""
			For  {
				Set requestid=$Order(^TCLEx("ResultFiles",epis,requestid),1,vals)
				If requestid="" Quit
				Set status=$ListGet(vals,4)
				Set extravals=$ListGet(vals,5)
				Set datetimeofauth="",authdoctor=""
				If extravals'="" {
					Set datetimeofauth=$ListGet(extravals,1)
					Set authdoctor=$ListGet(extravals,2)
				}	
				If noresult{												// Если результата нет, то меням статус на соответсвующий без результата
					If status=6 {
						Set status=11
					}	
					If status=10 {
						Set status=12
					}	
				}
				// Меняем статусы
				If status=6 {
					Set ok=##class(dbo.EMCInterfaceLaboRequest).UpdateStatus2Authorized(requestid,datetimeofauth,authdoctor)
				}ElseIf status=11 {
					Set ok=##class(dbo.EMCInterfaceLaboRequest).UpdateStatus2AuthorizedWOResult(requestid,datetimeofauth,authdoctor)
				}ElseIf status=10 {
					Set ok=##class(dbo.EMCInterfaceLaboRequest).UpdateStatus2CancelationOfAuthorization(requestid)
				}ElseIf status=12 {
					Set ok=##class(dbo.EMCInterfaceLaboRequest).UpdateStatus2CancelationOfAuthorizationWOResult(requestid)
				}
				set hor=$h_"*"_$zts
				If ok {
					if $g(epis)'="" {
						set iii=$i(^TCLExlog(epis,requestid,"ResultFiles"))
						set ^TCLExlog(epis,requestid,"ResultFiles",iii)=hor_"*"_$get(status)
						merge ^TCLExlog(epis,requestid,"ResultFiles",iii,"gl")=^TCLEx("ResultFiles",epis,requestid)
					}
					Kill ^TCLEx("ResultFiles",epis,requestid)						// Если все ok - то удаляем соответствующую запись в ^TCLEx
									
				} Else {
					Do LogStatus^KSUTIL1(logdir,ok,3,1)
					Set ok=##class(dbo.EMCInterfaceLaboRequest).IsRequestExists(requestid,.exists)
					If (ok)&&('exists) {		// Проверяем есть ли в буферной таблице запись с таким запросом
						Set ^TCLEx("MissingRequest",epis,requestid)=""
						set iii=$i(^TCLExlog(epis,requestid,"MissingRequest"))
						set ^TCLExlog(epis,requestid,"MissingRequest",iii)=$get(hor)_"*"_$get(status)
						merge ^TCLExlog(epis,requestid,"MissingRequest",iii,"gl")=^TCLEx("ResultFiles",epis,requestid)
						Kill ^TCLEx("ResultFiles",epis,requestid)
						Do LogMessage^KSUTIL1(logdir,"Отсутствует запись в буферной таблице с emc_interface_labo_request_id = "_requestid_" !",3,1)
					}	
				}					
			}
		} Else {
			set ok1=$get(ok1) if (ok1'="")&&(ok1'=1) Do LogStatus^KSUTIL1(logdir,ok1,3,1)										// Запись в log информации об ошибке, если не смогло сформировать файл результата
			set ok2=$get(ok2) if (ok2'="")&&(ok2'=1) Do LogStatus^KSUTIL1(logdir,ok2,3,1)										// Запись в log информации об ошибке, если не смогло сформировать файл результата
		}				
		Lock -^TCLEx("ResultFiles",epis)
	}
]]></Implementation>
</Method>

<Method name="DeleteLog4NonExistingRequest">
<Description>
Удалить из ^TCLEx запись для отсутвствующих в буферной таблице обмена запросов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequestId:%String,pHorolog</FormalSpec>
<Implementation><![CDATA[
	Set ok=##CLASS(dbo.EMCInterfaceLaboRequest).IsRequestExists(pRequestId,.exists)
	If (ok)&&('exists){
		Kill ^TCLEx("RequestStatus",pRequestId,pHorolog)
	}
]]></Implementation>
</Method>

<Method name="ExportResult2Files">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ok=1,pdffilename=""
	Set logdir=$ZUtil(12)_"LIS"
	Set pdfdir=$$PDFResultDir^Settings.Reports()
	Set impersonalpdfdir=$$ImpersonalPDFResultDir^Settings.Reports()
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis,0)
	If $IsObject(episobj) {
		Set lang=episobj.EPVISLanguageDRGetObjectId()
		If lang="" {
			Set lang=2
		}	
		If lang=29 {
			Set languages(1)=""
			Set languages(2)=""
		
		} Else {
			Set languages(lang)=""
		}
		Set reportclassnameDRP=$$DRPResultClassName^Settings.Reports()
		if reportclassnameDRP="" set reportclassnameDRP="TCLEx.Report.DRPEMC"
		set flagTransferDocToPDF=1  // пытаемся преобразование doc-PDF делать меньшее кол-во раз 
		Set lang=""
		For  {
			Set lang=$Order(languages(lang)) 
			If lang="" Quit
			set filename=""
			set paramsForZen=$listbuild("","") // флаг формированиф файла без персональных данных, флаг формирования файла для предпросмотра результатов (нужен водяной знак)
			set extraparams=$listbuild(1,pdfdir,1,lang,1,1,"",flagTransferDocToPDF)
			
			Set ok=$ClassMethod(reportclassnameDRP,"CreateEpisodePDFReport",pEpis,.pTestSets,extraparams,paramsForZen,.filename)			// PDF Результат с данными пациента
			If 'ok Quit
			set flagTransferDocToPDF=0
		    set filesize=0 if filename'="" set filesize=##class(%File).GetFileSize(filename) 
			Do LogMessage^KSUTIL1(logdir,"Успешно сформирован файл "_filename_" ("_filesize_" байт)"_$s(+filesize=0:" !!!!!",1:""),1,1)
			
			set filename=""
			set paramsForZen=$listbuild(1,"") // флаг формированиф файла без персональных данных, флаг формирования файла для предпросмотра результатов (нужен водяной знак)
			set extraparams=$listbuild(1,impersonalpdfdir,1,lang,1,1,"",flagTransferDocToPDF)
			Set ok=$ClassMethod(reportclassnameDRP,"CreateEpisodePDFReport",pEpis,.pTestSets,extraparams,paramsForZen,.filename)	// Обезличенный PDF результат
			If 'ok Quit
			set filesize=0 if filename'="" set filesize=##class(%File).GetFileSize(filename) 
			Do LogMessage^KSUTIL1(logdir,"Успешно сформирован файл "_filename_" ("_filesize_" байт)"_$s(+filesize=0:" !!!!!",1:""),1,1)
			
			/* Раньше XML результат был только на языке заказа, теперь всегда на 2 языках
			Set ok=##class(TCLEx.Function.EMC).CreateEpisodeXMLReport(pEpis,.pTestSets,lang,1,.filename)										// XML - результат
			If 'ok Quit
			set filesize=0 if filename'="" set filesize=##class(%File).GetFileSize(filename)
			Do LogMessage^KSUTIL1(logdir,"Успешно сформирован файл "_filename_" ("_filesize_" байт)"_$s(+filesize=0:" !!!!!",1:""),1,1)
			*/
			
		}
		/// XML результат всегда генерим на 2 языках
		If ok {
			Set languages(1)=""
			Set languages(2)=""
			Set lang=""
			For  {
				Set lang=$Order(languages(lang)) 
				If lang="" Quit
				Set ok=##class(TCLEx.Function.EMC).CreateEpisodeXMLReport(pEpis,.pTestSets,lang,1,.filename)										// XML - результат
				If 'ok Quit
				set filesize=0 if filename'="" set filesize=##class(%File).GetFileSize(filename)
				Do LogMessage^KSUTIL1(logdir,"Успешно сформирован файл "_filename_" ("_filesize_" байт)"_$s(+filesize=0:" !!!!!",1:""),1,1)
			}
		}	
	} Else {
		Set ok=$$$ERROR($$$GeneralError,"Не удалось отрыть объект User.EPVisitNumber с ID="_pEpis_" !")
	}	
	If 'ok {
		Do LogStatus^KSUTIL1(logdir,ok,3,1)
	}		
	Quit ok
]]></Implementation>
</Method>

<Method name="CreateEpisodeXMLReport">
<Description>
Создание XML файла результата
Параметры:
pEpis - ID эпизода
pTestSets - передаваемый по ссылке буфер с наборами тестов (если не заполнен, то все авторизованные наборы данного эпизода)
pLanguage - язык результата
pOverWritePDF - если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
pXMLFileName - по ссылке возвращается имя созданного XML файла
Возвращаемое значение :
Результат создания файла в формате %Status</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pOverWritePDF:%Boolean,&pXMLFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pLanguage=$Get(pLanguage)
	Set resobj=##class(TCLEx.XML.Episode).ResultObject(pEpis,.pTestSets,pLanguage,0)
	If '$IsObject(resobj) {
		Quit $$$ERROR($$$GeneralError,"Нет данных по эпизоду "_pEpis_" !")
	}	
	Set resobj.OrderNumber=""
	Set resobj.Priority=""
	Set resobj.InsuranceCompany=""
	If pLanguage=1 {
		Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis,0)
		If '$IsObject(episobj) {
			Quit $$$ERROR($$$GeneralError,"Не удалось отрыть объект User.EPVisitNumber с ID="_pEpis_" !")
		}
		Set resobj.Surname=episobj.EPVISExtra1
		Set resobj.Name=episobj.EPVISExtra2
		Set resobj.FatherName=episobj.EPVISExtra3
		Set resobj.Doctor=episobj.EPVISExtra4
	}

	Set dir=$$XMLResultDir^Settings.Reports()
	If '$$TestDirectory^KSUTIL1(dir) {
		Quit $$$ERROR($$$GeneralError,"Не удалось создать каталог  "_dir_" !")
	}	
	Set reportclassname=$$ZenResultClassName^Settings.Reports()
	Set filename=##class(TCLEx.Report.ResultForm).CallEpisodeResultFileName(reportclassname,pEpis,.pTestSets,pLanguage,"xml")
	Set pXMLFileName=dir_"\"_filename
	If ##class(%File).Exists(pXMLFileName) {
		If pOverWritePDF {
			Set ok=##class(%File).Delete(pXMLFileName)
			If ##class(%File).Exists(pXMLFileName) Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pXMLFileName_" !")

		} Else {	
			Set pXMLFileName=$$ArchiveFileName^KSUTIL1(pXMLFileName)
			If ##class(%File).Exists(pXMLFileName) Quit $$$ERROR($$$GeneralError,"Не удалось сформировать очередное имя файла для  "_pXMLFileName_" !")
		}
	}
	
	try {
		// create lock file
		set fileLockName=##class(TCLEx.Report.ResultForm).GetNameLockFile(pXMLFileName)
	    set ok=##class(TCLEx.Report.ResultForm).CreateEmptyFile(fileLockName)
	    If 'ok {
		       set ok=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось создать lck файл "_fileLockName_"."),ok)
		       quit
	    }
		// create file
		Set writer=##class(%XML.Writer).%New()
	    Set writer.Indent=1
	    $$$ThrowOnError(writer.OutputToFile(pXMLFileName))
	    $$$ThrowOnError(writer.RootObject(resobj))
	    
	    // delete lock file
	    set ok=##class(%File).Delete(fileLockName)
        if 'ok set ok=$$$ERROR($$$GeneralError,"Не удалось удалить lck файл "_fileLockName_".")
	} 
    catch(exception) {
	    set ok=exception.AsStatus()
	    Set pXMLFileName=""
	    if $get(fileLockName)'="" {
		    if ##class(%File).Exists(fileLockName) {
			    set ok2=##class(%File).Delete(fileLockName)
			    if 'ok2 set ok=$System.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не удалось удалить lck файл "_fileLockName_"."))
		    }
	    }
	}	
	
	If 'ok {
		Set pXMLFileName=""
	}	
	Quit ok
]]></Implementation>
</Method>

<Method name="TestSetTimeOuts">
<Description>
Тайм-ауты для выгрузки набора тестов pTestSetId
pFirstTimeOut - время с момента авторизации первого набора тестов
pLastTimeOut - время с момента авторизации последнего набора тестов
Для приоритетов "U" (Cito) и "C" (Срочный) берутся меньшие тайм-ауты
Также есть понятия: 
1) CitoTestSets - т.е. наборов тестов, которые всегда идут с тайм-аутами, как для Cito..
2) SuperCitoTestSets - т.е. наборов тестов, которые имеют тайм-ауты SuperCito, если приоритет исследования "U" (Cito) и "C" (Срочный) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pFirstTimeOut:%Integer,&pLastTimeOut:%Integer]]></FormalSpec>
<Implementation><![CDATA[
	Set iscito=0,priority="",testsetcode=""
	// В итоге решили, что смотрим только приоритет набора тестов и закрываем для пользователей возможность менять приоритет эпизода целиком
	// Сначала анализировали приоритет эпизода в целом...
	//
	// Определяем приоритет и код исследованмя
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If ($IsObject(testsetobj)){
		Set priority=testsetobj.VISTSPriorityDRGetObjectId()
		Set testsetcode=testsetobj.VISTSTestSetDRGetObjectId()
	}		

	If 'iscito {
		If (priority="U")||(priority="C") {
			Set iscito=1
		}	
		If ('iscito){
			Set citotestsets=$$CitoTestSets^Settings.Reports()
			If (citotestsets'="")&&(testsetcode'="")&&(citotestsets[(","_testsetcode_",")) {
				Set iscito=1
			}	
		}	
	}
	If iscito {																			// Для CITO
		Set supercitotestsets=$$SuperCitoTestSets^Settings.Reports()
		If (supercitotestsets'="")&&(testsetcode'="")&&(supercitotestsets[(","_testsetcode_",")) {
			Set pFirstTimeOut=$$SuperCitoFirtsTestSetTimeOut^Settings.Reports() 					// Сколько ждем с момента  первой авторизации TestSet-а эпизода или последней выгрузки результатов по эпизоду 
			Set pLastTimeOut=$$SuperCitoLastTestSetTimeOut^Settings.Reports()						// Сколько ждем с момента после авторизации TestSet-а						
		} Else {	
			Set pFirstTimeOut=$$CitoFirtsTestSetTimeOut^Settings.Reports() 					// Сколько ждем с момента  первой авторизации TestSet-а эпизода или последней выгрузки результатов по эпизоду 
			Set pLastTimeOut=$$CitoLastTestSetTimeOut^Settings.Reports()						// Сколько ждем с момента после авторизации TestSet-а						
		}
	}
	Else {
		Set pFirstTimeOut=$$FirtsTestSetTimeOut^Settings.Reports()
		Set pLastTimeOut=$$LastTestSetTimeOut^Settings.Reports()
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* Старый код TestSetTimeOuts
/// Тайм-ауты для выгрузки набора тестов pTestSetId
/// pFirstTimeOut - время с момента авторизации первого набора тестов
/// pLastTimeOut - время с момента авторизации последнего набора тестов
/// Для приоритетов "U" (Cito) и "C" (Срочный) берутся меньшие тайм-ауты
ClassMethod TestSetTimeOuts(pTestSetId As %String, ByRef pFirstTimeOut As %Integer, ByRef pLastTimeOut As %Integer)
{
	Set iscito=0
	// В итоге решили, что смотрим только приоритет набора тестов и закрываем для пользователей возможность менять приоритет эпизода целиком
	// Сначала анализировали приоритет эпизода в целом...
	If 'iscito {
		Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
		If ($IsObject(testsetobj))&&($IsObject(testsetobj.VISTSPriorityDR)) {
			Set priority=testsetobj.VISTSPriorityDR.%Id()
			If (priority="U")||(priority="C") {
				Set iscito=1
			}	
		}
		If ('iscito)&&($IsObject(testsetobj)) {
			Set testsetcode=testsetobj.VISTSTestSetDRGetObjectId()
			Set citotestsets=$$CitoTestSets^Settings.Reports()
			If (citotestsets'="")&&(testsetcode'="")&&(citotestsets[(","_testsetcode_",")) {
				Set iscito=1
			}	
		}	
	}
		
	If iscito {																			// Для CITO
		Set pFirstTimeOut=$$CitoFirtsTestSetTimeOut^Settings.Reports() 					// Сколько ждем с момента  первой авторизации TestSet-а эпизода или последней выгрузки результатов по эпизоду 
		Set pLastTimeOut=$$CitoLastTestSetTimeOut^Settings.Reports()						// Сколько ждем с момента после авторизации TestSet-а						
	}
	Else {
		Set pFirstTimeOut=$$FirtsTestSetTimeOut^Settings.Reports()
		Set pLastTimeOut=$$LastTestSetTimeOut^Settings.Reports()
	}
}
*/
]]></Content>
</UDLText>

<Method name="UpdateTestSetCount4Episode">
<Description>
Обновить число наборов тестов в эпизоде pEpisode
Для числа наборов тестов используем поле </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String</FormalSpec>
<Implementation><![CDATA[
	If '##class(User.EPVisitNumber).%ExistsId(pEpisode)
	Set testsetcount=0
	&Sql(
		Select Count(*) 
		Into :testsetcount
		From SQLUser.EP_VisitTestSet
		Where VISTS_ParRef=:pEpisode
	)
	If SQLCODE'=0 {
		Set testsetcount=0
	}
	&Sql(
		Update SQLUser.EP_VisitNumber(EPVIS_Extra14)
		Values (:testsetcount)
		Where EPVIS_VisitNumber=:pEpisode
	)
]]></Implementation>
</Method>

<Method name="IsTime4ResultFiles">
<Description>
Настало ли время для формирования файлов результата
Должен пройти тайм-ауты с момента автоизации первого набора тестов в эпизоде, и тайм-аут с момента авторизации текущего набора тестов
Параметры:
pEpisodeId - ID эпизода
pTestSetId - ID набора тестов
pAuthDateTime - дата-времени авторизации набора (в формате $Horolog)
Возвращаемое значение:
1 - время настало (отработали тайм-ауты)
0 - еще рано</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisodeId:%String,pTestSetId:%String,pAuthDateTime:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set result=1
	// Время авторизации первого набора тестов в эпизоде
	Set firstauthdatetime=##class(TCLEx.Function.Episode).FirstAuthorizationDateTime(pEpisodeId)
	If firstauthdatetime="" {		// Если его нет, то берем время аворизации текущего набора тестов (перестраховка, такого быть не должно)
		Set firstauthdatetime=pAuthDateTime
	}
	Do ..TestSetTimeOuts(pTestSetId,.firsttimeout,.lasttimeout) 	// Тайм-ауты для эпизода с учетом срочности набора тестов
	Set now=$Horolog
	Set deltatime=$$DeltaTimeSec^KSUTIL1(firstauthdatetime,now)	// Сравниваем разницу с момента авторизации первого набора тестов 
	If deltatime<firsttimeout {
		Set result=0
	} Else {
		Set deltatime=$$DeltaTimeSec^KSUTIL1(pAuthDateTime,now)	// Сравниваем разницу с момента авторизации текщего набора тестов
		If deltatime<lasttimeout {
			Set result=0
		}
	}		  										
	Quit result
]]></Implementation>
</Method>

<Method name="GetPatientSiteByTestCodes">
<Description>
Получение кода подразделения (значение справочника CT.UserLocation ) по коду исследования</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrderObj:TCLEx.Object.EMCOrder,pHospital:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=""
	//$ListGet(pOrderObj.RequestTestCodes.GetAt(1),2)
	set allispato=1
	if $IsObject(pOrderObj) {
		Set cnt=pOrderObj.RequestTestCodes.Count()							// Пробегаем по всем назначенным исследованиям заказ
		For i=1:1:cnt {
			Set teststr=pOrderObj.RequestTestCodes.GetAt(i)
			Set testset=$ListGet(teststr,2)
		    set department=$Extract(testset,1)
		    If (department'="H")&&(department'="I")&&(department'="Z") {
			    set allispato=0
			    quit
		    }
		}
	}
		
	If allispato=1 {
		Set result="PATO"
	} Else {
		Set result=$select(pHospital="BGD":"LFMC",1:"LEMC")
	} 
	Quit result
]]></Implementation>
</Method>

<Method name="GetPatientSiteByTestCodesOld">
<Description>
Получение кода подразделения (значение справочника CT.UserLocation ) по коду исследования</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String="",pHospital:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=""
	Set department=$Extract(pTestSet,1)
	If (department="H")||(department="I")||(department="Z") {
		Set result="PATO"
	} Else {
		Set result=$select(pHospital="BGD":"LFMC",1:"LEMC")
	} 
	Quit result
]]></Implementation>
</Method>

<Method name="GetRefLaboratoryBION">
<Description>
Получить код внешней лаборатории (Бион)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[   quit "Bion"
]]></Implementation>
</Method>

<Method name="IsBindToTestSetBionFormatPDF">
<Description>
Приекреплен ли набор тестов к набору тестов из Биона в формате pdf </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[   quit 1
]]></Implementation>
</Method>

<Method name="GetPathForPDFResultsFromBion">
<Description>
Получить директорию, где лежат PDF файлы с результатами из Биона</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[   quit "c:\temp\bion"
]]></Implementation>
</Method>

<Method name="CopyPDFResultsFromBion">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String="",pOrderBion:%String,pPathLog:%String="",&pFlagNoResults=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set flagLogFileCreate=1
		set dirDestination=$$PDFResultDir^Settings.Reports()
		set episBion=""
	        for {
		       set episBion=$order(^BindEMCBION(pOrderBion,episBion)) if episBion="" quit
		       set langbion=""
		       for {
			      set langbion=$order(^BindEMCBION(pOrderBion,episBion,langbion),1,fileBion) if langbion="" quit
			      if (fileBion="")||('##class(%File).Exists(fileBion)) continue
			      set fileResults=""
			      set ok=..GetNameFilePDFBion(pEpisode,episBion,langbion,.fileResults)
			      if 'ok quit
			      if fileResults="" {
				      set ok=$$$ERROR($$$GeneralError,"Сформировалось пустое имя файла для выгрузки результатов по pdf-данным из Биона")
				      quit
			      }
			      set fileResults=dirDestination_"/"_fileResults  
			      // Проверка существования lock файла со стороны ЕМС
			      set fileLockNameEMC=##class(TCLEx.Report.ResultForm).GetNameLockFileEMC(fileResults)
		          if ##class(TCLEx.Report.Function).TestExistLocFile(pEpisode,fileLockNameEMC) {
		             set ok=$$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResults_", так как существует lock файл "_pEpisode_"-***.lcke!")
		             quit
		          }
		          
		          if ##class(%File).Exists(fileResults) {
			          set ok1=##class(%File).Delete(fileResults)
			          if 'ok1 {
				          set ok=$$$ERROR($$$GeneralError,"Не удалось удалить файл "_fileResults_".")
				          quit
			          }
		          }
		          
		          //Создание lock файла с нашей стороны
		          set fileLockName=""
		          if flagLogFileCreate=1 {
		             set fileLockName=##class(TCLEx.Report.ResultForm).GetNameLockFile(fileResults)
	                 set ok1=##class(TCLEx.Report.ResultForm).CreateEmptyFile(fileLockName)
	                 if 'ok1 {
		                 set ok=$system.Status.AppendStatus(ok,ok1)
		                 continue
	                 }
		          }
			      
			      // Копирование файла
			      set ok1=##class(%File).CopyFile(fileBion,fileResults)
			      if 'ok1 {
				      set ok=$system.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не удалось скопировать файл "_fileBion_" в файл "_fileResults_"."))
				  }
			      
				  //Удаление lock файла с нашей стороны
				  set ok2=1
		          if flagLogFileCreate=1 {
			         set ok2=##class(%File).Delete(fileLockName)
		             if 'ok2 {
			             set ok=$system.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не удалось удалить lock файл "_fileLockName_"."))
		             }
		          }    
			      if ('ok1)||('ok2) {
				     continue 
			      }
			      
			      if pPathLog'=""  do LogStatus^KSUTIL1(pPathLog,"Успешно скопирован файл "_$get(fileBion)_" в файл "_$get(fileResults),3,1)
			      
			      if pFlagNoResults=1 set pFlagNoResults=0
		       }
	        }
	} catch(e) { 
	    set ok=e.AsStatus() 
	    set pFlagNoResults=1
	    if ($get(fileLockName)'="")&&(##class(%File).Exists(fileLockName)) do ##class(%File).Delete(fileLockName) 
	}
	quit ok
]]></Implementation>
</Method>

<Method name="GetNameFilePDFBion">
<Description>
Получить имя файла с pdf-результатами из Биона для выгрузки в Медиалог</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String="",pEpisodeBion:%String,pLanguage:%String="",&pFileNameResult:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK,pFileNameResult=""
	try {
		set pFileNameResult=pEpisode_"-"_pLanguage_"-"_pEpisodeBion_".pdf"
	} catch(e) { 
	    set ok=e.AsStatus() 
	    set pFileNameResult=""
	}
	quit ok
]]></Implementation>
</Method>

<Method name="IsTestSetBindEMC">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set result=0
	try {
		set epis=$piece(pTestSetId,"||",1) if epis="" quit
		set testset=$piece(pTestSetId,"||",2) if testset="" quit 
		set tscnt=$piece(pTestSetId,"||",3) if tscnt="" quit 
		//set refLabBION=..GetRefLaboratoryBION()
		
		set orderBion=$extract($piece($get(^TEPI(epis,8)),"\",17),1,10)  if orderBion="" quit  // EPVIS_Extra15
		if orderBion="" quit
		
		set rects=$get(^TEPI(epis,1,testset,tscnt))
		set refLab=$piece(rects,"\",37) if refLab="" quit  // код внешней лаборатории
		set usersite=$piece(rects,"\",26) if usersite="" quit  // VISTS_UserSite_DR 
		
		set result=..IsTestSetBindEMC0(pTestSetId,orderBion,refLab,usersite)
		
	} catch(e) {
		set result=0
		do ##class(TCLEx.Function.General).WriteError($CLASSNAME()_".IsTestSetBindEMC",$ze)
	}
	quit result
]]></Implementation>
</Method>

<Method name="IsTestSetBindEMC0">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String="",pOrderBion:%String="",pRefLab:%String="",pUserSite:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set result=0
	try {
		if (pOrderBion'="")&&(pRefLab'="")&&(pUserSite'="")&&(##class(Mapping.data.testSet).IsPdfFormatTestSet(pUserSite_"_"_pRefLab,$piece(pTestSetId,"||",2))) {
			set result=1
		}
	} catch(e) {
		set result=0
		do ##class(TCLEx.Function.General).WriteError($CLASSNAME()_".IsTestSetBindEMC0",$ze)
	}
	quit result
]]></Implementation>
</Method>
</Class>
</Export>
