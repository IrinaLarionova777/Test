<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Function.LabOrder">
<Super>%RegisteredObject</Super>
<TimeCreated>62031,40378.510786</TimeCreated>

<Method name="CreateResultFiles">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do ..CreateListOfAuthorizedOrders($Name(^||Orders))
	Set maxdatetime=$Get(^||Orders)
	Set order=""
	For  {
		Set order=$Order(^||Orders(order))
		If order="" Quit
		Kill ^||Episodes
		Do ..CreateOrderEpisodesGlb(order,$Name(^||Episodes))
		//
		Lock +^TCLEx("PDFResult",order)
		Set ok=..OrderResults2PDFFile(order,.pdffilename,$Name(^||Episodes))
		If 'ok {
			Do LogStatus^KSUTIL1($ZUtil(12)_"LIS\",ok,3,1)
			Lock -^TCLEx("PDFResult",order)
			Continue
		}
		Do LogMessage^KSUTIL1($ZUtil(12)_"LIS\","Успешно создан файл "_pdffilename,1,1)
		Set ^TCLEx("PDFResult",order)=$ListBuild($Horolog,pdffilename)
		Lock -^TCLEx("PDFResult",order)
		//
		If ..NeedTxtResult($Order(^||Episodes(""))) {
			Lock +^TCLEx("TXTResult",order)
			Set ok=..OrderResults2TxtFile(order,.txtfilename,$Name(^||Episodes))
			If 'ok {
				Do LogStatus^KSUTIL1($ZUtil(12)_"LIS\",ok,3,1)
				Lock -^TCLEx("TXTResult",order)
				Continue
			}
			Do LogMessage^KSUTIL1($ZUtil(12)_"LIS\","Успешно создан файл "_txtfilename,1,1)
			Set ^TCLEx("TXTResult",order)=$ListBuild($Horolog,txtfilename)
			Lock -^TCLEx("TXTResult",order)
		}	
		//
		Set epis=""
		For  {
			Set epis=$Order(^||Orders(order,epis))
			If epis="" Quit
			Lock +^TCLEx("AuthorizedEpisodes",epis)
			Set datetime=$Get(^TCLEx("AuthorizedEpisodes",epis))
			If maxdatetime]]datetime {
				Kill ^TCLEx("AuthorizedEpisodes",epis)
			}	
			Lock -^TCLEx("AuthorizedEpisodes",epis)
		}	
	}
]]></Implementation>
</Method>

<Method name="CreateListOfAuthorizedOrders">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrdersGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Lock +^TCLEx("AuthorizedEpisodes")
	Kill @pOrdersGlb
	Set epis=""
	For  {
		Set epis=$Order(^TCLEx("AuthorizedEpisodes",epis),1,datetime)
		If epis="" Quit
		Set deltatime=$system.SQL.DATEDIFF("ss",datetime,$ZDateTime($Horolog,3))
		If deltatime<600 Continue
		Set length=$Length(epis)
		If (length'=12)&&(length'=10) {
			Kill ^TCLEx("AuthorizedEpisodes",epis)
			Continue
		}	
		Set order=$Extract(epis,1,10)
		If order="" Quit
		Set @pOrdersGlb@(order,epis)=""
	}
	Set @pOrdersGlb=$Horolog
	Lock -^TCLEx("AuthorizedEpisodes")
]]></Implementation>
</Method>

<Method name="CreateOrderEpisodesGlb">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Kill @pGlb
	If $Get(pOrder)="" Quit
	If $Data(^TEPI(pOrder)) {
		Set @pGlb@(pOrder)=""
		Quit
	} Else {
		Set epis=pOrder_"00"
	}		
	For  {
		Set epis=$Order(^TEPI(epis))
		If (epis="")||($Extract(epis,1,$Length(pOrder))'=pOrder) Quit
		Set @pGlb@(epis)=""
	}
]]></Implementation>
</Method>

<Method name="IsComplete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If $Get(pEpisGlb)="" {
		Set pEpisGlb=$Name(^||Episodes)
		Do ..CreateOrderEpisodesGlb(pOrder,pEpisGlb)
	}	
	If '$Data(@pEpisGlb) Quit 0
	Set result=1
	Set epis=""
	For  {
		Set epis=$Order(@pEpisGlb@(epis))
		If epis="" Quit
		Set result=##class(TCLEx.Function.Episode).IsComplete(epis)
		If 'result Quit
	}	
	Quit result
]]></Implementation>
</Method>

<Method name="OrderResults2PDFFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pOrder:%String,&pPDFFileName:%String,pEpisodesGlb:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pPDFFileName=""
	Do ..CreatePCLGlb(pOrder,$Name(^||EpisodesPCL),pEpisodesGlb)
	Set pclfilename=..FileName4Episode(pOrder,"pcl",$Name(^||Episodes))
	If pclfilename="" Quit $$$ERROR($$$GeneralError,"Нет данных по заказу "_pOrder_" !")
	Set fullpclfilename=$ZUtil(12)_"Temp\"_pclfilename
	Set ok=..OrderResults2PCLFile(pOrder,fullpclfilename,$Name(^||EpisodesPCL))
	If 'ok Quit ok
	Set pdffilename=$Piece(pclfilename,".pcl",1)_".pdf"
	Set fullpdffilename=$ZUtil(12)_"Temp\"_pdffilename
	Set ok=##class(TCLEx.Function.PCL2PDF).PCL2PDF(fullpclfilename,fullpdffilename)
	If 'ok Quit ok
	Set pPDFFileName=fullpdffilename
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OrderResults2PCLFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pPCLFileName:%String,pOrderPCLGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ##class(%File).Exists(pPCLFileName) {
		Set ok=##class(%File).Delete(pPCLFileName)
		If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pPCLFileName_" !")
	}	
	Set DEVNAME=pPCLFileName
	;
	Open DEVNAME:("WN"):5
	If '$Test Quit $$$ERROR($$$GeneralError,"Не удалось открыть на запись файл "_DEVNAME_" !")
	Use DEVNAME
	Do SetIO^%NLS("CP1251PRN")
	Set epis=""
	For  {
		Set epis=$Order(@pOrderPCLGlb@(epis))
		If epis="" Quit
		// *** Do ##class(TCLEx.Function.PCL2PDF).EpisodeGlb2PCLFile(epis,DEVNAME,$Name(@pOrderPCLGlb@(epis)))
		Do ##class(TCLEx.Function.PCL2PDF).EpisodeGlb2PCLFile(epis,DEVNAME,$Name(@pOrderPCLGlb@(epis)))
		
	}
	Use $Principal
	Close DEVNAME
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreatePCLGlb">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pOrderPCLGlb:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Kill @pOrderPCLGlb
	Set epis=""
	For  {
		Set epis=$Order(@pEpisGlb@(epis))
		If epis="" Quit
		/* Do ##class(TCLEx.Function.Episode).PCLResult(epis)
		If '$Data(^||episode) Continue
		Merge @pOrderPCLGlb@(epis)=^||episode*/ 
		Kill ^||Order.EpisodePCL
		Do ##class(TCLEx.Function.Episode).PCLReport2Glb(epis,,1,$Name(^||Order.EpisodePCL))
		If '$Data(^||Order.EpisodePCL) Continue
		Merge @pOrderPCLGlb@(epis)=^||Order.EpisodePCL 
		
	}
]]></Implementation>
</Method>

<Method name="FileName4Episode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pExtension:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set epis=$Order(@pEpisGlb@(""))
	If epis="" Quit ""
	Set episobj=##class(User.EPVisitNumber).%OpenId(epis)
	If '$IsObject(episobj) Quit ""
	Set filename=episobj.EPVISSurname_"("_pOrder_"-"
	If ##class(TCLEx.Function.LabOrder).IsComplete(epis,pEpisGlb) {
		Set filename=filename_"Окончательный"
	} Else {
		Set filename=filename_"Промежуточный"
	}		
	Set filename=filename_")."_pExtension
	Quit filename
]]></Implementation>
</Method>

<Method name="OrderResults2TxtFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pOrder:%String,&pTxtFileName:%String,pEpisodesGlb:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||Order.PCLResults
	Set pTxtFileName=""
	Set epis=""
	For  {
		Set epis=$Order(@pEpisodesGlb@(epis))
		If epis="" Quit
		Kill ^||episode
		Do ##class(TCLEx.Function.Episode).PCLResult(epis)
		If '$Data(^||episode)
		Merge ^||Order.PCLResults(epis)=^||episode	
	}	
	Set txtfilename=..FileName4Episode(pOrder,"txt",$Name(^||Episodes))
	If txtfilename="" Quit $$$ERROR($$$GeneralError,"Нет данных по заказу "_pOrder_" !")
	Set fulltxtfilename=$ZUtil(12)_"Temp\"_txtfilename
	Set ok=##class(TCLEx.Function.PCL2TXT).CreateTxtFile4Order(pOrder,fulltxtfilename,$Name( ^||Order.PCLResults))
	If 'ok Quit ok
	Set pTxtFileName=fulltxtfilename
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="NeedTxtResult">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If pEpis="" Quit 0
	Set hospid=##class(TCLEx.Function.Episode).HospitalId4Episode(pEpis)
	If ##class(TCLEx.Function.Hospital).NeedTxtResult4WebER(hospid) Quit 1
	Quit 0
]]></Implementation>
</Method>

<Method name="NeededResultModes">
<Description><![CDATA[
&&& Определение типов небходимых результатов для эпизода pEpis
pWebER - для WebER
pHospitalEMail - для ЛПУ нужен EMail
pPatientEMail - для пациента ЛПУ нужен EMail
pPatientSMS - для пациента ЛПУ нужен SMS]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pWebER:%Boolean,&pHospitalEMail:%Boolean,&pPatientEMail:%Boolean,&pPatientSMS:%Boolean]]></FormalSpec>
<Implementation><![CDATA[
	Set pWebER=1
	Set (pHospitalEMail,pPatientEMail,pPatientSMS)=0
	If pEpis="" Quit
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	Set hospid=""
	If $IsObject(episobj.EPVISHospitalCodeDR) Set hospid=episobj.EPVISHospitalCodeDR.%Id()
	If hospid="" Quit
	If ##class(TCLEx.Function.Hospital).NeedEMail(hospid) {
		Set pHospitalEMail=1
		If episobj.EPVISPhoneWork'="" Set pPatientEMail=1
	}	
	If ##class(TCLEx.Function.Hospital).NeedSMS(hospid) {
		If episobj.EPVISPhoneHome'="" Set pPatientSMS=1
	}	 
	Quit
]]></Implementation>
</Method>
</Class>
</Export>
