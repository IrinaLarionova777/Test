<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Function.LabOrder">
<Super>%RegisteredObject</Super>
<TimeCreated>62031,40378.510786</TimeCreated>

<Method name="CreateResultFiles">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do ..CreateListOfAuthorizedOrders($Name(^||Orders))
	Set maxdatetime=$Get(^||Orders)
	Set order=""
	For  {
		Set order=$Order(^||Orders(order))
		If order="" Quit
		Kill ^||Episodes
		Do ..CreateOrderEpisodesGlb(order,$Name(^||Episodes))
		//
		//If order=3161004655 Continue
		Lock +^TCLEx("PDFResult",order)
		Set ok=##class(TCLEx.Report.ResultForm).CreateLabOrderPDFReportNew(order,$ZUtil(12)_"Temp",1,.pdffilename)
		//Set ok=##class(TCLEx.Report.ResultForm).CreateLabOrderPDFReport(order,,,$ZUtil(12)_"Temp",1,.pdffilename)
		If 'ok {
			Do LogStatus^KSUTIL1($ZUtil(12)_"LIS\",ok,3,1)
			Lock -^TCLEx("PDFResult",order)
			Continue
		}
		Do LogMessage^KSUTIL1($ZUtil(12)_"LIS\","Успешно создан файл "_pdffilename,1,1)
		Set ^TCLEx("PDFResult",order)=$ListBuild($Horolog,pdffilename)
		Lock -^TCLEx("PDFResult",order)
		//
		If ..NeedTxtResult($Order(^||Episodes(""))) {
			Lock +^TCLEx("TXTResult",order)
			Set ok=..OrderResults2TxtFile(order,.txtfilename,$Name(^||Episodes))
			If 'ok {
				Do LogStatus^KSUTIL1($ZUtil(12)_"LIS\",ok,3,1)
				Lock -^TCLEx("TXTResult",order)
				Continue
			}
			Do LogMessage^KSUTIL1($ZUtil(12)_"LIS\","Успешно создан файл "_txtfilename,1,1)
			Set ^TCLEx("TXTResult",order)=$ListBuild($Horolog,txtfilename)
			Lock -^TCLEx("TXTResult",order)
		}	
		//
		Set epis=""
		For  {
			Set epis=$Order(^||Orders(order,epis))
			If epis="" Quit
			Lock +^TCLEx("AuthorizedEpisodes",epis)
			Set datetime=$Get(^TCLEx("AuthorizedEpisodes",epis))
			If maxdatetime]]datetime {
				Kill ^TCLEx("AuthorizedEpisodes",epis)
			}	
			Lock -^TCLEx("AuthorizedEpisodes",epis)
		}	
	}
]]></Implementation>
</Method>

<Method name="CreateListOfAuthorizedOrders">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrdersGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Lock +^TCLEx("AuthorizedEpisodes")
	Kill @pOrdersGlb
	Set epis=""
	For  {
		Set epis=$Order(^TCLEx("AuthorizedEpisodes",epis),1,datetime)
		If epis="" Quit
		Set deltatime=$system.SQL.DATEDIFF("ss",datetime,$ZDateTime($Horolog,3))
		If deltatime<1 Continue
		Set length=$Length(epis)
		If (length'=12)&&(length'=10) {
			Kill ^TCLEx("AuthorizedEpisodes",epis)
			Continue
		}	
		Set order=$Extract(epis,1,10)
		If order="" Quit
		Set @pOrdersGlb@(order,epis)=""
	}
	Set @pOrdersGlb=$Horolog
	Lock -^TCLEx("AuthorizedEpisodes")
]]></Implementation>
</Method>

<Method name="CreateOrderEpisodesGlb">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Kill @pGlb
	If $Get(pOrder)="" Quit
	If $Data(^TEPI(pOrder)) {
		Set @pGlb@(pOrder)=""
		Quit
	} Else {
		Set epis=pOrder_"00"
	}		
	For  {
		Set epis=$Order(^TEPI(epis))
		If (epis="")||($Extract(epis,1,$Length(pOrder))'=pOrder) Quit
		Set @pGlb@(epis)=""
	}
]]></Implementation>
</Method>

<Method name="IsComplete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If $Get(pEpisGlb)="" {
		Set pEpisGlb=$Name(^||Episodes)
		Do ..CreateOrderEpisodesGlb(pOrder,pEpisGlb)
	}	
	If '$Data(@pEpisGlb) Quit 0
	Set result=1
	Set epis=""
	For  {
		Set epis=$Order(@pEpisGlb@(epis))
		If epis="" Quit
		Set result=##class(TCLEx.Function.Episode).IsComplete(epis)
		If 'result Quit
	}	
	Quit result
]]></Implementation>
</Method>

<Method name="OrderResults2PDFFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pOrder:%String,&pPDFFileName:%String,pEpisodesGlb:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pPDFFileName=""
	Do ..CreatePCLGlb(pOrder,$Name(^||EpisodesPCL),pEpisodesGlb)
	Set pclfilename=..FileName4Episode(pOrder,"pcl",$Name(^||Episodes))
	If pclfilename="" Quit $$$ERROR($$$GeneralError,"Нет данных по заказу "_pOrder_" !")
	Set fullpclfilename=$ZUtil(12)_"Temp\"_pclfilename
	Set ok=..OrderResults2PCLFile(pOrder,fullpclfilename,$Name(^||EpisodesPCL))
	If 'ok Quit ok
	Set pdffilename=$Piece(pclfilename,".pcl",1)_".pdf"
	Set fullpdffilename=$ZUtil(12)_"Temp\"_pdffilename
	Set ok=##class(TCLEx.Function.PCL2PDF).PCL2PDF(fullpclfilename,fullpdffilename)
	If 'ok Quit ok
	Set pPDFFileName=fullpdffilename
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OrderResults2PCLFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pPCLFileName:%String,pOrderPCLGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ##class(%File).Exists(pPCLFileName) {
		Set ok=##class(%File).Delete(pPCLFileName)
		If 'ok Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pPCLFileName_" !")
	}	
	Set DEVNAME=pPCLFileName
	;
	Open DEVNAME:("WN"):5
	If '$Test Quit $$$ERROR($$$GeneralError,"Не удалось открыть на запись файл "_DEVNAME_" !")
	Use DEVNAME
	Do SetIO^%NLS("CP1251PRN")
	Set epis=""
	For  {
		Set epis=$Order(@pOrderPCLGlb@(epis))
		If epis="" Quit
		// *** Do ##class(TCLEx.Function.PCL2PDF).EpisodeGlb2PCLFile(epis,DEVNAME,$Name(@pOrderPCLGlb@(epis)))
		Do ##class(TCLEx.Function.PCL2PDF).EpisodeGlb2PCLFile(epis,DEVNAME,$Name(@pOrderPCLGlb@(epis)))
		
	}
	Use $Principal
	Close DEVNAME
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreatePCLGlb">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pOrderPCLGlb:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Kill @pOrderPCLGlb
	Set epis=""
	For  {
		Set epis=$Order(@pEpisGlb@(epis))
		If epis="" Quit
		/* Do ##class(TCLEx.Function.Episode).PCLResult(epis)
		If '$Data(^||episode) Continue
		Merge @pOrderPCLGlb@(epis)=^||episode*/ 
		Kill ^||Order.EpisodePCL
		Do ##class(TCLEx.Function.Episode).PCLReport2Glb(epis,,1,$Name(^||Order.EpisodePCL))
		If '$Data(^||Order.EpisodePCL) Continue
		Merge @pOrderPCLGlb@(epis)=^||Order.EpisodePCL 
		
	}
]]></Implementation>
</Method>

<Method name="FileName4Episode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pExtension:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set epis=$Order(@pEpisGlb@(""))
	If epis="" Quit ""
	Set episobj=##class(User.EPVisitNumber).%OpenId(epis)
	If '$IsObject(episobj) Quit ""
	Set filename=episobj.EPVISSurname_"("_pOrder_"-"
	If ##class(TCLEx.Function.LabOrder).IsComplete(epis,pEpisGlb) {
		Set filename=filename_"Окончательный"
	} Else {
		Set filename=filename_"Промежуточный"
	}		
	Set filename=filename_")."_pExtension
	Quit filename
]]></Implementation>
</Method>

<Method name="OrderResults2TxtFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pOrder:%String,&pTxtFileName:%String,pEpisodesGlb:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||Order.PCLResults
	Set pTxtFileName=""
	Set epis=""
	For  {
		Set epis=$Order(@pEpisodesGlb@(epis))
		If epis="" Quit
		Kill ^||episode
		Do ##class(TCLEx.Function.Episode).PCLResult(epis)
		If '$Data(^||episode)
		Merge ^||Order.PCLResults(epis)=^||episode	
	}	
	Set txtfilename=..FileName4Episode(pOrder,"txt",$Name(^||Episodes))
	If txtfilename="" Quit $$$ERROR($$$GeneralError,"Нет данных по заказу "_pOrder_" !")
	Set fulltxtfilename=$ZUtil(12)_"Temp\"_txtfilename
	Set ok=##class(TCLEx.Function.PCL2TXT).CreateTxtFile4Order(pOrder,fulltxtfilename,$Name( ^||Order.PCLResults))
	If 'ok Quit ok
	Set pTxtFileName=fulltxtfilename
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="NeedTxtResult">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If pEpis="" Quit 0
	Set hospid=##class(TCLEx.Function.Episode).HospitalId4Episode(pEpis)
	Quit ##class(TCLEx.Function.Hospital).NeedTxtResult4WebER(hospid)
	//If (hospid=2581)||(hospid=2732)||(hospid=2861)||(hospid=2731)||(hospid=2732) Quit 1
	//Quit 0
]]></Implementation>
</Method>

<Method name="NeededResultModes">
<Description>
pWebER - для WebER
pHospitalEMail - для ЛПУ нужен EMail
pPatientEMail - для пациента ЛПУ нужен EMail
pPatientSMS - для пациента ЛПУ нужен SMS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pWebER:%Boolean,&pHospitalEMail:%Boolean,&pPatientEMail:%Boolean,&pPatientSMS:%Boolean]]></FormalSpec>
<Implementation><![CDATA[
	Set pWebER=1
	Set (pHospitalEMail,pPatientEMail,pPatientSMS)=0
	If pEpis="" Quit
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	Set hospid=""
	If $IsObject(episobj.EPVISHospitalCodeDR) Set hospid=episobj.EPVISHospitalCodeDR.%Id()
	If hospid="" Quit
	Set pHospitalEMail=##class(TCLEx.Function.Hospital).NeedHospitalEMail(hospid)
	
	If ##class(TCLEx.Function.Hospital).NeedClientEMail(hospid) {
		If episobj.EPVISPhoneWork'="" Set pPatientEMail=1
	}	
	If ##class(TCLEx.Function.Hospital).NeedClientSMS(hospid) {
		If episobj.EPVISPhoneHome'="" Set pPatientSMS=1
	}
]]></Implementation>
</Method>

<Method name="GetOrderByEpisode">
<Description>
Получить номер заказа по номеру эпизода pEpis</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $Extract(pEpis,1,10)
]]></Implementation>
</Method>

<Method name="GetMaxAuthorizationTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pEpisGlb:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If $Get(pEpisGlb)="" {
		Set pEpisGlb=$Name(^||Episodes)
		Do ..CreateOrderEpisodesGlb(pOrder,pEpisGlb)
	}	
	If '$Data(@pEpisGlb) Quit 0
	Set result=""
	Set epis=""
	For  {
		Set epis=$Order(@pEpisGlb@(epis))
		If epis="" Quit
		Set time=##class(TCLEx.Function.Episode).GetMaxAuthorizationTime(epis)
		If time]]result Set result=time
	}	
	Quit result
]]></Implementation>
</Method>

<Method name="OrderStatusGlb">
<Description>
Получаем текущее состояние заказа (для выгрузки в файл)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pNewOrder:%Boolean,pGlb:%String</FormalSpec>
<Implementation><![CDATA[
	If $Get(pOrder)="" Quit
	// Выход, если информация по заказу уже была получена по другому эпизоду закак
	If $Data(@pGlb@(pOrder)) Quit	
	// Получаем список эпизодов заказа и определяем статус их исследований
	Kill ^||Order.Episodes
	Do ..CreateOrderEpisodesGlb(pOrder,$Name(^||Order.Episodes))
	Set (epis,firstsepis)="",complete=1
	For  {
		Set epis=$Order(^||Order.Episodes(epis))
		If epis="" Quit
		If firstsepis="" {
			Set firstsepis=epis
		}	
		Set episobj=##class(User.EPVisitNumber).%OpenId(epis)
		If '$IsObject(episobj) Continue
		Set key=""
		For  {
			Set testsetobj=episobj.ChildEPVisitTestSet.GetNext(.key)
			If key="" Quit
			If '$IsObject(testsetobj) Continue
			//
			Set testsetid=testsetobj.%Id()
			If (testsetid="") Continue
			Set testsetcode=""
			If $IsObject(testsetobj.VISTSTestSetDR) Set testsetcode=testsetobj.VISTSTestSetDR.%Id()
			If testsetcode="" Continue
			//
			Set specimencode=""
			If $IsObject(testsetobj.VISTSSpecimenTypeDR) Set specimencode=testsetobj.VISTSSpecimenTypeDR.%Id()
			//
			Set superset=""
			If $IsObject(testsetobj.VISTSSuperSetDR) Set superset=testsetobj.VISTSSuperSetDR.%Id()
			Set status=""
			If superset="" {
				If ##class(TCLEx.Function.TestSet).IsAuthorised(testsetobj) {
					Set status="+"
				} Else {
					If ##class(TCLEx.Function.TestSet).IsCanceled2(testsetobj) {
						Set status="-"
					} Else {
						Set complete=0
					}		
				}		
				Set code=testsetcode
				If specimencode'="" Set code=testsetcode_":"_specimencode
				Set @pGlb@(pOrder,"TestSets",code)=status
			} Else {
				If $Data(@pGlb@(pOrder,"TestSets",superset)) Continue
				If ##class(TCLEx.Function.SuperSet).IsComplete(epis,superset) {
					Set status="+"
				} Else {
					Set complete=0
				}	
				Set @pGlb@(pOrder,"SuperSets",superset)=status	
			}		
		}
	}
	Set episobj=##class(User.EPVisitNumber).%OpenId(firstsepis)
	If '$IsObject(episobj) Quit
	//
	Set @pGlb@(pOrder,"OrderData","OrderNumber")=pOrder
	Set @pGlb@(pOrder,"OrderData","Horolog")=$Horolog
	Set @pGlb@(pOrder,"OrderData","Complete")=complete
	//
	If $Data(pNewOrder) {
		Set @pGlb@(pOrder,"NewOrder")=pNewOrder
	}	
	//
	Set orderdate=""
	If episobj.EPVISDateOfRequest'="" Set orderdate=$ZDate(episobj.EPVISDateOfRequest,3)
	Set @pGlb@(pOrder,"OrderData","DateOfRequest")=orderdate
	//
	Set cito=""
	If $IsObject(episobj.EPVISPriorityCodeDR) Set cito=episobj.EPVISPriorityCodeDR.%Id()
	Set @pGlb@(pOrder,"OrderData","Cito")=cito
	//
	Set (hospid,hospname,hospemail)=""
	If $IsObject(episobj.EPVISHospitalCodeDR) {
		Set hospid=episobj.EPVISHospitalCodeDR.%Id()
		Set hospname=episobj.EPVISHospitalCodeDR.CTHOSName
		Set hospemail=##class(TCLEx.Function.Hospital).HospitalEMail(hospid)
	}	
	Set @pGlb@(pOrder,"OrderData","HospitalId")=hospid
	Set @pGlb@(pOrder,"OrderData","HospitalName")=hospname
	Set @pGlb@(pOrder,"OrderData","HospitalEMail")=hospemail
	//
	Set doctname=""
	If $IsObject(episobj.EPVISDoctorCodeDR) Set doctname=episobj.EPVISDoctorCodeDR.CTDRSurname
	Set @pGlb@(pOrder,"OrderData","DoctorName")=doctname
	//
	Set @pGlb@(pOrder,"OrderData","PatientFullName")=$$NameFormat^KSUTIL1(1,episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1)
	Set @pGlb@(pOrder,"OrderData","PatientShortName")=$$NameFormat^KSUTIL1(2,episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1)
	Set @pGlb@(pOrder,"OrderData","PatientEMail")=episobj.EPVISPhoneWork
	Set @pGlb@(pOrder,"OrderData","PatientPhoneNumber")=episobj.EPVISPhoneHome
]]></Implementation>
</Method>

<Method name="SaveOrdersStatus2Files">
<Description>
Записать состояние обновленных заказов из pGlb в файлы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String,pLogDir:%String</FormalSpec>
<Implementation><![CDATA[
	Set dir=$$OrderUpdatesDirectory^Settings.EMail()
	If $Extract(dir,$Length(dir))'="\" Set dir=dir_"\"
	If '$$TestDirectory^KSUTIL1(dir) {
		Do LogMessage^KSUTIL1(pLogDir,"Недоступен каталог архива "_dir,3,1)
		Quit
	}	
	Set order=""
	For  {
		Set order=$Order(@pGlb@(order))
		If order="" Quit
		Set horolog=$Get(@pGlb@(order,"OrderData","Horolog"),$Horolog)
		Set complete=$Get(@pGlb@(order,"OrderData","Complete"),0)
		Set cito=$Get(@pGlb@(order,"OrderData","Cito"))
		Set hasesupersets=($Data(@pGlb@(order,"SuperSets"))>0)
		Set neworder=($Get(@pGlb@(order,"NewOrder"))>0)
		Set eventvals=..OrderStateEvent(order,complete,cito,hasesupersets,neworder)
		Set filename=$ZDate(+horolog,3)_"_"_$Translate($ZTime($Piece(horolog,",",2)),":")_"_"_$ListGet(eventvals,1)_"_"_order_".txt"
		Set fullname=dir_filename
		
		Set stream=##class(%FileCharacterStream).%New()
		Set stream.TranslateTable="CP1251"  
		Set stream.Filename=fullname
		Do stream.WriteLine("#")
		Do stream.WriteLine("# SMS-документ, сгенерированный по событию авторизации исследований")
		Do stream.WriteLine("#")
		Do stream.WriteLine("# кодировка документа")
		Do stream.WriteLine("doc.encoding=windows-1251")
		Do stream.WriteLine("event.type="_$ListGet(eventvals,2))
		Do stream.WriteLine("event.ts="_$ZDateTime(horolog,3))
		Do stream.WriteLine("# параметры ЛПУ")
		Do stream.WriteLine("client.code="_$Get(@pGlb@(order,"OrderData","HospitalId")))
		Do stream.WriteLine("client.name="_$Get(@pGlb@(order,"OrderData","HospitalName")))
		Do stream.WriteLine("client.email="_$Get(@pGlb@(order,"OrderData","HospitalEMail")))
		Do stream.WriteLine("client.doctor="_$Get(@pGlb@(order,"OrderData","DoctorName")))
		
		Do stream.WriteLine("patient.fullname="_$Get(@pGlb@(order,"OrderData","PatientFullName")))
		Do stream.WriteLine("patient.shortname="_$Get(@pGlb@(order,"OrderData","PatientShortName")))
		Do stream.WriteLine("patient.email="_$Get(@pGlb@(order,"OrderData","PatientEMail")))
		Do stream.WriteLine("patient.phone="_$Get(@pGlb@(order,"OrderData","PatientPhoneNumber")))
		
		Do stream.WriteLine("# параметры заказа")
		Do stream.WriteLine("order.code="_order)
		Do stream.WriteLine("order.date="_$Get(@pGlb@(order,"OrderData","DateOfRequest")))
		Set statuses=..TestSetStatusStr($Name(@pGlb@(order,"TestSets")))
		Do stream.WriteLine("order.testsets="_statuses)
		Set statuses=..TestSetStatusStr($Name(@pGlb@(order,"SuperSets")))
		Do stream.WriteLine("order.supersets="_statuses)
		Set ok=stream.SaveStream()
		If ok {
			Do LogMessage^KSUTIL1(pLogDir,"Успешно сформирован файл "_fullname,1,1)
		} Else {
			Do LogStatus^KSUTIL1(pLogDir,"Не удалось сформировать файл "_fullname_" !",3,1)
		}		
	}
]]></Implementation>
</Method>

<Method name="OrderStateEvent">
<Description>
Вернуть краткое и полное событие для заказа pOrder
$ListBuild("RSU","order.result-update") - добавились результаты, но заказ еще не готов
$ListBuild("URR","order.urgent-ready") - готов срочный заказ
$ListBuild("CPR","order.complex-ready") - готов заказ, содержащий панели 
$ListBuild("RDY","order.ready") - готов заказ
$ListBuild("TTL","order.transferred2lis") - передача заказа из WebER в ЛИС</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOrder:%String,pIsComplete:%Boolean,pIsCito:%Boolean,pHasSuperSets:%Boolean,pNewOrder:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=$ListBuild("RSU","order.result-update")
	If pIsComplete {
		If pIsCito {
			Set result=$ListBuild("URR","order.urgent-ready")
		} ElseIf pHasSuperSets {
			Set result=$ListBuild("CPR","order.complex-ready")
		} Else {
			Set result=$ListBuild("RDY","order.ready")
		}		
	}
	If $Get(pNewOrder) {
		Set result=$ListBuild("TTL","order.transferred2lis")
	}	
	Quit result
]]></Implementation>
</Method>

<Method name="TestSetStatusStr">
<Description>
Строка состояния исследований</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set key=""
	For  {
		Set key=$Order(@pGlb@(key),1,status)
		If key="" Quit
		Set code=$Piece(key,":",1)
		If code="" Continue
		Set specimen=$Piece(key,":",2)
		If specimen="" Set specimen=" "
		Set statuses(code)=$Get(statuses(code))+1
		Set statuses(code,specimen)=status
	}
	Set code="",result=""
	For  {
		Set code=$Order(statuses(code),1,cnt)
		If code="" Quit
		Set specimen=""
		For  {
			Set specimen=$Order(statuses(code,specimen),1,status)
			If specimen="" Quit
			Set val=code
			If (cnt>1)&&(specimen'=" ") Set val=val_":"_specimen
			Set val=val_status
			If result'="" Set result=result_","
			Set result=result_val
		}	
	}	
	Quit result
]]></Implementation>
</Method>
</Class>
</Export>
