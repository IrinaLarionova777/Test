<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.BI.UI.UserPortal.standartPage">
<Description>
Base class for pages within the DeepSee user portal.</Description>
<Super>TCLEx.BI.UI.PageTemplate</Super>
<TimeCreated>62938,61693.563273</TimeCreated>

<Parameter name="APPLICATION">
<Default>TCLEx.BI.UI.UserPortal.Application</Default>
</Parameter>

<Parameter name="FAVORITEICON">
<Description>
Set this to the appropriate application class.
DeepSee favorite icon.</Description>
<Default>portal/deepsee.ico</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Set this to the correct domain.</Description>
<Default>%DeepSee</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Name of this page.</Description>
<Default>DeepSee User Portal</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
URL of home page (used in links).</Description>
<Default>_DeepSee.UserPortal.Home.zen</Default>
</Parameter>

<Parameter name="WORKLIST1MODE">
<Description>
Starting mode for worklist 1: html or group.</Description>
<Default>html</Default>
</Parameter>

<Parameter name="WORKLIST2MODE">
<Description>
Starting mode for worklist 2: html or group.</Description>
<Default>html</Default>
</Parameter>

<Property name="StdTitle">
<Description>
Define the title that will be displayed within subclasses</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>..#PAGENAME</InitialExpression>
</Property>

<Property name="homePage">
<Description>
URL of the Home Page.</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>..#HOMEPAGE</InitialExpression>
</Property>

<Property name="alertId">
<Description>
ID of alert that launched this page, if any.</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="ALERT"/>
</Property>

<Property name="searchKey">
<Description>
Current search key.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="viewerURL">
<Description>
URL of viewer page.</Description>
<Type>%ZEN.Datatype.uri</Type>
</Property>

<Property name="worklistCount">
<Description>
Number of worklist panels to display: 0,1,or 2.</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>2</InitialExpression>
<Parameter name="MAXVAL" value="2"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="useClientEmail">
<Description>
If true, send e-mail using client-side mailto application.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isEmbedded">
<Description>
Convenience property. Setting this true is equivalent to 
NOTITLE=1,NOBORDER=1,NOMODIFY=1,WORKLISTS=0</Description>
<Type>%ZEN.Datatype.boolean</Type>
<Parameter name="ZENURL" value="EMBED"/>
</Property>

<Property name="noTitle">
<Description>
If true, then do not display the title area of this page.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<Parameter name="ZENURL" value="NOTITLE"/>
</Property>

<Property name="noBorder">
<Description>
If true, then do not display the outer border around the desktop area of this page.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<Parameter name="ZENURL" value="NOBORDER"/>
</Property>

<Property name="noModify">
<Description>
If true, then do not allow user to modify this page (this is only a convenience, it is 
not enforced by privileges).</Description>
<Type>%ZEN.Datatype.boolean</Type>
<Parameter name="ZENURL" value="NOMODIFY"/>
</Property>

<Property name="urlWorklistCount">
<Description>
If set override the worklist count (number of worklist boxes on side of page). This
can be 0,1, or 2.</Description>
<Type>%ZEN.Datatype.integer</Type>
<Parameter name="ZENURL" value="WORKLISTS"/>
</Property>

<Property name="canWrite">
<Description>
If true, user can modify this page.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="chartSeriesScheme">
<Description>
Chart series color scheme.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="chartSeriesColors">
<Description>
Chart series color list.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#contentsLeft {
	width: 300px;
}

</style>
]]></Data>
</XData>

<XData name="formPane">
<Description>
Contents of this page:</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" 
	xmlns:deepsee="http://www.intersystems.com/deepsee" 
	title="#(%page.StdTitle)#"
	dropEnabled="true"
>
<hgroup id="titleGroup" width="100%" cellVAlign="bottom">
<spacer width="20px"/>
<pane paneName="menuPane" width="100px"/>
<html id="title" OnDrawContent="DrawTitle"/>
</hgroup>

<hgroup id="contentsOuter" enclosingClass="contentsOuter" cellVAlign="top">
<hgroup id="contentsInner" enclosingClass="contentsInner" cellVAlign="top">
<!--
<navigator id="navigator" 
showDisclosure="true"
expanded="false"
ongetcontent="return zenPage.navGetContentForLevel(level,key);"
onchange="zenPage.navDataChange(key,value,final);"
onselect="zenPage.navSelectItem(key,value);"
onexpand="zenPage.navExpand();"
/>
-->

<vgroup id="contentsLeft">
<html id="worklistTitle" enclosingClass="worklistTitle" OnDrawContent="DrawWorklistTitle"/>
<vgroup id="worklistWrapper1" enclosingClass="worklistWrapper">
<html id="worklistDiv1" enclosingClass="worklistHeaderDiv" OnDrawContent="DrawWorklistHeader1"/>
<html id="worklistDiv1HTML" hidden="false" enclosingClass="worklistDiv" OnDrawContent="DrawWorklist1"/>
<vgroup id="worklistDiv1Group" hidden="true" enclosingClass="worklistGroup" cellStyle="padding:2px;"/>
</vgroup>
<group id="worklistWrapper2" enclosingClass="worklistWrapper">
<html id="worklistDiv2" enclosingClass="worklistHeaderDiv" OnDrawContent="DrawWorklistHeader2"/>
<html id="worklistDiv2HTML" enclosingClass="worklistDiv" OnDrawContent="DrawWorklist2"/>
<vgroup id="worklistDiv2Group" hidden="true" enclosingClass="worklistGroup" cellStyle="padding:2px;"/>
</group>
</vgroup>

<vgroup id="contentsRight">
<pane paneName="contentsRightPane"/>
</vgroup>

</hgroup>
</hgroup>
</pane>
]]></Data>
</XData>

<XData name="menuPane">
<Description>
This XML defines the menu for this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<csMenuBar id="mainMenu" width="100px">
<csMenuBarItem caption="Menu">
<contextMenu id="fileMenu">
<csMenuItem caption="About" onclick="alert('About');" />
</contextMenu>
</csMenuBarItem>
</csMenuBar>
</pane>
]]></Data>
</XData>

<XData name="contentsRightPane">
<Description>
This XML defines the main display area.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
</pane>
]]></Data>
</XData>

<Method name="DrawTitle">
<Description>
Draw the contents of the title area.
Dispatch to application class.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		If $IsObject($G(%application)) {
			Set tTitle = ..%OnGetTitle()
			Do ..%OnGetSmallMenu(.tSmallMenu)
			Set tSC = %application.%DrawTitleHTML(tTitle,.tSmallMenu)
		}
		Else {
			&html<No Application Defined for Page!>
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLHead">
<Description>
Add include files to support color schemes.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ##class(%DeepSee.UserPortal.Utils).%GetPreferences(.tPrefs)
	Set tScheme = $G(tPrefs("Scheme"))

	// check for URL override
	If ($D(%request.Data("SCHEME",1))) {
		Set tScheme = $$$LOWER($G(%request.Data("SCHEME",1)))
	}

	If (tScheme '= "") {
		Set tSC = ##class(%DeepSee.UserPortal.Utils).%GetColorSchemeInfo(tScheme,.tInfo)

		// CSS file
		Set tCSSFile = $G(tInfo("css"))
		If (tCSSFile'="") {
			Write "<link rel=""stylesheet"" type=""text/css"" href="""_tCSSFile_"""/>",!
		}

		// Initializer file for SVG components
		Set tInitFile = $G(tInfo("js"))
		If (tInitFile'="") {
			Write "<script type=""text/javascript"" src="""_tInitFile_"""></script>",!
		}
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawWorklistTitle">
<Description>
Draw the contents of the worklist title area.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Write "Template Page"
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnGetWorklistOptions1">
<Description>
Return list of options for work list 1.</Description>
<FormalSpec>*pOptions,*pDefaultMode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// $LB(name,class)
	Set pOptions($I(n)) = $LB("alerts","%DeepSee.UserPortal.AlertList")
	Set pOptions($I(n)) = $LB("favorites","%DeepSee.UserPortal.FavoritesList")
	Set pDefaultMode = "alerts"

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetWorklistOptions2">
<Description>
Return list of options for work list 2.</Description>
<FormalSpec>*pOptions,*pDefaultMode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// $LB(name,class)
	Set pOptions($I(n)) = $LB("details","%DeepSee.UserPortal.DetailsList")
	Set pOptions($I(n)) = $LB("favorites","%DeepSee.UserPortal.FavoritesList")
	Set pOptions($I(n)) = $LB("recent","%DeepSee.UserPortal.RecentList")
	Set pDefaultMode = "favorites"
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawWorklistHeader1">
<Description>
Draw the header for worklist 1.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tDefault = ""
	Set tSC = ..%OnGetWorklistOptions1(.tOptions,.tDefault)
	If $$$ISERR(tSC) Quit tSC
	Set tMode = pSeed
	If (tMode="") {
		Set tMode = tDefault
		Set ..%GetComponentById("worklistDiv1").seed = tDefault
	}

	Quit ..%DrawWorklistHeader(tMode,"worklistDiv1",1,.tOptions)
]]></Implementation>
</Method>

<Method name="DrawWorklist1">
<Description>
Draw the contents of the worklist 1.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tDefault = ""
	Set tSC = ..%OnGetWorklistOptions1(.tOptions,.tDefault)
	If $$$ISERR(tSC) Quit tSC

	Set tMode = pSeed
	Set:tMode="" tMode = tDefault

	Quit ..%DrawWorklist(tMode,"worklistDiv1",1,.tOptions)
]]></Implementation>
</Method>

<Method name="DrawWorklistHeader2">
<Description>
Draw the the header for worklist 2.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tDefault = ""
	Set tSC = ..%OnGetWorklistOptions2(.tOptions,.tDefault)
	If $$$ISERR(tSC) Quit tSC
	Set tMode = pSeed
	If (tMode="") {
		Set tMode = tDefault
		Set ..%GetComponentById("worklistDiv2").seed = tDefault
	}
	Quit ..%DrawWorklistHeader(tMode,"worklistDiv2",2,.tOptions)
]]></Implementation>
</Method>

<Method name="DrawWorklist2">
<Description>
Draw the contents of the worklist 2.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tDefault = ""
	Set tSC = ..%OnGetWorklistOptions2(.tOptions,.tDefault)
	If $$$ISERR(tSC) Quit tSC

	Set tMode = pSeed
	Set:tMode="" tMode = tDefault

	Quit ..%DrawWorklist(tMode,"worklistDiv2",2,.tOptions)
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Define any quick links for the page</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	If $IsObject($G(%application)) {
		Set tSC = %application.GetQuickLinks(.pLinks)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Decorate the page.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set ..viewerURL = ##class(%DeepSee.UserPortal.Utils).%GetViewerURL()

	// check for write access
	Set ..canWrite = 1
	If ('$$CheckPortalWriteAccess^%qdsUtils()) {
		Set ..canWrite = 0
	}

	If (+..isEmbedded) {
		// set other properties unless user has set them
		Set:..noTitle="" ..noTitle = 1
		Set:..noBorder="" ..noBorder = 1
		Set:..noModify="" ..noModify = 1
		Set:..urlWorklistCount="" ..urlWorklistCount = 0
	}

	If (+..noTitle) {
		Set ..%GetComponentById("titleGroup").hidden = 1
		Set %response.Context("NOTITLE") = 1
	}
	If (+..noModify) {
		Set %response.Context("NOMODIFY") = 1
	}
	If ((..urlWorklistCount'="")&&(+..urlWorklistCount>=0)&&(+..urlWorklistCount<=2)) {
		Set ..worklistCount = ..urlWorklistCount
		Set %response.Context("WORKLISTS") = ..urlWorklistCount
	}
	If (+..noBorder) {
		// override styles to remove border
		Set ..%GetComponentById("contentsOuter").enclosingClass = "contentsOuterNoBorder"
		Set ..%GetComponentById("contentsInner").enclosingClass = "contentsInnerNoBorder"

		Set ..%GetComponentById("contentsLeft").enclosingStyle = "background: none;border-right:1px solid #808080;"

		// turn off background color for page
		Set %page.enclosingStyle = "background: none; overflow:hidden;"

		Set %response.Context("NOBORDER") = 1
	}

	If (..#WORKLIST1MODE="group") {
		Set ..%GetComponentById("worklistDiv1HTML").hidden = 1
		Set ..%GetComponentById("worklistDiv1Group").hidden = 0
	}
	If (..#WORKLIST2MODE="group") {
		Set ..%GetComponentById("worklistDiv2HTML").hidden = 1
		Set ..%GetComponentById("worklistDiv2Group").hidden = 0
	}
	
	// pick up chart color scheme
	Set ..chartSeriesScheme	= ""
	Set ..chartSeriesColors	= ""
	Set tScheme = $G(^DeepSee.UserPortalSettings("ChartSeriesScheme"))
	If (tScheme'="") {
		Set tSC = ##class(%DeepSee.UserPortal.Utils).%GetChartSeriesSchemeInfo(tScheme,.tSchemeName,.tColorList)
		Set ..chartSeriesScheme	= tSchemeName
		Set ..chartSeriesColors	= tColorList
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnGetTitle">
<Description>
Get the (localized) title string for the page.
This should be implemented in a subclass.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "DeepSee Portal"
]]></Implementation>
</Method>

<Method name="%OnGetPageName">
<Description>
Get the (localized) name of the page.
This should be implemented in a subclass.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "PageName"
]]></Implementation>
</Method>

<Method name="%OnGetSmallMenu">
<Description>
Get the contents of the small menu in the title area.</Description>
<FormalSpec>*pMenu</FormalSpec>
<Implementation><![CDATA[
	// $LB(caption,title,script)
	Set pMenu(1) = $LB($$$Text("Home"),$$$Text("Go to the Home page"),"zenPage.goHome();")
	//Set pMenu(2) = $LB($$$Text("About"),$$$Text("Display the About page"),"zenPage.showAbout();")
	//Set pMenu(3) = $LB($$$Text("Help"),$$$Text("Display help for this page"),"zenPage.showHelp();")
	Set pMenu(4) = $LB($$$Text("Logout"),$$$Text("End this session"),"zenPage.logout();")
]]></Implementation>
</Method>

<Method name="goHome">
<Description>
Go to the home page.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.gotoPage(this.homePage);
]]></Implementation>
</Method>

<Method name="showAbout">
<Description>
Go to the home page.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert('Go to About page');
]]></Implementation>
</Method>

<Method name="showHelp">
<Description>
Show documentation.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert('Help');
]]></Implementation>
</Method>

<Method name="logout">
<Description>
End the current session.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.DoLogout();
	this.goHome();
]]></Implementation>
</Method>

<Method name="DoLogout">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	If $System.Version.GetMajor() >= 2011 {
		// Logout removes the security context from the session and cleans up login and security token cookies.
		// It calls OnLogout() and leaves the session in existence. 
		Do %session.Logout()
	}
	// Causes OnEndSession() to be called and the session is destroyed
	Set %session.EndSession=1
	Quit 1
]]></Implementation>
</Method>

<Method name="getTitleAreaHeight">
<Description>
Return the height of the title area (titleBar plus locator).</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var hgt = 0;
	try {
		var titleDiv = zen('title').getEnclosingDiv();
		hgt = titleDiv.offsetHeight;
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in getTitleAreaHeight.');
	}
	
	return hgt;
]]></Implementation>
</Method>

<Method name="navigate">
<Description>
Navigate to a new page in the portal.</Description>
<FormalSpec>url</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.gotoPage(url);
]]></Implementation>
</Method>

<Method name="gotoNamespace">
<Description>
Navigate to a new namespace in the portal.</Description>
<FormalSpec>url</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.gotoPage(url);
]]></Implementation>
</Method>

<Method name="gotoAlert">
<Description>
View the given alert.</Description>
<FormalSpec>url</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (url!='') {
		zenPage.gotoPage(url);
	}
]]></Implementation>
</Method>

<Method name="gotoFavorite">
<Description>
View the given favorite.</Description>
<FormalSpec>url</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (url!='') {
		zenPage.gotoPage(url);
	}
]]></Implementation>
</Method>

<Method name="addToFavorites">
<Description>
Add item to favorites</Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.AddFavorite(name);
	zenPage.updateWorklistType('favorites');
]]></Implementation>
</Method>

<Method name="removeFromFavorites">
<Description>
Remove item from favorites</Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.RemoveFavorite(name);
	zenPage.updateWorklistType('favorites');
]]></Implementation>
</Method>

<Method name="removeFromRecentList">
<Description>
Remove item from recent list.</Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.RemoveRecentItem(name);
	zenPage.updateWorklistType('recent');
]]></Implementation>
</Method>

<Method name="removeFromAlerts">
<Description>
Remove item from alerts.</Description>
<FormalSpec>alertId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.RemoveAlert(alertId);
	zenPage.updateWorklistType('alerts');
]]></Implementation>
</Method>

<Method name="updateWorklistType">
<Description>
Update the all worklists showing the given type.</Description>
<FormalSpec>mode</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// check what each worklist is showing
	wlist1 = zen('worklistDiv1');
	if (wlist1) {
		this.setWorklistView('worklistDiv1',wlist1.seed);
	}

	wlist2 = zen('worklistDiv2');
	if (wlist2) {
		this.setWorklistView('worklistDiv2',wlist2.seed);
	}
	/* names are not correct !
	wlist1 = zen('worklistDiv1');
	if (wlist1 && wlist1.seed == mode) {
		this.setWorklistView('worklistDiv1',mode);
	}

	wlist2 = zen('worklistDiv2');
	if (wlist2 && wlist2.seed == mode) {
		this.setWorklistView('worklistDiv2',mode);
	}
	*/
]]></Implementation>
</Method>

<Method name="setWorklistView">
<Description>
Called when user updates or clicks on an icon in a worklist.</Description>
<FormalSpec>id,mode,type</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var header = zen(id);
	if (!header) return;

	if ('undefined' != typeof mode) {
		header.seed = mode;
	}
	header.refreshContents(true);

	var panel = zen(id+'HTML');
	if (!panel) return;

	var group = zen(id+'Group');

	if ('undefined' != typeof mode) {
		panel.seed = mode;
	}

	// what type of panel is showing
	if ('undefined' == typeof type) {
		type = panel.hidden ? 'group' : 'html';
	}

	if (type == 'html') {
		if (group) {
			group.setHidden(true);
		}
		panel.setHidden(false);
		panel.refreshContents(true);

		switch(id) {
		case 'worklistDiv1':
			var list = self.document.getElementById('worklist1');
			if (!this._worklistHeight1) {
				this.adjustSizes();
			}
			if (list) {
				list.style.height = this._worklistHeight1 + 'px';
			}
		case 'worklistDiv2':
			var list = self.document.getElementById('worklist2');
			if (!this._worklistHeight2) {
				this.adjustSizes();
			}
			if (list) {
				list.style.height = this._worklistHeight2 + 'px';
			}
		}
	}
	else {
		if (group) {
			group.setHidden(false);
		}
		panel.setHidden(true);
	}
]]></Implementation>
</Method>

<Method name="AddFavorite">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Do ##class(%DeepSee.UserLibrary.Utils).%AddFavorite(pName)
	Quit 1
]]></Implementation>
</Method>

<Method name="RemoveFavorite">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Do ##class(%DeepSee.UserLibrary.Utils).%RemoveFavorite(pName)
	Quit 1
]]></Implementation>
</Method>

<Method name="RemoveAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAlertId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Do ##class(%DeepSee.UserPortal.Utils).%DeleteAlert(pAlertId)
	Quit 1
]]></Implementation>
</Method>

<Method name="RemoveRecentItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Do ##class(%DeepSee.UserLibrary.Utils).%RemoveRecentItem(pName)
	Quit 1
]]></Implementation>
</Method>

<Method name="updateWorklistTitle">
<Description>
Update the title for the worklist.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="onlayoutHandler">
<Description>
Adjust sizes of components on the page.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		if (load) {
			this.updateWorklistTitle();
		}
		if (load && this.error!='') {
			alert(this.error);
		}
		this.adjustSizes(load);
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in onlayoutHandler');
	}
]]></Implementation>
</Method>

<Method name="adjustSizes">
<Description>
Adjust sizes of components on the page.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		// find size of window
		var winHeight = zenGetWindowHeight();
		var winWidth = zenGetWindowWidth();
		var th = this.getTitleAreaHeight();
		
		var wlists = parseInt(this.worklistCount);
		if (isNaN(wlists)) {
			wlists = 2;
		}

		var nav = this.getNavigator();

		this._topListHeight = 0;
		this._bottomListHeight = 0;

		var outer = zen('contentsOuter');
		var inner = zen('contentsInner');
		if (outer && inner) {

			var gapW = this.noBorder ? 2 : 40;
			var gapH = this.noBorder ? 3 : 20;

			var divOuter = outer.getEnclosingDiv();
			var oh = winHeight - gapH - th;
			var ow = winWidth - gapW;

			if ((oh < 50) || (ow < 50)) {
				divOuter.style.visibility = 'hidden';
				return;
			}
			divOuter.style.visibility = 'visible';
			divOuter.style.height = oh + 'px';
			divOuter.style.width = ow + 'px';

			var divInner = inner.getEnclosingDiv();
			var mgn = this.noBorder ? 0 : 12;
			var innerHgt = winHeight - gapH - (mgn*2) - th;
			divInner.style.marginTop = mgn + 'px';
			divInner.style.height = innerHgt + 'px';
			divInner.style.width = winWidth - gapW + 'px';

			if (nav) {
				nav.setHeight(innerHgt-8);
			}

			// adjust items in left column
			var left = zen('contentsLeft');
			var leftDiv = left.getEnclosingDiv();
			var lw = this._leftWidth ? this._leftWidth : leftDiv.offsetWidth;
			this._leftWidth = lw; // cache as ie will report a new value each time!
			if (ow < lw || (wlists==0)) {
				lw = 0;
				leftDiv.style.display = 'none';
			}
			else {
				leftDiv.style.display = '';
			}
			var rw = ow - lw;

			if (wlists>0) {
				var wtitle = zen('worklistTitle');
				var wth = wtitle ? wtitle.getEnclosingDiv().offsetHeight : 0;
				var wlist1 = zen('worklistWrapper1');
				var wlist2 = zen('worklistWrapper2');
				var bh = ((innerHgt - wth) / wlists) + 0;
				var bw = lw;
				if (wlist1) {
					var divWlist1 = wlist1.getEnclosingDiv();
					if (bh < 50) {
						divWlist1.style.display = 'none';
					}
					else {
						divWlist1.style.display = '';
						divWlist1.style.height = bh + 'px';

						var divWlistHeader1 = zen('worklistDiv1').getEnclosingDiv();
						var divWlistInner1 = zen('worklistDiv1HTML').getEnclosingDiv();
						var divWlistGroup1 = zen('worklistDiv1Group').getEnclosingDiv();

						// actual content of header
						var wListHdr1 = self.document.getElementById('worklistHeader1');

						if (divWlistHeader1) {
							divWlistHeader1.style.marginLeft = 10 + 'px';
							divWlistHeader1.style.height = wListHdr1.offsetHeight + 'px';
							divWlistHeader1.style.width = bw-30 + 'px';
						}

						if (divWlistInner1) {
							divWlistInner1.style.marginTop = 0 + 'px';
							divWlistInner1.style.marginLeft = 10 + 'px';
							divWlistInner1.style.height = bh-20-wListHdr1.offsetHeight + 'px';
							divWlistInner1.style.width = bw-30 + 'px';
						}
						if (divWlistGroup1) {
							divWlistGroup1.style.marginTop = 0 + 'px';
							divWlistGroup1.style.marginLeft = 10 + 'px';
							divWlistGroup1.style.height = bh-20-wListHdr1.offsetHeight + 'px';
							divWlistGroup1.style.width = bw-30 + 'px';
						}

						var wList1 = self.document.getElementById('worklist1');
						if (wList1) {
							this._worklistHeight1 = bh - 24 - wListHdr1.offsetHeight;
							wList1.style.height =  this._worklistHeight1 + 'px';
							if (load) {
								wList1.scrollTop = 0;
							}
						}
					}
				}
				if (wlist2 && wlists>1) {
					var divWlist2 = wlist2.getEnclosingDiv();
					if (bh < 50) {
						divWlist2.style.display = 'none';
					}
					else {
						divWlist2.style.display = '';
						divWlist2.style.height = bh + 'px';

						var divWlistHeader2 = zen('worklistDiv2').getEnclosingDiv();
						var divWlistInner2 = zen('worklistDiv2HTML').getEnclosingDiv();
						var divWlistGroup2 = zen('worklistDiv2Group').getEnclosingDiv();

						// actual content of header
						var wListHdr2 = self.document.getElementById('worklistHeader2');

						if (divWlistHeader2) {
							divWlistHeader2.style.marginLeft = 10 + 'px';
							divWlistHeader2.style.height = wListHdr2.offsetHeight + 'px';
							divWlistHeader2.style.width = bw-30 + 'px';
						}

						if (divWlistInner2) {
							divWlistInner2.style.marginTop = 0 + 'px';
							divWlistInner2.style.marginLeft = 10 + 'px';
							divWlistInner2.style.height = bh-20-wListHdr2.offsetHeight + 'px';
							divWlistInner2.style.width = bw-30 + 'px';
						}
						if (divWlistGroup2) {
							divWlistGroup2.style.marginTop = 0 + 'px';
							divWlistGroup2.style.marginLeft = 10 + 'px';
							divWlistGroup2.style.height = bh-20-wListHdr2.offsetHeight + 'px';
							divWlistGroup2.style.width = bw-30 + 'px';
						}

						var wList2 = self.document.getElementById('worklist2');
						if (wListHdr2 && wList2) {
							this._worklistHeight2 = bh - 24 - wListHdr2.offsetHeight;
							wList2.style.height =  this._worklistHeight2 + 'px';
							if (load) {
								wList2.scrollTop = 0;
							}
						}
					}
				}
			}

			// let subclasses do more work
			var navWid = nav ? nav.getWidth() : 0;
			this.onAdjustSizes(load,rw-navWid,innerHgt);
		}
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in adjustSizes');
	}
]]></Implementation>
</Method>

<Method name="onAdjustSizes">
<Description>
Adjust sizes of content area.</Description>
<FormalSpec>load,contentWidth,contentHeight</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="onPopupAction">
<Description>
This client event is fired when the a popup page launched from this page fires an action.</Description>
<FormalSpec>popupName,action,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(popupName) {
	}
]]></Implementation>
</Method>

<Method name="%DrawWorklistHeader">
<Description><![CDATA[
Draw the contents of a worklist panel within the user portal.<br/>
<var>pMode</var> indicates the type of contents to display.<br/>
<var>pPanelId</var> is the id of the html component displaying the panel.<br/>
<var>pPanelNo</var> is the worklist number.<br/>
<var>pOptions</var> is a list of the available options:<br/>
pOptions(n) = $LB(name,type,class)]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMode:%String,pPanelId:%String,pPanelNo:%Integer,&pOptions:%List]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		// find current item
		Set (tClass,tTitle,tHeaderMsg,tMethod) = ""
		Set k = $O(pOptions(""))
		While (k'="") {
			Set tName = $LG(pOptions(k),1)
			If (tName = pMode) {
				Set tClass = $LG(pOptions(k),2)
				Quit
			}
			Set k = $O(pOptions(k))
		}

		// dispatch
		If (tClass'="") {
			Set tTitle = $zobjclassmethod(tClass,"%GetTitle")
			Set tHeaderMsg = $zobjclassmethod(tClass,"%GetHeaderMessage")
		}

		// header
		&html<
			<div id="worklistHeader#(pPanelNo)#">
			<table class="worklistHeaderTable" width="100%" cellspacing="0" border="0" cellpadding="0"><tr>
			<td class="worklistHeaderTitle" nowrap="1">#(tTitle)#&nbsp;</td>
			<td class="worklistHeaderMsg" width="90%">#(tHeaderMsg)#&nbsp;</td>
			>

		// icons
		// count # of icons
		Set tIconCount = 0
		Set k = $O(pOptions(""))
		While (k'="") {
			Set tIconCount = tIconCount + 1
			Set k = $O(pOptions(k))
		}

		If (tIconCount>1) {
			Set k = $O(pOptions(""))
			While (k'="") {
				Set (tIcon,tTip,tType) = ""
				Set tName = $LG(pOptions(k),1)
				Set tClass = $LG(pOptions(k),2)
				If (tClass'="") {
					Set tIcon = $zobjclassmethod(tClass,"%GetIcon")
					Set tTip = $zobjclassmethod(tClass,"%GetToolTip")
					Set tType = $zobjclassmethod(tClass,"%GetType")
				}
				If (tIcon'="") {
					Set tIconCls = $S(pMode=tName:"worklistIconCurrent",1:"worklistIcon")
					&html<<td class="#(tIconCls)#"><image src="#(tIcon)#" alt="#(tName)#" title="#(tTip)#" onclick="zenPage.setWorklistView('#(pPanelId)#','#(tName)#','#(tType)#');"/></td>>
				}
				Set k = $O(pOptions(k))
			}
		}
		&html<</tr></table></div>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%DrawWorklist">
<Description><![CDATA[
Draw the contents of a worklist panel within the user portal.<br/>
<var>pMode</var> indicates the type of contents to display (which item in the options list).<br/>
<var>pPanelId</var> is the id of the html component displaying the panel.<br/>
<var>pPanelNo</var> is the worklist number.<br/>
<var>pOptions</var> is a list of the available options:<br/>
pOptions(n) = $LB(name,type,class)]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMode:%String,pPanelId:%String,pPanelNo:%Integer,&pOptions:%List]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		// find current item
		Set (tClass,tTitle,tHeaderMsg,tMethod) = ""
		Set k = $O(pOptions(""))
		While (k'="") {
			Set tName = $LG(pOptions(k),1)
			If (tName = pMode) {
				Set tClass = $LG(pOptions(k),2)
				Quit
			}
			Set k = $O(pOptions(k))
		}
		If (tClass'="") {
			// dispatch
			Set tSC = $zobjclassmethod(tClass,"%DrawWorkList",pPanelNo)
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="SendItemToTrash">
<Description>
Move the given folder item to the trash folder.</Description>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tMsg = ""
	Try {
		// move the item to the trash folder
		Set tItem = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pName,.tSC)
		If $$$ISERR(tSC) Quit

		If $IsObject(tItem) {
			// Rename and save in the trash folder.
			Set tExt = $P(tItem.fullName,".",$L(tItem.fullName,"."))
			Set tTrashName = "$TRASH" _ $S(tItem.folderName="":"",1:"/") _ tItem.folderName _ "/" _ tItem.name _ "." _ tExt
			Set tSC = ##class(%DeepSee.UserLibrary.Utils).%DeleteFolderItem(tTrashName)
			If $$$ISERR(tSC) Quit
			Set tItem.fullName = tTrashName

			Set tSC = tItem.%Save()
			If $$$ISERR(tSC) Quit
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<Method name="toggleWorklists">
<Description>
Toggle display of work lists.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if ('undefined' != typeof this._oldworklistCount) {
		this.worklistCount = this._oldworklistCount;
		delete this._oldworklistCount;
	}
	else {
		this._oldworklistCount = this.worklistCount;
		this.worklistCount = (this.worklistCount==0)?2:0;
	}
	this.adjustSizes(false);
]]></Implementation>
</Method>

<Method name="sendAlert">
<Description>
Launch the send alert dialog.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var parms = {
			TITLE:this.dashboardTitle,
			DASHBOARD:this.dashboardName
			};
	zenLaunchPopupWindow('_DeepSee.UI.Dialog.SendAlert.zen','SendAlert','status,scrollbars,resizable=yes,width=700,height=600',parms);
]]></Implementation>
</Method>

<Method name="sendMail">
<Description>
Launch the send email dialog.</Description>
<FormalSpec>url,title</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	url = ('undefined' == typeof url) ? self.document.location : url;
	title = ('undefined' == typeof title) ? this.dashboardTitle : title;

	if (this.useClientEmail) {
		var link = 'mailto:';
		link += '?subject='+encodeURIComponent(title);

		// clean up URL
		// replace "localhost" to keep email client happy
		var url2 = url.toString().replace(/localhost/,"127.0.0.1");

		// use _ instead of % to avoid escape issues with email clients
		url2 = url2.replace(/\%25DeepSee/,"_DeepSee");
		link += '&body=';
		link += '%0D';
		link += $$$Text("To view this information click on the following link:")
		link += '%0D';
		link += '%0D';
		link += encodeURIComponent(url2);

		var win = window.open(link,'email');
		if (win && win.open && !win.closed) {
			win.close();
		}
	}
	else {
		// server side

		var parms = {
				TITLE:title,
				URL:url,
				DASHBOARD:this.dashboardName
				};
		zenLaunchPopupWindow('_DeepSee.UI.Dialog.SendMail.zen','SendMail','status,scrollbars,resizable=yes,width=500,height=500',parms);
	}
]]></Implementation>
</Method>

<Method name="navExpand">
<Description>
Expand or contract of navigator.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	this.onlayoutHandler(false);
]]></Implementation>
</Method>

<Method name="navGetContentForLevel">
<Description>
Return an object describing what to display for this level within the navigator.</Description>
<FormalSpec>level,key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var title = level==0 ? 'Options' : key;
	var content = { title: title, items:[] };

	switch (key) {
	case '':
		// root
		content.items[content.items.length] = {display:'caption', caption:'Filter', action:'drill', key:'Filter'};
		content.items[content.items.length] = {display:'caption', caption:'Actions', action:'drill', key:'Actions'};
		break;

	case 'Filter':
		break;

	case 'Actions':
		content.items[content.items.length] = {display:'caption', caption:'Print', action:'select', key:'Print'};
		content.items[content.items.length] = {display:'caption', caption:'Distribute', action:'select', key:'Distribute'};
		break;
	}

	return content;
]]></Implementation>
</Method>

<Method name="navDataChange">
<Description>
Change of data value in navigator</Description>
<FormalSpec>key,value,final</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="navSelectItem">
<Description>
Select of item within the navigator.</Description>
<FormalSpec>key,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var nav = this.getNavigator();
	nav.setExpanded(false);
	nav.popSheet();
]]></Implementation>
</Method>

<Method name="getNavigator">
<Description>
Get the navigator component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return zen('navigator');
]]></Implementation>
</Method>

<Method name="setProperty">
<Description><![CDATA[
Set the value of a named property.<br>]]></Description>
<FormalSpec>property,value,value2</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(property) {
	case 'worklistCount':
		this.worklistCount = parseInt(value);
		this.adjustSizes(false);
		break;

	default:
		// dispatch
		return this.invokeSuper('setProperty',arguments);
	}
	return true;
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// force ie9
	&html<<meta http-equiv="X-UA-Compatible" content="IE=9" />>
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
