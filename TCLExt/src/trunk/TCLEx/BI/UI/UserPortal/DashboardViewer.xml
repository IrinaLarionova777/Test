<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.BI.UI.UserPortal.DashboardViewer">
<Description><![CDATA[
The DeepSee DashBoard viewer page.<br/>
This page displays a saved DeepSee dashboard.
Invoke this page using the URL:<br/>
%25DeepSee.UserPortal.DashboardViewer.zen?DASHBOARD=dashboardname<br/>
Where <var>dashboardname</var> is the <b>full</b> name of the dashboard: e.g.,
"folder/name.dashboard"<br/>
This class should be considered as *internal*; subclassing is not supported.]]></Description>
<Super>TCLEx.BI.UI.UserPortal.standartPage</Super>
<TimeCreated>62941,69696.964716</TimeCreated>

<Parameter name="PAGENAME">
<Description>
Name of this page.</Description>
<Default>DeepSee Dashboard</Default>
</Parameter>

<Parameter name="WORKLIST1MODE">
<Description>
Starting mode for worklist 1: html or group.</Description>
<Default>group</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Pick up formula code.</Description>
<Default>dsparser.js</Default>
</Parameter>

<Property name="dashboardName">
<Description>
Name of the currently displayed dashboard.
Use XDASHBOARD to use a session encrypted value for this.</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="DASHBOARD"/>
</Property>

<Property name="dashboardTitle">
<Description>
Title of the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="dashboardTitleLocal">
<Description>
Localized title of the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="dashboardDescription">
<Description>
Description of the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="dashboardLocked">
<Description>
Locked state of the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="dashboardPublic">
<Description>
Public state of the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="dashboardSnapGrid">
<Description><![CDATA[
If true, the dashboard uses the new snapGrid desktop and ignores the
the <property>dashboardSnapTo</property> property.]]></Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="dashboardSnapTo">
<Description>
Is dashboard in "snap to" mode.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="dashboardGridRows">
<Description>
Is dashboard uses snap grid, then this is then number of grid rows.</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="dashboardGridCols">
<Description>
Is dashboard uses snap grid, then this is then number of grid columns.</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="dashboardResize">
<Description>
Does this dashboard allow the user to move and resize widgets.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="ZENURL" value="RESIZE"/>
</Property>

<Property name="dashboardModify">
<Description>
Does this dashboard allow the user to modify widgets.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="ZENURL" value="MODIFY"/>
</Property>

<Property name="dashboardKeywords">
<Description>
Keywords for the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="dashboardOwner">
<Description>
Owner of the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="dashboardResource">
<Description>
Resource for the currently displayed dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="userName">
<Description>
Current user name.</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>$UserName</InitialExpression>
</Property>

<Property name="readOnly">
<Description>
If true, user cannot modify the current dashboard.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="%dashboard">
<Description>
Instance of dashboard definition.</Description>
<Type>%DeepSee.Dashboard.Definition</Type>
<Parameter name="XMLPROJECTION" value="none"/>
</Property>

<Property name="trace">
<Description>
If true, show alert message to trace filter events.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="ZENURL" value="TRACE"/>
</Property>

<Property name="dbsettings">
<Description>
Copy of db settings saved for this dashboard.</Description>
<Type>%ZEN.Datatype.string</Type>
<Internal>1</Internal>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="nonce">
<Description>
This is used when launching a dashboard from an email alert.</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="NONCE"/>
</Property>

<Property name="activeWhenArray">
<Description>
Track any activeWhen values for widget controls.</Description>
<Type>%ZEN.Datatype.string</Type>
<Internal>1</Internal>
<Collection>array</Collection>
</Property>

<XData name="SVGStyle">
<Data><![CDATA[
<style type="text/css">

text {
	font-family: arial;
}

</style>
]]></Data>
</XData>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

body {
	visibility: hidden;
}

#desktop {
	width: 800px;
	height: 550px;
	background: none;
}

#contentsLeft {
	width: 280px;
}

a.radioSetCaption {
	font-size: 12px;
	vertical-align: middle;
}

.zenLabel {
	font-size: 11px;
	color: #404040;
}

.svgFrame {
	border: none;
}

.EmptyMsg {
	padding: 20px;
	font-size: 20px;
	color: #808080;
}

.dragGroup {
	background: #F0F0F0;
	border: 1px solid #F0F0F0;
	overflow: hidden;
}

.dragChildren {
	overflow: hidden; 
}

.zenDesktopGhostPane {
	border: solid #F0F0FD 1px;
	background: #F8F8FD;
}

.dbName {
	font-size: 12px;
}

.dbTitle {
}

.dsActionButton {
	margin-left: 4px;
	color: #E0E0E0;
	background: rgb(53,107,141);
	border-radius: 2px;
	border: 1px solid black;
}

.dsActionButton:hover {
	background: rgb(53,107,141);
	color: white;
	background-image: url(portal/button_hover.png);
	background-repeat: repeat-x;
}

.dsActionButtonDisabled {
	margin-left: 4px;
	color: #808080;
	background: #D0D0D0;
	border-radius: 2px;
	border: 1px solid #808080;
}

</style>
]]></Data>
</XData>

<XData name="menuPane">
<Description>
This XML defines the menu for this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<!--
<csMenuBar id="mainMenu" width="100px">
<csMenuBarItem caption="Menu">
<contextMenu id="fileMenu">
<csMenuItem id="newDashboard" caption="New Dashboard" title="Create a new dashboard" onclick="zenPage.newDashboard();"  />
<csMenuItem id="openDashboard" caption="Find Dashboard..." title="View a different dashboard" onclick="zenPage.openDashboard();"  />
<csMenuItem id="deleteDashboard" caption="Delete Dashboard" title="Delete this dashboard" onclick="zenPage.deleteDashboard();"  />
<csMenuSeparator/>
<csMenuItem id="saveSettings" caption="Save My Settings" title="Save current settings such as widget positions and filter choices" onclick="zenPage.saveSettings();"/>
<csMenuItem id="clearSettings" caption="Clear My Settings" title="Clear local settings and return this dashboard to its original state" onclick="zenPage.clearSettings();"/>
<csMenuSeparator/>
<csMenuItem id="saveDashboard" caption="Save" title="Save this dashboard" onclick="zenPage.saveDashboard(false);"/>
<csMenuItem id="saveDashboardOptions" caption="Save With Options..." title="Show the save dialog for this dashboard" onclick="zenPage.saveDashboard(true);"/>
<csMenuItem id="saveDashboardAs" caption="Save As..." title="Save a copy of this dashboard" onclick="zenPage.saveCopyOfDashboard();"/>
<csMenuItem id="addToFavorites" caption="Add To Favorites" title="Add this dashboard to the favorites list" onclick="zenPage.addThisToFavorites();"/>
<csMenuSeparator/>
<csMenuItem id="addWidget" caption="Add New Widget..." title="Add a new visual widget to this dashboard" onclick="zenPage.addWidget();"/>
<csMenuItem id="addFromCatalog" caption="Add Widget From Catalog..." title="Add a widget from the catalog to this dashboard" onclick="zenPage.addWidgetFromCatalog();"  />
<csMenuSeparator/>
<csMenuItem id="analyzer" caption="Analyzer" title="Go to the DeepSee Analyzer" onclick="zenPage.gotoAnalyzer();" />
<csMenuSeparator/>
<csMenuItem id="email" caption="Email Dashboard" title="Email this dashboard" onclick="zenPage.mailDashboard();" />
<csMenuItem id="alert" caption="Send Alert" title="Send an alert to another DeepSee user" onclick="zenPage.sendAlert();" />
<csMenuSeparator/>
<csMenuItem id="worklists" caption="Hide/Show Worklists" title="Hide or show the worklist for this page" onclick="zenPage.toggleWorklists();" />
 </contextMenu>
 </csMenuBarItem>
</csMenuBar>
-->
</pane>
]]></Data>
</XData>

<XData name="contentsRightPane">
<Description>
This XML defines the main display area.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<!-- dashboard contents get loaded here: width is reset later -->
<group id="desktopGroup" width="500" height="200" layout="none"/>
</pane>
]]></Data>
</XData>

<Method name="%OnPreHTTP">
<Description>
Translate encrypted URL parameters</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If $D(%request.Data("XDASHBOARD",1)) {
		Set %request.Data("DASHBOARD",1) = ##class(%CSP.Page).Decrypt($G(%request.Data("XDASHBOARD",1)))
	}
	If $D(%request.Data("XSETTINGS",1)) {
		Set %request.Data("SETTINGS",1) = ##class(%CSP.Page).Decrypt($G(%request.Data("XSETTINGS",1)))
	}
	If $D(%request.Data("XEMBED",1)) {
		Set %request.Data("EMBED",1) = ##class(%CSP.Page).Decrypt($G(%request.Data("XEMBED",1)))
	}
	If $D(%request.Data("XWORKLISTS",1)) {
		Set %request.Data("WORKLISTS",1) = ##class(%CSP.Page).Decrypt($G(%request.Data("XWORKLISTS",1)))
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Decorate the page.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tSC = ##super()
		If $$$ISERR(tSC) Quit

		// Remove email menu item if not enabled
		Set tMailEnabled = +$G(^DeepSee.UserPortalSettings("MailEnabled"))
		If ('tMailEnabled) {
			Set tMenu = ..%GetComponentById("email")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
		}
		Else {
			// set flag to indicate how email is sent
			If (tMailEnabled = 2) {
				Set ..useClientEmail = 1
			}
			Else {
				Set ..useClientEmail = 0
			}
		}

		// pull out URL settings
		Set tSC = ##class(%DeepSee.UserPortal.Utils).%GetSettingsFromURL(.tSettings)
		If $$$ISERR(tSC) Quit

		// audit
		If (..dashboardName'="") {
			Set tSC = ##class(%DeepSee.Utils).%RunServerAuditCode(..dashboardName)
			If $$$ISERR(tSC) Quit
		}

		// load the dashboard
		Set tSC = ..%LoadDashboard(.tDashboard,..dashboardName)
		If $$$ISERR(tSC) Quit
		Set ..%dashboard = tDashboard

		If ((+..noModify)) {
			Set ..readOnly = 1
		}

		// check privileges
		Do CheckFolderUseAccess^%qdsUtils(tDashboard)
		
		Set tWrite = $$CheckFolderWriteAccess^%qdsUtils(tDashboard)
		If ('tWrite||('..canWrite)) {
			Set ..readOnly = 1
		}

		If ('$$CheckAnalyzerViewAccess^%qdsUtils()) {
			Set tMenu = ..%GetComponentById("analyzer")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
		}

		If ('..canWrite) {
			Set tMenu = ..%GetComponentById("newDashboard")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
		}

		// Remove save menu items if read-only
		If (..readOnly) {
			Set tMenu = ..%GetComponentById("deleteDashboard")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
			Set tMenu = ..%GetComponentById("saveDashboard")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
			Set tMenu = ..%GetComponentById("saveDashboardOptions")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
			Set tMenu = ..%GetComponentById("saveDashboardAs")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
			Set tMenu = ..%GetComponentById("addFromCatalog")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
			Set tMenu = ..%GetComponentById("addWidget")
			If $IsObject(tMenu) {
				Do tMenu.parent.%RemoveChild(tMenu)
			}
		}

		// if we are here because of an alert, clear its new flag
		If (..alertId'="") {
			Set tAlert = ##class(%DeepSee.UserPortal.Data.Alert).%OpenId(..alertId)
			If $IsObject(tAlert) {
				Set tAlert.isNew = 0
				Do tAlert.%Save()
			}
		}

		If $IsObject(tDashboard) {
			Set tSC = ##class(%DeepSee.UserLibrary.Utils).%RegisterRecentItem("dashboard",tDashboard.fullName)
			If $$$ISERR(tSC) Quit

			// see if there are any dashboard settings saved for this dashboard
			If (""'=tDashboard.fullName) {
				Set tUser = $S(..nonce="":$UserName,1:..nonce)
				Set tSC = ##class(%DeepSee.UserPortal.Utils).%LoadDashboardSettings(.tDBSettings,tDashboard.fullName,tUser)
				If $$$ISERR(tSC) Quit
			}
		}
		Else {
			// use new item to pick up any default values
			Set tDashboard = ##class(%DeepSee.Dashboard.Definition).%New()
		}

		// indicate presence of local settings in menu
		If '$D(tDBSettings) {
			Set tMenu = ..%GetComponentById("clearSettings")
			If $IsObject(tMenu) {
				Set tMenu.disabled = 1
			}
		}

		If ('..readOnly) {
			// see if there are widgets in the catalog
			Set tSC = ##class(%DeepSee.Dashboard.Utils).%GetWidgetTemplateList(.tWList,.tWCount,1)
			If $$$ISERR(tSC) Quit

			If ($G(tWCount)=0) {
				Set tMenu = ..%GetComponentById("addFromCatalog")
				If $IsObject(tMenu) {
					Set tMenu.disabled = 1
				}
			}
		}

		Set ..dashboardName = tDashboard.fullName
		Set ..dashboardTitle = tDashboard.title
		// JMD
		Set ..dashboardTitleLocal = ##class(%DeepSee.UserPortal.Utils).%ResolveText(tDashboard.title)
		Set ..dashboardKeywords = tDashboard.keywords
		Set ..dashboardDescription = tDashboard.description
		Set ..dashboardLocked = tDashboard.locked
		Set ..dashboardPublic = tDashboard.public
		Set ..worklistCount = tDashboard.worklistCount
		Set ..dashboardOwner = tDashboard.owner
		Set ..dashboardSnapTo = $S(tDashboard.snapTo="":1,1:tDashboard.snapTo)
		Set ..dashboardSnapGrid = $S(tDashboard.snapGrid="":0,1:tDashboard.snapGrid)
		Set ..dashboardResource = tDashboard.resource

		// JMD1084: If URL turns these off, they stay off!
		Set:..dashboardModify ..dashboardModify = $S(tDashboard.canModify="":1,1:tDashboard.canModify)
		Set:..dashboardResize ..dashboardResize = $S(tDashboard.canResize="":1,1:tDashboard.canResize)

		Set ..dashboardGridRows = $S(tDashboard.gridRows="":2,1:tDashboard.gridRows)
		Set ..dashboardGridCols = $S(tDashboard.gridCols="":2,1:tDashboard.gridCols)

		If $D(tDBSettings("worklistCount")) {
			Set ..worklistCount = +$G(tDBSettings("worklistCount"))
		}

		If ((..urlWorklistCount'="")&&(+..urlWorklistCount>=0)&&(+..urlWorklistCount<=2)) {
			Set ..worklistCount = ..urlWorklistCount
		}

		// callback
		Set tGroup = ..%GetComponentById("worklistDiv1Group")
		Set tSC = ..%OnCreateControls(tDashboard,tGroup)
		If $$$ISERR(tSC) Quit

		// create desktop component
		Set tDesktopGroup = ..%GetComponentById("desktopGroup")
		// JMD996
		If (..dashboardSnapGrid) {
			Set tDesktop = ##class(%ZEN.Component.snapGrid).%New()
			Set tDesktop.rows = tDashboard.gridRows
			Set tDesktop.cols = tDashboard.gridCols
			Set:+(tDesktop.rows)<=0 tDesktop.rows = 2
			Set:+(tDesktop.cols)<=0 tDesktop.cols = 2
		}
		Else {
			If (..dashboardSnapTo) {
				Set tDesktop = ##class(%ZEN.Component.desktop).%New()
			}
			Else {
				Set tDesktop = ##class(%ZEN.Component.corkboard).%New()
			}
		}
		Set tDesktop.id = "desktop"
		Set tSC = tDesktopGroup.%AddChild(tDesktop)
		If $$$ISERR(tSC) Quit

		// load widgets
		If $IsObject(tDesktop) {
			If (tDashboard.widgets.Count() = 0) {
				// nothing to show
				Set tHTML = ##class(%ZEN.Component.html).%New()
				If (..dashboardName = "") {
					Set tHTML.content = "<div class=""EmptyMsg"">"_$$$Text("No Dashboard has been selected.")_"<br/>"_$$$Text("Use the menu to create a new dashboard or to find an existing one.","%DeepSee")_"</div>"
				}
				Else {
					Set tHTML.content = "<div class=""EmptyMsg"">"_$$$Text("This dashboard is empty.")_"<br/>"_$$$Text("Use the menu to add widgets to the dashboard.","%DeepSee")_"</div>"
				}
				Do tDesktop.%AddChild(tHTML)
			}
			Else {
				Set tSC = ..%CreateWidgets(tDashboard,tDesktop,.tSettings,.tDBSettings)
				If $$$ISERR(tSC) Quit
			}
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnGetWorklistOptions1">
<Description>
Return list of options for work list 1.</Description>
<FormalSpec>*pOptions,*pDefaultMode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// $LB(name,class)
	// N.B., Filters are always in workgroup 1
	Set pOptions($I(k)) = $LB("filters","%DeepSee.UserPortal.FilterList")
	Set pDefaultMode = "filters"

	If +$G(^DeepSee.UserPortalSettings("Worklist")) {
		Set n = $O(^DeepSee.UserPortalSettings("Worklist","DashboardViewer",1,""))
		While (n'="") {
			// $LB(name,class)
			Set pOptions($I(k)) = $LB("option"_n,^DeepSee.UserPortalSettings("Worklist","DashboardViewer",1,n))
			Set n = $O(^DeepSee.UserPortalSettings("Worklist","DashboardViewer",1,n))
		}	
	}
	If (..alertId'="") {
		Set pOptions($I(k)) = $LB("alertInfo","%DeepSee.UserPortal.AlertInfo")
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetWorklistOptions2">
<Description>
Return list of options for work list 2.</Description>
<FormalSpec>*pOptions,*pDefaultMode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pDefaultMode = ""
	If +$G(^DeepSee.UserPortalSettings("Worklist")) {
		Set n = $O(^DeepSee.UserPortalSettings("Worklist","DashboardViewer",2,""))
		While (n'="") {
			// $LB(name,class)
			Set pOptions($I(k)) = $LB("option"_n,^DeepSee.UserPortalSettings("Worklist","DashboardViewer",2,n))
			Set:pDefaultMode="" pDefaultMode = "option"_n
			Set n = $O(^DeepSee.UserPortalSettings("Worklist","DashboardViewer",2,n))
		}	
	}
	Else {
		Quit ##super(.pOptions,.pDefaultMode)
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%LoadDashboard">
<Description>
Open (or create) an instance of dashboard definition that defines the contents
of this dashboard.</Description>
<FormalSpec>*pDashboard:%DeepSee.Dashboard.Definition,pDashboardName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pDashboard = ""
	Set tSC = $$$OK
	Try {
		Set pDashboard = ##class(%DeepSee.Dashboard.Utils).%OpenDashboard(pDashboardName,.tSC)
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
		Set pDashboard = ""
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="%CreateWidgets">
<Description><![CDATA[
Create the dashboard widgets and add them to the desktop.<br/>
<var>pURLSettings</var> is an array of settings values pulled out of the URL.<br/>
<var>pDBSettings</var> is an array of saved dashboard settings values.]]></Description>
<FormalSpec><![CDATA[pDashboard:%DeepSee.Dashboard.Definition,pDesktop:%ZEN.Component.desktop,&pURLSettings:%String,&pDBSettings:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		New %tKeyToWidget
		If ($IsObject(pDashboard)) {
			Set tGroup = ..%GetComponentById("worklistDiv1Group")

			// build index of widget names to dataSources (for links)
			// and index of names to widget number
			Set tAllNames = ""
			Set tWidgetCount = pDashboard.widgets.Count()
			For n = 1:1:tWidgetCount {
				Set tWidgetDef = ..%dashboard.widgets.GetAt(n)
				Set tWidgetName = tWidgetDef.name
				Set:tWidgetName="" tWidgetName = "$widget"_n
				If (tWidgetName'="") {
					// Nothing prevents 2 widgets with the same name!
					Set tWidgetIndex(tWidgetName,n) = ""
					Set tAllNames = tAllNames _ $S(tAllNames="":"",1:",") _ tWidgetName
					Set tDataSourceIndex(tWidgetName) = tWidgetDef.%GetDataSource()
				}
			}
			
			// get list of FILTERS from URL organized by target name
			Set tTarget = $O(pURLSettings(""))
			While (tTarget'="") {
				If $D(pURLSettings(tTarget,"FILTER")) {
					Set tURLFilter = pURLSettings(tTarget,"FILTER")
					For p = 1:1:$L(tURLFilter,"~") {
						Set tSpec = $P(tURLFilter,"~",p)
						If (tSpec'="") {
							// pull spec into spec(s) and value(s)
							Do ..%ParseFilterSpec(tSpec,.tFSpec,.tFKey,.tFValue)
							If ($D(tFSpec)) {
								Set k = $O(tFSpec(""))
								While (k'="") {
									// keys for MDX, value for KPI!
									Set tURLFilterList(tTarget,$$$UPPER($G(tFSpec(k)))) = $S($G(tFKey(k))="":$G(tFValue(k)),1:$G(tFKey(k)))
									Set k = $O(tFSpec(k))
								}
							}
						}
					}
				}
				Set tTarget = $O(pURLSettings(tTarget))
			}

			// build list of all filters
			// as well as list of controls that belong on the dashboard
			For n = 1:1:tWidgetCount {
				Set tWidgetDef = ..%dashboard.widgets.GetAt(n)
				Set tWidgetName = tWidgetDef.name
				Set:tWidgetName="" tWidgetName = "$widget"_n

				Set tControlCount = tWidgetDef.controls.Count()
				For c = 1:1:tControlCount {
					Set tControlDef = tWidgetDef.controls.GetAt(c)
					Set tFilterName = tControlDef.targetProperty
					Set tFilterDefault = ""

					If (tFilterName'="") {
						// set default value for filter from control definition
						Set tFilterValue = tControlDef.value

						If ($E(tFilterValue)="@") {
							// user-defined setting
							Set tFilterValue = $E(tFilterValue,2,$L(tFilterValue))
							Set tFilterValue = ##class(%DeepSee.UserPortal.Utils).%GetUserSetting(tFilterValue)
							Set tFilterDefault = tFilterValue
						}

						// check for overrides saved in DBSettings
						If ((tWidgetDef.key'="")&&(tControlDef.controlKey'="")) {
							If ($D(pDBSettings(tWidgetDef.key,"controls",tControlDef.controlKey,"value"))) {
								// user-defined setting
								Set tFilterValue = $G(pDBSettings(tWidgetDef.key,"controls",tControlDef.controlKey,"value"))
							}
						}

						// apply URL settings to filter controls
						If ($D(tURLFilterList("*",$$$UPPER(tFilterName)))) {
							Set tFilterValue = tURLFilterList("*",$$$UPPER(tFilterName))
							Kill tURLFilterList("*",$$$UPPER(tFilterName))
						}

						If ($D(tURLFilterList(tWidgetName,$$$UPPER(tFilterName)))) {
							Set tFilterValue = tURLFilterList(tWidgetName,$$$UPPER(tFilterName))
							Kill tURLFilterList(tWidgetName,$$$UPPER(tFilterName))
						}

						// !!! click event !!!
						If ((tControlDef.action = "applyFilter")||
							(tControlDef.action = "setFilter") ||
							(tControlDef.action = "")) {
								
							Set tTargetList = tControlDef.target
							Set:tTargetList="" tTargetList = tWidgetName
							Set:tTargetList="*" tTargetList = tAllNames

							If (tTargetList="") {
								// target refers to owner and owner has no name
								Set tFilterSet(n,tFilterName) = tFilterValue
								Set:tFilterDefault'="" tFilterDefault(n,tFilterName) = tFilterDefault
							}
							Else {
								For t = 1:1:$L(tTargetList,",") {
									Set tTarget = $P(tTargetList,",",t)
									// there could be a space within the list
									Set:tTarget="" tTarget = tWidgetName
									If (tTarget'="") {
										Set idx = $O(tWidgetIndex(tTarget,""))
										While (idx'="") {
											Set tFilterSet(idx,tFilterName) = tFilterValue
											Set:tFilterDefault'="" tFilterDefault(idx,tFilterName) = tFilterDefault
											Set idx = $O(tWidgetIndex(tTarget,idx))
										}
									}
									Else {
										// target refers to owner and owner has no name
										Set tFilterSet(n,tFilterName) = tFilterValue
										Set:tFilterDefault'="" tFilterDefault(n,tFilterName) = tFilterDefault
									}
								}
							}
						}
					} // filterName
				}
			}

			// add widgets to page
			For n = 1:1:tWidgetCount {
				Set tWidgetDef = ..%dashboard.widgets.GetAt(n)

				// place settings for this widget in dbsettings
				Kill ..dbsettings
				If (tWidgetDef.key'="") {
					Merge ..dbsettings = pDBSettings(tWidgetDef.key)
				}

				// JMD1074 apply localDataSource from settings
				If ($G(..dbsettings("localDataSource"))'="") {
					Set tWidgetDef.localDataSource = ..dbsettings("localDataSource")
				}

				// resolve data linkage, if any: override local datasource
				If (tWidgetDef.dataLink'="") {
					Set tWidgetDef.localDataSource = $G(tDataSourceIndex(tWidgetDef.dataLink))
				}

				// create actual widget from definition
				Set tSC = tWidgetDef.%CreateVisualWidget(.tWidget,.pURLSettings)
				If $$$ISERR(tSC) Quit

				// anything left in the tURLFilter list is general filter without a control
				// place this in the "click filter" spec!
				Set tGeneralFilter = ""
				Set kc = 0
				Set kt = $O(tURLFilterList(""))
				While (kt'="") {
					If ((kt="*")||(kt=tWidgetDef.name)) {
						Set kf = $O(tURLFilterList(kt,""))
						While (kf'="") {
							Set kc = kc + 1
							// keys are already escaped
							Set kv = $S(($E(tURLFilterList(kt,kf),1)="&"):tURLFilterList(kt,kf),1:"["_tURLFilterList(kt,kf)_"]")
							Set tGeneralFilter = tGeneralFilter _ $S(tGeneralFilter="":"",1:",") _ kf _ "." _ kv
							Set kf = $O(tURLFilterList(kt,kf))
						}
					} 
					Set kt = $O(tURLFilterList(kt))
				}
				Set:kc>1 tGeneralFilter = "("_tGeneralFilter_")"

				Set tWidget.clickFilterSpec = tGeneralFilter

				// local list of widgets
				Set tWidgetList(n) = tWidget

				Set tWidget.id = "$widget_" _ n

				// JMD996: turn off move and resize if needed
				If ('..dashboardResize) {
					Set tWidget.moveEnabled = 0
					Set tWidget.resizeEnabled = 0
				}

				// if no name, use the id
				Set:tWidget.name="" tWidget.name = tWidget.id
		
				// select handler for widget
				Set tWidget.onwindowgrab = "zenPage.widgetSelected('"_tWidget.widgetKey_"');"

				// See if we have a cube name
				Set tCubeName = ""
				If ($D(tFilterSet(n))) {
					Set tDS = tWidgetDef.localDataSource
					Set:tDS="" tDS = tWidgetDef.dataSource
					If (tDS '= "") {
						If ($P(tDS,".",$L(tDS,"."))="pivot") {
							Set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(tDS,.tSC)
							If $IsObject(tPivot) {
								// ignore missing pivot: deal with it further on
								Set tCubeName = tPivot.%GetCubeName()
							}
						}
					}
				}

				// apply filter state to the widget
				// make sure there is a filter entry for every control connected
				// to this widget
				Set f = $O(tFilterSet(n,""))
				While (f'="") {
					Set tKey = $G(tFilterSet(n,f))
					Do tWidget.filterState.SetAt(tKey,f)
					Set tText = tKey
					// get display name for key
					If ((tCubeName'="")&&(tKey'="")) {
						// tKey could be a range of 2 values
						For q = 1:1:$L(tKey,":") {
							Set tfSC = ##class(%DeepSee.Utils).%GetLevelNameForKey(tCubeName,f,$P(tKey,":",q),.tText2)
							If $$$ISOK(tfSC) {
								Set tText = $S(q>1:tText_":"_tText2,1:tText2)
							}
							Quit:q>=2
						}
					}
					ElseIf ((tDS'="")&&(tKey'="")) {
						// get display name for filter key from KPI
						Kill tXFilters
						Set tSC = ##class(%DeepSee.Dashboard.Utils).%GetMembersForFilter(tDS,f,.tXFilters)
						If $$$ISERR(tSC) Quit

						Set a = $O(tXFilters(""))
						While (a'="") {
							If ($LG(tXFilters(a),2)=tKey) {
								Set tText = $LG(tXFilters(a),1)
								Quit
							}
							Set a = $O(tXFilters(a))
						}
					}
					Do tWidget.filterText.SetAt(tText,f)
					Do tWidget.filterDefault.SetAt($G(tFilterDefault(n,f)),f)
					Set f = $O(tFilterSet(n,f))
				}

				// copy saved filters settings into widget
				Set tFSpec = ""
				Set tFValue = tWidgetDef.filterState.GetNext(.tFSpec)
				While (tFSpec '= "") {
					If (tFValue'="") {
						Do tWidget.filterState.SetAt(tFValue,tFSpec)
					}
					Set tFValue = tWidgetDef.filterState.GetNext(.tFSpec)
				}

				Set tKey = tWidget.widgetKey

				// local index of names to keys
				If ((tKey'="")&&(tWidget.name'="")) {
					Set tNameToKey(tWidget.name) = tKey
					Set %tKeyToWidget(tKey) = tWidget
				}
				// index used to point linked widgets to their master
				If ((tKey'="")&&(tWidgetDef.dataLink'="")) {
					Set tLinkList(tKey,tWidgetDef.dataLink) = tWidget
				}

				// create common controls within dashboard itself
				If ($IsObject(tGroup)) {
					Set tSC = ..%CreateControls("dashboard",tWidgetDef.controls,tGroup,tWidget)
					If $$$ISERR(tSC) Quit
				}

				// apply overrides from DBsettings
				If (tKey'="") {
					Set:$G(pDBSettings(tKey,"width"))'="" tWidgetDef.width = $G(pDBSettings(tKey,"width"))
					Set:$G(pDBSettings(tKey,"height"))'="" tWidgetDef.height = $G(pDBSettings(tKey,"height"))
					Set:$G(pDBSettings(tKey,"top"))'="" tWidgetDef.top = $G(pDBSettings(tKey,"top"))
					Set:$G(pDBSettings(tKey,"left"))'="" tWidgetDef.left = $G(pDBSettings(tKey,"left"))

					Set:$G(pDBSettings(tKey,"colSpanL"))'="" tWidgetDef.colSpanL = $G(pDBSettings(tKey,"colSpanL"))
					Set:$G(pDBSettings(tKey,"rowSpanL"))'="" tWidgetDef.rowSpanL = $G(pDBSettings(tKey,"rowSpanL"))
					Set:$G(pDBSettings(tKey,"homeRowL"))'="" tWidgetDef.homeRowL = $G(pDBSettings(tKey,"homeRowL"))
					Set:$G(pDBSettings(tKey,"homeColL"))'="" tWidgetDef.homeColL = $G(pDBSettings(tKey,"homeColL"))
					Set:$G(pDBSettings(tKey,"maximized"))'="" tWidgetDef.maximized = $G(pDBSettings(tKey,"maximized"))
				}

				// JMD1022: set snapGrid dimensions
				If (..dashboardSnapGrid) {
					// JMD1044: use specific properties for snap grid
					Set:tWidgetDef.homeRowL'="" tWidget.homeRow = tWidgetDef.homeRowL
					Set:tWidgetDef.homeColL'="" tWidget.homeCol = tWidgetDef.homeColL
					Set:tWidgetDef.colSpanL'="" tWidget.colSpan = tWidgetDef.colSpanL
					Set:tWidgetDef.rowSpanL'="" tWidget.rowSpan = tWidgetDef.rowSpanL
					Set:tWidgetDef.maximized'="" tWidget.maximized = tWidgetDef.maximized
					Set tMaxRows = 10
					Set tMaxCols = 10
					If (+tWidget.rowSpan<1) { Set tWidget.rowSpan = 1 }
					If (+tWidget.colSpan<1) { Set tWidget.colSpan = 1 }
					If (+tWidget.rowSpan>tMaxRows) { Set tWidget.rowSpan = 1 }
					If (+tWidget.colSpan>tMaxCols) { Set tWidget.colSpan = 1 }
					If (+tWidget.homeRow>tMaxRows) { Set tWidget.homeRow = 0 }
					If (+tWidget.homeCol>tMaxCols) { Set tWidget.homeCol = 0 }
				}
				Else {
					Set:tWidgetDef.width'="" tWidget.width = tWidgetDef.width
					Set:tWidgetDef.height'="" tWidget.height = tWidgetDef.height
					Set:tWidgetDef.width'="" tWidget.enclosingStyle = tWidget.enclosingStyle _ "width:"_tWidgetDef.width_"px;"
					Set:tWidgetDef.height'="" tWidget.enclosingStyle = tWidget.enclosingStyle _ "height:"_tWidgetDef.height_"px;"
					Set:tWidgetDef.top'="" tWidget.enclosingStyle = tWidget.enclosingStyle _ "top:"_tWidgetDef.top_"px;"
					Set:tWidgetDef.left'="" tWidget.enclosingStyle = tWidget.enclosingStyle _ "left:"_tWidgetDef.left_"px;"
					Set:tWidgetDef.maximized'="" tWidget.maximized = tWidgetDef.maximized
				}

				Set tSC = pDesktop.%AddChild(tWidget)
				If $$$ISERR(tSC) Quit
			}
			If $$$ISERR(tSC) Quit

			// creates links for linked widgets
			Set tKey = $O(tLinkList(""))
			While (tKey'="") {
				Set tName = $O(tLinkList(tKey,""))
				While (tName'="") {
					Set tSlave = tLinkList(tKey,tName)
					Set tMasterKey = $G(tNameToKey(tName))
					Set tSlave.linkWidgetKey = tMasterKey
					Set tName = $O(tLinkList(tKey,tName))
				}
				Set tKey = $O(tLinkList(tKey))
			}

			// apply filter values
			For n = 1:1:tWidgetCount {
				Set tWidget = $G(tWidgetList(n))
				If $IsObject(tWidget) {
					// if there are saved filter values, make sure they are applied
					Set tSC = tWidget.%ApplyFilters()
					If $$$ISERR(tSC) Quit
				}
			}
		}
		If $$$ISERR(tSC) Quit
		
		Set tSC = ..%OnCreateWidgets(pDashboard,pDesktop)
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Kill %tKeyToWidget
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnCreateWidgets">
<Description><![CDATA[
Nofication that <method>%CreateWidgets</method> was called.]]></Description>
<FormalSpec>pDashboard:%DeepSee.Dashboard.Definition,pDesktop:%ZEN.Component.desktop</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%CreateControls">
<Description><![CDATA[
Utility method. Create a set of controls from the given list and add them to the given group.
<var>pWidget</var> is the name of the widget the controls are in.<br/>
If <var>pWhich</var> is "dashboard", then add the controls to the dashboard.<br/>]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWhich:%String,pControls:%ListOfObjects,pGroup:%ZEN.Component.group,pWidget:%DeepSee.Component.Widget.widget=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tIsDBViewer = 0

		// Copy over relevant portion of dbsettings
		If ($IsObject($G(%page))&&(%page.%IsA("%DeepSee.UserPortal.DashboardViewer"))) {
			Merge tDBSettings = %page.dbsettings("controls")
			Set tIsDBViewer = 1
		}

		Set tPlaceOnWidget = (pWhich="widget")
		Set tDataSource = ""
		If ($IsObject(pWidget) && $IsObject(pWidget.%definition)) {
			Set tDataSource = pWidget.%definition.%GetDataSource()
		}

		// Get extension
		Set tDataSourceType = $$$LOWER($P(tDataSource,".",$L(tDataSource,".")))
		If ((tDataSourceType = "kpi")||(tDataSourceType = "metric")||(tDataSourceType = "worksheet")) {
			If (tDataSourceType = "kpi") {
				Set tName = $P(tDataSource,".",1,$L(tDataSource,".")-1)
				Set tKPIClass = ##class(%DeepSee.Utils).%GetKPIClass(tName)
			}
			ElseIf (tDataSourceType = "worksheet") {
				Set tKPIClass = "%DeepSee.KPIWorksheet"
			}
			Else {
				Set tKPIClass = "Ens.BusinessMetricKPI"
			}
			If (tKPIClass'="") {
				// get list of filters to see which allow multi-select
				Set tSC = $zobjclassmethod(tKPIClass,"%GetFilterList",.tFilterList)
				If $$$ISERR(tSC) Quit
				Set k = $O(tFilterList(""))
				While (k'="") {
					Set tFilterName = $LG(tFilterList(k),1)
					Set tMulti = +$LG(tFilterList(k),4)
					Set tFilterMulti(tFilterName) = tMulti
					Set k = $O(tFilterList(k))
				}
			}
		}

		If ($IsObject(pControls)) {
			// add controls to the group
			Set tControlCount = pControls.Count()
			For n = 1:1:tControlCount {
				Set tControlDef = pControls.GetAt(n)
				Set tDefaultValue = tControlDef.value
				Set:tControlDef.location="" tControlDef.location = "widget" // default

				If (tControlDef.location="click") {
					If $IsObject(pWidget) {
						Do pWidget.clickTargets.Insert(tControlDef.target)
						Do pWidget.clickActions.Insert(tControlDef.action)
						Do pWidget.clickTargetProperties.Insert(tControlDef.targetProperty)
					}
					Continue
				}

				Set tHidden = 0
				If (tPlaceOnWidget && (tControlDef.location'="widget")) {
					Continue
				}
				ElseIf ('tPlaceOnWidget && (tControlDef.location'="dashboard")) {
					Continue
				}

				// determine action and control type: apply defaults
				Set tAction = tControlDef.action
				Set:tAction="" tAction = "applyFilter"
				Set tType = tControlDef.type
				Set:tType="" tControlType = "auto"
				Set tLabel = tControlDef.label
				Set tLabelIcon = ""
				// JMD1118
				Set tTitle = ##class(%DeepSee.UserPortal.Utils).%ResolveText(tControlDef.title)
				Set tControlSize = tControlDef.size
				Set tControlReadOnly = tControlDef.readOnly

				If ($E(tLabel) = "@") {
					// name starting with "@" is name of user-defined icon
					Set tLabelIcon = ##class(%DeepSee.UserPortal.Utils).%GetUserIcon($E(tLabel,2,$L(tLabel)))
					Set tLabel = ""
				}
				Else {
					// JMD1118 localize label
					Set tLabel = ##class(%DeepSee.UserPortal.Utils).%ResolveText(tLabel)
				}

				Set tControl = ""
				Set tControlType = "select"
				Set tValueList = ""
				Set tDisplayList = ""
				Set tMultiSelect = 1

				If (tHidden) {
					Set tControlType = "hidden"
				}
				ElseIf (tType = "custom") {
					Set tControlType = "custom"
				}
				ElseIf (tType = "timer") {
					Set tControlType = "timer"
				}
				ElseIf (tType = "hidden") {
					Set tControlType = "hidden"
				}
				ElseIf (tType = "auto") {
					If (tAction = "applyFilter") {
						If ((tDataSourceType'="kpi")&&(tDataSourceType'="metric")&&(tDataSourceType'="worksheet")) {
							Set tControlType = "searchBox"
						}
						Else {
							Set tControlType = "searchBox"
							Set:tControlDef.targetProperty'="" tMultiSelect = $G(tFilterMulti(tControlDef.targetProperty))
						}
					}
					ElseIf (tAction = "setFilter") {
						If ((tDataSourceType'="kpi")&&(tDataSourceType'="metric")&&(tDataSourceType'="worksheet")) {
							Set tControlType = "searchBox"
						}
						Else {
							Set tControlType = "searchBox"
							Set:tControlDef.targetProperty'="" tMultiSelect = $G(tFilterMulti(tControlDef.targetProperty))
						}
					}
					Else {
						Set tControlType = "button"
					}
				}
				ElseIf (tType = "button") {
					Set tControlType = "button"
				}
				ElseIf (tType = "dropdown") {
					Set tControlType = "select"
				}
				ElseIf (tType = "searchBox") {
					Set tControlType = "searchBox"
				}

				// pivot attributes override other settings
				If ((tAction = "setRowCount")||(tAction = "setColumnCount")) {
					If (tType = "dropdown") {
						Set tControlType = "select"
						Set tNums = "1,3,5,10,15,20,25,50,100"
						Set tValueList = ","_tNums
						Set tDisplayList = $$$Text("All")_","_tNums
					}
					Else {
						Set tControlType = "text"
						Set:tControlSize="" tControlSize = 3
					}
				}
				ElseIf ((tAction = "setRowSort")||(tAction = "setColumnSort")) {
					Set tControlType = "select"
					Set tValueList = ",BDESC,BASC"
					Set tDisplayList = $$$Text("Sort,Decreasing,Increasing")
				}

				// create control
				If (tControlType = "custom") {
					Set tClassName = "%ZEN.Component.text"
					If (tControlDef.controlClass '= "") {
						Set tClassName = tControlDef.controlClass
						If (tClassName'[".") {
							Set tClassName = "%ZEN.Component." _ tClassName
						}
					}
					Set tControl = $zobjclassmethod(tClassName,"%New")
					Set tControlType = $S(tControl.%IsA("%ZEN.Component.button"):"button",1:"text")
				}
				ElseIf (tControlType = "timer") {
					Set tClassName = "%ZEN.Component.timer"
					Set tControl = $zobjclassmethod(tClassName,"%New")
					Set tControl.timeout = tControlDef.timeout * 1000
					If ($IsObject(pWidget) && pWidget.previewMode) {
						Set tControl.timeout = 0
					}
				}
				ElseIf (tControlType = "hidden") {
					Set tControl = ##class(%ZEN.Component.hidden).%New()
					If (tControlDef.controlKey'="") {
						If $D(tDBSettings(tControlDef.controlKey,"value")) {
							Set tDefaultValue = $G(tDBSettings(tControlDef.controlKey,"value"))
						}
					}
				}
				ElseIf (tControlType = "text") {
					Set tControl = ##class(%ZEN.Component.text).%New()
					If (tControlDef.controlKey'="") {
						If $D(tDBSettings(tControlDef.controlKey,"value")) {
							Set tDefaultValue = $G(tDBSettings(tControlDef.controlKey,"value"))
						}
					}
					Set tControl.readOnly = tControlReadOnly
					If ($IsObject(pWidget) && pWidget.previewMode) {
						Set tControl.readOnly = 1
					}
				}
				ElseIf (tControlType = "select") {
					Set:tValueList="" tValueList = tControlDef.valueList
					Set:tDisplayList="" tDisplayList = tControlDef.displayList
					Set tDefaultFilterValue = ""

					If (((tAction="applyFilter")||(tAction="setFilter"))&&(tValueList="")) {
						/* get drop down list from data source */
						Set tValueList = ""
						Set tDisplayList = ""

						Kill tFilters
						Set tSC = ##class(%DeepSee.Dashboard.Utils).%GetMembersForFilter(tDataSource,tControlDef.targetProperty,.tFilters,.tDefaultFilterValue)
						If $$$ISERR(tSC) Quit

						Set a = $O(tFilters(""))
						While (a'="") {
							Set tDisplayList = tDisplayList _ $S(tDisplayList="":"",1:",") _ $Replace($LG(tFilters(a),1),",","\,")
							Set tVal = $LG(tFilters(a),2)
							Set tValueList = tValueList _ $S(tValueList="":"",1:",") _ $Replace(tVal,",","\,")
							Set a = $O(tFilters(a))
						}
						Set:tDisplayList'="" tDisplayList = ","_tDisplayList
						Set:tValueList'="" tValueList = ","_tValueList
					}
					
					Set tControl = ##class(%ZEN.Component.select).%New()
					Set tControl.showEmpty = 0
					Set tControl.valueList = tValueList
					Set tControl.displayList = tDisplayList
					Set tControl.readOnly = tControlReadOnly
					If (tControlDef.controlKey'="") {
						If $D(tDBSettings(tControlDef.controlKey,"value")) {
							Set tDefaultValue = $G(tDBSettings(tControlDef.controlKey,"value"))
						}
					}
					Set:tDefaultValue="" tDefaultValue = tDefaultFilterValue
				}
				ElseIf (tControlType = "searchBox") {
					Set tDefaultFilterValue = ""

					Set tControl = ##class(%DeepSee.Component.searchBox).%New()
					Set tControl.editable = 1
					Set tControl.size = 10	// may get overridden below
					Set tControl.multiSelect = tMultiSelect
					Set tControl.dataSourceName = tDataSource
					Set tControl.filterName = tControlDef.targetProperty
					Set tControl.readOnly = tControlReadOnly
					
					// JMD900 !!! notify on kpi !!!
					If ($IsObject(pWidget) && (tDataSourceType'="XXXkpi") && (tDataSourceType'="metric") && (tDataSourceType'="worksheet")) {
						Set tControl.onshowdropdown = "zenPage.filterDropDown(zenThis,'"_$ZCVT(pWidget.widgetKey,"O","JS")_"','"_$ZCVT(tDataSource,"O","JS")_"');"
					}
					If ($IsObject(pWidget) && pWidget.previewMode) {
						Set tControl.previewMode = 1
					}

					If ($IsObject(pWidget) && (tControlDef.targetProperty'="")) {
						Set tDefaultValue = pWidget.filterState.GetAt(tControlDef.targetProperty)
					}

					If (tControlDef.controlKey'="") {
						If $D(tDBSettings(tControlDef.controlKey,"value")) {
							Set tDefaultValue = $G(tDBSettings(tControlDef.controlKey,"value"))
						}
					}

					Set:tDefaultValue="" tDefaultValue = tDefaultFilterValue
				}
				Else {
					// button
					Set tIcon = ""
					If (tLabelIcon '= "") {
						Set tIcon = tLabelIcon
					}
					ElseIf (tLabel = "") {
						// use image, if possible
						Set tIcon = $Case(tControlDef.action,
							"refresh":"deepsee/ds2_refresh_44.png",
							"reloadDashboard":"deepsee/ds2_house_44.png",
							"showGeoListing":"deepsee/ds2_planet_44.png",
							"showListing":"deepsee/ds2_glasses_44.png",
							"showIKnowMsrValue":"deepsee/ds2_radar_24.png",
							"showBreakdown":"deepsee/ds2_stats_44.png",:"")
					}
					If (tIcon '= "") {
						Set tControl = ##class(%ZEN.Component.image).%New()
						Set tControlType = "image"
						Set tControl.src = tIcon
					}
					Else {
						Set tControl = ##class(%ZEN.Component.button).%New()
						Set tControl.controlClass = "dsActionButton"
						Set tControlType = "button"
						If ($IsObject(pWidget) && pWidget.previewMode) {
							Set tControl.disabled = 1
						}
					}
				}

				If $IsObject(tControl) {
					// stash key in aux property
					Set tControl.aux = tControlDef.controlKey

					// stash activeWhen info
					If (tIsDBViewer && (tControlDef.activeWhen'="")) {
						Do %page.activeWhenArray.SetAt(tControlDef.activeWhen,tControlDef.controlKey)
					}

					// apply size, if applicable
					If ((tControlSize'="")&&(tControl.%IsA("%ZEN.Component.text"))) {
						Set tControl.size = tControlSize
					}
					ElseIf ((tControlSize'="")&&(tControl.%IsA("%ZEN.Component.select"))) {
						Set tControl.controlStyle = tControl.controlStyle _ "width:"_tControlSize_"em;"
					}

					// add event handler
					Set tTarget = tControlDef.target
					Set tTargetProperty = tControlDef.targetProperty
					If ((tTarget = "")&&$IsObject(pWidget)) {
						// connect to containing widget
						Set tTarget = pWidget.name
					}
					// use dataBinding to track which action/target this control is bound to
					// map all filters to "filter"
					Set tBindType = $Case(tAction,"applyFilter":"filter","setFilter":"filter",:tAction)
					If (tControl.%IsA("%ZEN.Component.control")) {
						Set tControl.dataBinding = tBindType _ "/" _ tTargetProperty
					}
					Else {
						Set tControl.aux = tBindType _ "/" _ tTargetProperty
					}

					If (pWidget.previewMode) {
						Set tCode = ""
					}
					Else {
						Set tCode = "zenPage.dashboardEventHandler(zenPage.findWidgetByKey("_pWidget.widgetKey_"),'control',zenThis,'"_tAction_"','"_$ZCVT(tTarget,"O","JS")_"','"_$ZCVT(tTargetProperty,"O","JS")_"');"
					}
					If ((tControlType = "button")||(tControlType = "image")) {
						Set tControl.onclick = tCode
					}
					ElseIf (tControlType = "timer") {
						Set tControl.ontimeout = tCode
					}
					ElseIf (tControlType '= "hidden") {
						Set tControl.onchange = tCode
					}

					If (pWhich="widget") {
						Set tControl.id = pWidget.id _ "/control/"_$S(tControlDef.name="":n,1:tControlDef.name)
					}
					Else {
						Set tControl.id = "control/"_$S(tControlDef.name="":n,1:tControlDef.name)_"/"_pWidget.id
					}
					If (tControlType = "button") {
						Set tControl.caption = tLabel
					}
					ElseIf ((tControlType = "text")||(tControlType = "select")||(tControlType = "searchBox")) {
						Set tControl.label = tLabel
					}

					// if label is an icon; create an image for it
					If ((tLabelIcon '= "")&&(tControlType '= "image")) {
						Set tIconControl = ##class(%ZEN.Component.image).%New()
						Set tIconControl.src = tLabelIcon
						Set tIconControl.title = tTitle
						Set tSC = pGroup.%AddChild(tIconControl)
						If $$$ISERR(tSC) Quit
					}

					If (tControl.%IsA("%ZEN.Component.control")) {
						Set tControl.value = tDefaultValue
						Set tControl.name = tControlDef.action
						Set tControl.title = tTitle
					}
					Set tSC = pGroup.%AddChild(tControl)
					If $$$ISERR(tSC) Quit

					// register control index with widget
					If ($IsObject(pWidget)) {
						Do pWidget.controlIndices.Insert(tControl.index)
					}
				}
				If $$$ISERR(tSC) Quit
			}
		}
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnCreateControls">
<Description><![CDATA[
Nofication that <method>CreateControls</method> was called.]]></Description>
<FormalSpec>pDashboard:%DeepSee.Dashboard.Definition,pGroup:%ZEN.Component.group</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetTitle">
<Description>
Get the (localized) title string for the page.
This should be implemented in a subclass.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $$$Text("DeepSee Dashboard")
]]></Implementation>
</Method>

<Method name="%OnGetPageName">
<Description>
Get the (localized) name of the page.
This should be implemented in a subclass.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $$$Text("DeepSee Dashboard")
]]></Implementation>
</Method>

<Method name="onAdjustSizes">
<Description>
Adjust sizes of content area.</Description>
<FormalSpec>load,contentWidth,contentHeight</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		if (load) {
			if ('' !==this.alertId) {
				// show alert info
				zenPage.setWorklistView('worklistDiv1','alertInfo','html');
			}
		}
		zenModalBackground = 'none';
		var desktopGroup = zen('desktopGroup');
		if (desktopGroup) {
			var desktopGroupDiv = desktopGroup.getEnclosingDiv();
			desktopGroupDiv.style.height = contentHeight + 'px';
			desktopGroupDiv.style.width = contentWidth + 'px';
		}

		var desktop = zen('desktop');
		if (desktop) {
			var desktopDiv = desktop.getEnclosingDiv();
			desktopDiv.style.height = contentHeight + 'px';
			desktopDiv.style.width = contentWidth + 'px';

			// set size of corkboard
			if (desktopDiv.firstChild) {
				desktopDiv.firstChild.style.position = 'relative';
				desktopDiv.firstChild.style.top = '0px';
				desktopDiv.firstChild.style.left = '0px';
			
				desktopDiv.firstChild.style.height = contentHeight + 'px';
				desktopDiv.firstChild.style.width = contentWidth + 'px';

				// JMD1053 force resize of desktop
				var mgr = desktopDiv.firstChild.engine;
				if (mgr && mgr.resize) {
					mgr.resize();
				}
			}
			
			if (desktop.forceRefresh) {
				desktop.forceRefresh();
			}
		}
		self.document.body.style.visibility = 'visible';

		// set maximized state of widget, if needed
		if (desktop) {
			for (var n = 0; n < desktop.children.length; n++) {
				var widget = desktop.children[n];
				if (widget && widget.maximize && widget.maximized) {
					// only one gets maximized
					widget.maximize(null);
					break;
				}
			}

			if (desktop.broadcast) {
				desktop.broadcast('resize');
			}
		}
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in onAdjustSizes');
	}
]]></Implementation>
</Method>

<Method name="getSlaveList">
<Description>
For the given widget, return a list of all widgets linked to it.</Description>
<Internal>1</Internal>
<FormalSpec>masterWidget</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var slaveList = new Array();
	var desktop = zen('desktop');
	if (masterWidget && desktop) {
		for (var n = 0; n < desktop.children.length; n++) {
			var widget = desktop.children[n];
			if (widget && widget.controlEventHandler && widget.linkWidgetKey==masterWidget.widgetKey) {
				slaveList[slaveList.length] = widget;
			}
		}
	}
	return slaveList;
]]></Implementation>
</Method>

<Method name="dashboardEventHandler">
<Description><![CDATA[
Central handler for control events on this dashboard.
This is called whenever a control is modified (or otherwise activated).
This is also called when a widget raises an event.<br/>
<var>sourceWidget</var> is the widget that raised the event.<br/>
<var>which</var> is either 'control' for controls or 'click' for click on widget element.
Return true if the event was handled.]]></Description>
<FormalSpec>sourceWidget,which,control,action,target,targetProperty</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var value = '';
	var text = '';	// sometimes there is a display value to pass along
	this._sourceControl = null;
	if ('control'==which) {
		// *control* is the control that fired the event
		value = (control && control.getValue) ? control.getValue() : '';
		text = (control && null!=control.text) ? control.text : value;
		// make this control available to widgets
		this._sourceControl = control;
	}
	else if ('click'==which) {
		// *control* is the value of the event
		value = control;
	}

	if (this.trace) {
		alert('Dashboard event dispatch:\n' + '\nWhich: '+ which + '\nAction: '+ action + '\nTarget: '+ target + '\nTargetProperty: '+ targetProperty + '\nValue: ' + value);
	}

	// loop over widgets; these are the children of the desktop.
	// split apart list of targets
	// build list of target widgets
	var widgetList = new Array();
	var targetList = target.toString().split(',');
	for (var t = 0; t < targetList.length; t++) {
		var targetVal = targetList[t];
		var targets = 0;
		var desktop = zen('desktop');
		if (desktop) {
			for (var n = 0; n < desktop.children.length; n++) {
				var widget = desktop.children[n];
				
				// JMD1021 sync max state of widget
				if (widget) {
					widget.maximized = widget.getEnclosingDiv().maximized ? true : false; 
				}
				
				if (widget && (widget.name==targetVal||targetVal=='*') && widget.controlEventHandler) {
					widgetList[widgetList.length] = widget;
					targets++;
				}
			}
			if (targets==0) {
				// notify user that nothing happened
				var msg = $$$FormatText($$$Text('No widget with the name \'%1\' was found so this action was not processed.'),targetVal);
				alert(msg);
				return false;
			}
		}
	}

	// invoke actions; check for dashboard-wide actions
	switch(action) {
	case 'newWindow':
	case 'navigate':
	case 'alert':
	case 'popup':
		var url = targetProperty;
		// apply substitutions to url
		// $$$VALUELIST = list of values for selected rows
		// $$$LISTINGIDS (deprecated-- use $$$VALUELIST)
		// $$$CURRVALUE = current value of widget (i.e., selected row)
		// $$$FILTERS = current value of widget filters: "filter:value~filter:value"

		// get subst values from first target widget
		if (widgetList[0]) {
			if (url.indexOf('$$$CURRVALUE')!=-1) {
				var CURRVALUE = widgetList[0].getParameterValue('CURRVALUE');
				url = url.replace(/\$\$\$CURRVALUE/g,CURRVALUE);
			}

			if (url.indexOf('$$$VALUELIST')!=-1) {
				var VALUELIST = widgetList[0].getParameterValue('VALUELIST');
				url = url.replace(/\$\$\$VALUELIST/g,VALUELIST);
			}

			if (url.indexOf('$$$LISTINGIDS')!=-1) {
				var VALUELIST = widgetList[0].getParameterValue('VALUELIST');
				url = url.replace(/\$\$\$LISTINGIDS/g,VALUELIST);
			}

			if (url.indexOf('$$$FILTERS')!=-1) {
				var FILTERS = widgetList[0].getParameterValue('FILTERS');
				url = url.replace(/\$\$\$FILTERS/g,FILTERS);
			}
		}

		if ('navigate' == action) {
			zenPage.gotoPage(url);
		}
		else if ('newWindow' == action) {
			window.open(url,"_blank");
		}
		else if ('alert' == action) {
			// JMD1051
			alert(t.join(':'));
		}
		else if ('popup' == action) {
			// JMD1063
			zenLaunchPopupWindow(url,'ActionPopup','status,scrollbars,resizable=yes,width=800,height=600');
		}
		break;

	case 'viewDashboard':
		var url = this.viewerURL;
		if (''!=targetProperty) {
			url = url + ((url.indexOf('?')!=-1) ? '&' : '?') + 'DASHBOARD=' + encodeURIComponent(targetProperty);
		}
		zenPage.gotoPage(url);
		break;
	default:
		for (var n = 0; n < widgetList.length; n++) {
			widgetList[n].controlEventHandler(which,action,targetProperty,value,text);
		}
		break;
	}

	this._sourceControl = null;

	if (control && 'timer' == control._type) {
		// restart timer
		control.startTimer();
	}
	return true;
]]></Implementation>
</Method>

<Method name="dispatchAction">
<Description><![CDATA[
Dispatch the given action to all widgets in the list <var>target</var>.
<var>currWidget</var> is the current widget (used to resolve empty target names).]]></Description>
<Internal>1</Internal>
<FormalSpec>which,currWidget,target,action,targetProperty,value,text</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	text = ('undefined' == typeof text) ? '' : text;
	// loop over widgets; children of desktop
	var desktop = zen('desktop');
	if (desktop) {
		// split apart list of targets
		var targetList = target.toString().split(',');
		for (var t = 0; t < targetList.length; t++) {
			var targetVal = targetList[t];
			var targets = 0;
			for (var n = 0; n < desktop.children.length; n++) {
				var widget = desktop.children[n];
				if (widget && widget.controlEventHandler && 
					((widget.name==targetVal)||(targetVal=='*')||(targetVal===''&&widget==currWidget))) {
					widget.controlEventHandler(which,action,targetProperty,value,text);
					targets++;
				}
			}
			if (targets==0) {
				// notify user that nothing happened
				var msg = 'No widget with the name \'' + targetVal + '\' was found so this action was not processed.';
				alert(msg);
			}
		}
	}
]]></Implementation>
</Method>

<Method name="actionHandler">
<Description>
This handles any actions that were not handled by the widgets on the dashboard.
This is done by sending the event to the server-side dataSource.</Description>
<FormalSpec>widget,dataSource,action</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// fill in context object to send data to server
	var context = new zenProxy();
	context.command = '';
	context.textList = '';
	context.value = '';

	context.currSeriesNo = widget.currSeriesNo;
	context.currItemNo = widget.currItemNo;
	context.currValue = widget.currValue;
	context.currValueName = widget.currValueName;
	context.valueList = widget.getParameterValue('VALUELIST');

	// JMD: additional context to recreate MDX statement
	var dc = widget.getDataController();
	context.cubeName = dc.cubeName ? dc.cubeName : '';
	context.mdx = dc.currentQueryText ? dc.currentQueryText : '';

	var msg = this.SendActionToDataSource(dataSource,action,context);

	if ('' != msg) {
		alert(msg);
	}
	else {
		// test for commands from server
		// a command string takes the form:
		// command:target:value;command:target:value;
		// there may be a parallel structure called textList which contains
		// the *text* values for filter values in the command list!

		var textList = context.textList.toString().split(';');

		var commandString = context.command.toString();
		// look for \; escapes
		commandString = commandString.replace(/\\;/g,'\x07');

		var commands = commandString.split(';');
		for (var c = 0; c < commands.length; c++) {
			// unescape \;
			var txt = commands[c].replace(/\x07/g,';');
			var t = txt.split(':');
			var command = t[0];
			t.splice(0,1);

			if (''!==command) {
				// invoke actions
				switch(command) {
				case 'setFilter':
				case 'applyFilter':
					// command:target:filterProp:value;
					var target = t[0] ? t[0] : '';
					t.splice(0,1);
					var filterProp = t[0] ? t[0] : '';
					t.splice(0,1);
					var value = t.join(':');
					var text = textList[c] ? textList[c] : value;
					this.dispatchAction('action',widget,target,command,filterProp,value,text);
					break;

				case 'refresh':
					// command:target;
					var target = t.join(':');
					this.dispatchAction('action',widget,target,command,'','');
					break;
				case 'navigate':
					// command:url;
					var url = t.join(':');
					zenPage.navigate(url);
					break;
				case 'newWindow':
					// command:url;
					var url = t.join(':');
					window.open(url);
					break;
				case 'alert':
					// JMD1051
					alert(t.join(':'));
					break;
				case 'popup':
					// JMD1063
					var url = t.join(':');
					zenLaunchPopupWindow(url,'ActionPopup','status,scrollbars,resizable=yes,width=800,height=600');
					break;
				case '':
					break;
				default:
					alert('Unrecognized action command: ' + command);
					break;
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="SendActionToDataSource">
<Description><![CDATA[
Dispatch DataSource Action back to server-side class.<br/>
<var>pContext</var> is a proxy object that carries the server action back to the client.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataSource:%String,pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tMsg = ""
	Set tSC = $$$OK
	Try {
		#; dispatch to datasource
		If (pDataSource'="") {
			Set tExt = $P(pDataSource,".",$L(pDataSource,"."))
			If (tExt = "kpi") {
				Set tName = $P(pDataSource,".",1,$L(pDataSource,".")-1)
				Set tKPIClass = ##class(%DeepSee.Utils).%GetKPIClass(tName)
				If (tKPIClass'="") {
					Set tSC = $zobjclassmethod(tKPIClass,"%InvokeDashboardAction",pAction,pContext,pDataSource)
					If $$$ISERR(tSC) Quit
				}
			}
			ElseIf (tExt = "worksheet") {
				Set tKPIClass = "%DeepSee.KPIWorksheet"
				Set tSC = $zobjclassmethod(tKPIClass,"%InvokeDashboardAction",pAction,pContext,pDataSource)
				If $$$ISERR(tSC) Quit
			}
			ElseIf (tExt = "metric") {
				Set tKPIClass = "Ens.BusinessMetricKPI"
				Set tSC = $zobjclassmethod(tKPIClass,"%InvokeDashboardAction",pAction,pContext,pDataSource)
				If $$$ISERR(tSC) Quit
			}
			ElseIf (tExt = "pivot") {
				// dispatch to KPI associated with cube
				Set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pDataSource,.tSC)
				If '$IsObject(tPivot) {
					Quit
				}

				Set tCube = tPivot.%GetCubeName()
				Set tActionClass = ##class(%DeepSee.Utils).%GetCubeActionClass(tCube)
				If (tActionClass'="") {
					Set tSC = $zobjclassmethod(tActionClass,"%InvokeDashboardAction",pAction,pContext)
					If $$$ISERR(tSC) Quit
				}
			}

			// get text value for filters, if possible
			Set tCommand = pContext.command
			Set tTextList = ""
			For p = 1:1:$L(tCommand,";") {
				Set tItem = $P(tCommand,";",p)
				Set tItemAction = $P(tItem,":",1)
				If ((tItemAction="applyFilter")||(tItemAction="setFilter")) {
					Set tFilter = $P(tItem,":",3)
					Set tKey = $P(tItem,":",4)
					Set $P(tTextList,",",p) = ..%GetDisplayValue(pDataSource,tFilter,tKey)
				}
			}
			Set:tTextList'="" pContext.textList = tTextList
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<Method name="%GetDisplayValue">
<Description>
Utility method. Find the display method for a given filter value.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataSource:%String,pFilterName:%String,pValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tText = pValue
	Try {
		Set tCubeName = ""

		// what kind of data source is in play?
		If (pDataSource'="") {
			Set tDataSourceName = pDataSource
			If (tDataSourceName'[".") {
	  			Set tDataSourceName=tDataSourceName_".cube"
	  		}
			Set tExt = $P(tDataSourceName,".",$L(tDataSourceName,"."))

			If ((tExt = "pivot")||(tExt = "cube")) {
				If (tExt = "pivot") {
					Set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(tDataSourceName,.tSC)
					If $IsObject(tPivot) {
						Set tCubeName = $$$UPPER(tPivot.%GetCubeName())
					}
				}
				Else {
					Set tCubeName = $$$UPPER($P(tDataSourceName,".",1,$L(tDataSourceName,".")-1))
				}
			}
			ElseIf ((tExt="kpi")||(tExt="metric")||(tExt="worksheet")) {
				If (tExt="kpi") {
					Set tName = $P(tDataSourceName,".",1,$L(tDataSourceName,".")-1)
					Set tKPIClass = ##class(%DeepSee.Utils).%GetKPIClass(tName)
				}
				ElseIf (tExt="worksheet") {
					Set tKPIClass = "%DeepSee.KPIWorksheet"
				}
				Else {
					Set tKPIClass = "Ens.BusinessMetricKPI"
				}
				If (tKPIClass'="") {
					Set tText = $classmethod(tKPIClass,"%GetFilterDisplayValue",pFilterName,pValue)
				}
				Else {
					Set tText = $ZSTRIP(pValue,"<>W")
					If ($E(tText,1,2)="&[") {
						// work-around: take off "&[ ]"
						Set tText = $E(pValue,3,$L(pValue)-1)
					}
				}
			}
		}

		If (tCubeName'="") {
			Set tSC = ##class(%DeepSee.Utils).%GetLevelNameForKey(tCubeName,pFilterName,pValue,.tText)
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
		Set tText = $System.Status.GetOneErrorText(tSC)
	}
	Quit tText
]]></Implementation>
</Method>

<Method name="deleteDashboard">
<Description>
Delete this dashboard.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.isReadOnly()) {
		alert('This dashboard is read only and cannot be modified');
		return;
	}
	if (''!=this.dashboardName) {
		if (confirm('Do you want to delete this dashboard?',false)) {
			var msg = zenPage.SendItemToTrash(this.dashboardName);
			if ('' != msg) {
				alert(msg);
			}
			else {
				zenPage.gotoPage(this.viewerURL);
			}
		}
	}
]]></Implementation>
</Method>

<Method name="openDashboard">
<Description>
Launch the dashboard finder.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenLaunchPopupWindow('_DeepSee.UI.Dialog.finderDialog.zen?MODE=dashboards','DashboardOpen','status,scrollbars,resizable=yes,width=800,height=600');
]]></Implementation>
</Method>

<Method name="newDashboard">
<Description>
Create a new dashboard.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// show save dialog
	var parms = {
			NEW:1,
			DASHBOARD:'',
			TITLE:'',
			WORDS:'',
			DESC:''
			};
	zenLaunchPopupWindow('_DeepSee.UI.Dialog.DashboardSave.zen','DashboardNew','status,scrollbars,resizable=yes,width=700,height=600',parms);
]]></Implementation>
</Method>

<Method name="saveSettings">
<Description>
Save the dashboard settings for the current user (save my settings).</Description>
<FormalSpec>user</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	user = ('undefined' == typeof user) ? '' : user;
	if (''!=this.dashboardName) {
		this.getWidgetLayout();
		var msg = this.SaveDashboardSettings(user);
		if (msg!="") {
			alert(msg);
		}
		zen('clearSettings').setProperty('disabled',false);
	}
]]></Implementation>
</Method>

<Method name="clearSettings">
<Description>
Clear saved dashboard settings.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (''!=this.dashboardName) {
		var msg = this.ClearDashboardSettings();
		if (msg!="") {
			alert(msg);
		}
		this.reloadDashboard();
	}
]]></Implementation>
</Method>

<Method name="saveDashboard">
<Description><![CDATA[
Launch the save dialog.
If <var>show</var> is true, show the dialog.]]></Description>
<FormalSpec>show</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.isReadOnly()) {
		alert($$$Text('This dashboard is read only and cannot be modified.'));
		return;
	}

	this._oldSnapGrid = this.dashboardSnapGrid;
	this._oldSnapTo = this.dashboardSnapTo;
	this._oldName = this.dashboardName;

	this._oldResize = this.dashboardResize;
	this._oldModify = this.dashboardModify;

	this.getWidgetLayout();

	if (show || ('' == this.dashboardName)) {
		// show save dialog
		var parms = {
				DASHBOARD:this.dashboardName,
				TITLE:this.dashboardTitle,
				WORDS:this.dashboardKeywords,
				DESC:this.dashboardDescription,
				OWNER:this.dashboardOwner,
				RESOURCE:this.dashboardResource,
				LAYOUT:this.worklistCount,
				SNAPGRID:this.dashboardSnapGrid?1:0,
				SNAPTO:this.dashboardSnapTo?1:0,
				RESIZE:this.dashboardResize?1:0,
				MODIFY:this.dashboardModify?1:0,
				GRIDROWS:this.dashboardGridRows,
				GRIDCOLS:this.dashboardGridCols,
				LOCKED:this.dashboardLocked?1:0,
				PUBLIC:this.dashboardPublic?1:0
				};
		zenLaunchPopupWindow('_DeepSee.UI.Dialog.DashboardSave.zen','DashboardSave','status,scrollbars,resizable=yes,width=700,height=600',parms);
	}
	else {
		if (this.dashboardLocked) {
			alert($$$Text('This dashboard is locked and cannot be saved without first unlocking it.'));
			return false;
		}
		// save without dialog
		this.onPopupAction('DashboardSave','','');
	}
]]></Implementation>
</Method>

<Method name="saveCopyOfDashboard">
<Description>
Launch the save as dialog.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.isReadOnly()) {
		alert($$$Text('This dashboard is read only and cannot be copied.'));
		return;
	}

	this._oldSnapGrid = this.dashboardSnapGrid;
	this._oldSnapTo = this.dashboardSnapTo;
	this._oldResize = this.dashboardResize;
	this._oldModify = this.dashboardModify;
	this._oldName = this.dashboardName;
	this.getWidgetLayout();

	// show save dialog
	var parms = {
			DASHBOARD:this.dashboardName,
			TITLE:this.dashboardTitle,
			WORDS:this.dashboardKeywords,
			SNAPTO:this.dashboardSnapTo?1:0,
			SNAPGRID:this.dashboardSnapGrid?1:0,
			RESIZE:this.dashboardResize?1:0,
			MODIFY:this.dashboardModify?1:0,
			GRIDROWS:this.dashboardGridRows,
			GRIDCOLS:this.dashboardGridCols,
			LAYOUT:this.worklistCount,
			SAVEAS:1,
			DESC:this.dashboardDescription,
			LOCKED:0
			};
	zenLaunchPopupWindow('_DeepSee.UI.Dialog.DashboardSave.zen','DashboardSaveCopy','status,scrollbars,resizable=yes,width=700,height=600',parms);
]]></Implementation>
</Method>

<Method name="addWidgetFromCatalog">
<Description>
Invoke widget catalog dialog.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (''==this.dashboardName) {
		alert($$$Text('Please save the dashboard before adding widgets to it'));
		return;
	}
	if (this.isReadOnly()||!this.dashboardModify) {
		alert($$$Text('This dashboard is read only and cannot be modified'));
		return;
	}

	this.getWidgetLayout();

	var parms = {
			DASHBOARD:this.dashboardName
			};

	zenLaunchPopupWindow('_DeepSee.UI.Dialog.WidgetCatalog.zen','DashboardAddItemFromCatalog','status,scrollbars,resizable=yes,width=700,height=600',parms);
]]></Implementation>
</Method>

<Method name="addWidget">
<Description>
Invoke dialog to add a new widget to the dashboard.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (''==this.dashboardName) {
		alert($$$Text('Please save the dashboard before adding widgets to it'));
		return;
	}
	if (this.isReadOnly()||!this.dashboardModify) {
		alert($$$Text('This dashboard is read only and cannot be modified'));
		return;
	}

	this.getWidgetLayout();

	// show add item dialog
	var parms = {
			DASHBOARD:this.dashboardName
			};
	zenLaunchPopupWindow('_DeepSee.UI.Dialog.WidgetBuilder.zen','DashboardAddItem','status,scrollbars,resizable=yes,width=1000,height=700',parms);
]]></Implementation>
</Method>

<Method name="editWidget">
<Description>
Invoke dialog to edit a new widget on the dashboard.</Description>
<FormalSpec>key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (''==this.dashboardName) {
		alert($$$Text('Please save the dashboard before editing widgets'));
		return;
	}

	if (this.isReadOnly()||!this.dashboardModify) {
		alert($$$Text('This dashboard is read only and cannot be modified'));
		return;
	}

	this.getWidgetLayout();

	// show add item dialog
	var parms = {
			DASHBOARD:this.dashboardName,
			KEY:key
			};
	zenLaunchPopupWindow('_DeepSee.UI.Dialog.WidgetBuilder.zen','DashboardEditItem','status,scrollbars,resizable=yes,width=1000,height=700',parms);
]]></Implementation>
</Method>

<Method name="showAnalyzerDialog">
<Description>
Invoke dialog-version of Analyzer.</Description>
<Internal>1</Internal>
<FormalSpec>key,datasource,local</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// save current state
	zenPage.saveDashboard(false);

	this._localName = '';
	this._widgetKey = key;

	if (''==local) {
		// create a local name
		var dbname = this.dashboardName.split('.')[0];
		this._localName = '$LOCAL/'+dbname+'/'+this.userName+'/'+key+'.pivot';
	}
	else {
		// use local as actual so that changes are made to it
		datasource = local;
	}

	var filterState = '';
	var widget = this.findWidgetByKey(key);
	if (widget && widget.getFilterState) {
		filterState = widget.getFilterState();
	}

	// show analyzer dialog
	var parms = {
			PIVOT:datasource,
			LOCALNAME:this._localName,
			FILTERSTATE:filterState,
			KEY:key
			};

	zenLaunchPopupWindow('_DeepSee.UI.Dialog.Analyzer.zen','Analyzer','status,scrollbars,resizable=yes,width=1000,height=700',parms);
]]></Implementation>
</Method>

<Method name="SaveDashboardToFolder">
<Description>
Save the dashboard.</Description>
<FormalSpec>pDashboardName:%String,pCreateNew:%Boolean=0,pCreateCopy:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tMsg = ""
	Try {
		Set tDeleteSettings = 0

		// save dashboard
		// pDashboardName is the original name of the dashboard
		If (pCreateCopy) {
			Set tOriginalDashboard = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pDashboardName,.tSC)
			If '$IsObject(tOriginalDashboard) {
				Set tSC = $$$ERROR($$$GeneralError,"Unable to open dashboard: ",pDashboardName)
				Quit
			}

			// test for overwrite
			Set tExists = ##class(%DeepSee.UserLibrary.Utils).%FolderItemExists(..dashboardName)
			If (tExists=2) {
				Set tMsg = $$$Text("Dashboard name is already in use")
				Quit
			}
			ElseIf (tExists=1) {
				Set tMsg = ..SendItemToTrash(..dashboardName)
				If (tMsg'="") Quit
			}

			// new dashboard with current widget list
			Set tDashboard = ##class(%DeepSee.Dashboard.Definition).%New()
			Set tDashboard.widgets = tOriginalDashboard.widgets
			Set tDeleteSettings = 1
		}
		Else {
			Set tDashboard = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pDashboardName,.tSC)
			If (pCreateNew && $IsObject(tDashboard)) {
				// send old version to trash
				Set tMsg = ..SendItemToTrash(pDashboardName)
				If (tMsg'="") Quit
			}
			If '$IsObject(tDashboard) {
				Set tDashboard = ##class(%DeepSee.Dashboard.Definition).%New()
			}
			If $$$ISERR(tSC) Quit
		}

		Set tDashboard.fullName = ..dashboardName
		Set tDashboard.title = ..dashboardTitle
		Set tDashboard.keywords = ..dashboardKeywords
		Set tDashboard.description = ..dashboardDescription
		Set tDashboard.locked = ..dashboardLocked
		Set tDashboard.public = ..dashboardPublic
		Set tDashboard.worklistCount = ..worklistCount
		Set tDashboard.owner = ..dashboardOwner
		Set tDashboard.resource = ..dashboardResource
		Set tDashboard.snapTo = ..dashboardSnapTo
		Set tDashboard.snapGrid = ..dashboardSnapGrid

		Set tDashboard.canModify = ..dashboardModify
		Set tDashboard.canResize = ..dashboardResize
		Set tDashboard.gridRows = ..dashboardGridRows
		Set tDashboard.gridCols = ..dashboardGridCols

		// always delete user settings on save
		Set tDeleteSettings = 1

		If (pCreateNew) {
			Set tDeleteSettings = 1
			Do tDashboard.widgets.Clear()
		}
		Else {
			// get list of widget definitions by key
			For n=1:1:tDashboard.widgets.Count() {
				Set tWidgetDef = tDashboard.widgets.GetAt(n)
				If (tWidgetDef.key'="") {
					Set tWidgetIndex(tWidgetDef.key) = n
				}
			}

			// walk over list of visual widgets
			Set tDesktop = ..%GetComponentById("desktop")
			For n=1:1:tDesktop.children.Count() {
				Set tWidget = tDesktop.children.GetAt(n)
				If (tWidget.%IsA("%DeepSee.Component.Widget.widget")) {
					Set tKey = $P(tWidget.widgetLayout,":",1)
					If (tKey'="") {
						Set tWidgetNo = $G(tWidgetIndex(tKey))
						If (tWidgetNo'="") {
							Set tWidgetDef = tDashboard.widgets.GetAt(tWidgetNo)
							// layout is key:top:left:width:height
							If ($IsObject(tWidgetDef)) {
								If (..dashboardSnapGrid) {
									// JMD1044
									Set tWidgetDef.homeRowL = $P(tWidget.widgetLayout,":",2)
									Set tWidgetDef.homeColL = $P(tWidget.widgetLayout,":",3)
									Set tWidgetDef.colSpanL = $P(tWidget.widgetLayout,":",4)
									Set tWidgetDef.rowSpanL = $P(tWidget.widgetLayout,":",5)
									Set tWidgetDef.maximized = +$P(tWidget.widgetLayout,":",6)
								}
								Else {
									Set tWidgetDef.top = $P(tWidget.widgetLayout,":",2)
									Set tWidgetDef.left = $P(tWidget.widgetLayout,":",3)
									Set tWidgetDef.width = $P(tWidget.widgetLayout,":",4)
									Set tWidgetDef.height = $P(tWidget.widgetLayout,":",5)
									Set tWidgetDef.maximized = +$P(tWidget.widgetLayout,":",6)
								}

								// save filter state for widget
								Do tWidgetDef.filterState.Clear()
								Set tFSpec = ""
								Set tFValue = tWidget.filterState.GetNext(.tFSpec)
								While (tFSpec '= "") {
									Set tDefault = tWidget.filterDefault.GetAt(tFSpec)
									// JMD832: do not save state if it is the same as the default value
									If (tFValue'=tDefault) {
										Do tWidgetDef.filterState.SetAt(tFValue,tFSpec)
									}
									Set tFValue = tWidget.filterState.GetNext(.tFSpec)
								}
							}
						}
						Kill tWidgetIndex(tKey)
					}
				}
			}

			// remove items that have been deleted
			Set tKey = $O(tWidgetIndex(""))
			While (tKey'="") {
				Set tWidgetNo = $G(tWidgetIndex(tKey))
				If (tWidgetNo'="") {
					Set tDeleteSettings = 1
					Do tDashboard.widgets.RemoveAt(tWidgetNo)
				}
				Set tKey = $O(tWidgetIndex(tKey))
			}
		}

		// clear any user settings when we save
		// this prevents old filter values from causing trouble
		// JMD1074 save any localDataSource values!
		If (tDeleteSettings) {
			Set tSC = ##class(%DeepSee.UserPortal.Utils).%ClearDashboardSettings(..dashboardName,,1)
			If $$$ISERR(tSC) Quit
		}

		Set tSC = tDashboard.%Save()
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<Method name="ClearDashboardSettings">
<Description>
Clear settings for the current dashboard.</Description>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tMsg = ""
	Try {
		Set tSC = ##class(%DeepSee.UserPortal.Utils).%ClearDashboardSettings(..dashboardName,$UserName)
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<Method name="SaveDashboardSettings">
<Description>
Save settings for the current dashboard.</Description>
<FormalSpec>pUser:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tMsg = ""
	Try {
		Set tSC = ..%GetDashboardSettings(.tSettings)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%DeepSee.UserPortal.Utils).%SaveDashboardSettings(.tSettings,..dashboardName,pUser)
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<Method name="%GetDashboardSettings">
<Description>
Get array of "dashboard" settings for this dashboard.</Description>
<FormalSpec><![CDATA[&pDBSettings:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Kill pDBSettings
		
		// dashboard-wide settings
		Set pDBSettings("worklistCount") = ..worklistCount

		// walk over list of visual widgets
		Set tDesktop = ..%GetComponentById("desktop")
		For n=1:1:tDesktop.children.Count() {
			Set tWidget = tDesktop.children.GetAt(n)
			If (tWidget.%IsA("%DeepSee.Component.Widget.widget")) {
				Set tKey = tWidget.widgetKey
				If (tKey'="") {
					If (..dashboardSnapGrid) {
						// JMD1044
						Set pDBSettings(tKey,"homeRowL") = $P(tWidget.widgetLayout,":",2)
						Set pDBSettings(tKey,"homeColL") = $P(tWidget.widgetLayout,":",3)
						Set pDBSettings(tKey,"colSpanL") = $P(tWidget.widgetLayout,":",4)
						Set pDBSettings(tKey,"rowSpanL") = $P(tWidget.widgetLayout,":",5)
						Set pDBSettings(tKey,"maximized") = +$P(tWidget.widgetLayout,":",6)
					}
					Else {
						Set pDBSettings(tKey,"top") = $P(tWidget.widgetLayout,":",2)
						Set pDBSettings(tKey,"left") = $P(tWidget.widgetLayout,":",3)
						Set pDBSettings(tKey,"width") = $P(tWidget.widgetLayout,":",4)
						Set pDBSettings(tKey,"height") = $P(tWidget.widgetLayout,":",5)
						Set pDBSettings(tKey,"maximized") = +$P(tWidget.widgetLayout,":",6)
					}

					// JMD1074 If localDataSource exists; get it
					If (..dashboardName'="") {
						Set tLocalDataSource = $G(^DeepSee.DashboardSettings(..dashboardName,$UserName,tKey,"localDataSource"))
					}

					Kill tWidgetSettings
					Set tSC = tWidget.%GetWidgetSettings(.tWidgetSettings)
					If $$$ISERR(tSC) Quit
					Merge pDBSettings(tKey) = tWidgetSettings
					
					// JMD1074 reapply
					If ($G(tLocalDataSource)'="") {
						Set pDBSettings(tKey,"localDataSource") = tLocalDataSource
					}
				}
			}
		}
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="SaveWidget">
<Description>
Change the datasource for one widget and save it to local settings.</Description>
<FormalSpec>pWidgetKey:%String,pLocalDataSource:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tMsg = ""
	Try {
		// JMD1074
		If (pLocalDataSource="") {
			Kill ^DeepSee.DashboardSettings(..dashboardName,$UserName,pWidgetKey,"localDataSource")
		}
		Else {
			Set ^DeepSee.DashboardSettings(..dashboardName,$UserName,pWidgetKey,"localDataSource") = pLocalDataSource
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<Method name="onPopupAction">
<Description>
This client event is fired when the a popup page launched from this page fires an action.</Description>
<FormalSpec>popupName,action,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(popupName) {
	case 'DashboardEditItem':
	case 'DashboardAddItemFromCatalog':
	case 'DashboardAddItem':
		// redisplay with new widget
		self.document.location.reload();
		break;

	case 'DashboardOpen':
		var url = this.viewerURL;
		url = url + ((url.indexOf('?')!=-1) ? '&' : '?') + 'DASHBOARD=' + encodeURIComponent(value);
		zenPage.gotoPage(url);
		break;

	case 'DashboardNew':
	case 'DashboardSave':
	case 'DashboardSaveCopy':
		// JMD1022 Get up-to-date size info
		this.getWidgetLayout();
		var create = (popupName=='DashboardNew') ? 1 : 0;
		var copy = (popupName=='DashboardSaveCopy') ? 1 : 0;
		if (create) {
			var name = this.dashboardName;
		}
		else {
			var name = this._oldName ? this._oldName : '';
		}
		var msg = this.SaveDashboardToFolder(name,create,copy);
		if (msg!="") {
			alert(msg);
		}
		else if ((popupName=='DashboardNew') || (this._oldName != this.dashboardName)) {
			// saved with new name
			var url = this.viewerURL;
			url = url + ((url.indexOf('?')!=-1) ? '&' : '?') + 'DASHBOARD=' + encodeURIComponent(this.dashboardName);
			zenPage.gotoPage(url);
		}
		else if ((this._oldSnapTo != this.dashboardSnapTo)||(this._oldSnapGrid != this.dashboardSnapGrid)||(this._oldModify != this.dashboardModify)||(this._oldResize != this.dashboardResize)) {
			// change of snapTo et al requires reload
			var url = this.viewerURL;
			url = url + ((url.indexOf('?')!=-1) ? '&' : '?') + 'DASHBOARD=' + encodeURIComponent(this.dashboardName);
			zenPage.gotoPage(url);
		}
		else {
			this.setGridRows(this.dashboardGridRows);
			this.setGridColumns(this.dashboardGridCols);
			this.updateWorklistTitle();
			this.adjustSizes(false);
		}
		break;
	case 'Analyzer':
		if (value) {
			// reset
			var msg = this.SaveWidget(this._widgetKey,'');
			if (msg!="") {
				alert(msg);
			}
		}
		else if ('' != this._localName) {
			// save widget with new local dataSource name
			var msg = this.SaveWidget(this._widgetKey,this._localName);
			if (msg!="") {
				alert(msg);
			}
		}

		this._localName = '';
		this._widgetKey = '';

		// redisplay with new data
		self.document.location.reload();
		break;
	}
]]></Implementation>
</Method>

<Method name="findWidgetByKey">
<Description>
Find a widget given its key.</Description>
<Internal>1</Internal>
<FormalSpec>key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var currWidget = null;
	var desktop = zen('desktop');
	var currWidget = null;
	if (desktop) {
		for (var n = 0; n < desktop.children.length; n++) {
			var widget = desktop.children[n];
			if (widget && key==widget.widgetKey) {
				currWidget = widget;
				break;
			}
		}
	}
	return currWidget;
]]></Implementation>
</Method>

<Method name="updateWorklistTitle">
<Description>
Update the title for the dashboard.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = zen('worklistTitle');
	var content = new Array();

	if ('' == this.dashboardName) {
		content[content.length] = '<div class="dbTitle">' + 'New Dashboard' + '</div>';
		self.document.title = 'New Dashboard';
	}
	else {
		// get short name
		var s = this.dashboardName.toString().split('.');
		// var t = s[s.length-1].toString().split('.');
		var name = s[0];
		if (this.dashboardTitleLocal && this.dashboardTitleLocal!=this.dashboardTitle) {
			// don't show name if localized
			name = '';
		}
		content[content.length] = '<div class="dbName">' + name + '</div>';
		content[content.length] = '<div class="dbTitle">' + this.dashboardTitleLocal + '</div>';

		// set title in browser as well
		self.document.title = ''==this.dashboardTitleLocal ? name : this.dashboardTitleLocal;
		if (this.isReadOnly()) {
			self.document.title += ' ['+$$$Text('Read only')+']';
		}
	}

	html.setContent(content.join(''));
]]></Implementation>
</Method>

<Method name="getWidgetLayout">
<Description>
Get the current size and position of each widget and place it within the widget.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var desktop = zen('desktop');
	if (desktop) {
		var adj = zenPage.dashboardSnapTo ? 1.1 : 1.0;
		if (this.dashboardSnapGrid) {
			adj = 1.0;
		}

		for (var n = 0; n < desktop.children.length; n++) {
			var widget = desktop.children[n];
			if (widget) {
				var div = widget.getEnclosingDiv();
				if (div) {
					var max = div.maximized ? 1 : 0;
					// JMD1022 Get snap grid info
					if (this.dashboardSnapGrid) {
						var state = widget.widgetKey;
						if (div.oRefL) {
							var oref = div.oRefL;
							// JM1053
							var top = isNaN(oref.top) ? 0 : oref.top;
							var left = isNaN(oref.left) ? 0 : oref.left;
							var wid = isNaN(oref.width) ? 1 : oref.width;
							var hgt = isNaN(oref.height) ? 1 : oref.height;
							state = widget.widgetKey + ":" + top + ":" + left + ":" + wid + ":" + hgt + ":" + max;
						}
					}
					else {
						var state = widget.widgetKey + ":" + (div.offsetTop*adj) + ":" + div.offsetLeft + ":" + div.offsetWidth + ":" + div.offsetHeight + ":" + max;
					}
					widget.widgetLayout = state;
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="addThisToFavorites">
<Description>
Add this dashboard to the favorites list.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (''==this.dashboardName) {
		alert($$$Text('Please save the dashboard first'));
		return;
	}
	zenPage.AddFavorite(this.dashboardName);
	zenPage.updateWorklistType('favorites');
]]></Implementation>
</Method>

<Method name="gotoAnalyzer">
<Description>
Show the analyzer page.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.gotoPage('_DeepSee.UserPortal.Analyzer.zen');
]]></Implementation>
</Method>

<Method name="drillDown">
<Description>
Execute a drill down for the given widget.</Description>
<FormalSpec>widget,dataSource</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var t = dataSource.toString().split('.');
	var ext = t[t.length-1];
	switch(ext) {
	case 'dashboard':
		// view new page
		var url = this.viewerURL;
		url = url + ((url.indexOf('?')!=-1) ? '&' : '?') + 'DASHBOARD=' + encodeURIComponent(dataSource);

		// pick up filters from widget
		var rowSpec = widget.getParameterValue('ROWSPEC');
		var colSpec = widget.getParameterValue('COLUMNSPEC');

		// Build settings list (escape ; and ~ !!!)
		var filters="";
		if ('' != rowSpec) {
			filters += encodeURIComponent(rowSpec);
		}
		if ('' != colSpec) {
			filters += (filters!=''?'~':'') + encodeURIComponent(colSpec);
		}

		if (''!=filters) {
			url += '&SETTINGS=FILTER:' + filters+';';
		}

		zenPage.gotoPage(url);
		break;
	default:
		// send back to widget
		widget.executeDrillDown(dataSource);
		break;
	}
]]></Implementation>
</Method>

<Method name="isReadOnly">
<Description>
Test if this page is in read only mode.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this.readOnly;
]]></Implementation>
</Method>

<Method name="filterDropDown">
<Description>
Drop down is about to appear for searchBox control.</Description>
<FormalSpec>ctrl,widgetKey,dataSource</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		var widget = zenPage.findWidgetByKey(widgetKey);
		if (!widget) return;

		var t = dataSource.toString().split('.');
		var isKPI = (t[t.length-1]=='kpi');

		// get list of current filter values for same data source
		var specList = [];
		var keyList = [];

		var pivot = widget.getDataController();
		// JMD1008 Test if this is a pivot!
		if (pivot && pivot.filters) {
			for (var n = 0; n < pivot.filters.length; n++) {
				var filter = pivot.filters[n];
				if (filter && filter.key != '') {
					var spec = filter.spec;
					if (spec.toUpperCase().indexOf(ctrl.filterName.toUpperCase())==-1) {
						specList[specList.length] = spec;
						if (isKPI) {
							// JMD900: we need the key for KPI filters
							// in MDX filters, the key is part of the spec [A].&[key]
							keyList[keyList.length] = filter.key;
						}
					}
				}
				else if (!isKPI && filter && filter.spec != '') {
					// JMD947: use advanced filters for restriction
					var spec = filter.spec.toString();
					while (spec.charCodeAt(spec.length-1)==10) {
						spec = spec.substr(0,spec.length-1);
					}
					if ((spec[0]=='{' && spec[spec.length-1]=='}')||(spec[spec.length-1]==')')) {
						specList[specList.length] = spec;
						keyList[keyList.length] = '';
					}
				}
			}
		}

		ctrl.relatedFilterSpecs = specList;
		ctrl.relatedFilterKeys = keyList;
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in filterDropDown');
	}
	return true;
]]></Implementation>
</Method>

<Method name="%ParseFilterSpec">
<Description><![CDATA[
Utility method.<br/>
Pull apart a filter spec, as we may get from a URL, into a spec and key or value:<br/>
[Outlet].[Country].[France] ==> "[Outlet].[Country]","[France]"<br/>
{[HOMED].[H1].[ZIP].[32006],[HOMED].[H1].[ZIP].[32007]} ==> "[HOMED].[H1].[ZIP]","{&[32006],&[32007]}" <br/>
Note that an array of results is returned. If the spec contains a tuple, each piece is
put into its own array node (pIndex is used to track how many pieces there are).<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pSpec:%String,*pFSpec:%String,*pFKey:%String,*pFValue:%String,&pIndex:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// for now, assume last piece is value
	Set:pIndex=0 pIndex = 1
	Set pSpec = $ZSTRIP(pSpec,"<>W")
	Set pFSpec(pIndex) = pSpec // default
	Set pFValue(pIndex) = ""
	Set pFKey(pIndex) = ""

	// test for {} sets
	// these are ORs and are assumed to be based on the same levels
	If ($E(pSpec,1)="{") {
		Set pSpec = $E(pSpec,2,$L(pSpec)-1)
		// n.b. commas must be escaped as ,,
		Set tSpec = $Replace(pSpec,",,",$C(1))
		For n = 1:1:$L(tSpec,",") {
			Set tItem = $P(tSpec,",",n)
			Set tItem = $Replace(tItem,$C(1),",,")
			Kill tFSpec,tFKey,tFValue
			Set tSC = ..%ParseFilterSpec(tItem,.tFSpec,.tFKey,.tFValue,.pIndex)
			If (n=1) {
				Set pFSpec(pIndex) = $G(tFSpec(1))
			}
			// JMD1122
			// Set pFKey(pIndex) = pFKey(pIndex) _ $S(pFKey(pIndex)="":"",1:",") _ "&["_$S($G(tFKey(1))'="":$G(tFKey(1)),1:$G(tFValue(1)))_"]"
			If ($G(tFKey(1))'="") {
				Set pFKey(pIndex) = pFKey(pIndex) _ $S(pFKey(pIndex)="":"",1:",") _ $G(tFKey(1))
			}
			ElseIf ($G(tFValue(1))'="") {
				Set pFValue(pIndex) = pFValue(pIndex) _ $S(pFValue(pIndex)="":"",1:",") _ $G(tFValue(1))
			}
		}
		Set:$G(pFKey(pIndex))'="" pFKey(pIndex) = "{"_pFKey(pIndex)_"}"
		// JMD1122
		Set:$G(pFValue(pIndex))'="" pFValue(pIndex) = "{"_pFValue(pIndex)_"}"
		Quit tSC
	}

	// test for () tuples
	// these are split into separate filters
	If ($E(pSpec,1)="(") {
		Set pSpec = $E(pSpec,2,$L(pSpec)-1)
		// n.b. commas must be escaped as ,,
		Set tSpec = $Replace(pSpec,",,",$C(1))
		For n = 1:1:$L(tSpec,",") {
			Set tItem = $P(tSpec,",",n)
			Set tItem = $Replace(tItem,$C(1),",,")
			Kill tFSpec,tFKey,tFValue
			Set tSC = ..%ParseFilterSpec(tItem,.tFSpec,.tFKey,.tFValue,.pIndex)
			Set k = $O(tFSpec(""))
			While (k'="") {
				Set pFSpec(pIndex) = $G(tFSpec(k))
				Set pFKey(pIndex) = $G(tFKey(k))
				Set pFValue(pIndex) = $G(tFValue(k))
				Set pIndex = pIndex + 1
				Set k = $O(tFSpec(k))
			}
		}
		Quit tSC
	}

	Set tState = 0
	Set p = $L(pSpec)

	// work backwards!
	While (p > 0) {
		Set ch = $E(pSpec,p)
		If (tState = 0) {
			If (ch = "]") {
				Set tState = 1
			}
			Else {
				Set tState = 4
			}
		}
		ElseIf(tState = 1) {
			// ]
			If (ch = "[") {
				Set tState = 2
			}
		}
		ElseIf(tState = 2) {
			// []
			If (ch = ".") {
				Set pFSpec(pIndex) = $E(pSpec,1,p-1)
				Set pFValue(pIndex) = $E(pSpec,p+2,$L(pSpec)-1)		// remove []
				Quit
			}
			ElseIf (ch="&") {
				Set tState = 3
			}
		}
		ElseIf(tState = 3) {
			// &[]
			If (ch = ".") {
				Set pFSpec(pIndex) = $E(pSpec,1,p-1)
				Set pFKey(pIndex) = $E(pSpec,p+1,$L(pSpec))
				Quit
			}
			// JMD1122
			ElseIf(ch=",") {
				Set tState = 0
			}
		}
		ElseIf(tState = 4) {
			// JMD1122
			If (ch = "]") {
				Set tState = 1
			}
			ElseIf (ch = ".") {
				Set pFSpec(pIndex) = $E(pSpec,1,p-1)
				Set pFValue(pIndex) = $E(pSpec,p+1,$L(pSpec))
				Quit
			}
		}
		Set p = p - 1
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="mailDashboard">
<Description>
email this dashboard.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (''==this.dashboardName) {
		alert($$$Text('Please save this dashboard before mailing it'));
		return;
	}

	// save settings using nonce
	var nonce = Math.floor(Math.random()*10000000000);
	this.saveSettings(nonce);

	var url = self.document.location.href.split('?')[0];
	url = url + '?DASHBOARD='+encodeURIComponent(this.dashboardName)+'&NONCE='+nonce;

	var title = this.dashboardTitle==''?$$$Text('DeepSee Dashboard'):this.dashboardTitle;

	this.sendMail(url,title);
]]></Implementation>
</Method>

<Method name="reloadDashboard">
<Description>
Reload the dashboard (show current saved state)</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	self.document.location.reload();
]]></Implementation>
</Method>

<Method name="GetDimensionInfo">
<Description>
Provide contents of the dimension tree.
Used by pivot widget.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRoot:%String,*pTree,&pParms]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tDataSource = $G(pParms("DataSource"))
		Set tMemberSource = $G(pParms("MemberSource"))

		If (tMemberSource'="") {
			// get values from member source
			// !!!
			Set tDataSource = "Test/ValueList.worksheet"
			Set tSC = ##class(%DeepSee.AbstractKPI).%GetKPIValueArray(tMemberSource,.tValues,$LB("Name","Value","Group"))
			If $$$ISERR(tSC) Quit

			// organize into groups
			Set tGroupCount = 0
			Set k = $O(tValues(""))
			While (k'="") {
				Set tGroup = $LG(tValues(k),3)
				Set:tGroup="" tGroup = "*"
				If '$D(tGroups(tGroup),tGroupId) {
					Set tGroups(tGroup) = k
					Set tGroupId = k
					Set:tGroup'="*" tGroupCount = tGroupCount + 1
				}
				Set tGroupList(tGroupId,k) = k
				Set k = $O(tValues(k))
			}		

			// emit tree
			Set g = $O(tGroupList(""))
			While (g'="") {
				Set k = $O(tGroupList(g,""))
				If (tGroupCount = 0) {
					Set tParent = 0
				}
				ElseIf (k'="") {
					Set tGroup = $LG(tValues(k),3)
					Set:tGroup="" tGroup = $$$Text("Other","%DeepSee")
					Set pTree($I(pTree)) = $LB(tGroup,"",1,"")
					Set pTree(0,"ch",pTree) = ""
					Set tParent = pTree
				}
				While (k'="") {
					Set tName = $LG(tValues(k),1)
					Set tValue = $LG(tValues(k),2)
					If (tName'="") {
						Set pTree($I(pTree)) = $LB(tName,tValue,0,"")
						Set pTree(tParent,"ch",pTree) = ""
					}
					Set k = $O(tGroupList(g,k))
				}
				Set g = $O(tGroupList(g))
			}
		}
		ElseIf(tDataSource'="") {
			// use primary data source (if pivot)
			Set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(tDataSource,.tSC)
			If $$$ISERR(tSC) Quit
			If $IsObject(tPivot)&&(tPivot.%IsA("%DeepSee.Dashboard.Pivot")) {
				// get local calc members
				For n = 1:1:tPivot.calculatedMembers.Count() {
					Set tCalcMbr = tPivot.calculatedMembers.GetAt(n)
					If ((tCalcMbr.dimension'="")&&(tCalcMbr.memberName'="")) {
						Set tCalcMbrs($$$UPPER(tCalcMbr.dimension),$$$UPPER(tCalcMbr.memberName)) = $LB(tCalcMbr.dimension,tCalcMbr.memberName,tCalcMbr.valueExpression)
					}
				}
				// skip measures (arg 4)
				Set tSC = ##class(%DeepSee.Utils).%GetMemberTree(tPivot.cubeName,.pTree,,1,pRoot,.tCalcMbrs,.tNamedSets)
				If $$$ISERR(tSC) Quit
			}
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="widgetClosing">
<Description>
Notification that this widget is being closed.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert($$$Text("This widget is hidden. To permanently delete it, save the dashboard."))
]]></Implementation>
</Method>

<Method name="invokeAdjustSizes">
<Description><![CDATA[
Raise the resize method for all widgets except <var>skip</var>.]]></Description>
<Internal>1</Internal>
<FormalSpec>skip</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		// JMD859
		var desktop = zen('desktop');
		if (desktop) {
			for (var n = 0; n < desktop.children.length; n++) {
				var widget = desktop.children[n];
				if (widget && widget!=skip && widget.adjustSizes) {
					widget.adjustSizes(false);
				}
			}
		}
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in invokeAdjustSizes');
	}
]]></Implementation>
</Method>

<Method name="navGetContentForLevel">
<Description>
Return an object describing what to display for this level within the navigator.</Description>
<FormalSpec>level,key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var title = level==0 ? 'Options' : key;
	var content = { title: title, items:[] };
	var widget = this.getCurrWidget();

	switch (key) {
	case '':
		// root
		content.items[content.items.length] = {display:'caption', caption:$$$Text('Dashboard Settings'), action:'drill', key:'DashboardSettings'};
		if (this.dashboardSnapGrid) {
			content.items[content.items.length] = {display:'caption', caption:$$$Text('Widget Settings'), action:'drill', key:'WidgetSettings'};
		}
		break;

	case 'DashboardSettings':
		content.items[content.items.length] = {display:'caption-value-hz', caption:'Work Lists', edit:'choice', value:zenGet(zenPage.worklistCount),		key:'worklistCount', valueList:'0,1,2', displayList:'None,1,2'};
		if (this.dashboardSnapGrid) {
			content.items[content.items.length] = {display:'caption-value-hz', caption:'Resize', edit:'switch', value:zenGet(zenPage.dashboardResize),		key:'dashboardResize' };
			content.items[content.items.length] = {display:'caption-value-hz', caption:'Grid Rows', edit:'stepper-value', value:zenPage.getGridRows(),			key:'gridRows', minValue:1, maxValue:10};
			content.items[content.items.length] = {display:'caption-value-hz', caption:'Grid Columns', edit:'stepper-value', value:zenPage.getGridColumns(),	key:'gridColumns', minValue:1, maxValue:10};
		}
		break;

	case 'WidgetSettings':
		// dispatch to widget
		var widget = this.getCurrWidget();
		if (widget && widget.navGetContentForLevel) {
			content = widget.navGetContentForLevel(level,key);
		}
		else {
			content.html = '<div style="padding:10px;font-size:20px;">' + $$$Text('No widget selected') + '</div>';
		}
		break;
	}

	return content;
]]></Implementation>
</Method>

<Method name="navDataChange">
<Description>
Change of data value in navigator.</Description>
<FormalSpec>key,value,final</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (key.toString().indexOf('widget-')==0) {
		var widget = this.getCurrWidget();
		if (widget && widget.navDataChange) {
			widget.navDataChange(key,value,final);
		}
		return;
	}

	switch(key) {
	case 'worklistCount':
		this.setProperty(key,value);
		break;

	case 'dashboardResize':
		this.setProperty(key,value);
		break;

	case 'gridRows':
		if (final) {
			this.setGridRows(parseInt(value));
		}
		break;
	case 'gridColumns':
		if (final) {
			this.setGridColumns(parseInt(value));
		}
		break;
	}
]]></Implementation>
</Method>

<Method name="navSelectItem">
<Description>
Select of item within the navigator.</Description>
<FormalSpec>key,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var nav = this.getNavigator();
	nav.setExpanded(false);
	nav.popSheet();
]]></Implementation>
</Method>

<Method name="setGridRows">
<Description>
Set number of grid rows in the desktop.</Description>
<FormalSpec>rows</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.dashboardGridRows = parseInt(rows);
	if (this.dashboardSnapGrid) {
		var desktop = zen('desktop');
		if (desktop) {
			if (desktop.rows!=rows) {
				desktop.setProperty('rows',rows);
				this.showCurrentGrid();
			}
		}
	}
]]></Implementation>
</Method>

<Method name="setGridColumns">
<Description>
Set number of grid columns in the desktop.</Description>
<FormalSpec>cols</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.dashboardGridCols = parseInt(cols);
	if (this.dashboardSnapGrid) {
		var desktop = zen('desktop');
		if (desktop) {
			if (desktop.cols!=cols) {
				desktop.setProperty('cols',cols);
				this.showCurrentGrid();
			}
		}
	}
]]></Implementation>
</Method>

<Method name="getGridRows">
<Description>
Number of grid rows in the desktop.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var rows = 1;
	if (this.dashboardSnapGrid) {
		var desktop = zen('desktop');
		if (desktop) {
			rows = desktop.rows;
		}
	}
	return rows;
]]></Implementation>
</Method>

<Method name="getGridColumns">
<Description>
Number of grid columns in the desktop.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var cols = 1;
	if (this.dashboardSnapGrid) {
		var desktop = zen('desktop');
		if (desktop) {
			cols = desktop.cols;
		}
	}
	return cols;
]]></Implementation>
</Method>

<Method name="widgetSelected">
<Description>
User has selected a widget on the dashboard.</Description>
<FormalSpec>key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.currWidgetKey != key) {
		if (this.currWidgetKey!='') {
			widget = this.findWidgetByKey(this.currWidgetKey);
			if (widget && widget.setHighlight) {
				widget.setHighlight(false);
			}
		}
		this.currWidgetKey = key;
		if (this.currWidgetKey!='') {
			widget = this.findWidgetByKey(this.currWidgetKey);
			if (widget && widget.setHighlight) {
				widget.setHighlight(true);
			}

			// update navigator just in case
			var nav = this.getNavigator();
			if (nav) {
				nav.refreshTopSheet();
			}
			this.showCurrentGrid();
		}
	}
]]></Implementation>
</Method>

<Method name="getCurrWidget">
<Description>
If there is a selected widget, return it.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var widget = null;
	if (this.currWidgetKey!='') {
		widget = this.findWidgetByKey(this.currWidgetKey);
	}
	return widget;
]]></Implementation>
</Method>

<Method name="setProperty">
<Description><![CDATA[
Set the value of a named property.<br>]]></Description>
<FormalSpec>property,value,value2</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(property) {
	case 'dashboardResize':
		this.dashboardResize = value ? true : false;
		var desktop = zen('desktop');
		if (desktop && desktop.broadcast) {
			// !!! move as well???
			desktop.broadcast(this.dashboardResize ? 'enableResize' : 'disableResize');
			//desktop.broadcast(this.dashboardResize ? 'restoreDragHeader' : 'removeDragHeader');
		}
		break;

	default:
		// dispatch
		return this.invokeSuper('setProperty',arguments);
	}
	return true;
]]></Implementation>
</Method>

<Method name="showCurrentGrid">
<Description>
Make a poor man's grid to show the drop zones and add it to the wallpaper</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var desktop = zen("desktop");
	if (desktop && desktop._type=='snapGrid') {
		var r = parseInt(desktop.rows);
		var c = parseInt(desktop.cols);
		var vPercent = 100/r;
		var hPercent = 100/c;
		var h = [];
		for (var i=1;i<r;i++) {
			h.push("<div style='width:100%;height:1px;position:absolute;top:"+(vPercent*i)+"%;left:0px;background:rgba(128,128,128,0.25);'></div>");
		}
		for (var i=1;i<c;i++) { 
			h.push("<div style='height:100%;width:1px;position:absolute;left:"+(hPercent*i)+"%;top:0px;background:rgba(128,128,128,0.25);'></div>");
		}
		var m = desktop.getGroupManager();
		var w = m.getWallpaperDiv();
		w.innerHTML = h.join(" ");
	}
]]></Implementation>
</Method>
</Class>
</Export>
