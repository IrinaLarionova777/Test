<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.BI.UI.PageTemplate">
<Super>TCLEx.BI.UI.Page</Super>
<TimeCreated>62927,56796.227134</TimeCreated>

<XData name="Contents">
<Description>
The contents of these panes are provided by subclasses.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page id="pg" height="100%" 
enclosingClass="height over" 
groupClass="width height" 
xmlns="http://www.intersystems.com/zen" 
xmlns:BiRLab="ZenExt"
dragAndDrop="true"
>

<menu id="locator" layout="horizontal">
</menu>

<pane paneName="formPane"  groupClass="width height"/>

</page>
]]></Data>
</XData>

<Method name="%OnAddToPageAfter">
<Description>
If implemented, this callback method is called at page render-time
after this component has been added to a page and after any of its children
have been created but before the %DrawHTML methods are called.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..BuildMenu(%page)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="BuildMenu">
<ClassMethod>1</ClassMethod>
<FormalSpec>Page</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim locator as %ZEN.Component.menu
	set locator = Page.%GetComponentById("locator")
	
	//set idRole = ##class(BiRLab.CT.Users).SessionUserId()
	//set idRole = ##class(BiRLab.CT.Users).%OpenId(idRole).UserRole.Code
	set ref = ##class(TCLEx.BI.UI.PageTemplate).GetBufMenuTree()
	
	set sc = ..GetMenu(ref)
	do ##class(TCLEx.BI.UI.PageTemplate).AddMenuItem(Page,$na(@ref),locator)
		
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetMenu">
<ClassMethod>1</ClassMethod>
<FormalSpec>ref</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill @ref
	set @ref=$lb("","mainmenu","")	
	// Настройка безопасности
	set val = $$$Text("@biSecurityTune@Настройка безопасности")
	set val1 = $$$Text("@biCTaccessTrakReport@Права на отчеты Trak")
	set val2 = $$$Text("@biCTaccessDeepSeeReport@Права на отчеты DeepSee")
	
	set @ref@("1_biSecurityTune")=$lb(val,"submenu","")
	set @ref@("1_biSecurityTune",1)=$LB(val1,"","TCLEx.BI.SetPermissionReportTrak.cls")
	set @ref@("1_biSecurityTune",2)=$LB(val2,"","TCLEx.BI.SetPermissionReportDeepSee.cls")
	
	// Настройка принтеров
	set val = $$$Text("@biPrinterTune@Настройка принтеров")
	set val1 = $$$Text("@biBindClientPrinter@Привязка принтера к компьютеру")
		
	set @ref@("2_biPrinterTune")=$lb(val,"submenu","")
	set @ref@("2_biPrinterTune",1)=$LB(val1,"","TCLEx.UI.ClientNodePrinter.cls")
	
	// Отчеты DeepSee
	set @ref@("3_biUserPortal")=$lb($$$Text("@biUserPortal@Отчеты DeepSee"),"","TCLEx.BI.UI.UserPortal.Home.cls?$NAMESPACE="_$zu(5))
	
	/// выход
	set val = $$$Text("@mnExit@Выход")
	set @ref@("4_biExit")=$lb($$$Text("@biExit@Выход"),"","TCLEx.BI.UI.Logout.cls")

	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AddMenuItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>Page,pRef,pParent=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set list = $G(@pRef)
	set code = $LG(list,2)
	set name = $LG(list,1)
	set zenpage = $LG(list,3)
	//s ^test("menu2",$i(^test("menu2")))=pRef_" "_pParent_" "_code_" "_name
	if code="separator" {
		set menu = ##class(%ZEN.Component.menuSeparator).%New()
		;s ^tmp(pUz)=pParent
		set menu.parent = pParent
		do pParent.%AddChild(menu)
		Do Page.%AddComponent(menu)	
		quit $$$OK
	}
	if code="submenu" {
		set menu = ##class(%ZEN.Component.menu).%New()
		set menu.caption = name
		set menu.layout = "vertical"
		set menu.parent = pParent
		do pParent.%AddChild(menu)
		Do Page.%AddComponent(menu)	
		set node = ""
		for {
			set node = $O(@pRef@(node)) if node="" quit	
			do ##class(TCLEx.BI.UI.PageTemplate).AddMenuItem(Page,$na(@pRef@(node)),menu)
		}
	} elseif code="mainmenu" {
		set node = ""
		for {
			set node = $O(@pRef@(node)) if node="" quit	
			do ##class(TCLEx.BI.UI.PageTemplate).AddMenuItem(Page,$na(@pRef@(node)),pParent)
		}
	} else {
		set menu = ##class(%ZEN.Component.menuItem).%New()
		set menu.caption = name
		set menu.link = zenpage
		//set menu.image = img
		set menu.parent = pParent
		do pParent.%AddChild(menu)
		Do Page.%AddComponent(menu)	
	}	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetBufMenuTree">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUz="MenuTree"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $NA(^CacheTemp(%session.SessionId,pUz))
]]></Implementation>
</Method>

<Method name="SelectedStudies">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set id = ##class(BiRLab.CT.Users).SessionUserId()
	do ##class(BiRLab.UI.PageTemplate).SetBlankSession("Favorites",id)
	&js<top.location='BiRLab.UI.selectedStudies.cls'>
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SetBlankSession">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMode,pId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %session.Data("Blank","Mode")=pMode
	set %session.Data("Blank","Id")=pId
	quit $$$OK
]]></Implementation>
</Method>

<Method name="NextOrder">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClear</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set free = ##class(BiRLab.CT.Roles).IsFree()
	set show = 0
	if free set show = 1
	do ##class(BiRLab.UI.Pattern.WebReg).NextOrder(pClear,show)
]]></Implementation>
</Method>

<Method name="onkeydownHandler">
<Description>
This client event, if present, is fired when a keydown event occurs on the page.</Description>
<FormalSpec>evt</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var cancelEvent=false;
	if (zenIsIE){
	     srcElement = event.srcElement;
	} else { // for Mozilla
	     event=evt;
	     srcElement = evt.target;
	}

	//alert(srcElement.tagName+'!'+event.keyCode)
	if (srcElement.tagName=="INPUT") {
		srcElement.value= srcElement.value.toUpperCase()
	     //srcElement.shiftKey=1
	}
	if (cancelEvent) {
		if (event.preventDefault) {
			event.preventDefault();
		}
		event.cancelBubble = true;
	}
]]></Implementation>
</Method>

<XData name="Style">
<Description>
Default style for Zen pages</Description>
<Data><![CDATA[
<style type="text/css">
/* @doc="Style applied to body of page." */
body {
	margin: 0px;
	overflow: auto;
}
#locator {
    background: none repeat scroll 0 0 #6D84B4;
    border: 1px solid darkblue;
    padding: 0;
}
#pg {
	overflow: auto;
}
#zenMouseTrap {
	position: absolute;
	width: 100%;
	height: 100%;
	z-index: 1;
	background: transparent;
}

/* @doc="Style applied to wrapper around SVG frames." */
.svgFrame {
	border: 1px black solid;
	background: white;
}

</style>
]]></Data>
</XData>
</Class>
</Export>
