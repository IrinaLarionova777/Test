<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.BI.BuildIndices">
<Super>%RegisteredObject</Super>
<TimeCreated>62880,70341.112081</TimeCreated>

<Method name="UpdateCubes">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set cubeepis="lab.EPVisitNumber"
		set cubeepisBI=$piece(cubeepis,".",2) //"TCBI.Cubes.EPVisitNumber"
		
		set cubetestset="lab.EPVisitTestSet"
		set cubetestsetBI=$piece(cubetestset,".",2) //"TCBI.Cubes.EPVisitTestSet"
		
		set cubetestsetdata="lab.EPVisitTestSetData"
		set cubetestsetdataBI=$piece(cubetestsetdata,".",2) //"TCBI.Cubes.EPVisitTestSetData"
		
		set cubetestsetqueue="lab.EPVisitTestSetQueue"
		set cubetestsetqueueBI=$piece(cubetestsetqueue,".",2) //"TCBI.Cubes.EPVisitTestSetQueue"
		
		// создаем буфер эпизодов, по которым будем пересчитывать все кубы
		//(TCBI.Cubes.EPVisitNumber,TCBI.Cubes.EPVisitTestSet,TCBI.Cubes.EPVisitTestSetQueue,TCBI.Cubes.EPVisitTestSetData)
		set ok=..CreateBufferEpisodes($na(^||bufRecountEpis))
		if 'ok {
			do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:CreateBufferEpisodes")
		}
 
        if '$data(^||bufRecountEpis) quit
        
        // Пересчитываем кубы
        set ok=..RebuildCubes($na(^||bufRecountEpis))
        if 'ok {
			do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:RebuildCubes")
		}
    } catch(exception) {
	       set ok=exception.AsStatus()
	       do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:UpdateCubes")  
    }   
  quit ok
]]></Implementation>
</Method>

<Method name="CreateBufferEpisodes">
<Description>
создаем буфер эпизодов, по которым будем пересчитывать кубы
(TCBI.Cubes.EPVisitNumber,TCBI.Cubes.EPVisitTestSet,TCBI.Cubes.EPVisitTestSetQueue,TCBI.Cubes.EPVisitTestSetData)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pBuffer:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		kill @pBuffer
		// идем по ^SpeedI.DeltaP(cubeepis)
		set epis=""
        for {
	        set epis=$order(^SpeedI.DeltaP(cubeepis,epis)) if epis="" quit
	        set @pBuffer@(epis)=""
        }
        // идем по ^SpeedI.DeltaP(cubetestset)
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(cubetestset,id)) if id="" quit
	        set epis=$piece(id,"||",1) if epis="" continue
	        if '$data(@pBuffer@(epis)) set @pBuffer@(epis)=""
        }
        // идем по ^SpeedI.DeltaP(cubetestsetdata)
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(cubetestsetdata,id)) if id="" quit
	        set epis=$piece(id,"||",1) if epis="" continue
	        if '$data(@pBuffer@(epis)) set @pBuffer@(epis)=""
        }
        // идем по ^SpeedI.DeltaP(cubetestsetqueue)
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(cubetestsetqueue,id)) if id="" quit
	        set epis=$piece(id,"||",1) if epis="" continue
	        if '$data(@pBuffer@(epis)) set @pBuffer@(epis)=""
        }
        
        // идем по ^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt")
        // все изменения. которые делаются в классах BiRLab, взводят флаги в ^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt")
        set class="TCLEx.Data.EPVisitNumberExt"
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(class,id)) if id="" quit
	        set epis=id
	        set flagRecalcPrice=$select($get(^SpeedI.DeltaP(class,id,"flagRecalcPrice"))=1:1,1:0)
	        if '$data(@pBuffer@(epis))||(flagRecalcPrice=1) set @pBuffer@(epis)=flagRecalcPrice
        }
	} catch(e) { set ok=e.AsStatus() }
	quit ok
]]></Implementation>
</Method>

<Method name="RebuildCubes">
<Description>
// Пересчет кубов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pBuffer:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok1=$$$OK
	try {
		set epis=""
        for {
	        set epis=$order(@pBuffer@(epis),1,flagRecalcPrice) if epis="" quit
	        if flagRecalcPrice="" set flagRecalcPrice=0
	        // пересчитываем сначала цены, код плательщика и т д, если надо
	        set ok=##class(TCLEx.BI.BuildIndices).CreateEPVisitTestSetExt(epis,flagRecalcPrice)
	        if 'ok {
		        do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:CreateEPVisitTestSetExt: episode="_$get(epis))
	        }
	        
	        // EPVisitNumber
	        set vals=$get(^SpeedI.DeltaP(cubeepis,epis))
	        if vals="" set vals=1
	        set ok=0
	        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubeepisBI,epis)
		    }
		    if vals=0  {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cubeepisBI,epis)
		    } 
		    if ok {
			    kill ^SpeedI.DeltaP(cubeepis,epis)
		    } 
		    else  {
			    do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:Update cube "_$get(cubeepisBI)_", episode="_$get(epis))
		    }
	        
	        if 'ok continue
	        
	        // EPVisitTestSet удаление
	        set id=epis
	        for {
		        set id=$order(^SpeedI.DeltaP(cubetestset,id),1,vals) if (id="")||($piece(id,"||",1)'=epis) quit
		        if vals'=0 continue
		        set ok=0
		        set ok=##class(%DeepSee.Utils).%DeleteFact(cubetestsetBI,id)
		        if ok {
			        kill ^SpeedI.DeltaP(cubetestset,id)
		        }
		        else  {
			        do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:Delete cube "_$get(cubetestsetBI)_", id="_$get(id))
		        }
            }
	        
	        // EPVisitTestSet (пересчет куба для всех наборов тестов в данном эпизоде
	        set ts=""
	        for {
		        set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
		        set tscnt=""
		        for {
			        set tscnt=$order(^TEPI(epis,1,ts,tscnt)) if tscnt="" quit
			        set id=epis_"||"_ts_"||"_tscnt
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubetestsetBI,id)
			        if ok {
				        kill ^SpeedI.DeltaP(cubetestset,id) 
			        }
		            else  {
			            do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:Update cube "_$get(cubetestsetBI)_", id="_$get(id))
		            }
		        }
	        }
	        
	        // EPVisitTestSetQueue 
	        set id=epis
	        for {
		        set id=$order(^SpeedI.DeltaP(cubetestsetqueue,id),1,vals) if (id="")||($piece(id,"||",1)'=epis) quit
		        
		        set ok=0
		        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubetestsetqueueBI,id)
		        } 
		        elseif vals=0 {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cubetestsetqueueBI,id)
			    }    
		        if ok {
			        kill ^SpeedI.DeltaP(cubetestsetqueue,id)
		        }
		        else  {
			        do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:Update cube "_$get(cubetestsetqueueBI)_", id="_$get(id))
		        }
            }
	        
	        // EPVisitTestSetData 
	        set id=epis
	        for {
		        set id=$order(^SpeedI.DeltaP(cubetestsetdata,id),1,vals) if (id="")||($piece(id,"||",1)'=epis) quit
		        
		        set ok=0
		        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubetestsetdataBI,id)
		        } 
		        elseif vals=0 {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cubetestsetdataBI,id)
			    }    
		        if ok {
			        kill ^SpeedI.DeltaP(cubetestsetdata,id)
		        }
		        else  {
			        do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:Update cube "_$get(cubetestsetdataBI)_", id="_$get(id))
		        }
            }
		    
        }
	} catch(e) { set ok1=e.AsStatus() }
	quit ok1
]]></Implementation>
</Method>

<Method name="UpdateCubes3">
<Description>
для тестовых целей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set cubeepis="lab.EPVisitNumber"
		set cubeepisBI=$piece(cubeepis,".",2) //"TCBI.Cubes.EPVisitNumber"
		
		set cubetestset="lab.EPVisitTestSet"
		set cubetestsetBI=$piece(cubetestset,".",2) //"TCBI.Cubes.EPVisitTestSet"
		
		set cubetestsetdata="lab.EPVisitTestSetData"
		set cubetestsetdataBI=$piece(cubetestsetdata,".",2) //"TCBI.Cubes.EPVisitTestSetData"
		
		set cubetestsetqueue="lab.EPVisitTestSetQueue"
		set cubetestsetqueueBI=$piece(cubetestsetqueue,".",2) //"TCBI.Cubes.EPVisitTestSetQueue"
		
		// создаем буфер эпизодов, по которым будем пересчитывать все кубы
		//(TCBI.Cubes.EPVisitNumber,TCBI.Cubes.EPVisitTestSet,TCBI.Cubes.EPVisitTestSetQueue,TCBI.Cubes.EPVisitTestSetData)
		kill ^||bufRecountEpis
		// идем по ^TEPI (последние 500 эпизодов)
		set epis="",count=0
        for {
	        set epis=$order(^TEPI(epis)) if epis=""||(count>500) quit
	        set ^||bufRecountEpis(epis)=""
	        set count=count+1
        }
        // Чистим кубы
        $$$ThrowOnError(##class(%DeepSee.Utils).%KillCube(cubeepisBI))
        $$$ThrowOnError(##class(%DeepSee.Utils).%KillCube(cubetestsetBI))
        $$$ThrowOnError(##class(%DeepSee.Utils).%KillCube(cubetestsetdataBI))
        
        // Пересчитываем кубы
        set ok=..RebuildCubes($na(^||bufRecountEpis))
        if 'ok {
			do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),"TCLEx.BI.BuildIndices:RebuildCubes")
		}
    } catch(exception) {
	       set ok=exception.AsStatus()
    }   
  quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// только для тех наборов тестов, для которых цена ещене финальная

]]></Content>
</UDLText>

<Method name="CreateEPVisitTestSetExt">
<Description>
Заполнение класса TCLEx.Data.EPVisitNumberExt - не в первый раз 
Пока только про цену все придумано
pFlagRecalcFinalPrice - флаг : если=1, то пересчитывать Все цены (любой flagFinalPrice)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pFlagRecalcFinalPrice:%Boolean=0,pDateStartBirlab:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1
	set pEpisode=$get(pEpisode)
	kill ^||Report.Amount
	try {
		if pEpisode="" {
			set ok =$$$ERROR($$$GeneralError,"Не указан номер эпизода")
			quit
		}
		set epis=pEpisode
		// эпизод уже закрыт целиком для пересчета цены
	    if (pFlagRecalcFinalPrice=0)&&($lg($get(^TEPIext(epis)),1)=1) quit
	    
	    // дата, когда был запущен Birlab
	    if pDateStartBirlab="" {
		    set pDateStartBirlab=##class(BiRLab.Function.Report).GetDateStartUseBirlab() 
	    }
	    if ##class(TCLEx.Data.EPVisitNumberExt).%ExistsId(epis) {
	          set objepis=##class(TCLEx.Data.EPVisitNumberExt).%OpenId(epis)
        } else {
	          set objepis=##class(TCLEx.Data.EPVisitNumberExt).%New()
	          set objepis.Episode=epis
              set ok1=objepis.%Save()
              if 'ok1 set ok=$system.Status.AppendStatus(ok,ok1)
        }
	    	    
	    set rec=$get(^TEPI(epis))
	
		set flagBiRLab=0
		set payment="" 
		set hospitalcode=$piece(rec,"\",20)
        set payepis=$piece(rec,"\",7)  //EPVIS_PaymentCode_DR 
        set payepisnew=""
        if payepis="" {
	        set payepisnew=##class(BiRLab.CT.PayerHospital).GetPayerByHospital(hospitalcode)
        }
        if (payepisnew'="") {
	        set flagBiRLab=1
	        set payment=payepisnew
        }
        
        set cito=$piece(rec,"\",15) // cito нужно только для расчета цены по встроенному в трек биллингу, а это было только в Бионе - поэтому cito берем только на уровне эпизода

	    set ts=""
	    set flagFinalEpis=1  // флаг о том, что цена уже берется из BiRLab.Data.InvoiceEpisodeItem
	    for {
	        set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
	        set tscnt=""
	        for {
		        set tscnt=$o(^TEPI(epis,1,ts,tscnt),1,rects) if tscnt="" quit
		        set status=$piece(rects,"\",31) 
		        set reason=$piece(rects,"\",52)
		        if (status'="A")&&(reason="") continue 
		        
                if flagBiRLab=0 {
	                ; плательщик (на уровне набора тестов)
                    set payment=$p(rects,"\",23) 		;VISTS_PaymentCode_DR
                    set:payment="" payment=payepis
                }
		         
		        Set superset=$p(rects,"\",29)
		        
		        set price=""
		        set flagFinalPrice=0
		        
		        if reason'="" {   // если причина невыполения проставлена, то пишем цену 0 и проставляем флаг окончательности цены
		            set price=0,flagFinalPrice=1
		        }
		        set authdate=$Piece(rects,"\",4)
		        
		        set billingitem=ts
		        set flagSuperSetPrice=0 //флаг, что на данной строке (epis,ts,tscnt) лежит цена за супернабор
		        if superset'="" {
	                Set billingitem=superset
	                // если на какой-то набор тестов из супер набора уже записана цена за супернабор, то на другие наборы тестов записываем 0
	                If $Data(^||Report.Amount(billingitem,epis)) {
		                set price=0
		                set flagFinalPrice=^||Report.Amount(billingitem,epis)
		                set flagSuperSetPrice=0
	                } else {
		                set flagSuperSetPrice=1
	                }
                    //if '##class(TCLEx.Function.SuperSet).IsComplete(epis,superset) continue ????
                    set authdate=##class(TCLEx.Function.SuperSet).AuthorisationDate2(epis,superset)
                    Set ^||Report.Amount(billingitem,epis)="" 
                }
	            // расчет цены по старому биллингу
                if ((pDateStartBirlab="")||(authdate<pDateStartBirlab)) {
	                //if '$data(^TEPIext(epis)) set $list(^TEPIext(epis),1)=1  // для этого эпизода не пересчитываем цены никогда (если в эпизоде хотя бы один набор тестов попал авторизован до появления Бирлаб, то считаем весь эпизод добирлабовским)
	                set flagFinalEpis=1
	                if price="" {
		                if (payment'="") {
			                Set price=$$GetBillingItemAmount^PRTCLNRUS05birlab(payment,epis,authdate,billingitem,cito,$name(^||invForGetPrice))
		                } else {
			                //set ok=$system.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не указан код плательщика для эпизода "_epis_" hospitacode="_$get(hospitalcode)))
			                set ^test("fras","no_plat",epis,billingitem)=$get(hospitalcode)
			                set price=0
		                }
	                }
	                set flagFinalPrice=1
                }
                // расчет цены по новому биллингу 
                else {
	                 if price="" {
		                    // смотрим цену окончательно закрепленную
		                    set price=##class(BiRLab.Function.Invoice).GetFinalPrice(epis,billingitem,.cito,.flagFinalPrice,.error)
		                    if error'="" {
			                    set ok=$system.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,error))
			                    //do ##class(TCLEx.Function.General).WriteError(error,"TCLEx.BI.BuildIndices:CreateEPVisitTestSetExt:GetFinalPrice, episode="_$get(epis)_", billingitem="_$get(billingitem))
			                    set ^test("fras","err_1",epis,ts,tscnt)=error
		                    }
		                    if (flagFinalPrice=0)&&(error="") {
			                    Set price=##class(BiRLab.Function.Invoice).GetPriceEpisodeItem(epis,billingitem,authdate,.cito,.error,payment,tscnt,ts)
			                    if error'="" {
				                    //set ok=$system.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,error))
			                        //do ##class(TCLEx.Function.General).WriteError(error,"TCLEx.BI.BuildIndices:CreateEPVisitTestSetExt:GetPriceEpisodeItem, episode="_$get(epis)_", billingitem="_$get(billingitem)_", dateAuthorization="_$get(authdate))
			                        set price=0  // Пока что
			                        if authdate<+$h-30 set flagFinalPrice=1
			                        set ^test("fras","err_2",epis,ts,tscnt)=error
		                        }
		                    }
	                 }
                }
                if $data(^||Report.Amount(billingitem,epis)) {
	                Set ^||Report.Amount(billingitem,epis)=flagFinalPrice
                }
                
                if '$data(^TEPIext(epis)) {
	                set objepis=##class(TCLEx.Data.EPVisitNumberExt).%New()
	                set objepis.Episode=epis
	                set ok1=objepis.%Save()
                    if 'ok1 set ok=$system.Status.AppendStatus(ok,ok1)
                }
                	    
                // запись в TCLEx.Data.EPVisitNumberExt
                //set ^TEPIext(epis,1,ts,tscnt)=$listbuild(price,flagFinalPrice)
                set rowid=epis_"||"_ts_"||"_tscnt
                set obj=##class(TCLEx.Data.EPVisitTestSetExt).%OpenId(rowid)
                if '$IsObject(obj) {
	                set obj=##class(TCLEx.Data.EPVisitTestSetExt).%New()
	                set obj.Episode=objepis
	                do obj.TestSetSetObjectId(ts)
	                set obj.TestSetCounter=tscnt
                }
                set obj.Price=price
                set obj.FlagFinalPrice=flagFinalPrice
                set obj.SuperSet=superset
                set obj.FlagSuperSetPrice=flagSuperSetPrice
                do obj.%SetModified(1)
                set ok1=obj.%Save()
                if 'ok1 set ok=$system.Status.AppendStatus(ok,ok1)
                
                if (flagFinalEpis=1)&&(flagFinalPrice=0) {
	                set flagFinalEpis=0
                } 
	        }
        }
	    // запись в TCLEx.Data.EPVisitNumberExt
        //set ^TEPIext(epis)=$listbuild(hospital,payment,flagFinalPrice)
        set recext=^TEPIext(epis)
        set hospitalold=$listget(recext,1),payerold=$listget(recext,2),flagFinalEpisOld=$listget(recext,3)
        if (hospitalcode'=hospitalold)||(payment'=payerold)||(flagFinalEpis'=flagFinalEpisOld) {
	        /*
                if ##class(TCLEx.Data.EPVisitNumberExt).%ExistsId(epis) {
	                 set objepis=##class(TCLEx.Data.EPVisitNumberExt).%OpenId(epis)
                } else {
	                set objepis=##class(TCLEx.Data.EPVisitNumberExt).%New()
	                set objepis.Episode=epis
                }*/
                set objepis.Payer=payment
                set objepis.FlagFinalPrice=flagFinalEpis
                do objepis.HospitalSetObjectId(hospitalcode)
                do objepis.%SetModified(1)
                set ok1=objepis.%Save()
                if 'ok1 set ok=$system.Status.AppendStatus(ok,ok1)
        }
	} catch(e) {
		set ok1=e.AsStatus()
		set ok=$system.Status.AppendStatus(ok,ok1)
		//do ##class(TCLEx.Function.General).WriteError($ze,"TCLEx.BI.BuildIndices:CreateEPVisitTestSetExt:episode="_$get(epis))
	}
	quit ok
]]></Implementation>
</Method>

<Method name="BIClassChange">
<Description>
Установить флаг изменения класса для пересчета данных для BI</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String="",pId:%String="",pFlagDelete:%Boolean="N",pInfo:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		//s ^test("bi",1)=pClass_" "_pId
	    if (pClass'="")&&(pId'="") {
		    if pFlagDelete="Y" set ^SpeedI.DeltaP(pClass,pId)=0
	        else  set ^SpeedI.DeltaP(pClass,pId)=1
	    }
	    // дополнительная информация (например при удалении BiRLab.Data.InvoiceEpisodeItem в ней номер эпизода)
	    if pInfo'="" {
		    set ^SpeedI.DeltaP(pClass,pId,"info")=pInfo
	    }
	} catch(e) { set ok=e.AsStatus() }
	
	quit ok
]]></Implementation>
</Method>

<Method name="InitialBuild">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try {
	// a complete rebuild of all cubes
	
	kill ^SpeedI.DeltaP
	
	set ts1=+$h*100000+$p($h,",",2)
	s ^test("buildcube","start")=$h
	//do CreateIndex^PRTCLNRUS05birlab($name(^invForGetPrice))
	set ok=##class(TCLEx.BI.BuildIndices).CreateEPVisitTestSetExtFirst()
	b  //
	//d ##class(%DeepSee.Utils).%BuildCube("BBPPackDetails",0)
	//d ##class(%DeepSee.Utils).%BuildCube("BBPPackTransactions",0)
	d ##class(%DeepSee.Utils).%BuildCube("EPVisitNumber",0)
	d ##class(%DeepSee.Utils).%BuildCube("EPVisitTestSet",0)
	d ##class(%DeepSee.Utils).%BuildCube("EPVisitTestSetData",0)
	//d ##class(%DeepSee.Utils).%BuildCube("EPVisitTestSetDataAntib",0)
	//d ##class(%DeepSee.Utils).%BuildCube("EPVisitTestSetQueue",0)
	//d ##class(%DeepSee.Utils).%BuildCube("EPVisitTestSetSnomedRes",0)
	set ts2=+$h*100000+$p($h,",",2)
	set ras=ts2-ts1
	set ^test("BuildCubes")=ras_" сек "_(ras\3600)_" ч"
	w !,ras_" сек "_(ras\3600)_" ч"
  } catch(e) { set ok=e.AsStatus() }
  q ok
]]></Implementation>
</Method>

<Method name="CreateEPVisitTestSetExtFirst">
<Description>
Заполнение класса TCLEx.Data.EPVisitNumberExt - в первый раз (перед первым строительством кубов по уже имеющимся данным)
Пока только про цену все придумано</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1
	try {
		// создание индекса для быстрого расчета цены по сарому биллингу
	    do CreateIndex^PRTCLNRUS05birlab($name(^||invForGetPrice))
	
	    kill ^TEPIext
	
	    set dateStartBirlab=##class(BiRLab.Function.Report).GetDateStartUseBirlab()
	    
	    set epis="" 
	    for {
		    set epis=$order(^TEPI(epis)) if epis="" quit
		    set ok1=..CreateEPVisitTestSetExt(epis,1,dateStartBirlab)
		    if 'ok1 {
			    write !,"episode="_epis
			    do $system.Status.DisplayError(ok1)
			    //set ok=$system.Status.AppendStatus(ok,ok1)
			    //quit
		    }
        }
	} catch(e) {
		
	}
	quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// end class

]]></Content>
</UDLText>
</Class>
</Export>
