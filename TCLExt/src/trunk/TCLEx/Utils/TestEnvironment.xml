<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Utils.TestEnvironment">
<Super>%RegisteredObject</Super>
<TimeCreated>63141,54962.808799</TimeCreated>

<Method name="TestEnvironment">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $get(pGlob)="" quit $$$ERROR($$$GeneralError,"Не задана глобаль для сбора сообщений.")
	kill @pGlob
	
	// Если существует клиентский класс Custom.clientext.TCLEx.Utils.TestEnvironment и в нем существует метод GetData, то вызывается клиентский метод 
	set clientext=$Piece($Get(^CF("SM",1)),"^",28)
	if (clientext'="") {
		set classmethod="Custom."_clientext_"."_$CLASSNAME()_"||GetData"
	    if ##class(%Dictionary.CompiledMethod).%ExistsId(classmethod) {
		    quit $ClassMethod($piece(classmethod,"||",1),$piece(classmethod,"||",2), $get(pGlob) )
	    }
	}

	
	quit ..GetData(pGlob)
]]></Implementation>
</Method>

<Method name="GetData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set ok=..TestFreeSpace(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		set ok=..TestBackup(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		set ok=..TestMirror(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		set ok=..TestIntegrationErrors(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		set ok=..TestIsERRORS(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		// Проверка, все ли наборы тестов прикреплены к коду материала образца
		set ok=..TestBindTestSetSpecimen(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)

		
	} catch(e) {
		do ##class(TCLEx.Function.General).WriteError($ze,$zn)
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestFreeSpace">
<Description>
Проверка кол-ва свободного места в байтах</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set freespace=..GetFreeSpace("c") 
        set freespaceGb=freespace/(1024*1024*1024)
	    if freespaceGb<5 {
		   set @pGlob@($i(@pGlob))="Свободного места на диске меньше 5 Гб ("_freespace_" байт)"
	    }
	} catch(e) {
		set ok=e.AsStatus()
    }
    quit ok
]]></Implementation>
</Method>

<Method name="GetFreeSpace">
<Description>
Получить кол-во свободного места в байтах</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDisk:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $Piece($ZU(140,13,pDisk_":\"),",",1)
]]></Implementation>
</Method>

<Method name="TestBackup">
<Description>
Проверить , не было ли ошибок при backup</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		
		Set settingsid=##class(Backup.Settings).GetObjectId()
	    Set BackupSettings=##class(Backup.Settings).%OpenId(settingsid)
	    If $IsObject(BackupSettings) {
		  Set delim=BackupSettings.DirectoryDelimiter()
	      Set dir=BackupSettings.LogDir
	      If $Extract(dir,$Length(dir))'=delim Set dir=dir_delim
	    
	      Set fulldate=$ZD(+$h,8) 
	      Set yearmonth=$Extract(fulldate,1,6)
	      Set date=$Extract(fulldate,7,8)
	      Set fulldir=dir_"!Warning!"_delim_yearmonth_delim
	      Set fileWithError=fulldir_date_".log"
	      if ##class(%File).Exists(fileWithError) {
		    set @pGlob@($i(@pGlob))="Ошибки при BackUp из файла "_fileWithError_"."
		    Set stream=##class(%FileCharacterStream).%New()
	        Set stream.TranslateTable="CP1251"  
	        Set stream.Filename=fileWithError
	        While 'stream.AtEnd {
		       Set line=stream.ReadLine()
	           if line'="" {
		          set @pGlob@($i(@pGlob))=line
	           }
	        }
	        kill stream
	      }
	    }
	} catch(e) {
		set ok=e.AsStatus()
    }
	do ##class(Client12.MISExchange).LogEvent("TestBackUp","TestBackUp","Test BackUp",ok)
	quit ok
]]></Implementation>
</Method>

<Method name="NeedTestBackUpToday">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK,returnValue=1
	try {
		set today=$zd(+$h,8)
	    SET rset=##class(%ResultSet).%New("ECUBE.Object.Event:LogGroupEvent")
        set ok=rset.Execute(today,"TestBackUp")
        if 'ok quit
        
        if rset.Next() {
	        set returnValue=0
        } 
	} catch(e) {
		do ##class(TCLEx.Function.General).WriteError($ze,$zn)
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="TestMirror">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	set nsold=$zu(5)
	zn "%SYS"
	try {
		set mirrorname=##class(%SYSTEM.Mirror).MirrorName()
	    if mirrorname="" quit
	    if '##class(SYS.Mirror).IsMirrorStarted(mirrorname) quit
	    set ok=##class(SYS.Mirror).CheckISCAgent() 
	    if 'ok {
		    set @pGlb@($i(@pGlb))="CheckISCAgent : "_ok
	    }
	    /*
		set ok=##class(SYS.Mirror).GetFailoverMemberStatus(.thisMember,.otherMember)  
		if 'ok {
			  set @pGlb@($i(@pGlb))="GetFailoverMemberStatus : "_ok
		} else {
			if $lg(thisMember,4)'="Active" {
			   set str="" for i=1:1:$ll(thisMember) set str=str_$select(str'="":":",1:"")_$lg(thisMember,i) 
			   set @pGlb@($i(@pGlb))="GetFailoverMemberStatus(thisMember) : "_str
			}
			if $lg(otherMember,4)'="Active" {
			   set str="" for i=1:1:$ll(otherMember) set str=str_$select(str'="":":",1:"")_$lg(otherMember,i) 
			   set @pGlb@($i(@pGlb))="GetFailoverMemberStatus(otherMember) : "_str
			}
		} */
		/*
		//
		Set tRS = ##class(%ResultSet).%New("SYS.Mirror:MirrorTrackedByAsyncMember")
		Do tRS.Execute("*")
	    Set tRow = 0
	    While tRS.Next() {
		    Set AType = $CASE(tRS.Data("AsyncMemberType"),0:"Disaster Recovery",1:"Read-Only Reporting",2:"Read-Write Reporting",:"Unknown")
		    Set tMirrorName = tRS.Data("Name")
		    Set tRow = tRow + 1
		    set status=tRS.Data("Status")
		    set JournalLatency=tRS.Data("JournalLatency")
		    set DatabaseLatency=tRS.Data("DatabaseLatency")
		    set statusInt=tRS.Data("StatusInt") = 1 
			w !,tMirrorName," ",AType," ",status," ",JournalLatency," ",DatabaseLatency," ",statusInt
		}
		  */
		 
		//set wordActive=$$$FormatText("Active"),wordUnknown=$$$FormatText("Unknown")  
		set wordActive="Активный",wordTurnOff="Был отключен" 
		// CurrentRole
		set wordPrimary="Первичный",wordAsync="Асинхронный",wordUnknown="Неизвестный"
        Set tRS = ##class(%ResultSet).%New("SYS.Mirror:MemberStatusList")
	    Do tRS.Execute(mirrorname)
	    While tRS.Next() {
		        set memberName=tRS.MemberName
		        set currentRole=tRS.CurrentRole
		        set currentStatus=tRS.CurrentStatus
		        set journalLatency=tRS.JournalTimeLatency
		        set databaseLatency=tRS.DatabaseTimeLatency
		        //w !,memberName,":",currentRole,":",currentStatus,":",journalLatency,":",databaseLatency,";"
		        
		        if ((currentStatus'=wordActive)&&(currentStatus'=wordAsync))||((currentRole'=wordAsync)&&(currentRole'=wordPrimary))||(journalLatency[wordTurnOff)||(databaseLatency[wordTurnOff) {
			        set str="Member : "_memberName_": currentRole="_currentRole_", currentStatus="_currentStatus
			        set str=str_", JournalTimeLatency="_journalLatency_", DatabaseTimeLatency="_databaseLatency 
			        set @pGlb@($i(@pGlb))=str   
		        }
	    }
	    do tRS.Close()
	    
	    // MirroredDatabaseList
	    Set tRS = ##class(%ResultSet).%New("SYS.Mirror:MirroredDatabaseList")
	    Do tRS.Execute()
	    While tRS.Next() {
		        set dbName=tRS.Name
		        set currentStatus=tRS.MirrorStatus
		        set latency=tRS.Latency
		        set flagWarning=0
		        if latency["час" {
			        set flagWarning=1
		        }
		        if flagWarning=0 {
			        if latency["минут" {
				        set minuts=+$tr($piece(latency,"минут",1)," ","")
				        if minuts>20 set flagWarning=1 
			        }
		        }
			        
		        //w !,dbName,":",currentStatus,":",latency,";"
		        
		        if ((currentStatus'=wordActive))||(flagWarning=1) {
			        set str="DB : "_dbName_": MirrorStatus="_currentStatus_", DBLatency="_latency
			        set @pGlb@($i(@pGlb))=str   
		        }
	    }
	    
	    do tRS.Close()
	    
	} catch(e) {
		set ok=e.AsStatus()
	}
	zn nsold
	quit ok
]]></Implementation>
</Method>

<Method name="TestIntegrationErrors">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set currdate=+$h,currtime=+$piece($h,",",2)
		set yesterdaydate="",yeasterdaytime=""
		if currtime<3601 {
			set yesterdaydate=currdate-1
			set yeasterdaytime=(24*3600)+(currtime-3600-1) 
		} else {
			set currtime=currtime-3600-1
		}
		for date=yesterdaydate,currdate {
			if date="" continue
			set time=$select(date=yesterdaydate:yeasterdaytime,1:currtime)
			if time="" continue
		    set date1=$zd(date,8),time1=+$tr($zt(time),":","")
		    /*
		    // SQL запрос дает 10 записей, а query 2 записи ????
	        SET rset=##class(%ResultSet).%New("ECUBE.Object.Event:LogErrorEvent")
            set ok=rset.Execute(date1,time1)
            if 'ok continue
        
            while rset.Next() {
	            set @pGlb@($i(@pGlb))="Error: "_rset.Data("ID")_":"_rset.Data("TypeEvent")_":"_rset.Data("DateEvent")_":"_rset.Data("TimeEvent")_":"_rset.Data("GroupEvent")_":"_rset.Data("Description")_":"_rset.Data("Error")_":"_rset.Data("Episode")_":"_rset.Data("Location")_":"_rset.Data("OrderId")_":"_rset.Data("SuperOrder")
            }
	        do rset.Close()
	        */
	        set timeevent=time1 //-0.5
	        for {
		        set timeevent=$order(^ECUBE.Object.EventI("DateTime",date1,timeevent)) if timeevent="" quit
		        set npp=""
		        for {
			        set npp=$order(^ECUBE.Object.EventI("DateTime",date1,timeevent,npp)) if npp="" quit
			        set rec=$get(^ECUBE.Object.EventD(npp))
			        set typeEvent=$listget(rec,2),dateEvent=$listget(rec,3),timeEvent=$listget(rec,4)
			        set groupEvent=$listget(rec,6),description=$listget(rec,7),error=$listget(rec,8)
			        set episode=$listget(rec,10),location=$listget(rec,11),orderId=$listget(rec,12),superOrder=$listget(rec,13)
			        set @pGlb@($i(@pGlb))="Error: "_npp_":"_typeEvent_":"_dateEvent_":"_timeEvent_":"_groupEvent_":"_description_":"_error_":"_episode_":"_location_":"_orderId_":"_superOrder
		        }
	        }    
        } 
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestIsERRORS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set currdate=+$h,currtime=+$piece($h,",",2)
		if currtime<3601 {
			set currdate=currdate-1
			set limit=(24*3600)+(currtime-3601) 
		} else {
		    set limit=currtime-3601	
		}
		set date=currdate-1
		for {
			set date=$order(^ERRORS(date)) if date="" quit
			set npp=""
			for {
				set npp=$order(^ERRORS(date,npp)) if npp="" quit
				set rec=$get(^ERRORS(date,npp))
				if rec'="" {
					set hor=$piece(rec,"||",1) if hor="" continue
				    set time=$piece(hor,",",2)
				    if ((date=currdate)&&(time>limit))||(date>currdate) {
					    set strerror=$e(rec,1,200)
					    try {
						    if $length(rec,"||")>2 set strerror=$zdt($piece(rec,"||",1))_"||"_$extract($piece(rec,"||",2,$length(rec,"||")),1,200)
					    } catch(e) {
						    set strerror=$extract($get(rec),1,200)
						    do ##class(TCLEx.Function.General).WriteError($ze,"TCLEx.Utils.TestEnvironment:TestIsERRORS")
					    }
					   set @pGlb@($i(@pGlb))="ERRORS("_date_","_npp_")="_strerror
				    }
				} else {
					if $data(^ERRORS(date,npp,"*STACK","0","V","$ZE")) {
						set hor=$get(^ERRORS(date,npp,"*STACK","0","V","$H")) if hor="" continue
				        set time=$piece(hor,",",2)
				        if ((date=currdate)&&(time>limit))||(date>currdate) {
					       set @pGlb@($i(@pGlb))="ERRORS("_date_","_npp_")="_$e($get(^ERRORS(date,npp,"*STACK","0","V","$ZE")),1,200)
				        }
					}
				}
			}
		}
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestBindTestSetSpecimen">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set ts=""
        for {
	       set ts=$o(^TTAB("TS",ts),1,rec) if ts="" quit
	       if '$data(^TTAB("TS",ts,0)) continue  // если нет шаблона
	       if $piece(rec,"\",12)'="Y" continue
	       if $piece(rec,"\",31)="" continue
	       set specimen=##class(TCLEx.Function.TestSet).DefaultSpecimen(ts)
	       if specimen="" {
		       if $$open^LVBCTTSY(ts,"","","","","","","","","")
			   if $$close^LVBCTTSY()
			   set specimen=##class(TCLEx.Function.TestSet).DefaultSpecimen(ts)
			   if specimen'="" {
				   set @pGlb@($i(@pGlb))="У набора тестов "_ts_" не был указан материал образца. Теперь привязан код материала образца "_specimen
			   } else {
				   set @pGlb@($i(@pGlb))="У набора тестов "_ts_" не указан материал образца."
			   }
	       }
		}
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>
</Class>
</Export>
