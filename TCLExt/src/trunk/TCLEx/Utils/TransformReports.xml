<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Utils.TransformReports">
<Super>%RegisteredObject</Super>
<TimeCreated>63147,47760.926338</TimeCreated>

<Method name="TransXSLfromHTMLtoEXCEL">
<Description>
Из файла pFileXSLhtml (CLNRUS??.xsl) (описание xsl для преобразования xml+xsl=html) создать файл pFileXSLexcel
(описание xsl для преобразования xml+xsl=xml for excel)
html - окрывается старым Excel и новым Excel
xml for excel - открывается OpenOffice (OpenOffice html открывает плохо) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileXSLhtml:%String,pFileXSLexcel:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set tempFile=##class(%File).GetDirectory(pFileXSLexcel)_##class(%File).GetFilename(pFileXSLhtml)
		set ok=..TransXSL(pFileXSLhtml,tempFile)
		 
		if ##class(%File).Exists(pFileXSLexcel) {
		   set ok=##class(%File).Delete(pFileXSLexcel)
		   if 'ok quit	
		}
		Set streamIn=##class(%FileCharacterStream).%New()
	    Set streamIn.Filename=tempFile
	    Set streamIn.TranslateTable="CP1251"
	    Set streamOut=##class(%FileCharacterStream).%New()
	    Set streamOut.Filename=pFileXSLexcel
	    Set streamOut.TranslateTable="CP1251"
	    //set streamOut=streamOut.CopyFrom(..GetHeaderFile())
	    set ok=..GetHeaderFile(.streamOut)
	    ;do streamOut.WriteLine("<?xml version=""1.0"" encoding=""windows-1251"" ?>")
	    ;do streamOut.WriteLine("  <xsl:stylesheet version=""1.0""")
	    ;do streamOut.WriteLine("    xmlns=""urn:schemas-microsoft-com:office:spreadsheet""")
	    ;do streamOut.WriteLine("    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" ")
	    ;do streamOut.WriteLine("    xmlns:o=""urn:schemas-microsoft-com:office:office"" ")
	    ;do streamOut.WriteLine("    xmlns:x=""urn:schemas-microsoft-com:office:excel"" ")
	    ;do streamOut.WriteLine("    xmlns:ss=""urn:schemas-microsoft-com:office:spreadsheet""")
	    ;do streamOut.WriteLine("    xmlns:msxsl=""urn:schemas-microsoft-com:xslt"" ")
	    ;do streamOut.WriteLine("    xmlns:user=""urn:my-scripts"">")
	    ;do streamOut.WriteLine("")
	    ;do streamOut.WriteLine("  <xsl:output method=""xml"" encoding=""Windows-1251"" omit-xml-declaration=""no""/>")
	    ;do streamOut.WriteLine("")
	    ;do streamOut.WriteLine("<Styles>")
        ;do streamOut.WriteLine("<Style ss:ID=""Default"" >")
        ;do streamOut.WriteLine("</Style>")
        ;do streamOut.WriteLine("<Style ss:ID=""DefaultTitle"" >")
        ;do streamOut.WriteLine("<Font x:Family=""Swiss"" ss:Bold=""1"" />")
        ;do streamOut.WriteLine("<Alignment ss:Horisontal=""Center"" />")
        ;do streamOut.WriteLine("</Style>")
        ;do streamOut.WriteLine("<Styles>")
        	    
        set startPass=0,startStyle=0,startTable=0,titleWorkSheet=""	    
	    set currElement="",currPar="",currData="",flagAboutTable="before"
	    set currStyle=""
	    kill table // массив для table
	    kill tableHeader // массив для <p> перед Table
	    kill tableFooter // массив для <p> после Table
	    set row=0
 	    While 'streamIn.AtEnd {
		   Set line=streamIn.ReadLine()
		   set linetr=$zstrip(line,"<>W")
		   if linetr="" continue
		   set pp1=$zcvt($extract(linetr,1),"l")
		   set pp2=$zcvt($extract(linetr,1,2),"l")
		   set pp3=$zcvt($extract(linetr,1,3),"l")
		   set pp4=$zcvt($extract(linetr,1,4),"l")
		   set pp5=$zcvt($extract(linetr,1,5),"l")
		   set pp6=$zcvt($extract(linetr,1,6),"l")
		   set pp8=$zcvt($extract(linetr,1,8),"l")
		   set pp7=$zcvt($extract(linetr,1,7),"l")
		   set pp11=$zcvt($extract(linetr,1,11),"l")
		   set pp15=$zcvt($extract(linetr,1,15),"l")
		   set pp26=$zcvt($extract(linetr,1,26),"l")
		   set pp28=$zcvt($extract(linetr,1,28),"l")
		   set lineNew=""
		   //w !,pp6 r aaa
		   if pp6="<table" 
		   if startPass=1 {
			  if pp15="</xsl:variable>" {
				  set startPass=0
			  }
			  continue 
		   }
		   if startStyle=1 {
			  if pp8="</style>" {
				  set startStyle=0
			  }
			  continue 
		   }
		   if startTable=1 {
			 if pp6="<thead" continue
			 if pp7="</thead" continue
			 if (pp1'="<")&&(row=0)&&(line[">") continue  // Продолжение тега <table>
			 if pp3="<tr" {
				 set row=row+1 
				 set currElement="tr" 
				 set cond=""
				 set currData=""
				 set style=$piece($piece(linetr,"style=",2)," ",1)
				 if style["background" set currStyle="background"
				 continue
			 }
			 if pp4="</tr" {
				 set currElement="" 
				 set cond=""
				 set currData=""
				 set currStyle=""
				 continue
			 }
			 if currElement="tr" {
				 if pp7="<xsl:if" {
					 set cond=linetr 
					 continue
				 }
				 if pp8="</xsl:if" {
					 continue
				 }
				 if pp3="<td" {
					 set currElement="td" 
					 continue
				 }
			 }
			 if currElement="td" {
			    if pp4="</td" {
				    if (row'="")&&('$data(table("row",row))) {
					    set table("row",row)=$lb($get(currStyle))
				    }
					 if row=1 {
						 set nppCol=$order(table("column",""),-1)+1
						 set table("column",nppCol)="<Column ss:StyleID=""Default"" ss:AutoFitWidth=""0"" ss:Width=""300""/>" //_$select(cond'="":"</xsl:if",1:"")   
				         //set table("column",nppCol)="<Column ss:AutoFitWidth=""0"" ss:Width=""300""/>" //_$select(cond'="":"</xsl:if",1:"")   
				         set table("coltext",nppCol)=currData  //_$select(cond'="":"</xsl:if",1:"")
				         if cond'="" set table("colCondition",nppCol)=cond
			         } else {
				          if row'="" {
					        set nppCol=$order(table("row",row,""),-1)+1
					        set table("row",row,nppCol)=currData //_$select(cond'="":"</xsl:if",1:"")
				          }
			         }
			         set currElement="tr"
			         set currData=""
			         continue
			     }
			     set pplast=$extract(currData,$l(currData))
			 	 set currData=currData_$select((pplast'=">")&&(pplast'=" ")&&($e(linetr,1)'="<"):" ",1:"")_linetr 
			     continue
			 }
			 		     		 
			 if pp7="</table" {
				 set startTable=0,row=0 
				 set flagAboutTable="after"
				 //b  set ok=..WriteTable(.table,.tableHeader,.tableFooter,.streamOut)
				 //if 'ok do $system.OBJ.DisplayError(ok)
				 continue
			 } 
			 if pp11="<xsl:for-ea" {
			     set table("ForEach")=linetr  
			     continue
			 } 
			 if pp11="</xsl:for-e" {
			     continue
			 }  
			 continue
		   }

           if (currElement="p")&&(pp3'="</p") {
	           set currPar=currPar_linetr
	           continue
           }

           if (currElement="p")&&(pp3="</p") {
	           if currPar'="" {
		           if flagAboutTable="before" set tableHeader($i(tableHeader))=$zstrip(currPar,"<>W") 
		           if flagAboutTable="after" set tableFooter($i(tableFooter))=$zstrip(currPar,"<>W") 
		           set currPar=""   
	           }
	           set currElement=""
	           continue
           }
           
		   if pp5="<?xml" continue
		   if pp15="<xsl:stylesheet" continue
		   if pp11="<xsl:output" continue
		   if pp5="<html" continue
		   if pp6="</html" continue
		   if pp5="<head" continue
		   if pp6="</head" continue
		   if pp5="<meta" continue
		   if pp6="</meta" continue
		   if pp4="<div" continue
		   if pp5="</div" continue
		   if pp28="<xsl:value-of select=""$pass""" continue
		   
		   if pp26="<xsl:variable name=""pass"">" set startPass=1 continue
		   if pp6="<style" set startStyle=1 continue
		   
		   if pp6="<title" {
			   set currElement="title"
			   continue
		   }
		   if pp7="</title" {
			   set currElement=""
			   continue
		   }
		   
     	   if pp5="<body" {
			   set lineNew="<Worksheet ss:Name="""_$select(titleWorkSheet'="":titleWorkSheet,1:"NameWorkSheet")_""" >"
		   }
		   if pp6="</body" {
			   set ok=..WriteTable(.table,.tableHeader,.tableFooter,.streamOut)
			   if 'ok do $system.OBJ.DisplayError(ok)
			   set lineNew="</Worksheet>" 
		   }
		   if pp6="<table" {
			   kill table
			   set startTable=1,row=0
			   set flagAboutTable="in"
		   }
		   
		   if (pp5="<xsl:")||(pp6="</xsl:") {
			   if currElement="p" {
				  if (pp5="<xsl:")   
			   }
			   set lineNew=line
		   }
		   
		   if (line["<!--")&&(line["-->") {
			   set lineNew=line
		   }
		   
		   if pp2="<p" {
			   set currElement="p"
			   continue
		   }
		   
		    if pp3="</p" {
			   set currElement=""
			   continue
		   }
		   
		   if line'["<" {
			  if currElement="title" {
				  set titleWorkSheet=line 
				  set currElement=""
				  continue
			  }
			  if currElement="p" {
				//set tableHeader($i(tableHeader))=line
				continue  
			  }
		   }
		   
		   // write in new file
		   if lineNew'="" {
			   do streamOut.WriteLine(lineNew)
		   }
		   
 	    }
 	    
 	    Set ok=streamOut.SaveStream()
 	    if 'ok d $system.OBJ.DisplayError(ok)
	    Set streamIn="",streamOut=""
	    
	} catch(e) { 
	    set ok=e.AsStatus() 
	    Set streamIn="",streamOut=""
	}
	if 'ok do $system.OBJ.DisplayError(ok)
	quit ok
]]></Implementation>
</Method>

<Method name="TransXSL">
<Description>
Из файла pFileXSL (CLNRUS??.xsl) (описание xsl для преобразования xml+xsl=html) создать файл pFileXSLnew
(в этом файле каждый тег на отдельной строке)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileXSL:%String,pFileXSLnew:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		if ##class(%File).Exists(pFileXSLnew) {
		   set ok=##class(%File).Delete(pFileXSLnew)
		   if 'ok quit	
		}
		Set streamIn=##class(%FileCharacterStream).%New()
	    Set streamIn.Filename=pFileXSL
	    Set streamIn.TranslateTable="CP1251"
	    Set streamOut=##class(%FileCharacterStream).%New()
	    Set streamOut.Filename=pFileXSLnew
	    Set streamOut.TranslateTable="CP1251"
	   
 	    While 'streamIn.AtEnd {
		   Set line=streamIn.ReadLine()
		   if line'["<" {
			   do streamOut.WriteLine(line)
			   continue
		   }
		   set countSpace=0
		   for i=1:1:$length(line) {
			  if $extract(line,i)=" " set countSpace=countSpace+1
			  else  quit
		   }
		   set linetr=$zstrip(line,"<>W")
		   if linetr="" continue
		   //set linetr2=$tr(linetr,"<>",$c(0)_$c(0))
		   set len=$length(linetr)
		   set linetr2=""
		   kill bounds
		   for i=1:1:len {
			   set pp=$extract(linetr,i,i)
			   set ppnew=pp
			   if (pp="<")||(pp=">") {
				   set ppnew=$c(0)
				   set bounds($i(bounds))=pp
			   }
			   set linetr2=linetr2_ppnew
		   }
		   set bounds($i(bounds))=""
		   set count=$length(linetr2,$c(0))
		   if count=3 {
			   do streamOut.WriteLine(..TransLine1(line))
			   continue
		   } else {
			   kill vr
			   set len=$length(linetr2,$c(0))
			   for i=1:1:len {
			      set pp=$piece(linetr2,$c(0),i)
			      if pp="" continue
			      //if (pp="b")||(pp="/b")||(pp="br")||(pp="/br")||(pp="br/") continue //<b>
			      if (pp="br")||(pp="/br")||(pp="br/") continue //<b>
			      if i=1 b  
			      set teg="" if bounds(i-1)="<" set teg=$piece(pp," ",1)   
			      if pp="" b  
			      set countSpace1=countSpace+(i-1*2)
			      if teg'="" if $data(vr(teg)) set countSpace1=vr(teg)
			      if (teg'="")&&($e(teg,1)'="/") set vr("/"_teg)=countSpace1
			      set linespace="",$piece(linespace," ",countSpace1)=""
			      set lineOut=linespace_$select(bounds(i-1)="<":"<",1:"")_pp_$select(bounds(i)=">":" >",1:"")
			      do streamOut.WriteLine(..TransLine1(lineOut))
			   }
		   }
		}
 	    
 	    Set ok=streamOut.SaveStream()
	    Set streamIn="",streamOut=""
	    
	} catch(e) { 
	   set ok=e.AsStatus() 
	   Set streamIn="",streamOut=""
	}
	if 'ok do $system.OBJ.DisplayError(ok)
	quit ok
]]></Implementation>
</Method>

<Method name="TransLine1">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLine:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set len=$length(pLine)
	set returnValue=pLine
	if $extract(pLine,len-2,len)="/ >" {
			set returnValue=$extract(pLine,1,len-3)_" />"
	}
	if $extract(pLine,len-1,len)="/>" {
		if $extract(pLine,len-2)'=" " {
			set returnValue=$extract(pLine,1,len-2)_" />"
		}
	}
	elseif $extract(pLine,len)=">" {
		if $extract(pLine,len-1)'=" " {
			set returnValue=$extract(pLine,1,len-1)_" >"
		}
	}
	//w !,pLine,!,returnValue,!! r aa
	quit returnValue
]]></Implementation>
</Method>

<Method name="WriteTable">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pTable:%ArrayOfDataTypes,&pTableHeader:%ArrayOfDataTypes,&pTableFooter:%ArrayOfDataTypes,&pStreamFileOut:%FileCharacterStream]]></FormalSpec>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		if '$data(pTable) quit
		
		// чистка данных
		set row=""
		for {
			set row=$order(pTable("row",row)) if row="" quit
			if $data(pTable("row",row))<10 {
				kill pTable("row",row)
			}
		}
		
		set columnCount=0
		set col=""
		for {
			set col=$order(pTable("column",col)) if col="" quit
			if $get(pTable("colCondition",col))'="" continue 
			set columnCount=columnCount+1
		}
		if columnCount=0 set columnCount=1
		
		do pStreamFileOut.WriteLine("<Table x:FullColumns=""1"" x:FullRows=""1"">")
		set col=""
		for {
		    set col=$order(pTable("column",col),1,rec) if col="" quit
		    if $get(pTable("colCondition",col))'="" {
			    do pStreamFileOut.WriteLine(pTable("colCondition",col))	
			    do pStreamFileOut.WriteLine(rec)	
			    do pStreamFileOut.WriteLine("</xsl:if>")	
		    } else {
			    do pStreamFileOut.WriteLine(rec)	
		    }
		}
		
		set row=""
		for {
			set row=$order(pTableHeader(row),1,rec) if row="" quit
			   do pStreamFileOut.WriteLine("  <Row ss:StyleID=""DefaultTitle"">")
			   do pStreamFileOut.WriteLine("    <Cell"_$select((columnCount-1)>0:" ss:MergeAcross="""_(columnCount-1)_"""",1:"")_"><Data ss:Type=""String"">"_rec_"</Data></Cell>")
			   do pStreamFileOut.WriteLine("  </Row>")
    	}
			
		do pStreamFileOut.WriteLine("  <Row ss:StyleID=""DefaultHeaderTable"">")
		set col=""
		for {
		    set col=$order(pTable("column",col)) if col="" quit
		    set text=$get(pTable("coltext",col))
		    if $get(pTable("colCondition",col))'="" {
			    do pStreamFileOut.WriteLine(pTable("colCondition",col))	
			    do pStreamFileOut.WriteLine("    <Cell>")
		        do pStreamFileOut.WriteLine("      <Data ss:Type=""String"">"_text_"</Data>")	
		        do pStreamFileOut.WriteLine("    </Cell>")
		        do pStreamFileOut.WriteLine("</xsl:if>")	
		    } else {
			    do pStreamFileOut.WriteLine("    <Cell>")
		        do pStreamFileOut.WriteLine("      <Data ss:Type=""String"">"_text_"</Data>")	
		        do pStreamFileOut.WriteLine("    </Cell>")
		    }
		}
		do pStreamFileOut.WriteLine("  </Row>")
				
		if $get(pTable("ForEach"))'="" {
			do pStreamFileOut.WriteLine(pTable("ForEach"))
		}
		set row=""
		for {
			set row=$order(pTable("row",row),1,rec) if row="" quit
			set style=""
			if $lg(rec,1)="background" { set style="DefaultTableLineBackground" }
				
			do pStreamFileOut.WriteLine("  <Row"_$select(style'="":" ss:StyleID="""_style_""" ",1:"")_">")
			set col=""
		    for {
		       set col=$order(pTable("column",col)) if col="" quit
		       set text=$get(pTable("row",row,col))
		       if $get(pTable("colCondition",col))'="" {
			      do pStreamFileOut.WriteLine(pTable("colCondition",col))	
			      do pStreamFileOut.WriteLine("    <Cell ss:StyleID=""Default"">")
		          do pStreamFileOut.WriteLine("      <Data ss:Type=""String"">"_text_"</Data>")	
		          do pStreamFileOut.WriteLine("    </Cell>")
		          do pStreamFileOut.WriteLine("</xsl:if>")	
		       } else {
			      do pStreamFileOut.WriteLine("    <Cell ss:StyleID=""Default"">")
		          do pStreamFileOut.WriteLine("      <Data ss:Type=""String"">"_text_"</Data>")	
		          do pStreamFileOut.WriteLine("    </Cell>")
		       }
		    }
		    do pStreamFileOut.WriteLine("  </Row>")
		}
		if $get(pTable("ForEach"))'="" {
			do pStreamFileOut.WriteLine("</xsl:for-each>")
		}

   		set row=""
		for {
			set row=$order(pTableFooter(row),1,rec) if row="" quit
			   if rec["""Footer""" {
				  do pStreamFileOut.WriteLine("  <Row>")
			      do pStreamFileOut.WriteLine("  </Row>") 
			   }
			   do pStreamFileOut.WriteLine("  <Row ss:StyleID="""_$select(rec["""Footer""":"Default",1:"DefaultTitle")_""">")
			   do pStreamFileOut.WriteLine("    <Cell"_$select((columnCount-1)>0:" ss:MergeAcross="""_(columnCount-1)_"""",1:"")_" ><Data ss:Type=""String"">"_rec_"</Data></Cell>")
			   do pStreamFileOut.WriteLine("  </Row>")
    	}

				
		do pStreamFileOut.WriteLine("</Table>")
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="GetHeaderFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&streamOut:%FileCharacterStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
        do streamOut.WriteLine("<?xml version=""1.0"" encoding=""windows-1251"" ?>")
	    do streamOut.WriteLine("  <xsl:stylesheet version=""1.0""")
	    do streamOut.WriteLine("    xmlns=""urn:schemas-microsoft-com:office:spreadsheet""")
	    do streamOut.WriteLine("    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" ")
	    do streamOut.WriteLine("    xmlns:o=""urn:schemas-microsoft-com:office:office"" ")
	    do streamOut.WriteLine("    xmlns:x=""urn:schemas-microsoft-com:office:excel"" ")
	    do streamOut.WriteLine("    xmlns:ss=""urn:schemas-microsoft-com:office:spreadsheet""")
	    do streamOut.WriteLine("    xmlns:msxsl=""urn:schemas-microsoft-com:xslt"" ")
	    do streamOut.WriteLine("    xmlns:user=""urn:my-scripts"">")
	    do streamOut.WriteLine("")
	    do streamOut.WriteLine("  <xsl:output method=""xml"" encoding=""Windows-1251"" omit-xml-declaration=""no""/>")
	    ;do streamOut.WriteLine("")
	    ;do streamOut.WriteLine("<Styles>")
        ;do streamOut.WriteLine("<Style ss:ID=""Default"" >")
        ;do streamOut.WriteLine("</Style>")
        ;do streamOut.WriteLine("<Style ss:ID=""DefaultTitle"" >")
        ;do streamOut.WriteLine("<Font x:Family=""Swiss"" ss:Bold=""1"" />")
        ;do streamOut.WriteLine("<Alignment ss:Horisontal=""Center"" />")
        ;do streamOut.WriteLine("</Style>")
        ;do streamOut.WriteLine("<Styles>")
	} catch(e) {
		set ok=e.AsStatus()
	}
    quit ok
]]></Implementation>
</Method>
</Class>
</Export>
