<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.AbstractPCLForm">
<Description>
Базовый класс для PCL отчетов</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>62336,66644.013709</TimeCreated>

<Method name="CreateValuesBuf">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set @pRepParamGlb@("CardNumber")=$Piece(episobj.EPVISHospitalEpisodeURNumber,",",2)
	Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1,40)
	Set @pRepParamGlb@("DOB")=$$DisplayDate^KSPCLUtils(episobj.EPVISDateOfBirth) 
	Set @pRepParamGlb@("Address1")=$Extract(episobj.EPVISPatientAddress1,1,45)
	Set @pRepParamGlb@("Address2")=$Extract(episobj.EPVISPatientAddress2,1,45)
	
	Set @pRepParamGlb@("InsCompany")=episobj.EPVISExtra9
	Set @pRepParamGlb@("InsSerial")=episobj.EPVISExtra10
	Set @pRepParamGlb@("InsNumber")=episobj.EPVISExtra11
	
	Set @pRepParamGlb@("HospitalDepartment")=episobj.EPVISExtra8
	Set time=episobj.EPVISTimeOfCollection
	If time=" " Set time=""
	If time'="" Set time=time*60
	Set @pRepParamGlb@("DateTimeOfCollection")=$$DisplayDate^KSPCLUtils(episobj.EPVISDateOfCollection)_" "_$$DisplayTime^KSPCLUtils(time,2)
	Set @pRepParamGlb@("DateOfReceiving")=$$DisplayDate^KSPCLUtils(episobj.EPVISDateOfReceiving) 
	
	Set @pRepParamGlb@("PregnancyWeeks")=episobj.EPVISPregnantNumberOfWeeks
	;
	Set sexobj=episobj.EPVISSpeciesDR
	If $IsObject(sexobj) {
		Set @pRepParamGlb@("SexCode")=sexobj.CTSPCode
		Set @pRepParamGlb@("Sex")=sexobj.CTSPDesc
	}	
	Set condobj=episobj.EPVISClinicalConditionsDR
	If $IsObject(condobj) Set @pRepParamGlb@("CyclePhase")=condobj.CTCLCDescription
	;
	Set hospobj=episobj.EPVISHospitalCodeDR
	If $IsObject(hospobj) {
		Set @pRepParamGlb@("НospitalCode")=hospobj.CTHOSCode
		Set @pRepParamGlb@("Нospital")="("_hospobj.CTHOSCode_") "_hospobj.CTHOSName
	}	
	;
	Set doctobj=episobj.EPVISDoctorCodeDR
	If $IsObject(doctobj) Set @pRepParamGlb@("Doctor")=$$FullName^KSPCLUtils(doctobj.CTDRSurname,doctobj.CTDRGivenName)
 	If $Get(pDepCode)="" Quit
	Set summarytestset=##class(TCLEx.Function.SuperSet).SummaryTestSet(pDepCode)
	Set (authtestset,canceltestset)=""
	Set key="",testobj="",canceledobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		Set testsetid=testobj.%Id()
		If ..IsTestSet4Department(testsetid,.pTestSets,pDepCode,summarytestset) Continue
		If ##class(TCLEx.Function.TestSet).IsAuthorised(testobj) {
			Set authtestset=testsetid
			Quit
		}	
		If ##class(TCLEx.Function.TestSet).IsCanceled(testobj) {
			Set canceltestset=testsetid
		}	
	}
	Set testsetid=""
	If (authtestset'="") {						// Либо берем подходящий авторизованный набор тестов
		Set testsetid=authtestset
	} Else {
		If (canceltestset'="") {				// (если нет авторизованных, то берем отмененный)
			Set testsetid=canceltestset
		}	
	}		
	If testsetid="" Quit
	Do ..SetTestSetVals(testsetid,pLanguage,pRepParamGlb)
]]></Implementation>
</Method>

<Method name="SetTestSetVals">
<Description>
Загрузить значения полей для печати, которые берутся из набора тестов 
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set cttestsetobj=testsetobj.VISTSTestSetDR
	If $IsObject(cttestsetobj) { 
		Set depobj=cttestsetobj.CTTSDepartmentDR
		If $IsObject(depobj) {
			Set @pRepParamGlb@("TS_DepartmentName")=depobj.CTDEPName
			Set @pRepParamGlb@("TS_DepartmentCode")=depobj.%Id()
		}
	}	
	;
	Set userobj=testsetobj.VISTSUserAuthorisedDR
	If $IsObject(userobj) { 
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=userobj.SSUSRName
	}	
	;
	Set specimen=""
	Set specobj=testsetobj.VISTSSpecimenTypeDR
	If $IsObject(specobj) Set specimen=specobj.CTSPEDesc
	If specimen="" Set specimen=$$TestSpecimen^KSReportSQL($Piece(testsetobj.%Id(),"||",2))
	Set @pRepParamGlb@("TS_Specimen")=specimen
	;
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Подходит ли объект набора тестов эпизода pTestSetObj для отдела pDepCode

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// для супер-набора также проверяется, что код набора тестов является заключением (pSummaryTestSet) 

]]></Content>
</UDLText>

<Method name="IsTestSet4Department">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pTestSets:%String,pDepCode:%String,pSummaryTestSetId:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit 0
	Set pSummaryTestSetId=$Get(pSummaryTestSetId)
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		If $IsObject(testsetobj.VISTSSuperSetDR)&&(testsetobj.VISTSSuperSetDR.%Id()=pDepCode)&&($IsObject(testsetobj.VISTSTestSetDR)) {
			If testsetobj.VISTSTestSetDR.%Id()=pSummaryTestSetId Quit 1
		}	
	} Else {
		If ('$Data(pTestSets)||($Data(pTestSets(pTestSetId))))&&($Extract(pTestSetId,1,1)=pDepCode) {
			Quit 1
		}	
	}
	Quit 0
]]></Implementation>
</Method>

<Method name="Add">
<Description>
Добавить PCL-команду pValue в секцию отчета pSection,буфер отчета pRepGlb</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pValue:%String</FormalSpec>
<Implementation><![CDATA[
	Set n=$Increment(@pRepGlb@(pSection))
	Set @pRepGlb@(pSection,n)=$Get(pValue)
]]></Implementation>
</Method>

<Method name="AddBoldValue">
<Description>
Добавить выделенное жирным шрифтом значение в текущее положение курсора или сдвинув это положение на pDX
Параметры:
pRepGlb - буфер отчета
pSection - секция отчета
pValue - значение
pDX - смещение курсора по X относително текущего положения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pValue:%String,pDX:%Integer</FormalSpec>
<Implementation><![CDATA[
	If $Get(pDX)>0 Do ..Add(pRepGlb,pSection,"~DX=50")	
	Do ..Add(pRepGlb,pSection,"~BOLD")          
	Do ..Add(pRepGlb,pSection,pValue)          
	Do ..Add(pRepGlb,pSection,"~MEDIUM")
]]></Implementation>
</Method>

<Method name="AddValue">
<Description>
Добавить значение в текущее положение курсора или сдвинув это положение на pDX
Параметры:
pRepGlb - буфер отчета
pSection - секция отчета
pValue - значение
pDX - смещение курсора по X относително текущего положения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pValue:%String,pDX:%Integer</FormalSpec>
<Implementation><![CDATA[
	If $Get(pDX)>0 Do ..Add(pRepGlb,pSection,"~DX=50")	
	Do ..Add(pRepGlb,pSection,pValue)
]]></Implementation>
</Method>

<Method name="SetNormalFont">
<Description>
Установка шрифта Normal и размера шрифта из описания "Настройка отчетов"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pFontSize:%Integer</FormalSpec>
<Implementation><![CDATA[
  	Set pSection=$Get(pSection,"PRT")
	Set pFontSize=$Get(pFontSize,10)
	Do ..Add(pRepGlb,pSection,"~NORMAL")                                
	Do ..Add(pRepGlb,pSection,$c(27)_"(s1P")
	Do ..Add(pRepGlb,pSection,"~FONTSIZE="_pFontSize)
	Do ..Add(pRepGlb,pSection,"~FONTNAME=Courier New Cyr")
]]></Implementation>
</Method>

<Method name="SetBoldFont">
<Description>
Установка жирного шрифта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String</FormalSpec>
<Implementation><![CDATA[
  	Set pSection=$Get(pSection,"PRT")
	Do ..Add(pRepGlb,pSection,"~BOLD")
]]></Implementation>
</Method>

<Method name="SetMediumFont">
<Description>
Установка нежирного шрифта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String</FormalSpec>
<Implementation><![CDATA[
  	Set pSection=$Get(pSection,"PRT")
	Do ..Add(pRepGlb,pSection,"~MEDIUM")
]]></Implementation>
</Method>

<Method name="SetFont">
<Description>
Установка нежирного шрифта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pSize:%Integer,pBold:%Boolean,pItalic:%Boolean</FormalSpec>
<Implementation><![CDATA[
  	Set pSection=$Get(pSection,"PRT")
  	Set pSize=$Get(pSize)
 	Set pBold=$Get(pBold)
 	Set pItalic=$Get(pItalic)
 	If pBold'="" {
		If (pBold=1) {
			Do ..Add(pRepGlb,pSection,"~BOLD") 
		} Else {
			Do ..Add(pRepGlb,pSection,"~MEDIUM") 
		}		         
 	}
 	If pSize'="" {
		Do ..Add(pRepGlb,pSection,"~FONTSIZE="_pSize)          
 	} 	
 	If pItalic'="" {
 	/// Not implemented
 	}
]]></Implementation>
</Method>

<Method name="Line">
<Description>
Добавить строку в соответствующий раздел</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pX:%Integer,pY:%Integer,pValue:%String</FormalSpec>
<Implementation><![CDATA[
	Set pSection=$Get(pSection,"PRT")
	Set pX=$Get(pX,50),pY=$Get(pY,100),pValue=$Get(pValue)
	If pValue="" Set pValue=" "
	Do ..Add(pRepGlb,pSection,$Char(27)_"&a"_pX_"h"_pY_"V"_pValue)
]]></Implementation>
</Method>

<Method name="GotoXY">
<Description>
Переместить курсор в позицию [pX,pY]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRepGlb:%String,pSection:%String,pX:%Integer,pY:%Integer</FormalSpec>
<Implementation><![CDATA[
	Do ..Add(pRepGlb,pSection,"~X="_$Get(pX))          
	Do ..Add(pRepGlb,pSection,"~Y="_$Get(pY))
]]></Implementation>
</Method>

<Method name="ResultsHeader">
<Description>
Заголовок таблицы с результатами</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String,pDepCode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		Set supersetobj=##class(User.CTSuperSet).%OpenId(pDepCode)
		If '$IsObject(supersetobj) Quit ""
		Quit supersetobj.CTSSDesc
	}	
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit ""
	Set pDepCode=$Get(pDepCode)
	Kill Sections
	Set key="",testobj="",cnt=0,result=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		Set cttestsetobj=testobj.VISTSTestSetDR
		If '$IsObject(cttestsetobj) Continue
		If pDepCode'="" {
			Set depobj=cttestsetobj.CTTSDepartmentDR
			If $IsObject(depobj)&&(depobj.%Id()'=pDepCode) {
				Continue
			}
		}	
		Set sectionobj=cttestsetobj.CTTSSectionDR
		If '$IsObject(sectionobj) Continue
		Set code=sectionobj.CTDSCode	
		Set name=sectionobj.CTDSDescription
		If (code="")||($Data(Sections(code))) Continue
		Set Sections(code)=name 	
		Set result=name
		Set cnt=cnt+1
		If cnt>1 Quit 	
	}
	If cnt=1 Quit result
	If pDepCode="H" Quit "Микробиологический отчет"
	Set depobj=##class(User.CTDepartment).%OpenId(pDepCode)
	If $IsObject(depobj) Quit depobj.CTDEPName
	Quit ""
]]></Implementation>
</Method>
</Class>
</Export>
