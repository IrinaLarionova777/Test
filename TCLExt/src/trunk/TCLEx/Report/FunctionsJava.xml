<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.FunctionsJava">
<IncludeCode>%ZEN.ReportUtil</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63039,43393.253458</TimeCreated>

<Method name="startPdfBoxFacade">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileReport:%String,namePrinter:%String,flagSilence:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $get(flagSilence)="" set flagSilence=1
 // открываем gateway
  set gateway=##class(Report.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")
  
  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port))
		Try
		{
			if flagSilence=1 {
				set time1=$p($h,",",2)
				do ##class(isc.pdfbox.PdfboxFacade).printSilent(jgw, fileReport, namePrinter)
				set time2=$p($h,",",2)
                if (time2-time1)>10 s ^test("logPrint3",$h)=$h_"*"_time1_"*"_time2_"*"_(time2-time1) 
			}
			else  {
				do ##class(isc.pdfbox.PdfboxFacade).print(jgw, fileReport, namePrinter) 
			}
  
		}
		Catch exception
		{
		If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
	}
	Catch exception
	{
	    If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
	}
  quit result
]]></Implementation>
</Method>

<Method name="startConcatPDF">
<Description>
Вызов java класса
Input:
   pStringFilesPDF - строка с исходными файлами через $c(0)
   pFlagPaginate - печатать номера страниц или нет
   pFileResultPDF - итоговый файл
   pFlagDeleteSourceFiles - если равен TRue, то в случае успешного формирования итогового файла исходные файлы удаляются (true - по умолчанию)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStringFilesPDF:%String,pFileResultPDF:%String,pFlagPaginate:%String=1,pFlagDeleteSourceFiles:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//s ^test("par")=$g(pStringFilesPDF)_"*"_$g(pFileResultPDF)_"*"_$g(pFlagPaginate)_"*"_$g(pFlagDeleteSourceFiles)
	if $get(pStringFilesPDF)="" Quit $$$ERROR($$$GeneralError,"Не указаны файлы для объединения")
	if $get(pFileResultPDF)="" Quit $$$ERROR($$$GeneralError,"Не указан файл с результатов объединения")
	
    //удаление файла pFileResultPDF, если существует
    if ##class(%File).Exists(pFileResultPDF)&&('##class(%File).Delete(pFileResultPDF)) {
  	   Quit $$$ERROR($$$GeneralError,"Файл "_pFileResultPDF_" занят другим приложением")
    }
    
 // открываем gateway
  set gateway=##class(Report.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")
  
  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port))
		Try
		{
			do ##class(isc.utils.MergePDF).concatPDF(jgw, pStringFilesPDF, pFileResultPDF, pFlagPaginate, pFlagDeleteSourceFiles)
		}
		Catch exception
		{
		If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
		
		/*
		// удаление исходных файлов , если надо (теперь это в Java коде)
		if pFlagDeleteSourceFiles=1 {
		   for ii=1:1:$length(pStringFilesPDF,$char(0)) {
			   set filename=$piece(pStringFilesPDF,$char(0),ii)
			   if ##class(%File).Exists(filename) {
				   set ok=##class(%File).Delete(filename)
				   s ^test("del",$i(^test("del")))=filename_"*"_ok
		       }
		   }
     	}*/
	}
	Catch exception
	{
	    If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
	}
	
  quit result
]]></Implementation>
</Method>

<Method name="startMain">
<Description>
Вызов java класса
Input:
   pStringFilesPDF - строка с исходными файлами через $c(0)
   pFlagPaginate - печатать номера страниц или нет
   pFileResultPDF - итоговый файл
   pFlagDeleteSourceFiles - если равен TRue, то в случае успешного формирования итогового файла исходные файлы удаляются (true - по умолчанию)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
 // открываем gateway
  set gateway=##class(Report.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")
  
  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port))
		Try
		{
			do ##class(isc.utils.MergePDF).main(jgw, "")
		}
		Catch exception
		{
		If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
		
		/*
		// удаление исходных файлов , если надо (теперь это в Java коде)
		if pFlagDeleteSourceFiles=1 {
		   for ii=1:1:$length(pStringFilesPDF,$char(0)) {
			   set filename=$piece(pStringFilesPDF,$char(0),ii)
			   if ##class(%File).Exists(filename) {
				   set ok=##class(%File).Delete(filename)
				   s ^test("del",$i(^test("del")))=filename_"*"_ok
		       }
		   }
     	}*/
	}
	Catch exception
	{
	    If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
	}
	
  quit result
]]></Implementation>
</Method>

<Method name="ExportToExcel">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>xmlfile:%String,xslfile:%String,outputdir:%String,outputfile:%String,logfile:%String,DisplayLog:%Boolean="false"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	    //s ^test("par")=$g(xmlfile)_"*"_$g(xslfile)_"*"_$g(outputfile)
		Set tSC=$$$OK
		if '##class(%File).Exists(xmlfile) w !,"Файл "_xmlfile_" не существует." 
		if '##class(%File).Exists(outputdir) w !,"Директория "_outputdir_" не существует."
		set isMultiSheet=0
		set aggregateTag=""
		set reportName="baseO"
		set suppresExcelHeaders=0
		set ExcelMode="element"
		if $get(logfile)="" set logfile=$$Path^REPORTSPB()_"\logerrors.txt"
		#; set up command line character to pipe output to a file
		If $$$isWINDOWS {
			Set pipechars = "2>>"
			Set pipeerror = "2>"
			Set PIPEVMS = ""
		}
		ElseIf $$$isUNIX {
			Set pipechars = ">"
			Set pipeerror = "2>"
			Set PIPEVMS = ""
		}
		ElseIf $$$isVMS {
			Set pipechars = "2>" ; output from FOP goes on standard error
			Set pipeerror = "2>"
			Set PIPEVMS = "@"
		}
		Else {
			Set pipechars = ">"
			Set pipeerror = "2>"
			Set PIPEVMS = ""
		}

		set jar=$$$exceljar
		Set xslt=xslfile //Set xslt=$$$toexcel
		Set xsltForAttribute=xslt //$$$toexcelfromattribute
		set workbook=$$PathXSL^REPORTSPB()_"\workbook.xml" //set workbook=$$$workbook
		if aggregateTag="" Set aggregateTag="aggregateNull"
		Set command=" -Xmx512m -cp """_jar_""" com.intersys.excel.ExportAsExcel -xml """
		Set command=command_xmlfile_""" -xsl """_xslt_""" -xslForAttribute """_xsltForAttribute
		Set command=command_""" -dir """_$replace(outputdir,"\","/")_""" -file """_outputfile
		Set command=command_""" -multiworksheet """_$s(isMultiSheet:"true",1:"false")_""" -displaylog """
		Set command=command_$s(DisplayLog:"true",1:"false")_""" -aggregateTag """_aggregateTag_""" -reportname """
		Set command=command_reportName_""" -workbook """_workbook_""" -suppressExcelHeaders """
		Set command=command_$s(suppresExcelHeaders:"true",1:"false")_""" -excelModeElement """
		Set command=command_$s((ExcelMode="element"):"true",1:"false")_""" """" "_pipeerror_" """_logfile_""""
		//Set command=" -Xmx512m -cp """_jar_""" com.intersys.excel.ExportAsExcel -xml """_xmlfile_""" -xsl """_xslt_""" -xslForAttribute """_xsltForAttribute_""" -dir """_$replace(outputdir,"\","/")_""" -file """_outputfile_""" -multiworksheet """_$s(isMultiSheet:"true",1:"false")_""" -displaylog """_$s(DisplayLog:"true",1:"false")_""" -aggregateTag """_aggregateTag_""" -reportname """_reportName_""" -workbook """_workbook_""" -suppressExcelHeaders """_$s(suppresExcelHeaders:"true",1:"false")_""" -excelModeElement """_$s((ExcelMode="element"):"true",1:"false")_""" """" "_pipeerror_" """_logfile_""""
		//s ^foobar($i(^foobar))=command
		//s ^foobar($i(^foobar))=$zu(147,"java")_command
		do $zf(-1,$zu(147,"java")_command)  
		quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
