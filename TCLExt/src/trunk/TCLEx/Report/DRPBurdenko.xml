<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.DRPBurdenko">
<Super>%RegisteredObject</Super>
<TimeCreated>62990,56693.179508</TimeCreated>

<Method name="CreateEpisodePDFReport">
<Description>
Создание файла PDF отчета для резултатов эпизода
Параметры:
pEpis - Id эпизода
pTestSets - буфер с Id наборов тестов (если пусто, все авторизованные)
pLanguage - язык результата (2-ENG, иначе - RUS )
этот параметр (pExtraParams) может быть разным у разных клиентов 
pExtraParams - дополнительные параметры формироваия отчета в формате $ListBuild
  set ExtraParamsZen=$lg(pExtraParams,1) дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport
  set pFlagPreview=$lg(pExtraParams,2) флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
pPDFFileName - по ссылке возвращается или передается имя созданного PDF файла
Возвращаемое значение:
Результат создания файла в формате %Status
Сама функция клиенто-зависимая и все вызовы этой функции находятся в клиентских программах!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pExtraParams:%String,&pPDFFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pLanguage=$get(pLanguage,1)
	set ExtraParamsZen=$lg(pExtraParams,1) //дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport
	set FlagPreview=$lg(pExtraParams,2) // флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
	
	Set reportclassname=$$ZenResultClassName^Settings.Reports()
	Kill ^||ResultForm.EpisodePCL
	Do ##class(TCLEx.Report.ResultForm).PCLEpisodeResult(reportclassname,pEpis,.pTestSets,pLanguage,$Name(^||ResultForm.EpisodePCL),FlagPreview)
	If '$Data(^||ResultForm.EpisodePCL) {
		Quit $$$ERROR($$$GeneralError,"Нет данных для эпизода "_pEpis_" !")
	}	
	Kill ^||ResultForm.EpisodeTable
	Do ##class(TCLEx.Report.ResultForm).PCLGlb2TableGlb($Name(^||ResultForm.EpisodePCL),$Name(^||ResultForm.EpisodeTable))
	
	set totalpages=##class(TCLEx.Report.ResultForm).PCLEpisodeTotalPages($Name(^||ResultForm.EpisodePCL))
	set pPDF=1
	set params=$lb("",pEpis,pPDF,pLanguage,$Name(^||ResultForm.EpisodeTable),ExtraParamsZen,totalpages)
	set ok=..CreateEpisodePDFReport0(reportclassname,params,pPDFFileName)
	
	If 'ok {
		Set pPDFFileName=""
	}	
	Quit ok
]]></Implementation>
</Method>

<Method name="CreateEpisodePDFReport0">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportClassName:%String,pParams:%String,pPDFFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Запоминаем значения %request, если переменная уже заполнена
	kill oldrequest
	If $Data(%request) {
		Set oldrequest("URL")=%request.URL
		Set oldrequest("SERVER_NAME")=$Get(%request.CgiEnvs("SERVER_NAME"))
		Set oldrequest("$CSPTOFILE")=$Get(%request.Data("$CSPTOFILE",1))
	}
	If '$Data(%request) {
		Set %request=##class(%CSP.Request).%New()
	}
	
	Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("$CSPTOFILE",1)=1
	
	Set repobj=$ClassMethod(pReportClassName,"%New")
	Set repobj.OrderNumber=$lg(pParams,1)
	Set repobj.Episode=$lg(pParams,2)
	Set repobj.PDF=$lg(pParams,3)
	Set repobj.Language=$lg(pParams,4)
	Set repobj.DataGlobal=$lg(pParams,5)
	Set repobj.ExtraParams=$lg(pParams,6)
	Set repobj.TotalPages=$lg(pParams,7)
	Set ok=repobj.GenerateReport(pPDFFileName,2)
	
	// Восстанавливаем %request
	If $Data(oldrequest) {
		Set %request.URL=$Get(oldrequest("URL"))
		Set %request.CgiEnvs("SERVER_NAME")=$Get(oldrequest("SERVER_NAME"))
		Set %request.Data("$CSPTOFILE",1)=$Get(oldrequest("$CSPTOFILE"))
	}	
	
	quit ok
]]></Implementation>
</Method>
</Class>
</Export>
