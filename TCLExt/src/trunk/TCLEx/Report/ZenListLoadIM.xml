<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.ZenListLoadIM">
<Description>
TCLEx.Report.ZenListLoadIM
Создание pdf-файла для прибора IMax1</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62434,54928.629676</TimeCreated>

<Parameter name="DEFAULTMODE">
<Description>
This is the default display mode for this report.</Description>
<Default>pdf</Default>
</Parameter>

<Parameter name="REPORTXMLNAMESPACE">
<Description>
This is the optional XML namespace used for the report.</Description>
</Parameter>

<Property name="listload">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="refGlb">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="listloadDate">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="ReportDefinition">
<Description>
This XML defines the logical contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition" runonce="true" name="ListLoadIM"  >
 <call method="GenerateReportXML"/>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
This XML defines the display for this report.
This is used to generate the XSLT stylesheets for both HTML and XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="ListLoadIM" title='Лист загрузки для анализатора iMark' style='none'>
 
 <document width="297mm" height="210mm" marginLeft="20mm" marginRight="10mm" marginTop="15mm" marginBottom="10mm" headerHeight="30mm" referenceOrientation="0">
<xslinclude href="C:\InterSystems\Ensemble\CSP\BION\Report\fop.xsl" />

<class name="table.tableHeader">
   <att name="font-size" value="12pt" />
   <att name="table-layout" value="fixed" />
   <att name="font-weight" value="bold" />
   <att name="text-align" value="center" />
   
</class>
<class name="table.tableBody">
   <att name="font-size" value="8pt" />
   <att name="table-layout" value="fixed" />
   <att name="border" value="solid" />
   <att name="text-align" value="center" />
   <att name="line-height" value="10mm" />
   <att name="border-collapse" value="collapse" />
   <att name="border-width" value="1px" />
</class>

</document>

<body foStyle="font-family='Arial'" > 
<group name="Page" pagebreak="true" >
<header>
  <table orient="row" class="tableHeader"  >
    <item field="Header" width="100%" />
  </table>
<line pattern="empty"/>
</header>
<group name="Row">
  <table orient="col" class="tableBody"> 
    <div style="border:solid;width:5mm"><item field="Col1"></item></div>
    <div style="border:solid;width:22mm"><item field="Col2" /></div>
    <div style="border:solid;width:22mm"><item field="Col3" /></div>
    <div style="border:solid;width:22mm"><item field="Col4" /></div>
    <div style="border:solid;width:22mm"><item field="Col5" /></div>
    <div style="border:solid;width:22mm"><item field="Col6"/></div>
    <div style="border:solid;width:22mm"><item field="Col7" /></div>
    <div style="border:solid;width:22mm"><item field="Col8" /></div>
    <div style="border:solid;width:22mm"><item field="Col9" /></div>
    <div style="border:solid;width:22mm"><item field="Col10" /></div>
    <div style="border:solid;width:22mm"><item field="Col11" /></div>
    <div style="border:solid;width:22mm"><item field="Col12" /></div>
    <div style="border:solid;width:22mm"><item field="Col13"/></div>
  </table>
</group>
</group>
</body>
 
</report>
]]></Data>
</XData>

<Method name="GenerateReportXML">
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	set refGlb=..refGlb 
	//подсчет кол-ва страниц
    //Set countPage=..getCountPages()
	Set testcode=""
	For  {
		Set testcode=$Order(@refGlb@(testcode)) If testcode="" Quit
		Set testcodeobj=##class(User.CTTestCode).%OpenId(testcode)
		If '$IsObject(testcodeobj) Continue
		set matrix="" set countmatrixall=$order(@refGlb@(testcode,""),-1)
		for {
			set matrix=$order(@refGlb@(testcode,matrix)) if matrix="" quit
		    Set header="Список загрузки № "_(..listload)_" от "_(..listloadDate)_" по исследованию "_testcode_" "_testcodeobj.CTTCSynonym_" (плашка "_matrix_" из "_countmatrixall_")"
		    Do stream.WriteLine("<Page>")
		    Do stream.WriteLine("<Header>"_$ZConvert(header,"o","XML")_"</Header>")
		    Do stream.WriteLine("<Row>")
		    set colname="Col1"
	        Do stream.WriteLine("<"_colname_">"_""_"</"_colname_">")
		    for col=1:1:12 {
			    set colname="Col"_(col+1)
	            Do stream.WriteLine("<"_colname_">"_col_"</"_colname_">")
            }
		    Do stream.WriteLine("</Row>")

            Kill ^||PCLMatrix
            Do TurnMatrix^MIF152RU02($name(@refGlb),$Name(^||PCLMatrix),testcode,matrix)
            set row=""
            for {
        	    set row=$order(^||PCLMatrix(row)) if row="" quit
        	    Do stream.WriteLine("<Row>")
        	    set colname="Col1"
        	    Do stream.WriteLine("<"_colname_">"_$ZConvert(row,"o","XML")_"</"_colname_">")
	     	    set col=""
	            for {
		           set col=$order(^||PCLMatrix(row,col)) if col="" quit
		           set value=$get(^||PCLMatrix(row,col))
			       set colname="Col"_(col+1)
	               Do stream.WriteLine("<"_colname_">"_$ZConvert(value,"o","XML")_"</"_colname_">")
		           
	            }
        	    Do stream.WriteLine("</Row>")
             }
             Do stream.WriteLine("</Page>")
        }
	}
    Quit stream
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//подсчет кол-ва страниц

]]></Content>
</UDLText>

<Method name="getCountPages">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set refGlb=..refGlb 
	set countPages=0
	if refGlb'="" {
         Set testcode=""
	     For  {
	    	Set testcode=$Order(@pMaxtrixGlb@(testcode)) If testcode="" Quit
	    	Set testcodeobj=##class(User.CTTestCode).%OpenId(testcode)
	    	If '$IsObject(testcodeobj) Continue
	    	set numMatrix=""
	     	for {
	    		set numMatrix=$order(@pMaxtrixGlb@(testcode,numMatrix)) if numMatrix="" quit
	    		set countPages=countPages+1
	    	}
	     }
	}
	quit countPages
]]></Implementation>
</Method>

<Method name="GetPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>listload:%String,refGlb:%String,loadlisthdate:%String,fileReport:%String</FormalSpec>
<PublicList>%request</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
	;Set %request=##class(%CSP.Request).%New()
	;Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	;Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	;Set %request.Data("listload")=listload
	;Set %request.Data("refGlb")=refGlb
	Set report = ##class(TCLEx.Report.ZenListLoadIM).%New()
	set report.listload=listload
	set report.refGlb=refGlb
	set report.listloadDate=loadlisthdate
	Do report.GenerateReport(fileReport,2)
  } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<Method name="printPDF">
<ClassMethod>1</ClassMethod>
<FormalSpec>listload:%String,refGlb:%String,fileReport:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ret=$$$OK
  try
  {	
     $$$ThrowOnError(##class(TCLEx.Report.ZenListLoadIM).GetPDF(listload, refGlb, fileReport))
     $$$ThrowOnError(##class(Report.rpt).getNamePrinterForReport(reportID,.printerName)) 
     if ##class(%File).Exists(fileReport) {
        $$$ThrowOnError(##class(Report.rpt).startPdfBoxFacade(fileReport,printerName))
     }
   } catch(exception)
  {
	  set ret=exception.AsStatus()
  }	
  quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//Method %OnBeforeReport() As %Status

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//{

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//	set ..refGlb=$name(^test("matrix"))

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//	set ..listload=1

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//	set ..listloadDate="ggg"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//	Quit $$$OK

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//}

]]></Content>
</UDLText>

<Method name="%DisplayPDF1">
<Description>
This method outputs the contents of the PDF report
RenderServer is set to the port of the hot JVM server
There is also a queuing hot JVM server which queues files for PDF rendering later
This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  </Description>
<FormalSpec><![CDATA[DisplayLog:%Boolean=0,RenderServer:%String="",async:%Boolean=0,&xmlfile:%String,&xslfile:%String,&pdffile:%String,&lockfile:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		Set tSC = ..%MakeToXSLFOFile(.xslfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
		if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile))

		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			if (..#HANG'=0) hang ..#HANG
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile)
	} While (0)

	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
