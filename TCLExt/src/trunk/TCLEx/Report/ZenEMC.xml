<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.ZenEMC">
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62355,51855.555434</TimeCreated>

<Property name="Episode">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="Language">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="PDF">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="TotalPages">
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="DataGlobal">
<Type>%String</Type>
</Property>

<Property name="ExtraParams">
<Description>
Дополнительные параметры</Description>
<Type>%String</Type>
</Property>

<Property name="ImpersonalResult">
<Description>
Анонимый результат (не выводится ФИО и Дата рождения)</Description>
<Type>%Boolean</Type>
</Property>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition" name='ResultReport' runonce="true"> 
<call method="GenerateReportXML"/>    
 </report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='ResultReport' title='Результат исследования' style='standard'>
<document width="210mm" height="297mm" marginLeft="10mm" marginRight="10mm" marginTop="5mm" marginBottom="10mm" headerHeight="30mm" referenceOrientation="0">
<xslinclude href="C:\InterSystems\Ensemble\CSP\EMC\Report\fop.xsl" />
</document>


<pageheader>
<foimg src="C:\InterSystems\Ensemble\CSP\EMC\Report\emc_logo.jpg" contentWidth="190mm" contentHeight="30mm" />
</pageheader >

<body >
<focall method="Body"/>
</body>
</report>
]]></Data>
</XData>

<Method name="EpisodeResultFileName">
<Description>
Получение имени файла результата для эпизода
Параметры:
pEpis - ID эпизода
pTestSets - буфер с ID наборов тестов (если пусто,то все наборы эпизода)
pLanguage - язык отчета
pExtension - расширение файла
Возвращаемое значение:
Имя файла результата для эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pExtension:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Quit pEpis_"-"_$Select(pLanguage=2:"E",1:"R")_"."_pExtension
]]></Implementation>
</Method>

<Method name="CreateValuesBuf">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	
	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set hospobj=episobj.EPVISHospitalCodeDR
	If $IsObject(hospobj) {
		Set @pRepParamGlb@("CompanyCode")=hospobj.%Id()
		Set @pRepParamGlb@("CompanyName")=hospobj.CTHOSName
	}	
	Set @pRepParamGlb@("Episode")=pEpis
	Set @pRepParamGlb@("DateOfCollection")=$$Horolog2Date^KSUTIL1(episobj.EPVISDateOfCollection)
	Set time=episobj.EPVISTimeOfCollection
	If time'="" {
		Set @pRepParamGlb@("TimeOfCollection")=$$DisplayTime^KSPCLUtils(time*60,2)
	}
	If pLanguage=2 {
		Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1,40)
	} Else {
		Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISExtra1,episobj.EPVISExtra2,episobj.EPVISExtra3,40)
	}		

	Set @pRepParamGlb@("Age")=$$AgeString^KSUTIL2(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage)	
	//
	Set sex=$Select(pLanguage=2:"Unknown",1:"Неизвестен")   
	Set sexcode="U"
	If $IsObject(episobj.EPVISSpeciesDR) {
		Set sexcode=episobj.EPVISSpeciesDR.%Id()
		If (sexcode="M") { 
			Set sex=$Select(pLanguage=2:"Male",1:"Мужской")
		} ElseIf (sexcode="F") {
			Set sex=$Select(pLanguage=2:"Female",1:"Женский")
		
		}	
	}	
	Set @pRepParamGlb@("SexCode")=sexcode
	Set @pRepParamGlb@("Sex")=sex
	//
	Set doctobj=episobj.EPVISDoctorCodeDR
	If $IsObject(doctobj) {
		Set @pRepParamGlb@("DoctorCode")=doctobj.%Id()
		Set @pRepParamGlb@("Doctor")=$Select(pLanguage=2:doctobj.CTDRSurname,1:doctobj.CTDRExtraName1)
	}	
	Set @pRepParamGlb@("DoctorNames")=$Extract(episobj.EPVISExtra4,1,32)
	//
	Set @pRepParamGlb@("DOB")=$$Horolog2Date^KSUTIL1(episobj.EPVISDateOfBirth)
	Set depcode=$Piece(pDepCode,$Char(1),1)
	Set queueid=$Piece(pDepCode,$Char(1),2)
	If (depcode'="")&&(pLanguage'="") {
		If ##class(User.CTSuperSet).%ExistsId(depcode) {
			Set ssetobj=##class(User.CTSuperSet).%OpenId(depcode,0)
			If $IsObject(ssetobj) {
				Set @pRepParamGlb@("Department")=ssetobj.CTSSDesc
			}	
		} Else {
			If pLanguage=2 {
				Set depobj=##class(User.CTDepartment).%OpenId(depcode,0)
				If $IsObject(depobj) {
					Set @pRepParamGlb@("Department")=depobj.CTDEPName
				}	
				
			} Else {	
				Set @pRepParamGlb@("Department")=$Get(^TTAB("DEP",depcode,"LAN",pLanguage))
			}	
		}
	}
	Set @pRepParamGlb@("VerificationQueue")=(queueid'="")
	If $IsObject(episobj.EPVISStatusPrinting) {
		Set @pRepParamGlb@("PrintingStatus")=episobj.EPVISStatusPrinting.%Id()
	}
	//
	Set authtestset=""
	Set key="",testobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		If '##class(TCLEx.Function.TestSet).IsAuthorised(testobj) Continue
		Set testsetid=testobj.%Id()
		If '..IsTestSet4Department(testsetid,.pTestSets,pDepCode) Continue
		Set authtestset=testsetid
		Quit
	}
	//
	If authtestset'="" {
		Do ..SetTestSetVals(authtestset,pLanguage,pRepParamGlb)
	}
	If ..ImpersonalResult {
		Set @pRepParamGlb@("FullName")=""
		Set @pRepParamGlb@("DOB")=""
	}
]]></Implementation>
</Method>

<Method name="IsTestSet4Department">
<Description>
Подходит ли объект набора тестов эпизода pTestSetObj для отдела pDepCode
для супер-набора также проверяется, что код набора тестов является заключением (pSummaryTestSet) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pTestSets:%String,pDepCode:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit 0
	If ($Data(pTestSets)&&('$Data(pTestSets(pTestSetId)))) Quit 0
	If '$IsObject(testsetobj.VISTSTestSetDR) Quit 0
	//
	Set depcode=$Piece(pDepCode,$Char(1),1)
	Set queueid=$Piece(pDepCode,$Char(1),2)
	//
	Set testsetcode=testsetobj.VISTSTestSetDR.%Id()
	If $Extract(testsetcode,1,1)'=depcode Quit 0 
	//
	If queueid="" Quit 1
	If (queueid'="")&&(##class(TCLEx.Function.TestSet).GetPrintableVerificationQueue(testsetobj)=queueid) Quit 1
	Quit 0
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Загрузить значения полей для печати, которые берутся из набора тестов 

]]></Content>
</UDLText>

<Method name="SetTestSetVals">
<Description>
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set userobj=testsetobj.VISTSUserAuthorisedDR
	If $IsObject(userobj) { 
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=userobj.SSUSRName
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This callback is invoked after this report is instantiated
/// and before it is run.
Method %OnBeforeReport() As %Status
{
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="RowCount">
<Description>
Число строк для отдела pDepCode</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDepCode:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Quit 45
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method outputs the contents of the PDF report
/// RenderServer is set to the port of the hot JVM server
/// There is also a queuing hot JVM server which queues files for PDF rendering later
/// This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  
Method %DisplayPDF1(DisplayLog As %Boolean = 0, RenderServer As %String = "", async As %Boolean = 0, ByRef xmlfile As %String, ByRef xslfile As %String, ByRef pdffile As %String, ByRef lockfile As %String) As %Status
{
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		Set tSC = ..%MakeToXSLFOFile(.xslfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
		if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile))

		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			if (..#HANG'=0) hang ..#HANG
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile)
	} While (0)

	Quit tSC
}
*/
]]></Content>
</UDLText>

<Method name="GenerateReportXML">
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("<Episode>"_$ZConvert(..Episode,"o","XML")_"</Episode>")
	Do stream.WriteLine("<TotalPages>"_$ZConvert(..TotalPages,"o","XML")_"</TotalPages>")
	Do stream.WriteLine("<CompanyCode>"_$ZConvert($Get(^||ZenEMC.Vals("CompanyCode")),"o","XML")_"</CompanyCode>")
	Do stream.WriteLine("<CompanyName>"_$ZConvert($Get(^||ZenEMC.Vals("CompanyName")),"o","XML")_"</CompanyName>")
	Do stream.WriteLine("<DateOfCollection>"_$ZConvert($Get(^||ZenEMC.Vals("DateOfCollection")),"o","XML")_"</DateOfCollection>")
	Do stream.WriteLine("<TimeOfCollection>"_$ZConvert($Get(^||ZenEMC.Vals("TimeOfCollection")),"o","XML")_"</TimeOfCollection>")
	Do stream.WriteLine("<FullName>"_$ZConvert($Get(^||ZenEMC.Vals("FullName")),"o","XML")_"</FullName>")
	Do stream.WriteLine("<Age>"_$ZConvert($Get(^||ZenEMC.Vals("Age")),"o","XML")_"</Age>")
	Do stream.WriteLine("<SexCode>"_$ZConvert($Get(^||ZenEMC.Vals("SexCode")),"o","XML")_"</SexCode>")
	Do stream.WriteLine("<Sex>"_$ZConvert($Get(^||ZenEMC.Vals("Sex")),"o","XML")_"</Sex>")
	Do stream.WriteLine("<Doctor>"_$ZConvert($Get(^||ZenEMC.Vals("DoctorNames")),"o","XML")_"</Doctor>")
	Do stream.WriteLine("<DOB>"_$ZConvert($Get(^||ZenEMC.Vals("DOB")),"o","XML")_"</DOB>")
	Do stream.WriteLine("<PrintingStatus>"_$ZConvert($Get(^||ZenEMC.Vals("PrintingStatus")),"o","XML")_"</PrintingStatus>")
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultHeader">
<FormalSpec>pRepParamGlb:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	/*
	If $Get(@pRepParamGlb@("VerificationQueue")) {
		Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
		Do stream.WriteLine("<xsl:attribute name='font-size'>12pt</xsl:attribute>")
		Do stream.WriteLine("<xsl:attribute name='font-weight'>bold</xsl:attribute>")
		Do stream.WriteLine("<xsl:attribute name='text-align'>center</xsl:attribute>")
		Do stream.WriteLine($ZConvert($Select(..Language=2:"Not authorized result",1:"Неподтвержденный результат"),"O","XML"))
		Do stream.WriteLine("</fo:block>")
	}*/	 
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='110mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='25mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='25mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block> "_$ZConvert($Select(..Language=2:"Company:",1:"Организация:"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block> "_$ZConvert($Get(@pRepParamGlb@("CompanyName")),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block> "_$ZConvert($Select(..Language=2:"Lab.Visit:",1:"Лаб.номер: "),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block> "_$ZConvert(..Episode,"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")

	Do stream.WriteLine("<fo:block text-align='center'><fo:leader leader-pattern='rule' rule-thickness='0.5pt' leader-length='190mm'/></fo:block>")

	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='17mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='70mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='20mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='23mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='15mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='40mm'/>")

	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell display-align='after'><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"DATE:",1:"ДАТА :"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell display-align='after'><fo:block>"_$ZConvert($Get(@pRepParamGlb@("DateOfCollection")),"o","XML")_"</fo:block></fo:table-cell>")
	If ..ImpersonalResult=1 {							// Не печатаем ДР для анонимных результатов
		Do stream.WriteLine("			<fo:table-cell><fo:block ></fo:block></fo:table-cell>")
		Do stream.WriteLine("			<fo:table-cell><fo:block ></fo:block></fo:table-cell>")
	} Else {
		Do stream.WriteLine("			<fo:table-cell display-align='after'><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block >"_$ZConvert($Select(..Language=2:"PATIENT:",1:"ПАЦИЕНТ:"),"o","XML")_"</fo:block></fo:table-cell>")
		Do stream.WriteLine("			<fo:table-cell display-align='after' number-columns-spanned='3'><xsl:attribute name='font-weight'>bold</xsl:attribute><xsl:attribute name='font-size'>12pt</xsl:attribute><fo:block>"_$ZConvert($Get(@pRepParamGlb@("FullName")),"o","XML")_"</fo:block></fo:table-cell>")
	}	
	//Do stream.WriteLine("			<fo:table-cell display-align='after'><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block >"_$ZConvert($Select(..Language=2:"PATIENT:",1:"ПАЦИЕНТ:"),"o","XML")_"</fo:block></fo:table-cell>")
	//Do stream.WriteLine("			<fo:table-cell display-align='after' number-columns-spanned='3'><xsl:attribute name='font-weight'>bold</xsl:attribute><xsl:attribute name='font-size'>12pt</xsl:attribute><fo:block>"_$ZConvert($Get(@pRepParamGlb@("FullName")),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"TIME:",1:"ВРЕМЯ:"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block>"_$ZConvert($Get(@pRepParamGlb@("TimeOfCollection")),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"AGE:",1:"ВОЗРАСТ:"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block>"_$ZConvert($Get(@pRepParamGlb@("Age")),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"SEX:",1:"ПОЛ:"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block>"_$ZConvert($Get(@pRepParamGlb@("Sex")),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"DR  :",1:"ВРАЧ :"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block>"_$ZConvert($Get(@pRepParamGlb@("DoctorNames")),"o","XML")_"</fo:block></fo:table-cell>")
	If ..ImpersonalResult=1 {							// Не печатаем ДР для анонимных результатов
		Do stream.WriteLine("			<fo:table-cell><fo:block ></fo:block></fo:table-cell>")
		Do stream.WriteLine("			<fo:table-cell><fo:block ></fo:block></fo:table-cell>")
	} Else {
		Do stream.WriteLine("			<fo:table-cell><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"DOB:",1:"Д.Р.:"),"o","XML")_"</fo:block></fo:table-cell>")
		Do stream.WriteLine("			<fo:table-cell number-columns-spanned='3'><fo:block>"_$ZConvert($Get(@pRepParamGlb@("DOB")),"o","XML")_"</fo:block></fo:table-cell>")
	}	
	//Do stream.WriteLine("			<fo:table-cell><xsl:attribute name='font-weight'>bold</xsl:attribute><fo:block>"_$ZConvert($Select(..Language=2:"DOB:",1:"Д.Р.:"),"o","XML")_"</fo:block></fo:table-cell>")
	//Do stream.WriteLine("			<fo:table-cell number-columns-spanned='3'><fo:block>"_$ZConvert($Get(@pRepParamGlb@("DOB")),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	Do stream.WriteLine("<fo:block text-align='center'><fo:leader leader-pattern='rule' rule-thickness='0.5pt' leader-length='190mm' /></fo:block>")
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultTable">
<FormalSpec>pPageNumber:%Integer,pTotalPages:%Integer,pPageGlb:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	
	Set stream=##class(%GlobalCharacterStream).%New()
	//
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='font-size'>12pt</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>5mm</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='text-align'>center</xsl:attribute>")
	Do stream.WriteLine($ZConvert($Get(@pRepParamGlb@("Department")),"O","XML"))
	Do stream.WriteLine("</fo:block>")

	Do stream.WriteLine("<fo:block><fo:leader leader-pattern='space' rule-thickness='1px'/></fo:block>")
	//
	Do stream.WriteLine("    <fo:table xsl:use-attribute-sets='table1' background-color='#EFEFEF' border-width='1pt' border-style='solid' table-layout='fixed' width='100%' border-collapse='separate'>")
	For i=1:1:90 {
	 Do stream.WriteLine("      <fo:table-column column-width='2.11mm'/>")
	}
	Do stream.WriteLine("      <fo:table-body>")
	If ..Language=2 {
	Do stream.WriteLine("        <fo:table-row line-height='10mm'>")	// Для ENG - заголовок в 1 строку 10 мм
	} Else {
	Do stream.WriteLine("        <fo:table-row line-height='5mm'>")		// Для RUS - заголовок в 2 строках по 5 мм
	}	 
	Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("          <fo:table-cell number-columns-spanned='32' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>"_$Select(..Language=2:"Constituent",1:"Наименование теста")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("          <fo:table-cell number-columns-spanned='12' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>"_$Select(..Language=2:"Results",1:"Результат")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("          <fo:table-cell number-columns-spanned='12' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>"_$Select(..Language=2:"Units",1:"Единицы измерения")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("          <fo:table-cell number-columns-spanned='17' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>"_$Select(..Language=2:"Limits",1:"Референсные значения")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("          <fo:table-cell number-columns-spanned='17' border-bottom-width='1pt' border-bottom-style='solid'><fo:block></fo:block></fo:table-cell>")
	Do stream.WriteLine("        </fo:table-row >")

	Set maxrowcount=..RowCount()
	For i=1:1:maxrowcount {
	Set str="        <fo:table-row line-height='3.55mm'>"
	If i#2 {
	 	Set str="        <fo:table-row line-height='3.55mm' background-color='#FFFFFF'>"
	}	
	Do stream.WriteLine(str) 
	If '$Data(@pPageGlb@(i)) {
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='90'><fo:block>&#160;</fo:block></fo:table-cell>")
	} Else {
		Set col=""
		For  {
			Set col=$Order(@pPageGlb@(i,col))
			If col="" Quit
			Set cssclass=$Get(@pPageGlb@(i,col,"CSSClass"))
			Set colspan=$Get(@pPageGlb@(i,col,"ColSpan"))
			Set value=$Get(@pPageGlb@(i,col,"Value"))
			If value="" {
				Set value=$Char(160)
			}	
			Set bold=$Get(@pPageGlb@(i,col,"Bold"))
			Set italic=$Get(@pPageGlb@(i,col,"Italic"))
			Set underline=$Get(@pPageGlb@(i,col,"Underline"))
			Set str="<fo:table-cell "
			If cssclass'="" {
				Set str=str_"xsl:use-attribute-sets='"_cssclass_"' "
			}
			If colspan>1 {
				Set str=str_"number-columns-spanned='"_colspan_"' "
			}
			If bold {
				Set str=str_" font-weight='bold' "
			}	
			If italic {
				Set str=str_" font-style='italic' "
			}	
			If underline {
				Set str=str_" text-decoration='underline' "
			}	
			
			Set str=str_">"
			Set str=str_"<fo:block>"
			Set str=str_$ZConvert(value,"O","XML")
			Set str=str_"</fo:block></fo:table-cell>"
			Do stream.WriteLine(str)	
		}	
	}	
	Do stream.WriteLine("        </fo:table-row>")
	}	 
	Do stream.WriteLine("      </fo:table-body>")
	Do stream.WriteLine("    </fo:table>")
	Quit stream
]]></Implementation>
</Method>

<Method name="Footer">
<FormalSpec>pPageNumber:%Integer,pTotalPages:%Integer,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='0mm' top='235mm' width='190mm' height='50mm' overflow='hidden'>")
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='130mm'/>")
	//Do stream.WriteLine("	<fo:table-column column-width='80mm'/>")
	//Do stream.WriteLine("	<fo:table-column column-width='50mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block>&#160;</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block>"_$ZConvert($Select(..Language=2:"DOCTOR'S SIGNATURE",1:"ВРАЧ"),"o","XML")_"  ____________________________"_"</fo:block></fo:table-cell>")
	//Do stream.WriteLine("			<fo:table-cell ><fo:block>&#160;</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block>"_$ZConvert($Select(..Language=2:"STAMP",1:"ШТАМП"),"o","XML")_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")

	Do stream.WriteLine("<fo:block><fo:leader leader-pattern='space' rule-thickness='1px'/></fo:block>")
	Set str=""
	If $Get(@pRepParamGlb@("VerificationQueue")) {
		Set str="Urgent! "
	}	
	If $Get(@pRepParamGlb@("PrintingStatus"))="F" {
		Set str=str_$Select(..Language=2:"**** FINAL REPORT. Please File ****",1:"**** Заключительный отчет ****")
	} Else {
		Set str=str_$Select(..Language=2:"**** INTERIM REPORT. Please File ****",1:"**** Промежуточный отчет ****")
	}		
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='NORMAL' text-align='center'>"_str_"</fo:block>")
	Do stream.WriteLine("</fo:block-container>")

	Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='160mm' top='245mm' width='30mm' height='10mm' overflow='hidden'>")
	Set str=$Select(..Language=2:"Page",1:"Стр.")_" "_pPageNumber_"/"_pTotalPages

	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='NORMAL' font-size='8pt'>"_$ZConvert(str,"o","XML")_"</fo:block>")
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='NORMAL' font-size='8pt'>"_$ZDateTime($Horolog,4,2)_"</fo:block>")
	Do stream.WriteLine("</fo:block-container>")

	
	Set stampfilename="",faximilefilename=""
	Set doctor=$Get(@pRepParamGlb@("TS_AuthorisedDoctorId"))
	Set doctoralias=$$DoctorAlias^Settings.Reports(doctor)
	If (doctoralias'="") {
		Set stampfilename=..ImagePath()_"\stamp_"_doctoralias_".png"
		If '##class(%File).Exists(stampfilename) {
			Set stampfilename=..ImagePath()_"\stamp_emc.png"
		}
		Set faximilefilename=..ImagePath()_"\faximile_"_doctoralias_".png"
		If '##class(%File).Exists(faximilefilename) {
			Set faximilefilename=..ImagePath()_"\faximile_serobyan.png"
		}
	} Else {
		Set stampfilename=..ImagePath()_"\stamp_emc.png"
		Set faximilefilename=..ImagePath()_"\faximile_serobyan.png"
	}	
	If '##class(%File).Exists(stampfilename) {
		Set stampfilename=""
	}
	If '##class(%File).Exists(faximilefilename) {
		Set faximilefilename=""
	}
	//Set stampfilename=..ImagePath()_"\stamp_serobyan.png"
	If stampfilename'="" {
		Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='130mm' top='210mm' width='40mm' height='40mm' overflow='hidden'>")
		Do stream.WriteLine("<fo:block>")
		Do stream.WriteLine("	<fo:external-graphic  content-width='40mm' content-height='40mm'   >")
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(stampfilename,"o","XML")_"</xsl:attribute>")
		Do stream.WriteLine("	</fo:external-graphic>")
		Do stream.WriteLine("</fo:block>")
		Do stream.WriteLine("</fo:block-container>")
	}

	If faximilefilename'="" {
		Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='80mm' top='230mm' width='30mm' height='15mm' overflow='hidden'>")
		Do stream.WriteLine("<fo:block>")
		Do stream.WriteLine("	<fo:external-graphic  content-width='30mm' content-height='15mm'   >")
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(faximilefilename,"o","XML")_"</xsl:attribute>")
		Do stream.WriteLine("	</fo:external-graphic>")
		Do stream.WriteLine("</fo:block>")
		Do stream.WriteLine("</fo:block-container>")
	}

	If pPageNumber<pTotalPages {
		Do stream.WriteLine("<fo:block break-after='page'/>")
	}

	Quit stream
]]></Implementation>
</Method>

<Method name="Body">
<Description>
Отрисовка содержания отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set vals=..ExtraParams
	If (vals'="") {
		Set ..ImpersonalResult=($ListGet(..ExtraParams,1)=1)
	}	
	Set stream=##class(%GlobalCharacterStream).%New()
	Set glb=..DataGlobal
	Set dep="",pagenumber=0
	For  {
		Set dep=$Order(@glb@(dep))
		If dep="" Quit
		Kill ^||ZenEMC.Vals
		Do ..CreateValuesBuf(..Episode,,dep,..Language,$Name(^||ZenEMC.Vals))
		Set headerstream=..ResultHeader($Name(^||ZenEMC.Vals))
		Set page=""
		For  {
			Set page=$Order(@glb@(dep,page))
			If page="" Quit
			Set pagenumber=pagenumber+1
			Do stream.CopyFrom(headerstream)
			Set tablestream=..ResultTable(pagenumber,..TotalPages,$Name(@glb@(dep,page)),$Name(^||ZenEMC.Vals))
			Do stream.CopyFrom(tablestream)
			Set footerstream=..Footer(pagenumber,..TotalPages,$Name(^||ZenEMC.Vals))
			Do stream.CopyFrom(footerstream)
		}	
	}	
	Quit stream
]]></Implementation>
</Method>

<Method name="ImagePath">
<Description>
Путь к каталогу с графическими файлами</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "C:\InterSystems\Ensemble\CSP\EMC\Report"
]]></Implementation>
</Method>
</Class>
</Export>
