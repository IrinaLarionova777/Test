<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.DRP">
<Super>%RegisteredObject</Super>
<TimeCreated>63035,58266.661215</TimeCreated>

<Method name="CreateEpisodePDFReport">
<Description>
Создание файла PDF отчета для резултатов эпизода
Параметры:
pEpis - Id эпизода
pTestSets - буфер с Id наборов тестов (если пусто, все авторизованные)
pExtraParams - дополнительные параметры формироваия отчета в формате $ListBuild (обязательная длина)
  set pPDF=$lg(pExtraParams,1) - признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
  set pPDFDir=$lg(pExtraParams,2) - каталог, куда выгружать файл
  set pOverWritePDF=$lg(pExtraParams,3) - если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
  set pLanguage=$lg(pExtraParams,4) язык результата (2-ENG, иначе - RUS )
  set flagLogFileCreate=$lg(pExtraParams,5) флаг создавать ли lock файл во время создания pdf файла 
  set flagLogFileTest=$lg(pExtraParams,6) флаг проверять ли внешний lock файл работы с pdf файлом
  set pFlagPreview=$lg(pExtraParams,7) флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
pExtraParamsZen - дополнительные параметры формирования отчета в формате $ListBuild  for ZenReport (property ExtraParams)
pPDFFileName - по ссылке возвращается или передается имя созданного PDF файла
Возвращаемое значение:
Результат создания файла в формате %Status
Сама функция клиенто-зависимая и все вызовы этой функции находятся в клиентских программах!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pExtraParams:%String,pExtraParamsZen:%String,&pPDFFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //s ^test("par")=$g(pEpis)_"*"_$g(pTestSets)_"*"_$g(pExtraParams)_"*"_$g(pPDFFileName)
  //m ^test("par",1)=pTestSets
  //s ^test("par","pExtraParams")=pExtraParams
  try {
	set FlagPreview=$lg(pExtraParams,7)  //флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
	set pLanguage=$lg(pExtraParams,4) //язык результата
	
	// Пока будем формировать один файл по всем наборам тестов ( и вордовским и невордовским) только при FlagPreview="V" (предпросмотр)
		if $get(pPDFFileName)="" set ok=$$$ERROR($$$GeneralError,"Не указано имя файла предпросмотра.") quit
		
		// все наборы тестов в эпизоде с частью информации
		Kill ^||EMC.TestSets
		Do ##class(TCLEx.Function.Episode).MakeTestSetsBuf(pEpis,$Name(^||EMC.TestSets))
		
		kill vspTestSets
		m vspTestSets=pTestSets
	    // если pTestSets не задана, то просто берем все наборы тестов из эпизода  (потом сделаются все проверки ниже)
	    if $data(vspTestSets)<10 {
		    merge vspTestSets=^||EMC.TestSets kill ^||EMC.TestSets
	    } else {
		    set tsid=""
	         for {
		           set tsid=$order(^||EMC.TestSets(tsid),1,rec) if tsid="" quit
		           set ts=$lg(rec,2),superset=$lg(rec,3)
		           if ('$data(vspTestSets(ts)))&&(superset'="")&&('$data(vspTestSets(superset))) {
			           kill ^||EMC.TestSets(tsid)
		           }
	         }
	         kill vspTestSets 
	         merge vspTestSets=^||EMC.TestSets 
	         kill ^||EMC.TestSets
	    }
	    if '$data(vspTestSets) {
		    set ok=$$$ERROR($$$GeneralError,"Файл не сформирован. Не найдены наборы тестов.")
		    quit
	    }

		// делим наборы тестов эпизода на word-testset and no-word-testset
	    kill testSets,testSetsWord
	    set tsid=""
	    for {
		   set tsid=$order(vspTestSets(tsid),1,vals) if tsid="" quit
		   Set testsetid=$listGet(vals,1)
		   Set testsetobj=##class(User.EPVisitTestSet).%OpenId(testsetid)
		   If (FlagPreview'="V")&&('##class(TCLEx.Function.TestSet).IsPrintable(testsetobj)) continue
		   if ##class(TCLEx.Function.TestSet).IsTestSetWordToPDF($piece(tsid,"||",2)) 
		   {
			   set testSetsWord(tsid)=""
		   } 
		   else 
		   {
			   set testSets(tsid)=""
		   }
	    }
	    set ok=1
	    set nmfile=##class(%File).GetFilename(pPDFFileName)
	    set dirfile=##class(%File).GetDirectory(pPDFFileName)
	    set files=""
	    // формируем файл с обычными (невордовскими результатами)
	    if $data(testSets) {
		    //set filenamevsp=..NextAuxiliaryFileOld(nmfile,dirfile)
		    set filenamevsp=..NextAuxiliaryFile("pdf")
		    set ok1=..CreateEpisodePDFReportGeneral(pEpis, .testSets, pExtraParams, pExtraParamsZen, filenamevsp) 
		    if ok1 {
			   set files=files_$select(files'="":$char(0),1:"")_filenamevsp
		    } else {
			    do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok1),"TCLEx.Report.DRP.CreateEpisodePDFReportGeneral")
		    }
	    }
	    // Переименование файла (даже если сразу формируется один файл) необходимо, так как в пути или в имени файла могут быть русские буквы, 
	    // а RenderServer их не понимает 
	    set tsid=""
	    for {
		    set tsid=$order(testSetsWord(tsid)) if tsid="" quit
		    if ##class(TCLEx.Report.WordEMC).isResult(tsid) {
			    //set filenamevsp=..NextAuxiliaryFileOld(nmfile,dirfile)
			    set filenamevsp=..NextAuxiliaryFile("pdf")
			    set params=##class(TCLEx.Report.WordEMC).getParams(pEpis,tsid,pLanguage,.error)
                if $get(error)=$$$OK {
   			       set ok1=##class(TCLEx.Report.WordEMC).CreateReportWordToPDF(pEpis, tsid, params, pLanguage, filenamevsp, 0)
				   if ok1 {
			          set files=files_$select(files'="":$char(0),1:"")_filenamevsp
		           }
                }
			} 
	    }
	    // если сформировались какие-то файлы и их больше 1, то надо объединить в один pdf файл (пока не делаем общей нумерации страниц -вообще надо бы)
	    if files'="" {
		    if $length(files,$c(0))>1 {
		       set ok=##class(TCLEx.Report.FunctionsJava).startConcatPDF(files,pPDFFileName,0,1)
	        } 
	        else 
	        {
		      set ok=##class(%File).Rename(files,pPDFFileName)
	        }
	    } else  {
		    set ok=$$$ERROR($$$GeneralError,"Не удалось сформировать файл "_$get(pPDFFileName)_".")   
	    }
  } catch(exception) {
	 set ok=exception.AsStatus() 
  }	
	If 'ok {
		Set pPDFFileName=""
		do ##class(TCLEx.Function.General).WriteError($System.Status.GetErrorText(ok),$zn)
	}	
	Quit ok
]]></Implementation>
</Method>

<Method name="CreateEpisodePDFReportGeneral">
<Description>
Создание файла PDF отчета для НЕвордовских результатов эпизода
Параметры:
pEpis - Id эпизода
pTestSets - буфер с Id наборов тестов (если пусто, все авторизованные)
pExtraParams - дополнительные параметры формироваия отчета в формате $ListBuild (обязательная длина)
  set pPDF=$lg(pExtraParams,1) - признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
  set pPDFDir=$lg(pExtraParams,2) - каталог, куда выгружать файл
  set pOverWritePDF=$lg(pExtraParams,3) - если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
  set pLanguage=$lg(pExtraParams,4) язык результата (2-ENG, иначе - RUS )
  set flagLogFileCreate=$lg(pExtraParams,5) флаг создавать ли lock файл во время создания pdf файла 
  set flagLogFileTest=$lg(pExtraParams,6) флаг проверять ли внешний lock файл работы с pdf файлом
  set pFlagPreview=$lg(pExtraParams,7) флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
pExtraParamsZen - дополнительные параметры формирования отчета в формате $ListBuild  for ZenReport (property ExtraParams)
pPDFFileName - по ссылке возвращается или передается имя созданного PDF файла
Возвращаемое значение:
Результат создания файла в формате %Status
Сама функция клиенто-зависимая и все вызовы этой функции находятся в клиентских программах!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pExtraParams:%String,pExtraParamsZen:%String,&pPDFFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pPDF=$lg(pExtraParams,1)  // признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
	set pPDFDir=$lg(pExtraParams,2) //каталог, куда выгружать файл
	set pOverWritePDF=$lg(pExtraParams,3) //если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
	set pLanguage=$lg(pExtraParams,4) //дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport
	set FlagPreview=$lg(pExtraParams,7) //флаг = "V" - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
	
	// флаг создавать ли lock файл во время создания pdf файла
	set flagLogFileCreate=$lg(pExtraParams,5) 
	if (flagLogFileCreate'=1)&&(flagLogFileCreate'=0) {
		set flagLogFileCreate=0 
	}
	// флаг проверять ли внешний lock файл работы с pdf файлом
	set flagLogFileTest=$lg(pExtraParams,6) 
	if (flagLogFileTest'=1)&&(flagLogFileTest'=0) {
		set flagLogFileTest=0 
	}
	
	Set reportclassname=##class(TCLEx.Report.Settings).GetZenResultClassName()  
	Kill ^||ResultForm.EpisodePCL
	Do ##class(TCLEx.Report.ResultForm).PCLEpisodeResult(reportclassname,pEpis,.pTestSets,pLanguage,$Name(^||ResultForm.EpisodePCL),FlagPreview)
	If '$Data(^||ResultForm.EpisodePCL) {
		Quit $$$ERROR($$$GeneralError,"Нет данных для эпизода "_pEpis_" !")
	}	
	//
	If '$$TestDirectory^KSUTIL1(pPDFDir) {
		Quit $$$ERROR($$$GeneralError,"Не удалось создать каталог  "_pPDFDir_" !")
	}	
	//
	if $get(pPDFFileName)="" {
		Set filename=##class(TCLEx.Report.ResultForm).CallEpisodeResultFileName(reportclassname,pEpis,.pTestSets,pLanguage,"pdf")
	    Set pPDFFileName=pPDFDir_"\"_filename
	}
	
	//Проверка существования lock файла
	if flagLogFileTest=1 {
		set fileLockNameEMC=##class(TCLEx.Report.ResultForm).GetNameLockFileEMC(pPDFFileName)
	    if ##class(%File).Exists(fileLockNameEMC) {
		    Quit $$$ERROR($$$GeneralError,"Не удалось сформировать файл "_pPDFFileName_", так как существует lock файл "_fileLockNameEMC_" !")
	    }
	}
	If ##class(%File).Exists(pPDFFileName) {
		If pOverWritePDF {
			Set ok=##class(%File).Delete(pPDFFileName)
			If ##class(%File).Exists(pPDFFileName) Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pPDFFileName_" !")

		} Else {	
			Set pPDFFileName=$$ArchiveFileName^KSUTIL1(pPDFFileName)
			If ##class(%File).Exists(pPDFFileName) Quit $$$ERROR($$$GeneralError,"Не удалось сформировать очередное имя файла для  "_pPDFFileName_" !")
		}
	}
	
	Kill ^||ResultForm.EpisodeTable
	Do ##class(TCLEx.Report.ResultForm).PCLGlb2TableGlb($Name(^||ResultForm.EpisodePCL),$Name(^||ResultForm.EpisodeTable))
	set totalpages=##class(TCLEx.Report.ResultForm).PCLEpisodeTotalPages($Name(^||ResultForm.EpisodePCL))
	set params=$lb("",pEpis,pPDF,pLanguage,$Name(^||ResultForm.EpisodeTable),pExtraParamsZen,totalpages,FlagPreview)
	
	// create lock file
	if flagLogFileCreate=1 {
		set fileLockName=##class(TCLEx.Report.ResultForm).GetNameLockFile(pPDFFileName)
	    set ok=##class(TCLEx.Report.ResultForm).CreateEmptyFile(fileLockName)
	    If 'ok {
		   Set pPDFFileName=""
		   set ok=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось создать lck файл "_fileLockName_"."),ok)
		   set iii=$i(^log("CreateFile",pEpis))
		   s ^log("CreateFile",pEpis,iii)="Не удалось создать lck файл "_$g(fileLockName)_"."
		   Quit ok 
	    }
	}
	
	// create file
	set ok=..CreateEpisodePDFReport0(reportclassname,params,pPDFFileName)
	If 'ok {
		Set pPDFFileName=""
		if $get(flagLogFileCreate)=1 {
		    set ok2=##class(%File).Delete($get(fileLockName))
		    if 'ok2 set ok=$System.Status.AppendStatus(ok,ok2) 
		}
		Quit ok 
	}
	
	// delete lock file
	if flagLogFileCreate=1 {
		set ok2=##class(%File).Delete(fileLockName)
	    if 'ok2 set ok=$System.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не удалось удалить lck файл "_fileLockName_"."))
	    // !!! временно
	    set iii=$i(^log("CreateFile",pEpis))
	    if ok2 s ^log("CreateFile",pEpis,iii)=$zts_" Успешно удален lock файл "_$g(fileLockName)
	    else  s ^log("CreateFile",pEpis,iii)=$zts_" Не удалось удалить lock файл "_$g(fileLockName)
	
	}
	
	If 'ok {
		Set pPDFFileName=""
		do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
	}
	Quit ok
]]></Implementation>
</Method>

<Method name="CreateEpisodePDFReport0">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportClassName:%String,pParams:%String,pPDFFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Если имя файла, ко торый надо сформировать, не из временной директории, то подмениваем имя файла
	set flagRenameFile=0
	set PDFFileName=pPDFFileName
	if ##class(%File).GetDirectory(pPDFFileName)'=..GetAuxiliaryPath() {
		set PDFFileName=..NextAuxiliaryFile("pdf")
		set flagRenameFile=1
	}
	
	// Запоминаем значения %request, если переменная уже заполнена
	kill oldrequest
	If $Data(%request) {
		Set oldrequest("URL")=%request.URL
		Set oldrequest("SERVER_NAME")=$Get(%request.CgiEnvs("SERVER_NAME"))
		Set oldrequest("$CSPTOFILE")=$Get(%request.Data("$CSPTOFILE",1))
	}
	If '$Data(%request) {
		Set %request=##class(%CSP.Request).%New()
	}
	
	Set %request.URL="/csp/healthshare/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("$CSPTOFILE",1)=1
	//set %request.Data("$PS",1)="HP4250PCL6"
	//set %request.Data("$PRINTSERVER",1)=4321
	
	//Set repobj=##class(TCLEx.Report.ZenBion).%New()  
	Set repobj=$ClassMethod(pReportClassName,"%New")
	Set repobj.OrderNumber=$lg(pParams,1)
	Set repobj.Episode=$lg(pParams,2)
	Set repobj.PDF=$lg(pParams,3)
	Set repobj.Language=$lg(pParams,4)
	Set repobj.DataGlobal=$lg(pParams,5)
	Set repobj.ExtraParams=$lg(pParams,6)
	Set repobj.TotalPages=$lg(pParams,7)
	set repobj.IsPreviewResults=$select($lg(pParams,8)="V":1,1:0) 
	//set repobj.PS="HP4250PCL6"
	set portRenderServer=##class(TCLEx.Report.Function).GetPortRenderServer()
	set ok=repobj.GenerateReport(PDFFileName,2,0,portRenderServer) // througth RenderServer
	//Set ok=repobj.GenerateReport(PDFFileName,2)
	if 'ok  { do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$CLASSNAME()) }
	// Восстанавливаем %request
	If $Data(oldrequest) {
		Set %request.URL=$Get(oldrequest("URL"))
		Set %request.CgiEnvs("SERVER_NAME")=$Get(oldrequest("SERVER_NAME"))
		Set %request.Data("$CSPTOFILE",1)=$Get(oldrequest("$CSPTOFILE"))
	}	
	
	if (ok=1)&&(flagRenameFile=1) {
	    set ok1=##class(%File).Rename(PDFFileName,pPDFFileName)
	    if 'ok1 set ok=$system.Status.AppendStatus(ok,ok1)
    }
	
	quit ok
]]></Implementation>
</Method>

<Method name="NextAuxiliaryFileOld">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameFile:%String,pDirFile:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set file=""
   	set len=$length(pNameFile,".")
   	set name=$piece(pNameFile,".",len-1),ext=$piece(pNameFile,".",len)
   	for {
	   	set npp=$i(^||vspFiles)
   	    set file=pDirFile_"\"_name_"vsp"_npp_"."_ext
   	    if '##class(%File).Exists(file) quit
   	}
    quit file
]]></Implementation>
</Method>

<Method name="NextAuxiliaryFile">
<Description>
Получить имя временного файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pExtantion:%String="pdf"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set path=..GetAuxiliaryPath()
	if path="" quit ""
	
   	for {
	   	set npp=$i(^||vspFiles)
   	    set file=path_$job_"vsp"_npp_"."_pExtantion
   	    if '##class(%File).Exists(file) quit
   	}
    quit file
]]></Implementation>
</Method>

<Method name="GetAuxiliaryPath">
<Description>
Получить директорию для хранения временных файлов (файлы после использования должны удалятся, т е директория должна быть почти пуста</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=##class(TCLEx.Report.Function).GetPathToReportsLocal()
	if path="" quit ""
	set path=path_"tempDRP/"
	if '##class(%File).DirectoryExists(path) {
		do ##class(%File).CreateDirectory(path)
	}
	quit path
]]></Implementation>
</Method>

<Method name="printPDF">
<Description>
Печать указанного файла pdf на указанный принтер (через pdfbox- плохой шрифт получается)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileReport:%String,pPrinterCode:%String,pQCopies:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     //s ^test("printPDF",1)=$g(pFileReport)_"*"_$g(pPrinterCode)
     set printerName=##class(TCLEx.Function.Printer).getPrinterNameForJava(pPrinterCode)
     if ##class(%File).Exists($get(pFileReport))&&(printerName'="") {
	     for i=1:1:pQCopies {
		     //set ok1=..printPDFpdfbox(pFileReport,printerName)
	         //set ok1=..printPDFsumatra(pFileReport,printerName)
	         set ok1=##class(TCLEx.Report.PrintPDF).PrintPDFsumatra(pFileReport,printerName)
	         //s ^test(11,$i(^test(11)))=pFileReport_"*"_printerName_"*"_ok1_"*"_$CLASSNAME()
	         //Set ok1=##class(%ZEN.Report.hotPrint).print2(pFileReport,printerName,4321,30)
	         //s ^test("printNw")=ok1_"*"_pFileReport_"*"_printerName
	         if 'ok1 {
		         set ok=ok1
		         quit
	         }
	     }
     }
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }	
  quit ok
]]></Implementation>
</Method>

<Method name="printPDFpdfbox">
<Description>
Печать указанного файла pdf на указанный принтер (через pdfbox- плохой шрифт получается)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileReport:%String,pPrinterName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  //s ^test("par")=$g(pFileReport)_"*"_$g(pPrinterName)
  try
  {	
     if ##class(%File).Exists($get(pFileReport))&&(pPrinterName'="") {
	     set flagSilence=1
	     $$$ThrowOnError(##class(TCLEx.Report.FunctionsJava).startPdfBoxFacade(pFileReport,pPrinterName,flagSilence))
     }
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }	
  quit ok
]]></Implementation>
</Method>

<Method name="printPDFsumatra">
<Description>
Печать указанного файла pdf на указанный принтер (через SumatraPDF.exe)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileReport:%String,pPrinterName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     if ##class(%File).Exists($get(pFileReport))&&(pPrinterName'="") {
	     set sumatraPDF=##class(TCLEx.Function.Printer).getPathToSumatraPDF()
	     if sumatraPDF'="" set sumatraPDF=sumatraPDF_"\SumatraPDF.exe"
	     if (sumatraPDF="")&&('##class(%File).Exists(sumatraPDF)) {
		     set ok=$$$ERROR($$$GeneralError,"Путь к SumatraPDF не найден.")
		     quit
	     } 
	     //set command=""""_##class(TCLEx.Function.Printer).getPathToSumatraPDF()_"\SumatraPDF.exe"_""" -print-to """_pPrinterName_""" """_pFileReport_""""
	     set command=##class(%File).NormalizeFilenameWithSpaces(sumatraPDF)_" -print-to """_pPrinterName_""" "_##class(%File).NormalizeFilenameWithSpaces(pFileReport)
	     //s ^test("command",$i(^test("command")))=command
	     set time1=$piece($h,",",2)
	     set ok1=$zf(-1,command)
	     set ras=$piece($h,",",2)-time1
	     if ras>15 set ^test("longPrint",$i(^test("longPrint")))=$g(pFileReport)_"*"_$g(pPrinterName)_"*"_$h_"*"_$g(ras)_"*"_$g(ok1)
	     if ok1=0 {
		     set ok=1
	     } else {
		      set ok=$$$ERROR($$$GeneralError,"Не удалось напечатать файл "_pFileReport)
	     }
     }
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }	
  quit ok
]]></Implementation>
</Method>

<Method name="GetFileName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 // в delete^LVBPRPR удаляется файл: 
	 //s dir=$$seldata^MVBCFSM(1,45) i '$l(dir) s dir=$$seldata^MVBCFSM(1,30)
     //.s dir=$tr(dir,$c(17),"\"),x=$s(dir["\":"\",1:"/") i $e(dir,$l(dir))'=x s dir=dir_x
     //.s err=##class(%File).Delete(dir_"pdf"_x_"xx"_RowID_".pdf")
     set pdfFileName=$$seldata^MVBCFSM(1,45)
	 if pdfFileName="" set pdfFileName=$$seldata^MVBCFSM(1,30) 
	 set pdfFileName=$tr(pdfFileName,$c(17),"\")
	 set x=$s(pdfFileName["\":"\",1:"/") 
	 if $extract(pdfFileName,$l(pdfFileName))'=x s pdfFileName=pdfFileName_x
	 
	 set pdfFileName=pdfFileName_"pdf"_x_"xx"_pReportId_".pdf"
	 
	 if ##class(%File).Exists(pdfFileName) {
			set pdfFileName=$$ArchiveFileName^KSUTIL1(pdfFileName)
	 }
	 if ##class(%File).Exists(pdfFileName) {
		 set pdfFileName=""
	 }
	 quit pdfFileName
]]></Implementation>
</Method>

<Method name="getPrinter">
<Description>
Получить принтер  
Параметры:
pCourier - ID курьера
pUser - ID пользователя
Возвращаемое значение:
Id принтера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCourier,pUser</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// при одиночной печати просто определяем принтер по пользователю, если пользователь вдруг не задан. тогда принтер по умолчанию
	//при групповой печати - принтер определяем по курьеру
	set printer=""
	if $get(pCourier)'="" {
		set printerinfo=##class(TCLEx.Function.Printer).getPrinterByCourierDRP(pCourier)
		set printer=$piece(printerinfo,$char(0),1)
	    }
	if printer="" {
		if $get(pUser)'="" {
		    set printer=##class(TCLEx.Function.Printer).getUserDefaultPrinter(pUser)
	    }
	}    
    If printer'="" Quit printer							// Если для пользователя принтер не заполнен
	Quit ##class(TCLEx.Function.Printer).DefaultPrinter()
]]></Implementation>
</Method>

<Method name="CreateValuesBuf">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	//s ^test("par22")=pEpis_"*"_pTestSets_"*"_pDepCode_"*"_pLanguage

	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set @pRepParamGlb@("FullName")=$$RemomeNotPrintableCharacters^KSUTIL1($$NameFormat^KSUTIL1(1,episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1))
	If $IsObject(episobj.EPVISSpeciesDR) {
		Set @pRepParamGlb@("Sex")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISSpeciesDR.CTSPDesc)
	}
	/*
	If $IsObject(episobj.EPVISDebtorNumberDR) {
		Set @pRepParamGlb@("MRN")=episobj.EPVISExtra15 //$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISDebtorNumberDR.%Id())
	}*/
	set patienttypeobj=episobj.EPVISPatientType
	set patienttype="" if $IsObject(patienttypeobj) {
		set patienttype=patienttypeobj.%Id()  
	}
	Set @pRepParamGlb@("MRN")=patienttype_$select(patienttype'="":"/",1:"")_episobj.EPVISExtra15
	
	Set @pRepParamGlb@("Episode")=pEpis
	Set age="Неизвестен" 
	If episobj.EPVISAge'="" {
		Set age=episobj.EPVISAge
	}	  
	//Set @pRepParamGlb@("Age")=age
	Set @pRepParamGlb@("Age")=$$RemomeNotPrintableCharacters^KSUTIL1(##class(TCLEx.Report.Function).Age(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage))
	
	Set @pRepParamGlb@("DateOfCollection")=$$DisplayDate^KSPCLUtils(episobj.EPVISDateOfCollection)
	If episobj.EPVISTimeOfEntry'="" {
		Set @pRepParamGlb@("TimeOfEntry")=$$DisplayTime^KSPCLUtils(60*episobj.EPVISTimeOfEntry,2)
	}
	If $IsObject(episobj.EPVISHospitalCodeOriginalDR) {
		Set @pRepParamGlb@("HospitalDepartment")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISHospitalCodeOriginalDR.CTHOSName)
	}	

    set @pRepParamGlb@("Doctor")=""
	Set doctobj=episobj.EPVISDoctorCodeDR
	If $IsObject(doctobj) Set @pRepParamGlb@("Doctor")=$$RemomeNotPrintableCharacters^KSUTIL1($$FullName^KSPCLUtils(doctobj.CTDRSurname,doctobj.CTDRGivenName))
	
	Set depcode=$Piece(pDepCode,$Char(1),1)
	If (depcode'="")&&(##class(User.CTSuperSet).%ExistsId(depcode)) {
		Do ##class(TCLEx.Function.SuperSet).CreateItemsBuf(depcode,$NA(^||Report.SuperSetItems))
		Set firsttestset=$Order(^||Report.SuperSetItems(""))
		Set depcode=$Extract(firsttestset,1,1)
	} 
	Set depobj=##class(User.CTDepartment).%OpenId(depcode,0)
	If $IsObject(depobj) {
		Set @pRepParamGlb@("Department")=$$RemomeNotPrintableCharacters^KSUTIL1(depobj.CTDEPName)
	}

	set priority=""
	if $IsObject(episobj.EPVISPriorityCodeDR) {
		if $$seldata^LVBCTPR(episobj.EPVISPriorityCodeDR.%Id(),4)="Y" {
			set priority="Y"
		}
	}
	Set @pRepParamGlb@("Priority")=priority
	
	//
	Set summarytestset=##class(TCLEx.Function.SuperSet).SummaryTestSet(pDepCode)
	Set (authtestset,canceltestset,authtestsetWithRealDoctor)=""
	Set key="",testobj="",canceledobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		Set testsetid=testobj.%Id()
		If ..IsTestSet4Department(testsetid,.pTestSets,pDepCode,summarytestset) Continue
		If ##class(TCLEx.Function.TestSet).IsAuthorised(testobj) {
			Set authtestset=testsetid
			Set authdoctor=testobj.VISTSUserAuthorisedDRGetObjectId()														// Врач, который авторизовал набор тестов
	        Set officialdoctor=##class(TCLEx.Function.TestSet).GetDoctorAuthorisationDefault(testsetid,authdoctor)
			if authdoctor'=""&&(authdoctor=officialdoctor) set authtestsetWithRealDoctor=testsetid
			if authtestsetWithRealDoctor'="" Quit
		}	
		If ##class(TCLEx.Function.TestSet).IsCanceled(testobj) {
			Set canceltestset=testsetid
		}	
	}
	Set testsetid=""
	If (authtestsetWithRealDoctor'="") {						// Либо берем подходящий авторизованный набор тестов
		Set testsetid=authtestsetWithRealDoctor
	} Else {
	    If (authtestset'="") {						// Либо берем подходящий авторизованный набор тестов
		    Set testsetid=authtestset
	    } Else {
		    If (canceltestset'="") {				// (если нет авторизованных, то берем отмененный)
			    Set testsetid=canceltestset
		    }
	    }	
	}	
	If testsetid="" Quit
	Do ..SetTestSetVals(testsetid,pLanguage,pRepParamGlb)
	//m ^test(1111)=@pRepParamGlb
]]></Implementation>
</Method>

<Method name="SetTestSetVals">
<Description>
Загрузить значения полей для печати, которые берутся из набора тестов 
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set cttestsetobj=testsetobj.VISTSTestSetDR
	If $IsObject(cttestsetobj) { 
		Set depobj=cttestsetobj.CTTSDepartmentDR
		If $IsObject(depobj) {
			Set @pRepParamGlb@("TS_DepartmentName")=depobj.CTDEPName
			Set @pRepParamGlb@("TS_DepartmentCode")=depobj.%Id()
		}
	}	
	;
	Set authdoctor=testsetobj.VISTSUserAuthorisedDRGetObjectId()														// Врач, который авторизовал набор тестов
	Set officialdoctor=##class(TCLEx.Function.TestSet).GetDoctorAuthorisationDefault(pTestSetId,authdoctor)	// Если авторизовал лаборант, то врач по умолчанию для отдела авторизованного набора тестов
	Set userobj=##class(User.SSUser).%OpenId(officialdoctor,0) //testsetobj.VISTSUserAuthorisedDR
	If $IsObject(userobj) { 
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=userobj.SSUSRName
	}	
	;
	Set specimen=""
	Set specobj=testsetobj.VISTSSpecimenTypeDR
	If $IsObject(specobj) Set specimen=specobj.CTSPEDesc
	If specimen="" Set specimen=$$TestSpecimen^KSReportSQL($Piece(testsetobj.%Id(),"||",2))
	Set @pRepParamGlb@("TS_Specimen")=specimen
	;
	if $get(@pRepParamGlb@("Priority"))="" {
			if $IsObject(testsetobj.VISTSPriorityDR) {
				if $$seldata^LVBCTPR(testsetobj.VISTSPriorityDR.%Id(),4)="Y" {
			        set @pRepParamGlb@("Priority")="Y"
				}   
			}
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Подходит ли объект набора тестов эпизода pTestSetObj для отдела pDepCode

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// для супер-набора также проверяется, что код набора тестов является заключением (pSummaryTestSet) 

]]></Content>
</UDLText>

<Method name="IsTestSet4Department">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pTestSets:%String,pDepCode:%String,pSummaryTestSetId:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit 0
	Set pSummaryTestSetId=$Get(pSummaryTestSetId)
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		If $IsObject(testsetobj.VISTSSuperSetDR)&&(testsetobj.VISTSSuperSetDR.%Id()=pDepCode)&&($IsObject(testsetobj.VISTSTestSetDR)) {
			If testsetobj.VISTSTestSetDR.%Id()=pSummaryTestSetId Quit 1
		}	
	} Else {
		If ('$Data(pTestSets)||($Data(pTestSets(pTestSetId))))&&($Extract(pTestSetId,1,1)=pDepCode) {
			Quit 1
		}	
	}
	Quit 0
]]></Implementation>
</Method>
</Class>
</Export>
