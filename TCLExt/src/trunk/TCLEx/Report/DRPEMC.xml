<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.DRPEMC">
<Description>
Создание файлов с Doctor Report (DRP) специфические для клиента функции</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>62990,56005.173156</TimeCreated>

<Method name="CreateEpisodePDFReport">
<Description>
Создание файла PDF отчета для резултатов эпизода
Параметры:
pEpis - Id эпизода
pTestSets - буфер с Id наборов тестов (если пусто, все авторизованные)
pLanguage - язык результата (2-ENG, иначе - RUS )
этот параметр (pExtraParams) может быть разным у разных клиентов 
pExtraParams - дополнительные параметры формироваия отчета в формате $ListBuild
  set pPDF=$lg(pExtraParams,1) - признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
  set pPDFDir=$lg(pExtraParams,2) - каталог, куда выгружать файл
  set pOverWritePDF=$lg(pExtraParams,3) - если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
  set ExtraParamsZen=$lg(pExtraParams,4)=дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport
  set flagLogFileCreate=$lg(pExtraParams,5) флаг создавать ли lock файл во время создания pdf файла 
  set flagLogFileTest=$lg(pExtraParams,6) флаг проверять ли внешний lock файл работы с pdf файлом
  set pFlagPreview=$lg(pExtraParams,7) флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
pPDFFileName - по ссылке возвращается или передается имя созданного PDF файла
Возвращаемое значение:
Результат создания файла в формате %Status
Сама функция клиенто-зависимая и все вызовы этой функции находятся в клиентских программах!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pExtraParams:%String,&pPDFFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  try {	
	set FlagPreview=$lg(pExtraParams,7) //флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
	 
	// Пока будем формировать один файл по всем наборам тестов ( и вордовским и невордовским) только при FlagPreview="V" (предпросмотр)
	if FlagPreview="V" {
		if $get(pPDFFileName)="" set ok=$$$ERROR($$$GeneralError,"Не указано имя файла предпросмотра.") quit
		
		// делим наборы тестов эпизода на word-testset and no-word-testset
	    // если pTestSets не задана, то просто берем все наборы тестов из эпизода  (потом сделаются все проверки ниже)
	    if '$data(pTestSets) {
	      set ts=""
	      for {
		     set ts=$order(^TEPI(pEpis,1,ts)) if ts="" quit
		     set tscnt=""
		     for {
			     set tscnt=$order(^TEPI(pEpis,1,ts,tscnt)) if tscnt="" quit
			     set tsid=pEpis_"||"_ts_"||"_tscnt
		         set pTestSets(tsid)=""
		     }
	      }
	    }
	    kill testSets,testSetsWord
	    set tsid=""
	    for {
		   set tsid=$order(pTestSets(tsid)) if tsid="" quit
		   if ##class(TCLEx.Function.TestSet).IsTestSetWordToPDF($piece(tsid,"||",2)) 
		   {
			   set testSetsWord(tsid)=""
		   } 
		   else 
		   {
			   set testSets(tsid)=""
		   }
	    }
	    set ok=1
	    set nmfile=##class(%File).GetFilename(pPDFFileName)
	    set dirfile=##class(%File).GetDirectory(pPDFFileName)
	    set files=""
	    // формируем файл с обычными (невордовскими результатами)
	    if $data(testSets) {
		    set filenamevsp=..NextAuxiliaryFile(nmfile,dirfile)
		    set ok1=..CreateEpisodePDFReportGeneral(pEpis, .testSets, pLanguage, pExtraParams, filenamevsp) 
		    if ok1 {
			   set files=files_$select(files'="":$char(0),1:"")_filenamevsp
		    }
	    }
	    set tsid=""
	    for {
		    set tsid=$order(testSetsWord(tsid)) if tsid="" quit
		    if ##class(TCLEx.Report.WordEMC).isResult(tsid) {
			    set filenamevsp=..NextAuxiliaryFile(nmfile,dirfile)
			    set params=##class(TCLEx.Report.WordEMC).getParams(pEpis,tsid,pLanguage,.error)
                if $get(error)=$$$OK {
   			       set ok1=##class(TCLEx.Report.WordEMC).CreateReportWordToPDF(pEpis, tsid, params, pLanguage, filenamevsp, 0)
				   if ok1 {
			          set files=files_$select(files'="":$char(0),1:"")_filenamevsp
		           }
                }
			} 
	    }
	    // если сформировались какие-то файлы и их больше 1, то надо объединить в один pdf файл
	    if files'="" {
		    if $length(files,$c(0))>1 {
		       set ok=##class(TCLEx.Report.Word).startConcatPDF(files,pPDFFileName,1)
	        } 
	        else 
	        {
		      set ok=##class(%File).Rename(files,pPDFFileName)
	        }
	    } else  {
		    set ok= $$$ERROR($$$GeneralError,"Не удалось сформировать файл для предпросмотра результатов.")   
	    }
	}
	else 
	{
		set ok=..CreateEpisodePDFReportGeneral(pEpis, .pTestSets, pLanguage, pExtraParams, .pPDFFileName)
	}
  } catch(exception) {
	 set ok=exception.AsStatus() 
  }	
	If 'ok {
		Set pPDFFileName=""
		//set ^ERRORS(+$h,$i(^ERRORS(+$h)))=$h_"|"_ok
	}	
	Quit ok
]]></Implementation>
</Method>

<Method name="CreateEpisodePDFReportGeneral">
<Description>
Создание файла PDF отчета для НЕвордовских результатов эпизода
Параметры:
pEpis - Id эпизода
pTestSets - буфер с Id наборов тестов (если пусто, все авторизованные)
pLanguage - язык результата (2-ENG, иначе - RUS )
этот параметр (pExtraParams) может быть разным у разных клиентов 
pExtraParams - дополнительные параметры формироваия отчета в формате $ListBuild
  set pPDF=$lg(pExtraParams,1) - признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
  set pPDFDir=$lg(pExtraParams,2) - каталог, куда выгружать файл
  set pOverWritePDF=$lg(pExtraParams,3) - если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
  set ExtraParamsZen=$lg(pExtraParams,4)=дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport
  set flagLogFileCreate=$lg(pExtraParams,5) флаг создавать ли lock файл во время создания pdf файла 
  set flagLogFileTest=$lg(pExtraParams,6) флаг проверять ли внешний lock файл работы с pdf файлом
  set pFlagPreview=$lg(pExtraParams,7) флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
pPDFFileName - по ссылке возвращается или передается имя созданного PDF файла
Возвращаемое значение:
Результат создания файла в формате %Status
Сама функция клиенто-зависимая и все вызовы этой функции находятся в клиентских программах!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pExtraParams:%String,&pPDFFileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pPDF=$lg(pExtraParams,1)  // признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
	set pPDFDir=$lg(pExtraParams,2) //каталог, куда выгружать файл
	set pOverWritePDF=$lg(pExtraParams,3) //если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
	set ExtraParamsZen=$lg(pExtraParams,4) //дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport
	set FlagPreview=$lg(pExtraParams,7) //флаг = 1 - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
	
	// флаг создавать ли lock файл во время создания pdf файла
	set flagLogFileCreate=$lg(pExtraParams,5) 
	if (flagLogFileCreate'=1)&&(flagLogFileCreate'=0) {
		set flagLogFileCreate=0 
	}
	// флаг проверять ли внешний lock файл работы с pdf файлом
	set flagLogFileTest=$lg(pExtraParams,6) 
	if (flagLogFileTest'=1)&&(flagLogFileTest'=0) {
		set flagLogFileTest=0 
	}
	
	Set reportclassname=$$ZenResultClassName^Settings.Reports()
	Kill ^||ResultForm.EpisodePCL
	Do ##class(TCLEx.Report.ResultForm).PCLEpisodeResult(reportclassname,pEpis,.pTestSets,pLanguage,$Name(^||ResultForm.EpisodePCL),FlagPreview)
	If '$Data(^||ResultForm.EpisodePCL) {
		Quit $$$ERROR($$$GeneralError,"Нет данных для эпизода "_pEpis_" !")
	}	
	//
	If '$$TestDirectory^KSUTIL1(pPDFDir) {
		Quit $$$ERROR($$$GeneralError,"Не удалось создать каталог  "_pPDFDir_" !")
	}	
	//
	if $get(pPDFFileName)="" {
		Set filename=##class(TCLEx.Report.ResultForm).CallEpisodeResultFileName(reportclassname,pEpis,.pTestSets,pLanguage,"pdf")
	    Set pPDFFileName=pPDFDir_"\"_filename
	}
	
	//Проверка существования lock файла
	if flagLogFileTest=1 {
		set fileLockNameEMC=##class(TCLEx.Report.ResultForm).GetNameLockFileEMC(pPDFFileName)
		if ##class(TCLEx.Report.Function).TestExistLocFile(pEpis,fileLockNameEMC) {
		  $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_pPDFFileName_", так как существует lock файл "_pEpis_"-***.lcke!"))
	    }
	    /*
	    if ##class(%File).Exists(fileLockNameEMC) {
		    Quit $$$ERROR($$$GeneralError,"Не удалось сформировать файл "_pPDFFileName_", так как существует lock файл "_fileLockNameEMC_" !")
	    }*/
	}
	If ##class(%File).Exists(pPDFFileName) {
		If pOverWritePDF {
			Set ok=##class(%File).Delete(pPDFFileName)
			If ##class(%File).Exists(pPDFFileName) Quit $$$ERROR($$$GeneralError,"Не удалось удалить существующий файл "_pPDFFileName_" !")

		} Else {	
			Set pPDFFileName=$$ArchiveFileName^KSUTIL1(pPDFFileName)
			If ##class(%File).Exists(pPDFFileName) Quit $$$ERROR($$$GeneralError,"Не удалось сформировать очередное имя файла для  "_pPDFFileName_" !")
		}
	}
	
	Kill ^||ResultForm.EpisodeTable
	Do ##class(TCLEx.Report.ResultForm).PCLGlb2TableGlb($Name(^||ResultForm.EpisodePCL),$Name(^||ResultForm.EpisodeTable))
	set totalpages=##class(TCLEx.Report.ResultForm).PCLEpisodeTotalPages($Name(^||ResultForm.EpisodePCL))
	set params=$lb("",pEpis,pPDF,pLanguage,$Name(^||ResultForm.EpisodeTable),ExtraParamsZen,totalpages)
	
	// create lock file
	if flagLogFileCreate=1 {
		set fileLockName=##class(TCLEx.Report.ResultForm).GetNameLockFile(pPDFFileName)
	    set ok=##class(TCLEx.Report.ResultForm).CreateEmptyFile(fileLockName)
	    set horolog=$h_"*"_$zts
	    If 'ok {
		   Set pPDFFileName=""
		   set ok=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось создать lck файл "_fileLockName_"."),ok)
		   //set iii=$i(^log("CreateFile",pEpis))
		   //s ^log("CreateFile",pEpis,iii)="Не удалось создать lck файл "_$g(fileLockName)_"."
		   set iii=$i(^TCLExlog(pEpis,"CreateFile"))
		   set ^TCLExlog(pEpis,"CreateFile",iii)=$get(horolog)_"*"_"Не удалось создать lck файл "_$g(fileLockName)_"."
		   Quit ok 
	    }
	    // !!! временно
	    //set iii=$i(^log("CreateFile",pEpis))
	    //s ^log("CreateFile",pEpis,iii)=$zts_" Успешно сформирован lock файл "_$g(fileLockName)
	    set iii=$i(^TCLExlog(pEpis,"CreateFile"))
	    set ^TCLExlog(pEpis,"CreateFile",iii)=$get(horolog)_"*"_"Успешно сформирован lock файл "_$g(fileLockName)
	    // !!! временно
	}
	
	// create file
	set ok=..CreateEpisodePDFReport0(reportclassname,params,pPDFFileName)
	set horolog=$h_"*"_$zts
	If 'ok {
		Set pPDFFileName=""
		if $get(flagLogFileCreate)=1 {
		    set ok2=##class(%File).Delete($get(fileLockName))
		    if 'ok2 set ok=$System.Status.AppendStatus(ok,ok2) 
		    set iii=$i(^TCLExlog(pEpis,"CreateFile"))
		    set ^TCLExlog(pEpis,"CreateFile",iii)=$get(horolog)_"*"_$system.Status.GetErrorText(ok)
		}
		Quit ok 
	}
	// !!! временно
	set iii=$i(^TCLExlog(pEpis,"CreateFile"))
	set ^TCLExlog(pEpis,"CreateFile",iii)=$get(horolog)_"*"_" Успешно сформирован файл "_$g(pPDFFileName)
	set filesize=0 if pPDFFileName'="" set filesize=##class(%File).GetFileSize(pPDFFileName) 
	//set iii=$i(^log("CreateFile",pEpis))
	//s ^log("CreateFile",pEpis,iii)=$zts_" Успешно сформирован файл "_$g(pPDFFileName)_" ("_filesize_" байт"_")"_$s(+filesize=0:" !!!!!",1:"")
	// !!! временно
	
	// delete lock file
	if flagLogFileCreate=1 {
		set ok2=##class(%File).Delete(fileLockName)
	    if 'ok2 set ok=$System.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не удалось удалить lck файл "_fileLockName_"."))
	    // !!! временно
	    set horolog=$h_"*"_$zts
	    //set iii=$i(^log("CreateFile",pEpis))
	    //if ok2 s ^log("CreateFile",pEpis,iii)=$zts_" Успешно удален lock файл "_$g(fileLockName)
	    //else  s ^log("CreateFile",pEpis,iii)=$zts_" Не удалось удалить lock файл "_$g(fileLockName)
	    set iii=$i(^TCLExlog(pEpis,"CreateFile"))
	    if ok2 s ^TCLExlog(pEpis,"CreateFile",iii)=$get(horolog)_"*"_"Успешно удален lock файл "_$g(fileLockName)
	    else  s ^TCLExlog(pEpis,"CreateFile",iii)=$get(horolog)_"*"_"Не удалось удалить lock файл "_$g(fileLockName)
	
	    // !!! временно
    	// в Медиалоге ловились файлы с 0 длиной - это наша ловушка на всякий случай
	    set filesize=0 if pPDFFileName'="" set filesize=##class(%File).GetFileSize(pPDFFileName)
	    if filesize'>0 {
		   set logFile=$ZUtil(12)_"LIS\!Warning!\"_##class(%File).GetFilename(pPDFFileName)_".txt"
		   Set logFile=$$ArchiveFileName^KSUTIL1(logFile)
		   set ok1=repobj.GenerateReport(logFile,2,1)
		   set ok=$System.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Файл "_pPDFFileName_" имеет нулевую длину. См. "_logFile_"."))
		   set horolog=$h_"*"_$zts
		   set iii=$i(^TCLExlog(pEpis,"CreateFile"))
		   set ^TCLExlog(pEpis,"CreateFile",iii)=horolog_"*"_"Файл "_pPDFFileName_" имеет нулевую длину."
	    }
	}
	
	If 'ok {
		Set pPDFFileName=""
	}	
	Quit ok
]]></Implementation>
</Method>

<Method name="CreateEpisodePDFReport0">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportClassName:%String,pParams:%String,pPDFFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Запоминаем значения %request, если переменная уже заполнена
	kill oldrequest
	If $Data(%request) {
		Set oldrequest("URL")=%request.URL
		Set oldrequest("SERVER_NAME")=$Get(%request.CgiEnvs("SERVER_NAME"))
		Set oldrequest("$CSPTOFILE")=$Get(%request.Data("$CSPTOFILE",1))
	}
	If '$Data(%request) {
		Set %request=##class(%CSP.Request).%New()
	}
	
	Set %request.URL="/csp/"_$ZUtil(5)_"/"_..%ClassName(1)_".xml"
	Set %request.CgiEnvs("SERVER_NAME")="127.0.0.1"
	Set %request.Data("$CSPTOFILE",1)=1
	
	Set repobj=$ClassMethod(pReportClassName,"%New")
	Set repobj.OrderNumber=$lg(pParams,1)
	Set repobj.Episode=$lg(pParams,2)
	Set repobj.PDF=$lg(pParams,3)
	Set repobj.Language=$lg(pParams,4)
	Set repobj.DataGlobal=$lg(pParams,5)
	Set repobj.ExtraParams=$lg(pParams,6)
	Set repobj.TotalPages=$lg(pParams,7)
	Set ok=repobj.GenerateReport(pPDFFileName,2)
	
	// Восстанавливаем %request
	If $Data(oldrequest) {
		Set %request.URL=$Get(oldrequest("URL"))
		Set %request.CgiEnvs("SERVER_NAME")=$Get(oldrequest("SERVER_NAME"))
		Set %request.Data("$CSPTOFILE",1)=$Get(oldrequest("$CSPTOFILE"))
	}	
	
	quit ok
]]></Implementation>
</Method>

<Method name="NextAuxiliaryFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameFile:%String,pDirFile:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set file=""
   	set len=$length(pNameFile,".")
   	set name=$piece(pNameFile,".",len-1),ext=$piece(pNameFile,".",len)
   	for {
	   	set npp=$i(^||vspFiles)
   	    set file=pDirFile_"\"_name_"vsp"_npp_"."_ext
   	    if '##class(%File).Exists(file) quit
   	}
    quit file
]]></Implementation>
</Method>
</Class>
</Export>
