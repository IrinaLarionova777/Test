<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.WordEMC">
<Super>%RegisteredObject</Super>
<TimeCreated>62662,61949.380455</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// for test from terminal in EMC  w ##class(TCLEx.Report.WordEMC).CreateAndPrintPDFall("10028719","10028719||M200||1","MFU",1)

]]></Content>
</UDLText>

<Method name="CreateAndPrintPDFall">
<Description>
Создание файла для печати (без логотипа), печать его и удаление его (на всех нужных яхзыках)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testsetid:%String,pPrinterCode:%String,qCopies:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     Set episobj=##class(User.EPVisitNumber).%OpenId(epis,0)
	 If $IsObject(episobj) {
		Set lang=episobj.EPVISLanguageDRGetObjectId()
		If lang="" {
			Set lang=2
		}	
		If lang=29 {
			Set languages(1)=""
			Set languages(2)=""
		
		} Else {
			Set languages(lang)=""
		}
		Set lang=""
		For  {
			Set lang=$Order(languages(lang)) 
			If lang="" Quit
			$$$ThrowOnError(##class(TCLEx.Report.WordEMC).CreateAndPrintPDF(epis,testsetid,lang,pPrinterCode,qCopies))
		}	
	} Else {
		$$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось отрыть объект User.EPVisitNumber с ID="_pEpis_" !"))
	}	
   } catch(exception)
   {
	  set ok=exception.AsStatus()
      Do LogStatus^KSUTIL1(..getLogDir(),ok,3,1)
   }		
  quit ok
]]></Implementation>
</Method>

<Method name="CreateAndPrintPDF">
<Description>
Создание файла для печати (без логотипа), печать его и удаление его (на указанном языке)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testsetid:%String,language:%String,pPrinterCode:%String,qCopies:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     set testset=$piece(testsetid,"||",2)
	 set tscnt=$piece(testsetid,"||",3)
     set dep=$extract(testset,1)
     set languageLetter=$select(language=2:"eng",1:"rus")
     set qCopies=$get(qCopies,1)
     //параметры по данным из эпизода
     set params=..getParams(epis,testsetid,language,.error)
     if $get(error)'=$$$OK {
          $$$ThrowStatus(error)   
     }
     // имя файла 
     set nameFile=..getNameFileResult(epis,testset,tscnt,languageLetter)_".pdf"
     
      // формирование временного файла с фио+др ,без логотипа, без печати и факсимиле 
      set fileResult=$$PDFResultFromWordDirTemp^Settings.Reports()_"\"_nameFile
      Set fileResult=$$ArchiveFileName^KSUTIL1(fileResult)
	  If ##class(%File).Exists(fileResult) $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать очередное имя файла для  "_fileResult_" !"))
      
      set $piece(params,$char(0),12)=1 // переводить fileBody doc to pdf (делаем только один раз)
      set $piece(params,$char(0),11)="" // есть фио+др
     
      // не вставлять логотип при печати (печатают на готовых бланках с логотипом))
      set fileLogo=$piece(params,$char(0),14)
      set fileStamp=$piece(params,$char(0),15)
	  set fileFaximile=$piece(params,$char(0),16)
      
       
      set $piece(params,$char(0),14)=""
      set $piece(params,$char(0),15)=""
      set $piece(params,$char(0),16)=""
      
      // for print from java
      set $piece(params,$char(0),18)=..getPathToSumatraPDFForJava()
      set $piece(params,$char(0),19)=##class(TCLEx.Function.Printer).getPrinterNameForJava(pPrinterCode)
      set $piece(params,$char(0),20)=qCopies
     
      $$$ThrowOnError(..CreateReportWordToPDF(epis, testsetid, params, language, fileResult))
        
      // Печать временного файла нужное кол-во раз и его удаление (теперь печать в java программе)
      if ($get(fileResult)'="")&&(##class(%File).Exists(fileResult)) {
	      //for ii=1:1:qCopies {
              //$$$ThrowOnError(..printPDF($get(fileResult),$get(pPrinterCode)))
	      //}
          //set okdelete=##class(%File).Delete(fileResult)   
	      //if 'okdelete $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удается удалить файл "_fileResult)) 
      }
   
   } catch(exception)
  {
	  set ok=exception.AsStatus()
	   set ^ERRORS(+$h,$i(^ERRORS(+$h)))=$h_"|"_ok
  }	
  quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// В EMC не работает для сетевого принтера - не хватает прав - поэтому вызов перенесен в java

]]></Content>
</UDLText>

<Method name="printPDF">
<Description>
Печать указанного файла pdf на указанный принтер (через SumatraPDF)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileReport:%String,pPrinterCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     set printerName=##class(TCLEx.Function.Printer).getPrinterNameForJava(pPrinterCode)
     //s ^test("pdfbox")=pFileReport_"*"_printerName_"*"_pPrinterCode
     if ##class(%File).Exists($get(pFileReport))&&(printerName'="") {
	     set flagSilence=1
	     //$$$ThrowOnError(##class(Report.rpt).startPdfBoxFacade(pFileReport,printerName,flagSilence))
	     set command=##class(%File).NormalizeFilenameWithSpaces(..getPathToSumatraPDF()_"\SumatraPDF.exe")_" -print-to """_printerName_""" "_##class(%File).NormalizeFilenameWithSpaces(pFileReport)
	     //set command=""""_..getPathToSumatraPDF()_"\SumatraPDF.exe"_""" -print-to """_printerName_""" """_pFileReport_""""
	     do $zf(-1,command)
     }
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }	
  quit ok
]]></Implementation>
</Method>

<Method name="printPDFpdfbox">
<Description>
Печать указанного файла pdf на указанный принтер (через pdfbox- плохой шрифт получается)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileReport:%String,pPrinterCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     set printerName=##class(TCLEx.Function.Printer).getPrinterNameForJava(pPrinterCode)
     //s ^test("pdfbox")=pFileReport_"*"_printerName_"*"_pPrinterCode
     if ##class(%File).Exists($get(pFileReport))&&(printerName'="") {
	     set flagSilence=1
	     $$$ThrowOnError(##class(Report.rpt).startPdfBoxFacade(pFileReport,printerName,flagSilence))
     }
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }	
  quit ok
]]></Implementation>
</Method>

<Method name="CreatePDFall">
<Description>
Создание всех нужных pdf-файлов (на всех нужных яхзыках)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testsetid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try
  {	
     Set episobj=##class(User.EPVisitNumber).%OpenId(epis,0)
	 If $IsObject(episobj) {
		Set lang=episobj.EPVISLanguageDRGetObjectId()
		If lang="" {
			Set lang=2
		}	
		If lang=29 {
			Set languages(1)=""
			Set languages(2)=""
		
		} Else {
			Set languages(lang)=""
		}
		Set lang=""
		For  {
			Set lang=$Order(languages(lang)) 
			If lang="" Quit
			set ok2=##class(TCLEx.Report.WordEMC).CreatePDF(epis,testsetid,lang)
			if 'ok2 set ok=$System.Status.AppendStatus(ok,ok2)
		}	
	} Else {
		set ok=$$$ERROR($$$GeneralError,"Не удалось отрыть объект User.EPVisitNumber с ID="_pEpis_" !")
	}	
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }
  if 'ok {
	  Do LogStatus^KSUTIL1(..getLogDir(),ok,3,1)
  }	
  quit ok
]]></Implementation>
</Method>

<Method name="CreatePDF">
<Description>
Создание всех нужных pdf-файлов (на указанном языке) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testsetid:%String,language:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  set logdir=..getLogDir()
  try
  {	
     set testset=$piece(testsetid,"||",2)
	 set tscnt=$piece(testsetid,"||",3)
     set dep=$extract(testset,1)
     set languageLetter=$select(language=2:"eng",1:"rus")
     //параметры по данным из эпизода
     set params=..getParams(epis,testsetid,language,.error)
     if $get(error)'=$$$OK {
          $$$ThrowStatus(error)   
     }
     
     //set $piece(params,$char(0),21)="" // нет фио авторизовавшего врача при формировании файла почему-то
     
     set nameFile=..getNameFileResult(epis,testset,tscnt,languageLetter)_".pdf"
     
      // формирование файла с фио+др и с Logo
      set fileResult=$$PDFResultDir^Settings.Reports()_"\"_nameFile
      
      //Проверка существования lock файла EMC
	  set fileLockNameEMC=##class(TCLEx.Report.ResultForm).GetNameLockFileEMC(fileResult)
	  if ##class(TCLEx.Report.Function).TestExistLocFile(epis,fileLockNameEMC) {
		  $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_epis_"-***.lcke!"))
	  }
	  /*
	  if ##class(%File).Exists(fileLockNameEMC) {
		        $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_fileLockNameEMC_" !"))
      }
      */
      
      if ##class(%File).Exists(fileResult) {
	      set okdelete=##class(%File).Delete(fileResult)   
	      if 'okdelete $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удается удалить файл "_fileResult))
      }
      set $piece(params,$char(0),12)=1 // переводить fileBody doc to pdf (делаем только один раз)
      set $piece(params,$char(0),11)="" // есть фио+др
      
      //$$$ThrowOnError(..CreateReportWordToPDF(epis, testsetid, params, language, fileResult,1))
      set ok=..CreateReportWordToPDF(epis, testsetid, params, language, fileResult,1)
      if 'ok quit 
      set filesize=0 if fileResult'="" set filesize=##class(%File).GetFileSize(fileResult)
      Do LogMessage^KSUTIL1(logdir,"Успешно сформирован файл "_fileResult_" ("_filesize_" байт)",1,1)

      // формирование файла без фио+др
      set fileResult=$$ImpersonalPDFResultDir^Settings.Reports()_"\"_nameFile
      
      //Проверка существования lock файла EMC
	  set fileLockNameEMC=##class(TCLEx.Report.ResultForm).GetNameLockFileEMC(fileResult)
	  if ##class(TCLEx.Report.Function).TestExistLocFile(epis,fileLockNameEMC) {
		  $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_epis_"-***.lcke!"))
	  }
	  /*
	  if ##class(%File).Exists(fileLockNameEMC) {
		        $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_fileLockNameEMC_" !"))
      }
      */
      if ##class(%File).Exists(fileResult) {
	      set okdelete=##class(%File).Delete(fileResult)   
	      if 'okdelete $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удается удалить файл "_fileResult))
      } 
      set $piece(params,$char(0),12)=""  // уже сделан перевод fileBody doc to pdf
      set $piece(params,$char(0),3)=""
      set $piece(params,$char(0),6)=""
	  set $piece(params,$char(0),11)="1" // нет фио+др
	  	  
	  //s ^test("params1")=params
      //$$$ThrowOnError(..CreateReportWordToPDF(epis, testsetid, params, language, fileResult,1))
      set ok=..CreateReportWordToPDF(epis, testsetid, params, language, fileResult,1)
      if 'ok quit 
      set filesize=0 if fileResult'="" set filesize=##class(%File).GetFileSize(fileResult)
      Do LogMessage^KSUTIL1(logdir,"Успешно сформирован файл "_fileResult_" ("_filesize_" байт)",1,1)
     
   } catch(exception)
  {
	  set ok=exception.AsStatus()
  }
  quit ok
]]></Implementation>
</Method>

<Method name="CreateReportWordToPDF">
<Description>
формирование файла pdf
flagCreateLockFile - 0/1 - флаг создания пустого lck файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testsetid:%String,params:%String,language:%String,fileResult:%String,flagCreateLockFile:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //if $get(epis)="" quit Quit $$$ERROR($$$GeneralError,"Не указан номер эпизода") 
    //if '$d(^TEPI(epis)) quit Quit $$$ERROR($$$GeneralError,"Не существует эпизода с номером "_epis)
    set language=$get(language,1)
    set flagCreateLockFile=$get(flagCreateLockFile,0)
    if $get(params)="" Quit $$$ERROR($$$GeneralError,"НЕ заданы параметры для печати: эпизод="_$get(epis)_" testset="_testsetid)
    set ok=$$$OK
    try {
	    set testset=$piece(testsetid,"||",2)
	    set tscnt=$piece(testsetid,"||",3)
        set dep=$extract(testset,1)
        //set language=$lg(##class(TCLEx.Function.Episode).ResultLanguages(epis),1)
        set languageLetter=$select(language=2:"eng",1:"rus")

        set fileBody=..getNameFileBody(epis,testset,tscnt)
        set fileBody=..getPathWordResult(epis,testset,tscnt)_"\"_fileBody_".doc"
        if '##class(%File).Exists(fileBody) $$$ThrowOnError($$$ERROR($$$GeneralError,"Нет файла с результатом "_fileBody))

        set fileLogo=$piece(params,$char(0),14)
	    set fileStamp=$piece(params,$char(0),15)
	    set fileFaximile=$piece(params,$char(0),16)
	    
	    set $piece(params,$char(0),17)=..getPathToOpenOfficeForJava()
        
        //Проверка существования lock файла EMC
        if flagCreateLockFile=1 {
	        set fileLockNameEMC=##class(TCLEx.Report.ResultForm).GetNameLockFileEMC(fileResult)
	        if ##class(TCLEx.Report.Function).TestExistLocFile(epis,fileLockNameEMC) {
		        set horolog=$h_"*"_$zts
		        set iii=$i(^TCLExlog(epis,"CreateFile"))
		        set ^TCLExlog(epis,"CreateFile",iii)=horolog_"*"_"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_epis_"-***.lcke!"
		       $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_epis_"-***.lcke!"))
	        }
	        /*
	        if ##class(%File).Exists(fileLockNameEMC) {
		        set horolog=$h_"*"_$zts
		        set iii=$i(^TCLExlog(epis,"CreateFile"))
		        s ^TCLExlog(epis,"CreateFile",iii)=horolog_"*"_"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_fileLockNameEMC_" !"
		        $$$ThrowOnError($$$ERROR($$$GeneralError,"Не удалось сформировать файл "_fileResult_", так как существует lock файл "_fileLockNameEMC_" !"))
	        }*/
        }
                
        // create lock file
        if flagCreateLockFile=1 {
	        set fileLockName=##class(TCLEx.Report.ResultForm).GetNameLockFile(fileResult)
	        set ok=##class(TCLEx.Report.ResultForm).CreateEmptyFile(fileLockName)
	        set horolog=$h_"*"_$zts
	        If 'ok {
		       set ok=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось создать lck файл "_fileLockName_"."),ok)
		       set iii=$i(^TCLExlog(epis,"CreateFile"))
		       s ^TCLExlog(epis,"CreateFile",iii)=$get(horolog)_"*"_$system.Status.GetErrorText(ok)
		       quit
	        }
	        set iii=$i(^TCLExlog(epis,"CreateFile"))
	        set ^TCLExlog(epis,"CreateFile",iii)=$get(horolog)_"*"_"Успешно сформировани lock файл "_$get(fileLockName)
      	}
        
	    // формирование файла PDF
	    //set ^test("word","params","fileBody")=$get(fileBody)
	    //set ^test("word","params","fileResult")=$get(fileResult)
	    //set ^test("word","params","params")=$get(params)
	    //set ^test("word","params","languageLetter")=$get(languageLetter)
	    //set ^test("word","params","fileLogo")=$get(fileLogo)
	    //set ^test("word","params","fileFaximile")=$get(fileFaximile)
	    //set ^test("word","params","fileStamp")=$get(fileStamp)
	    set ok=..startCreatePDFfromWordEMC(fileBody, fileResult, params, languageLetter, fileLogo, fileFaximile, fileStamp)
	    set horolog=$h_"*"_$zts
	    if 'ok {
		    set ok=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось создать файл "_$get(fileResult)_"."),ok)
		     set iii=$i(^TCLExlog(epis,"CreateFile"))
		    set ^TCLExlog(epis,"CreateFile",iii)=$get(horolog)_"*"_$system.Status.GetErrorText(ok)
		    quit 
	    }
	    set iii=$i(^TCLExlog(epis,"CreateFile"))
	    set ^TCLExlog(epis,"CreateFile",iii)=$get(horolog)_"*"_"Успешно сформировани файл "_$get(fileResult)
	    
	    // delete lock file
	    if flagCreateLockFile=1 {
		    set ok=##class(%File).Delete(fileLockName)
		    set horolog=$h_"*"_$zts
	        if 'ok {
		        set ok=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось удалить lck файл "_fileLockName_"."),ok)
		        set iii=$i(^TCLExlog(epis,"CreateFile"))
		        set ^TCLExlog(epis,"CreateFile",iii)=$get(horolog)_"*"_$system.Status.GetErrorText(ok)
		        quit 
	        }
	        set iii=$i(^TCLExlog(epis,"CreateFile"))
	        set ^TCLExlog(epis,"CreateFile",iii)=$get(horolog)_"*"_"Успешно удален lock файл "_$get(fileLockName)
	    }
    } 
    catch(exception) {
	    set ok=exception.AsStatus()
	    if $get(fileLockName)'="" {
		    if ##class(%File).Exists(fileLockName) {
			    set ok2=##class(%File).Delete(fileLockName)
			    if 'ok2 set ok=$System.Status.AppendStatus(ok,$$$ERROR($$$GeneralError,"Не удалось удалить lck файл "_fileLockName_".")) 
		    }
	    }
	    if $get(epis)'="" {
		    set iii=$i(^TCLExlog(epis,"CreateFile"))
		    set ^TCLExlog(epis,"CreateFile",iii)=$h_"*"_$zts_"*"_$system.Status.GetErrorText(ok)
	    }
	}
    if 'ok set ^ERRORS(+$h,$i(^ERRORS(+$h)))=$h_"|"_ok
    Quit ok
]]></Implementation>
</Method>

<Method name="isResult">
<Description>
Усть ли файл doc с результатом по набору тестов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>testsetid:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set epis=$piece(testsetid,"||",1)
    set testset=$piece(testsetid,"||",2)
	set tscnt=$piece(testsetid,"||",3)
	set fileBody=..getNameFileBody(epis,testset,tscnt)
    set fileBody=..getPathWordResult(epis,testset,tscnt)_"\"_fileBody_".doc"
    quit ##class(%File).Exists(fileBody)
]]></Implementation>
</Method>

<Method name="getParams">
<Description>
Получить параметры для header and footer</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[epis:%String,testsetid:%String,language:%String,&pError:%Status]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

    //if $get(epis)="" quit Quit $$$ERROR($$$GeneralError,"Не указан номер эпизода") 
    //if '$d(^TEPI(epis)) quit Quit $$$ERROR($$$GeneralError,"Не существует эпизода с номером "_epis)
    set pError=$$$OK
    set params=""
    set language=$get(language,1)
    try {
	    set testset=$piece(testsetid,"||",2)
	    set tscnt=$piece(testsetid,"||",3)
        set dep=$extract(testset,1)
        kill ^||EMC.Vals   
        kill testsets  
        set testsets(testsetid)=""
	    Do ##class(TCLEx.Report.PCLEMC).CreateValuesBuf(epis,.testsets,dep,language,$Name(^||EMC.Vals))
	    //m ^test("pp")=^||EMC.Vals
	    
	    set $piece(params,$char(0),1)=$get(^||EMC.Vals("CompanyName"))
	    set $piece(params,$char(0),2)=epis
	    set $piece(params,$char(0),3)=$get(^||EMC.Vals("FullName"))
        set $piece(params,$char(0),4)=$get(^||EMC.Vals("Age"))
	    set $piece(params,$char(0),5)=$get(^||EMC.Vals("Sex"))
	    set $piece(params,$char(0),6)=$get(^||EMC.Vals("DOB"))
	    set $piece(params,$char(0),7)=$get(^||EMC.Vals("DateOfCollection"))
	    set $piece(params,$char(0),8)=$get(^||EMC.Vals("TimeOfCollection"))
	    set $piece(params,$char(0),9)=$get(^||EMC.Vals("DoctorNames"))
	    //// $piece(params,$char(0),11)- flagImpersonalResult : =1 нет фио+др, "" or 0 - есть фио+др
	    set $piece(params,$char(0),11)="" //by default есть фио+др $select($get(flagImpersonalResult)=1:1,1:0) // =1 нет есть фио+др, "" or 0 - есть фио+др
	    
	    set $piece(params,$char(0),12)=1 // by default переводить fileBody doc to pdf 
	    
	    Set doctor=$Get(^||EMC.Vals("TS_AuthorisedDoctorId"))
	    Set doctoralias=$$DoctorAlias^Settings.Reports(doctor)
	    Set doctorAuthName=$get(^||EMC.Vals("TS_AuthorisedDoctor")) 
	    
	    // печатать авторизовавшего врача только для гистолигии и цитологии
	    if ##class(TCLEx.Report.ZenEMC).printDoctorAuth(dep) set $piece(params,$char(0),21)=doctorAuthName
	    
	    // Печатаем Accession Number (N образца) только для WORD-результатов (гистология)
	    set spisAccNumbers=""
	    if ##class(TCLEx.Function.Episode).GetAccessionNumbers(epis,testset,.x) set spisAccNumbers=x
        set $piece(params,$char(0),22)=spisAccNumbers
        if spisAccNumbers'="" s ^test("word","spisAccNumbers",epis)=spisAccNumbers
	    
	      // строка внизу - типатип отчета	    
	    set str=""
	    If $get(^||EMC.Vals("VerificationQueue")) {
		    Set str="Urgent! "
	    }	
	    If $Get(^||EMC.Vals("PrintingStatus"))="F" {
		    //Set str=str_$Select(language=2:"**** FINAL REPORT. Please File ****",1:"**** Заключительный отчет ****")
	    } Else {
		    Set str=str_$Select(language=2:"**** INTERIM REPORT. Please File ****",1:"**** Промежуточный отчет ****")
	    }
	    
	    set $piece(params,$char(0),10)=str
	    
	    // logo, stamp, faximile
	    Set fileStamp="",fileFaximile=""
	    set pathImage=##class(TCLEx.Report.ZenEMC).ImagePath()
	    set fileLogo=pathImage_"\"_##class(TCLEx.Report.ZenEMC).getNameFileLogo(dep,$name(^||EMC.Vals))
	    	    	    
	    If (doctoralias'="") {
		   Set fileStamp=pathImage_"\stamp_"_doctoralias_".png"
		   If '##class(%File).Exists(fileStamp) {
			   Set fileStamp=pathImage_"\stamp_emc.png"
		   }
		   Set fileFaximile=pathImage_"\faximile_"_doctoralias_".png"
		   If '##class(%File).Exists(fileFaximile) {
		    	Set fileFaximile=pathImage_"\faximile_serobyan.png"
		   }
	    } Else {
		   Set fileStamp=pathImage_"\stamp_emc.png"
		   Set fileFaximile=pathImage_"\faximile_serobyan.png"
	    }	
	    If '##class(%File).Exists(fileStamp) {
		    Set fileStamp=""
	    }
	    If '##class(%File).Exists(fileFaximile) {
		   Set fileFaximile=""
	    }
	    If '##class(%File).Exists(fileLogo) {
		   Set fileLogo=""
	    }
	    set $piece(params,$char(0),14)=fileLogo
	    set $piece(params,$char(0),15)=fileStamp
	    set $piece(params,$char(0),16)=fileFaximile
	    //s ^test("params")=params
	    
	} 
    catch(exception) {
	    set pError=exception.AsStatus()
	    set params=""
	}
  
    Quit params
]]></Implementation>
</Method>

<Method name="startCreatePDFfromWordEMC">
<Description>
Вызов java класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileBody:%String,fileResult:%String,params:%String,language:%String,fileLogo:%String,fileFaximile:%String,fileStamp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $get(fileBody)="" Quit $$$ERROR($$$GeneralError,"Не указан файл c word результатом")
	if $get(fileResult)="" Quit $$$ERROR($$$GeneralError,"Не указан имя файла, который надо сформировать")

    set len=$length(fileBody)  
    if $extract(fileBody,len-3,len)=".doc" set fileBody=$extract(fileBody,1,len-4)
    
    set fileBody=$tr(fileBody,"/","\")
    /*
    if $length(fileBody,"\")>1 {
	    set fileBody=$piece(fileBody,"\",1,$length(fileBody,"\"))
    }*/

    if '##class(%File).Exists(fileBody_".doc") Quit $$$ERROR($$$GeneralError,"Файл "_fileBody_" не существует")
	
    //удаление файла fileOut, если существует
    if ##class(%File).Exists(fileResult)&&('##class(%File).Delete(fileResult)) {
  	   Quit $$$ERROR($$$GeneralError,"Файл "_fileResult_" занят другим приложением")
    }
    
    set params=$get(params)
    set language=$get(language,"eng")

 // открываем gateway
  set gateway=##class(Report.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")
  
  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port))
		Try
		{
			do ##class(isc.WordToPDF.CreatePDFfromWordEMC).CreatePDFfromWord(jgw,fileBody, fileResult, params, language, fileLogo, fileFaximile, fileStamp)
		}
		Catch exception
		{
		If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
	}
	Catch exception
	{
	    If $ZERROR["<ZJGTW>" {
		    set %objlasterror=$get(%objlasterror)
		    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			    set result=%objlasterror
		    }  else {
			    Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		    }
            } 
		else {
		    Set result=exception.AsStatus()
		}
	}
  quit result
]]></Implementation>
</Method>

<Method name="getPathWordResult">
<Description>
Путь к файлам с результатом </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testset:%String,tscnt:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set yyyymm="",yyyymmA=""
	if $get(epis)'="",$get(testset)'="",$get(tscnt)'="" set yyyymmA=$extract($zd($piece($get(^TEPI(epis,1,testset,tscnt)),"\",1),8),1,6)
	if $get(epis)'="" set yyyymm=$extract($zd($piece($get(^TEPI(epis)),"\",8),8),1,6)
	if yyyymmA>yyyymm set yyyymm=yyyymmA
    quit $piece($get(^CF("SM",1)),"^",1)_$select(yyyymm'="":"\"_yyyymm,1:"")
]]></Implementation>
</Method>

<Method name="getNameFileBody">
<Description>
Имя файла с телом результата</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testset:%String,tscnt:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit $get(epis)_"_"_$get(testset)_"_"_$get(tscnt)
]]></Implementation>
</Method>

<Method name="getNameFileResult">
<Description>
Имя файла с результатом</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>epis:%String,testset:%String,tscnt:%String,language:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit $get(epis)_"-"_$zcvt($extract(language,1),"U")_"-"_$get(testset)_"-"_$tr($j($get(tscnt),2)," ","0")
]]></Implementation>
</Method>

<Method name="CreateValuesBufold">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set hospobj=episobj.EPVISHospitalCodeDR
	If $IsObject(hospobj) {
		Set @pRepParamGlb@("CompanyCode")=hospobj.%Id()
		Set @pRepParamGlb@("CompanyName")=hospobj.CTHOSName
	}	
	Set @pRepParamGlb@("Episode")=pEpis
	Set @pRepParamGlb@("DateOfCollection")=$$Horolog2Date^KSUTIL1(episobj.EPVISDateOfCollection)
	Set time=episobj.EPVISTimeOfCollection
	If time'="" {
		Set @pRepParamGlb@("TimeOfCollection")=$$DisplayTime^KSPCLUtils(time*60,2)
	}
	If pLanguage=2 {
		Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1,40)
	} Else {
		Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISExtra1,episobj.EPVISExtra2,episobj.EPVISExtra3,40)
	}		

	Set @pRepParamGlb@("Age")=##class(TCLEx.Report.Function).Age(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage)  //$$AgeString^KSUTIL2(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage)	
	//
	Set sex=$Select(pLanguage=2:"Unknown",1:"Неизвестен")   
	Set sexcode="U"
	If $IsObject(episobj.EPVISSpeciesDR) {
		Set sexcode=episobj.EPVISSpeciesDR.%Id()
		If (sexcode="M") { 
			Set sex=$Select(pLanguage=2:"Male",1:"Мужской")
		} ElseIf (sexcode="F") {
			Set sex=$Select(pLanguage=2:"Female",1:"Женский")
		
		}	
	}	
	Set @pRepParamGlb@("SexCode")=sexcode
	Set @pRepParamGlb@("Sex")=sex
	//
	Set doctobj=episobj.EPVISDoctorCodeDR 
	If $IsObject(doctobj) {
		Set @pRepParamGlb@("DoctorCode")=doctobj.%Id()
		Set @pRepParamGlb@("Doctor")=$Select(pLanguage=2:doctobj.CTDRSurname,1:doctobj.CTDRExtraName1)
	}	
	Set @pRepParamGlb@("DoctorNames")=$Extract(episobj.EPVISExtra4,1,32)
	//
	Set @pRepParamGlb@("DOB")=$$Horolog2Date^KSUTIL1(episobj.EPVISDateOfBirth)
	Set depcode=$Piece(pDepCode,$Char(1),1)
	Set queueid=$Piece(pDepCode,$Char(1),2)
	If (depcode'="")&&(pLanguage'="") {
		If ##class(User.CTSuperSet).%ExistsId(depcode) {
			Set ssetobj=##class(User.CTSuperSet).%OpenId(depcode,0)
			If $IsObject(ssetobj) {
				Set @pRepParamGlb@("Department")=ssetobj.CTSSDesc
			}	
		} Else {
			If pLanguage=2 {
				Set depobj=##class(User.CTDepartment).%OpenId(depcode,0)
				If $IsObject(depobj) {
					Set @pRepParamGlb@("Department")=depobj.CTDEPName
				}	
				
			} Else {	
				Set @pRepParamGlb@("Department")=$Get(^TTAB("DEP",depcode,"LAN",pLanguage))
			}	
		}
	}
	Set @pRepParamGlb@("VerificationQueue")=(queueid'="")
	If $IsObject(episobj.EPVISStatusPrinting) {
		Set @pRepParamGlb@("PrintingStatus")=episobj.EPVISStatusPrinting.%Id()
	}
	//
	Set authtestset=""
	Set key="",testobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		If '##class(TCLEx.Function.TestSet).IsAuthorised(testobj) Continue
		Set testsetid=testobj.%Id()
		If '##class(TCLEx.Report.Function).IsTestSet4Department(testsetid,.pTestSets,pDepCode) Continue
		Set authtestset=testsetid
		Quit
	}
	//
	If authtestset'="" {
		Do ..SetTestSetValsold(authtestset,pLanguage,pRepParamGlb)
	}
	/*
	If ..ImpersonalResult {
		Set @pRepParamGlb@("FullName")=""
		Set @pRepParamGlb@("DOB")=""
	}*/
]]></Implementation>
</Method>

<Method name="SetTestSetValsold">
<Description>
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set userobj=testsetobj.VISTSUserAuthorisedDR   
	If $IsObject(userobj) { 
	    set codeDoctorAuth=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=codeDoctorAuth
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=$$DoctorName^Settings.Reports(codeDoctorAuth,pLanguage) //userobj.SSUSRName 
	}
]]></Implementation>
</Method>

<Method name="getPathToOpenOfficeForJava">
<Description>
Путь к файлу загрузки процесса OpenOffice (soffice.exe)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//set ^test(111,"pathToOpenOfficeProgram")=$get(^Settings("WordToPdf","pathToOpenOfficeProgram"))
	if $get(^Settings("WordToPdf","pathToOpenOfficeProgram"))'="" quit ^Settings("WordToPdf","pathToOpenOfficeProgram")
    else  quit "C:\\Program Files (x86)\\OpenOffice.org 3\\program\\"
]]></Implementation>
</Method>

<Method name="getPathToSumatraPDF">
<Description>
Путь к файлу загрузки процесса OpenOffice (soffice.exe)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if $get(^Settings("WordToPdf","pathToSumatraPDF"))'="" quit ^Settings("WordToPdf","pathToSumatraPDF")
    else  quit "C:\Program Files (x86)\SumatraPDF"
]]></Implementation>
</Method>

<Method name="getPathToSumatraPDFForJava">
<Description>
Путь к файлу загрузки процесса OpenOffice (soffice.exe)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if $get(^Settings("WordToPdf","pathToSumatraPDFForJava"))'="" quit ^Settings("WordToPdf","pathToSumatraPDFForJava")
    else  quit "C:\\Program Files (x86)\\SumatraPDF\\"
]]></Implementation>
</Method>

<Method name="getLogDir">
<Description>
Путь к логам</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit $ZUtil(12)_"LIS"
]]></Implementation>
</Method>
</Class>
</Export>
