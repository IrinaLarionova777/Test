<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.Function">
<Super>%RegisteredObject</Super>
<TimeCreated>62441,61023.991741</TimeCreated>

<Method name="TestAccessUserToReport0">
<Description>
output: 1/0 - есть / нет доступа
По группам отчетов, привязанных к пользователю (в Trak это используется для выбора адресата печати, что нехорошо)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pUser:%String,pReportKey:%String,&pMessageError:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	 set pMessageError=""
	 if $get(pReportKey)="" quit 0
	 set recReport=$get(^TTAB("REPORT-GENERIC",pReportKey))
     set reportGroup=$piece(recReport,"\",4) 
     if reportGroup="" set pMessageError="Не удалось идентифицировать группу для отчета" quit 0
          
     set userobj = ##class(User.SSUser).%OpenId(pUser)
     if '$IsObject(userobj) set pMessageError="Не удалось идентифицировать пользователя" quit 0
     set grp="",ok=0
     for {
	     set userReportGroupobj=userobj.ChildSSUserReportGroup.GetNext(.grp) if grp="" quit 
	     set userReportGroup =  userReportGroupobj.SURPRepGroupDR
	     set userReportGroupCode="" if $IsObject(userReportGroup) set userReportGroupCode=userReportGroup.CTPGCode
	     if reportGroup=userReportGroupCode set ok=1 quit 
     }
     if ok=0 set pMessageError="Для пользователя "_pUser_" данный отчет не доступен." quit 0
     quit 1
]]></Implementation>
</Method>

<Method name="TestAccessUserToReport00">
<Description>
output: 1/0 - есть / нет доступа
По внешней привязке группа пользователей - отчет </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pUser:%String,pReportKey:%String,&pMessageError:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	 //s ^test(1)=$g(pUser)_"*"_$g(pReportKey)
	 set pMessageError=""
	 if $get(pReportKey)="" set pMessageError="Не удалось идентифицировать отчет" quit 0
         
     set userobj = ##class(User.SSUser).%OpenId(pUser)
     if '$IsObject(userobj) set pMessageError="Не удалось идентифицировать пользователя" quit 0
     set usergroup=userobj.SSUSRGroup
     set ok=+##class(TCLEx.Data.BindUserReport).GetFlagUseReportByUserGroup(usergroup.%Id(),pReportKey) 
     if ok=0 set pMessageError="Для пользователя "_pUser_" данный отчет не доступен." quit 0
     quit 1
]]></Implementation>
</Method>

<Method name="TestAccessUserToReport">
<Description>
output: 1/0 - есть / нет доступа</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pUser:%String,&pMessageError:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	 set pMessageError=""
	 set reportKey=$G(^TMP("REPORTSPB",$j))
	 if reportKey="" set pMessageError="Не удалось идентифицировать отчет" quit 0
	 quit ..TestAccessUserToReport0(pUser, reportKey, .pMessageError)
]]></Implementation>
</Method>

<Method name="TestAccessUserToReportVB">
<Description>
output: 1                - есть доступ 
        0_$char(1)_error - нет доступа</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUser:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pUser)="" quit "0"_$char(1)_"Не удалось идентифицировать пользователя"
	
	set reportKey=$G(^TMP("REPORTSPB",$j))
	if reportKey="" quit "0"_$char(1)_"Не удалось идентифицировать отчет"
	
	set message=""
	if ..TestAccessUserToReport00(pUser,reportKey,.message)=0 {
		quit "0"_$char(1)_$get(message)
	} 
	else 
	{
		quit 1
	}
]]></Implementation>
</Method>

<Method name="Age">
<Description>
до месяца - в днях ("1 д.", "2 дн.", "12 дн.", "21 дн." и "1 d.", "5 d.")
до года - в полных месяцах ("1 мес.", "10 мес." и "1 m.")
от года до трех лет - в годах и полных месяцах ("1 год 2 мес.", "2 года 7 мес." и "1 y. 2 m.", "2 y. 7 m.")
от трех лет - в полных годах ("4 лет", "21 лет", "35 лет" и "4 y.o.", "35 y.o.")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDOB:%Date,pDateOfCollection:%Date,pLanguage:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pLanguage=$Get(pLanguage)
	if (pLanguage'=1)&&(pLanguage'=2) {
	   set pLanguage=1	
	} 
	//set pLanguage=1
	Set result=$Select(pLanguage=2:"Unknown",1:"Неизвестен")        
	If pDOB'="" {
		Set age=..CalAge(pDOB,pDateOfCollection) ;вычисление возраста пациента  "год|месяц|день" на момент "даты забора" биоматериала
		Set ageyear=$Piece(age,"|",1)
		Set agemonth=$Piece(age,"|",2)
		Set ageday=$Piece(age,"|",3)
		//от 1 года до 3 лет ... лет ... мес
		If (ageyear>0)&&(ageyear<3) {
		     Set result=ageyear_" "_$Select(pLanguage=2:"y.",1:$select(ageyear=1:"год",1:"года"))
		     if agemonth>0 set result=result_" "_agemonth_" "_$Select(pLanguage=2:"m.",1:"мес.")	
		} ElseIf (ageyear>0) {
			 set lastdig=ageyear#10,lastdig2=ageyear#100
			 Set result=ageyear_" "_$Select(pLanguage=2:"y.o.",1:$select((lastdig2>4)&&(lastdig2<21):"лет",lastdig=1:"год",(lastdig>1)&&(lastdig<5):"года",1:"лет"))
		} ElseIf (agemonth>0) {
			 Set result=agemonth_" "_$Select(pLanguage=2:"m.",1:"мес.")
		} ElseIf (ageday>0){
			 Set result=ageday_" "_$Select(pLanguage=2:"d.",1:"дн.")
		}			 
	}
	Quit result
]]></Implementation>
</Method>

<Method name="CalAge">
<Description>
Функция СП.Арма по вычислению возраста по дню рождения на заданную дату в формате "год|месяц|день"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>IBirth:%Date,IToday:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 ;hack of date of birth
 s IBirth=$g(IBirth) s:IBirth>2980000 IBirth="" s:IBirth<0 IBirth="" q:'$G(IBirth) ""
 s IToday=$g(IToday) s:IToday="" IToday=$h
 s XBirth=$ZD(IBirth)
 s XToday=$ZD(IToday)
 s AgeMth=XToday-XBirth
 s AgeDay=$p(XToday,"/",2)-$p(XBirth,"/",2)
 s CurrYear=$p(XToday,"/",3) s:CurrYear<100 CurrYear=CurrYear+1900
 s BirthYear=$p(XBirth,"/",3) s:BirthYear<100 BirthYear=BirthYear+1900
 s AgeYear=CurrYear-BirthYear
 i AgeDay<0 d
 . s AgeMth=AgeMth-1
 . s AgeDay=AgeDay+$p("31,31,28,31,30,31,30,31,31,30,31,30,31",",",+XToday)
 . q:XToday'=2
 . s:((CurrYear#4)=0)&(((CurrYear#100)'=0)!((CurrYear#400)=0)) AgeDay=AgeDay+1
 i AgeMth<0 s AgeMth=AgeMth+12,AgeYear=AgeYear-1
 q AgeYear_"|"_AgeMth_"|"_AgeDay
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Расположение файла fop.xsl для zenreport 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Там же , где лежит fop.bat

]]></Content>
</UDLText>

<Method name="GetPathToXSL">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set returnValue=$get(^%SYS("zenreport","transformerpath"))
	set returnValue=$piece(returnValue,"\",1,$length(returnValue,"\")-1)
	set returnValue=returnValue_"\"_"fop.xsl"
	quit returnValue
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// CFSMPathToImagesServer

]]></Content>
</UDLText>

<Method name="ImagePath">
<Description>
Путь к каталогу с графическими файлами</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Quit "C:\InterSystems\Ensemble\CSP\bion\Report"
	set path=""
	&sql(select CFSM_PathToImagesServer into :path from SQLUSER.CF_SystemDefaults where CFSM_RowId='1')
	if SQLCODE'=0 {
		set path=""
	}
	set len=$length(path)
	if $tr($extract(path,len),"/","\")="\" set path=$extract(path,1,len-1)
	
	quit path
]]></Implementation>
</Method>

<Method name="CreateValuesBuf">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	// Если существует класс TCLEx.Report.Function(расширение для клиента) и в нем существует метод CreateValuesBuf, то вызывается клиентский метод 
	set clientext=$Piece($Get(^CF("SM",1)),"^",28)
	if (clientext'="") {
		set classmethod=$CLASSNAME()_clientext_"||CreateValuesBuf"
	    if ##class(%Dictionary.CompiledMethod).%ExistsId(classmethod) {
		    do $ClassMethod($piece(classmethod,"||",1),$piece(classmethod,"||",2), $get(pEpis), .pTestSets)
		    quit
	    }
	}
	
	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set hospobj=episobj.EPVISHospitalCodeDR
	If $IsObject(hospobj) {
		Set @pRepParamGlb@("CompanyCode")=hospobj.%Id()
		Set @pRepParamGlb@("CompanyName")=hospobj.CTHOSName
	}	
	Set @pRepParamGlb@("Episode")=pEpis
	Set @pRepParamGlb@("DateOfCollection")=$$Horolog2Date^KSUTIL1(episobj.EPVISDateOfCollection)
	Set time=episobj.EPVISTimeOfCollection
	If time'="" {
		Set @pRepParamGlb@("TimeOfCollection")=$$DisplayTime^KSPCLUtils(time*60,2)
	}
	If pLanguage=2 {
		Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1,40)
	} Else {
		Set @pRepParamGlb@("FullName")=$$FullName^KSPCLUtils(episobj.EPVISExtra1,episobj.EPVISExtra2,episobj.EPVISExtra3,40)
	}		

	Set @pRepParamGlb@("Age")=##class(TCLEx.Report.Function).Age(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage)  //..Age(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage)	
	//
	Set sex=$Select(pLanguage=2:"Unknown",1:"Неизвестен")   
	Set sexcode="U"
	If $IsObject(episobj.EPVISSpeciesDR) {
		Set sexcode=episobj.EPVISSpeciesDR.%Id()
		If (sexcode="M") { 
			Set sex=$Select(pLanguage=2:"Male",1:"Мужской")
		} ElseIf (sexcode="F") {
			Set sex=$Select(pLanguage=2:"Female",1:"Женский")
		
		}	
	}	
	Set @pRepParamGlb@("SexCode")=sexcode
	Set @pRepParamGlb@("Sex")=sex
	//
	Set doctobj=episobj.EPVISDoctorCodeDR
	If $IsObject(doctobj) {
		Set @pRepParamGlb@("DoctorCode")=doctobj.%Id()
		Set @pRepParamGlb@("Doctor")=$Select(pLanguage=2:doctobj.CTDRSurname,1:doctobj.CTDRExtraName1)
	}
	set @pRepParamGlb@("DoctorNames")=$Extract(episobj.EPVISExtra4,1,32)
		
	Set @pRepParamGlb@("DOB")=$$Horolog2Date^KSUTIL1(episobj.EPVISDateOfBirth)
	Set depcode=$Piece(pDepCode,$Char(1),1)
	Set queueid=$Piece(pDepCode,$Char(1),2)
	If (depcode'="")&&(pLanguage'="") {
		If ##class(User.CTSuperSet).%ExistsId(depcode) {
			Set ssetobj=##class(User.CTSuperSet).%OpenId(depcode,0)
			If $IsObject(ssetobj) {
				Set @pRepParamGlb@("Department")=ssetobj.CTSSDesc
			}	
		} Else {
			If pLanguage=2 {
				Set depobj=##class(User.CTDepartment).%OpenId(depcode,0)
				If $IsObject(depobj) {
					Set @pRepParamGlb@("Department")=depobj.CTDEPName
				}	
				
			} Else {	
				Set @pRepParamGlb@("Department")=$Get(^TTAB("DEP",depcode,"LAN",pLanguage))
			}	
		}
	}
	
	Set @pRepParamGlb@("VerificationQueue")=(queueid'="")
	
	/*
	If $IsObject(episobj.EPVISStatusPrinting) {
		Set @pRepParamGlb@("PrintingStatus")=episobj.EPVISStatusPrinting.%Id()
	}
	*/
	if ##class(TCLEx.Function.Episode).IsComplete(pEpis) {
			set @pRepParamGlb@("PrintingStatus")="F"
	}
	else {
			set @pRepParamGlb@("PrintingStatus")="I"
	}
	
	Set authtestset=""
	Set key="",testobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		If '##class(TCLEx.Function.TestSet).IsAuthorised(testobj) Continue
		Set testsetid=testobj.%Id()
		If '..IsTestSet4Department(testsetid,.pTestSets,pDepCode) Continue
		Set authtestset=testsetid
		Quit
	}
	
	If authtestset'="" {
		Do ..SetTestSetVals(authtestset,pLanguage,pRepParamGlb)
	}
	/*
	If ..ImpersonalResult {
		Set @pRepParamGlb@("FullName")=""
		Set @pRepParamGlb@("DOB")=""
	}*/
]]></Implementation>
</Method>

<Method name="IsTestSet4Department">
<Description>
Подходит ли объект набора тестов эпизода pTestSetObj для отдела pDepCode
для супер-набора также проверяется, что код набора тестов является заключением (pSummaryTestSet) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pTestSets:%String,pDepCode:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit 0
	If ($Data(pTestSets)&&('$Data(pTestSets(pTestSetId)))) Quit 0
	If '$IsObject(testsetobj.VISTSTestSetDR) Quit 0
	//
	Set depcode=$Piece(pDepCode,$Char(1),1)
	Set queueid=$Piece(pDepCode,$Char(1),2)
	//
	Set testsetcode=testsetobj.VISTSTestSetDR.%Id()
	If $Extract(testsetcode,1,1)'=depcode Quit 0 
	//
	If queueid="" Quit 1
	If (queueid'="")&&(##class(TCLEx.Function.TestSet).GetPrintableVerificationQueue(testsetobj)=queueid) Quit 1
	Quit 0
]]></Implementation>
</Method>

<Method name="SetTestSetVals">
<Description>
Загрузить значения полей для печати, которые берутся из набора тестов 
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set userobj=testsetobj.VISTSUserAuthorisedDR
	If $IsObject(userobj) { 
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=userobj.SSUSRName
	}
]]></Implementation>
</Method>

<Method name="TestExistLocFile">
<Description>
Существует ли lock файл со стороны мед системы (1- существует,0 - нет)
проверяем наличеие какого-то любого lock файла на эпизод pEpis</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode:%String,pNameLockFile:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set returnValue=0
	try {
		set dir=##class(%File).GetDirectory(pNameLockFile)
 	    Set rs=##class(%ResultSet).%New("%File:FileSet")
	    Set ok=rs.Execute(dir,pEpisode_"-*.lcke")  
	    If 'ok Quit 
	    if rs.%Next() set returnValue=1
	} catch(e) {
	    set returnValue=0	
	}
	quit returnValue
]]></Implementation>
</Method>

<Method name="ErrorWrite">
<ClassMethod>1</ClassMethod>
<FormalSpec>err:%Status,errtext:%String</FormalSpec>
<Implementation><![CDATA[
	set hor=+$h
	set ^ERRORS(hor,$i(^ERRORS(hor)))=$h_"|"_$get(errtext)_"|"_$get(err)
]]></Implementation>
</Method>

<Method name="TransValueForExcel">
<Description>
Преобразовать величину для вывода в Excel (Word) (разделитель)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $tr($get(pValue),".",",")
]]></Implementation>
</Method>
</Class>
</Export>
