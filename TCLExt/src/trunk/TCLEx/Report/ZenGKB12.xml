<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.ZenGKB12">
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>63075,64592.079265</TimeCreated>

<Property name="OrderNumber">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="Episode">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="Language">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="PDF">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="TotalPages">
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="DataGlobal">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// !!!

]]></Content>
</UDLText>

<Property name="ExtraParams">
<Description>
Дополнительные параметры</Description>
<Type>%String</Type>
</Property>

<Property name="IsLogoNeeded">
<Description>
Нужен ли логотип</Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsSignatureNeeded">
<Description>
Нужна ли подпись врача</Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsStampNeeded">
<Description>
Нужна ли печать</Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsPreviewResults">
<Description>
Флаг о том, что это файл для предпросмотра результатов и нужен watersign</Description>
<Type>%Boolean</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// !!!

]]></Content>
</UDLText>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition" name='ResultReport' runonce="true"> 
<call method="GenerateReportXML"/>    
 </report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='ResultReport' style='none'>

<!--
<document width="210mm" height="297mm" marginLeft="10mm" marginRight="10mm" marginTop="5mm" marginBottom="10mm" headerHeight="30mm" referenceOrientation="0" backgroudImage="C:\temp\watersign3.png">
<xslinclude href='#(##CLASS(TCLEx.Report.Function).GetPathToXSL())#' />
</document>
-->

<document method="Document" >
<xslinclude href='#(##CLASS(TCLEx.Report.Function).GetPathToXSL())#' />
</document>

<pageheader>
<focall method="PageHeader"/>
</pageheader >

<body >
<focall method="Body"/>
</body>

</report>
]]></Data>
</XData>

<Method name="Document">
<Description>
Содержание отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	
	
	Do stream.WriteLine("<fo:simple-page-master master-name=""main"" margin-right=""5mm"" margin-left=""15mm"" margin-top=""1mm"" margin-bottom=""10mm"" reference-orientation=""0"" page-width=""210mm"" page-height=""297mm"">")
    Do stream.WriteLine("   <fo:region-body margin-bottom=""0"" margin-top=""5mm"" margin-left=""0"" margin-right=""0"">")
    
    set pathImage=##class(TCLEx.Report.Function).ImagePath()
    
    // Если формируется файл для предварительного просмотра по F1, то background-image
    if ..IsPreviewResults {
	    set watersignfile=pathImage_"/watersign.png" 
        If '##class(%File).Exists(watersignfile) {
			Set watersignfile=""
		}		
        If watersignfile'="" {
            Do stream.WriteLine("     <xsl:attribute name=""background-image"">")
            Do stream.WriteLine("        <xsl:text>'"_watersignfile_"'</xsl:text>") 
            Do stream.WriteLine("     </xsl:attribute>")
        }
    }
    Do stream.WriteLine("   </fo:region-body>")
    Do stream.WriteLine("   <fo:region-before extent=""0.0pt"" reference-orientation=""0"" display-align=""inherit"" />")
    Do stream.WriteLine("   <fo:region-after extent=""0.0pt"" reference-orientation=""0"" display-align=""after"" />") 
    Do stream.WriteLine("   <fo:region-start extent=""0.0pt"" reference-orientation=""0"" display-align=""inherit"" />") 
    Do stream.WriteLine("   <fo:region-end extent=""0.0pt"" reference-orientation=""0"" display-align=""after"" />") 
    Do stream.WriteLine("</fo:simple-page-master>")

    quit stream
]]></Implementation>
</Method>

<Method name="EpisodeResultFileName">
<Description>
Получение имени файла результата для эпизода
Параметры:
pEpis - ID эпизода
pTestSets - буфер с ID наборов тестов (если пусто,то все наборы эпизода)
pLanguage - язык отчета
pExtension - расширение файла
Возвращаемое значение:
Имя файла результата для эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pExtension:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=pEpis_")."_pExtension
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If $IsObject(episobj) {
		Set result=episobj.EPVISSurname_"("_pEpis_"-"
		If ##class(TCLEx.Function.Episode).IsComplete(pEpis,.pTestSets) {
		Set result=result_"Окончательный"
		} Else {
			Set result=result_"Промежуточный"
		}		
		Set result=result_")."_pExtension
	}
	Set result=$$RemomeNotPrintableCharacters^KSUTIL1(result)		// Был прецедент, когда в Фаимлию записали $Char(10) - операциока не смогла открыть файл с таким именем
	Set result=$Translate(result,"*\/","___")
	Quit result
]]></Implementation>
</Method>

<Method name="LabOrderResultFileName">
<Description>
Получение имени файла результата для эпизода
Параметры:
pEpis - ID эпизода
pTestSets - буфер с ID наборов тестов (если пусто,то все наборы эпизода)
pLanguage - язык отчета
pExtension - расширение файла
Возвращаемое значение:
Имя файла результата для эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLabOrder:%String,pLanguage:%String,pExtension:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=pLabOrder_"."_pExtension
	Kill ^||ZenBion.Episodes
	Do ##class(TCLEx.Function.LabOrder).CreateOrderEpisodesGlb(pLabOrder,$Name(^||ZenBion.Episodes))
	Set episobj=##class(User.EPVisitNumber).%OpenId($Order(^||ZenBion.Episodes("")))
	If $IsObject(episobj) {
		Set result=episobj.EPVISSurname_"("_pLabOrder_"-"
		If ##class(TCLEx.Function.LabOrder).IsComplete(pLabOrder,$Name(^||ZenBion.Episodes)) {
		Set result=result_"Окончательный"
		} Else {
			Set result=result_"Промежуточный"
		}		
		Set result=result_")."_pExtension
	}
	Set result=$$RemomeNotPrintableCharacters^KSUTIL1(result)		// Был прецедент, когда в Фаимлию записали $Char(10) - операциока не смогла открыть файл с таким именем
	Set result=$Translate(result,"*\/","___")
	Quit result
]]></Implementation>
</Method>

<Method name="CreateValuesBuf">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	//s ^test("par")=$g(pEpis)_"*"_$g(pTestSets)_"*"_$g(pDepCode)_"*"_$g(pLanguage)
	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set @pRepParamGlb@("FullName")=$$NameFormat^KSUTIL1(1,episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1)
	If $IsObject(episobj.EPVISSpeciesDR) {
		Set @pRepParamGlb@("Sex")=episobj.EPVISSpeciesDR.CTSPDesc
	}
	If $IsObject(episobj.EPVISDebtorNumberDR) {
		Set @pRepParamGlb@("MRN")=episobj.EPVISExtra15   //.EPVISDebtorNumberDR.%Id()
	}
	Set @pRepParamGlb@("Episode")=pEpis
	Set age="Неизвестен" 
	If episobj.EPVISAge'="" {
		Set age=episobj.EPVISAge
	}	  
	//Set @pRepParamGlb@("Age")=age
	Set @pRepParamGlb@("Age")=##class(TCLEx.Report.Function).Age(episobj.EPVISDateOfBirth,episobj.EPVISDateOfCollection,pLanguage)
	
	Set @pRepParamGlb@("DateOfCollection")=$$DisplayDate^KSPCLUtils(episobj.EPVISDateOfCollection)
	If episobj.EPVISTimeOfEntry'="" {
		Set @pRepParamGlb@("TimeOfEntry")=$$DisplayTime^KSPCLUtils(60*episobj.EPVISTimeOfEntry,2)
	}
	If $IsObject(episobj.EPVISHospitalCodeOriginalDR) {
		Set @pRepParamGlb@("HospitalDepartment")=$extract(episobj.EPVISHospitalCodeOriginalDR.CTHOSName,1,50)
	}	
	Set depcode=$Piece(pDepCode,$Char(1),1)
	If (depcode'="")&&(##class(User.CTSuperSet).%ExistsId(depcode)) {
		Do ##class(TCLEx.Function.SuperSet).CreateItemsBuf(depcode,$NA(^||Report.SuperSetItems))
		Set firsttestset=$Order(^||Report.SuperSetItems(""))
		Set depcode=$Extract(firsttestset,1,1)
	} 
	Set depobj=##class(User.CTDepartment).%OpenId(depcode,0)
	If $IsObject(depobj) {
		Set @pRepParamGlb@("Department")=depobj.CTDEPName
	}
	
	set priority=""
	if $IsObject(episobj.EPVISPriorityCodeDR) {
		if $$seldata^LVBCTPR(episobj.EPVISPriorityCodeDR.%Id(),4)="Y" {
			set priority="Y"
		}
	}
	
	/*
	set pri=$piece($get(^TEPI(pEpis)),"\",15)
	if (pri'="")&&($$seldata^LVBCTPR(pri,4)="Y") {
			set priority="Y"
	}*/
	
	Set @pRepParamGlb@("Priority")=priority
	
	//
	Set summarytestset=##class(TCLEx.Function.SuperSet).SummaryTestSet(pDepCode)
	Set (authtestset,canceltestset,authtestsetWithRealDoctor,testsetsome)=""
	Set key="",testobj="",canceledobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		Set testsetid=testobj.%Id()
		If '..IsTestSet4Department(testsetid,.pTestSets,pDepCode,summarytestset)  Continue
		set testsetsome=testsetid
		
		If ##class(TCLEx.Function.TestSet).IsAuthorised(testobj) {
			Set authtestset=testsetid
			Set authdoctor=testobj.VISTSUserAuthorisedDRGetObjectId()														// Врач, который авторизовал набор тестов
	        Set officialdoctor=authdoctor  ;##class(TCLEx.Function.EMED).OfficialDoctor(authdoctor,testobj.VISTSTestSetDRGetObjectId())
			if authdoctor'=""&&(authdoctor=officialdoctor) set authtestsetWithRealDoctor=testsetid
			if authtestsetWithRealDoctor'="" Quit
		}	
		If ##class(TCLEx.Function.TestSet).IsCanceled(testobj) {
			Set canceltestset=testsetid
		}	
	}
	Set testsetid=""
	If (authtestsetWithRealDoctor'="") {						// Либо берем подходящий авторизованный набор тестов
		Set testsetid=authtestsetWithRealDoctor
	} Else {
	    If (authtestset'="") {						// Либо берем подходящий авторизованный набор тестов
		    Set testsetid=authtestset
	    } Else {
		    If (canceltestset'="") {				// (если нет авторизованных, то берем отмененный)
			    Set testsetid=canceltestset
		    }
	    }	
	}
	;If testsetid="" Quit
	if testsetid="" {
		set testsetid=testsetsome
	}
	Do ..SetTestSetVals(testsetid,pLanguage,pRepParamGlb)
]]></Implementation>
</Method>

<Method name="SetTestSetVals">
<Description>
Загрузить значения полей для печати, которые берутся из набора тестов 
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set cttestsetobj=testsetobj.VISTSTestSetDR
	If $IsObject(cttestsetobj) { 
		Set depobj=cttestsetobj.CTTSDepartmentDR
		If $IsObject(depobj) {
			Set @pRepParamGlb@("TS_DepartmentName")=depobj.CTDEPName
			Set @pRepParamGlb@("TS_DepartmentCode")=depobj.%Id()
		}
	}	
	;
	// Врач, который авторизовал набор тестов
	Set authdoctor=testsetobj.VISTSUserAuthorisedDRGetObjectId()
	Set officialdoctor=authdoctor //##class(TCLEx.Function.EMED).OfficialDoctor(authdoctor,testsetobj.VISTSTestSetDRGetObjectId())	// Если авторизовал лаборант, то врач по умолчанию для отдела авторизованного набора тестов
	Set userobj=##class(User.SSUser).%OpenId(officialdoctor,0) //testsetobj.VISTSUserAuthorisedDR
	If $IsObject(userobj) { 
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=userobj.SSUSRName 
	}	
	;
	Set specimen=""
	Set specobj=testsetobj.VISTSSpecimenTypeDR
	If $IsObject(specobj) Set specimen=specobj.CTSPEDesc
	If specimen="" Set specimen=$$TestSpecimen^KSReportSQL($Piece(testsetobj.%Id(),"||",2))
	Set @pRepParamGlb@("TS_Specimen")=specimen
	;
	if $get(@pRepParamGlb@("Priority"))="" {
			if $IsObject(testsetobj.VISTSPriorityDR) {
				if $$seldata^LVBCTPR(testsetobj.VISTSPriorityDR.%Id(),4)="Y" {
			        set @pRepParamGlb@("Priority")="Y"
				}   
			}
	}
]]></Implementation>
</Method>

<Method name="IsTestSet4Department">
<Description>
Подходит ли объект набора тестов эпизода pTestSetObj для отдела pDepCode
для супер-набора также проверяется, что код набора тестов является заключением (pSummaryTestSet) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pTestSets:%String,pDepCode:%String,pSummaryTestSetId:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit 0
	Set pSummaryTestSetId=$Get(pSummaryTestSetId)
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		If $IsObject(testsetobj.VISTSSuperSetDR)&&(testsetobj.VISTSSuperSetDR.%Id()=pDepCode)&&($IsObject(testsetobj.VISTSTestSetDR)) {
			If testsetobj.VISTSTestSetDR.%Id()=pSummaryTestSetId Quit 1
		}	
	} Else {
		If ('$Data(pTestSets)||($Data(pTestSets(pTestSetId))))  {
			If $IsObject(testsetobj.VISTSTestSetDR) {
				Set testsetcode=testsetobj.VISTSTestSetDR.%Id()
				If $Extract(testsetcode,1,1)=pDepCode {
					Quit 1
				}
			}		
		}	
	}
	Quit 0
]]></Implementation>
</Method>

<Method name="%OnBeforeReport">
<Description>
This callback is invoked after this report is instantiated
and before it is run.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..OrderNumber'="" {
		Set glb=..DataGlobal
		Set ..Episode=$Order(@glb@(""))
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RowCount">
<Description>
Число строк для отдела pDepCode</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDepCode:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//If (pDepCode="H")||(pDepCode="D") Quit 47
	Quit 55
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method outputs the contents of the PDF report
/// RenderServer is set to the port of the hot JVM server
/// There is also a queuing hot JVM server which queues files for PDF rendering later
/// This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  
Method %DisplayPDF1(DisplayLog As %Boolean = 0, RenderServer As %String = "", async As %Boolean = 0, ByRef xmlfile As %String, ByRef xslfile As %String, ByRef pdffile As %String, ByRef lockfile As %String) As %Status
{
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		Set tSC = ..%MakeToXSLFOFile(.xslfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
		if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile))

		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			if (..#HANG'=0) hang ..#HANG
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile)
	} While (0)

	Quit tSC
}
*/
]]></Content>
</UDLText>

<Method name="GenerateReportXML">
<Description>
Генерация XML данных отчета
Нужно, чтобы что-нибудб было, чтобы сформировался PDF-файл</Description>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	If ..OrderNumber'="" {
		Do stream.WriteLine("<OrderNumber>"_$ZConvert(..OrderNumber,"o","XML")_"</OrderNumber>")
	} Else {
		Do stream.WriteLine("<Episode>"_$ZConvert(..Episode,"o","XML")_"</Episode>")
	}		
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultHeader">
<FormalSpec>pDepCode:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
    
    //Do stream.WriteLine("<xsl:attribute name='background-image'>")
	//Do stream.WriteLine("<xsl:text>C:\temp\watersign3.png</xsl:text>")
	//Do stream.WriteLine("</xsl:attribute>")
    
    /* 
    Set logofilename=##class(TCLEx.Report.Function).ImagePath()_"\logo.png" //_..getNameFileLogo(pDepartment, pRepParamGlb)
	If '##class(%File).Exists(logofilename) set logofilename=""
	if logofilename'="" {
    	Do stream.WriteLine("<fo:block-container absolute-position='fixed' position='absolute' left='25mm' top='5mm' width='180mm' height='20mm' overflow='hidden'>")
		Do stream.WriteLine("<fo:block>")
		Do stream.WriteLine("	<fo:external-graphic  content-width='180mm' content-height='25mm'   >")
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(logofilename,"o","XML")_"</xsl:attribute>")
		Do stream.WriteLine("	</fo:external-graphic>")
		Do stream.WriteLine("</fo:block>")
		Do stream.WriteLine("</fo:block-container>")
	} 
	*/
	
	
    
    // logo text
    Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='100%'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell><fo:block text-align='center'><fo:inline font-weight='bold' font-size='13pt'>"_$ZConvert("Клинико-диагностическая лаборатория","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
    Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell><fo:block text-align='center'><fo:inline font-weight='bold' font-size='13pt'>"_$ZConvert("Городская клиническая больница № 12 ДЗ г. Москвы","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
    Do stream.WriteLine("		</fo:table-row>")
    Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>") 
    
    // пустое пространство
    Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>3mm</xsl:attribute>")
	Do stream.WriteLine("</fo:block>")
 
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='80mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='40mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	// ФИО пациента
	/*
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block><fo:inline font-weight='bold'>"_$ZConvert("ФИО пациента: ","o","XML")_"</fo:inline>")
	Do stream.WriteLine("			<fo:inline font-size='12pt'>"_$ZConvert($Get(@pRepParamGlb@("FullName")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Срочность: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-size='12pt'>"_$ZConvert($Extract($Get(@pRepParamGlb@("Priority")),1,10),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	*/
	set priority=$Get(@pRepParamGlb@("Priority"))
	set priorityText=$select(priority="Y":"CITO",1:"Обычная") 
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-weight='bold'>"_$ZConvert("ФИО пациента: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-size='12pt'>"_$ZConvert($Get(@pRepParamGlb@("FullName")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Срочность: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-size='12pt'>"_$ZConvert(priorityText,"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-weight='bold'>"_$ZConvert("№ МК: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-size='12pt'>"_$ZConvert($Get(@pRepParamGlb@("MRN")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Дата регистрации: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell><fo:block><fo:inline font-size='12pt'>"_$ZConvert($Extract($Get(@pRepParamGlb@("DateOfCollection")),1,10),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("№ эпизода: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline  font-size='12pt'>"_$ZConvert($Extract(..Episode,1,10),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Время регистрации: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-size='12pt'>"_$ZConvert($Get(@pRepParamGlb@("TimeOfEntry")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='80mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='26mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='55mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Возраст/Пол: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-size='12pt'>"_$ZConvert($Get(@pRepParamGlb@("Age"))_"/"_$Get(@pRepParamGlb@("Sex")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Отделение: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-size='10pt'>"_$ZConvert($Get(@pRepParamGlb@("HospitalDepartment")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block><fo:inline font-weight='bold'>"_$ZConvert("В доставленном биоматериале ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Врач: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-size='10pt'>"_$ZConvert($Get(@pRepParamGlb@("Doctor")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	
	/*
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='80mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='40mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block><fo:inline font-weight='bold'>"_$ZConvert("В доставленном биоматериале ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-weight='bold'>"_$ZConvert("Врач: ","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline font-size='10pt'>"_$ZConvert($Get(@pRepParamGlb@("Doctor")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
    */

	Set str="&#160;"
		
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='font-size'>12pt</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	//Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>2mm</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='text-align'>center</xsl:attribute>")
	Set caption=..ResultHeaderCaption(pDepCode,pRepParamGlb)
	Do stream.WriteLine($ZConvert(caption,"O","XML"))
	Do stream.WriteLine("</fo:block>")
	
	// пустое пространство
    Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>2mm</xsl:attribute>")
	Do stream.WriteLine("</fo:block>")
	
	//Do stream.WriteLine("<fo:block><fo:leader leader-pattern='space' rule-thickness='1px'/></fo:block>")
	
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultHeaderCaption">
<Description>
Надпись над таблицей результата
Это либо название супер-набора,
Либо название отдела
Либо название секции (если в отдел результата pDepCode попадают наборы тестов только 1 секции)</Description>
<FormalSpec>pDepCode:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		Set supersetobj=##class(User.CTSuperSet).%OpenId(pDepCode)
		If '$IsObject(supersetobj) Quit ""
		Quit supersetobj.CTSSDesc
	}
	//m ^test("sec",pDepCode)=@pRepParamGlb@("Sections",pDepCode)
	/*
	Set sectioncnt=$Get(@pRepParamGlb@("Sections",pDepCode))
	If sectioncnt=1 {
		Set sectioncode=$Order(@pRepParamGlb@("Sections",pDepCode,""))
		If sectioncode'="" Quit $Get(@pRepParamGlb@("Sections",pDepCode,sectioncode))
	}
	*/
	if $get(pDepCode)'="" {
		set depName=""
		set langDefault=##class(TCLEx.Function.Episode).GetDefaultLanguage()
		if langDefault'="" set depName=$piece($get(^TTAB("DEP",pDepCode,"LAN",langDefault)),"\",1)	
		if depName="" set depName=$piece($get(^TTAB("DEP",pDepCode)),"\",1)
		quit depName
	}
	Quit ""
]]></Implementation>
</Method>

<Method name="ResultTable">
<FormalSpec><![CDATA[pDepCode:%String,pPageNumber:%Integer,pTotalPages:%Integer,pPageGlb:%String,pRepParamGlb:%String,&pRealRowCount:%Integer]]></FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	set pRealRowCount=0 // реальное кол-во строк
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("    <fo:table xsl:use-attribute-sets='table1' background-color='#EFEFEF' border-width='1pt' border-style='solid' table-layout='fixed' width='100%' border-collapse='separate'>")
	For i=1:1:90 {
	 Do stream.WriteLine("      <fo:table-column column-width='2.11mm'/>")
	}
	Do stream.WriteLine("      <fo:table-body>")
	
		Do stream.WriteLine("        <fo:table-row line-height='5mm'>")		// Для RUS - заголовок в 2 строках по 5 мм
		Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='37' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Наименование теста</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='10' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>&#160;</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='12' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Результат</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='12' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Единицы измерения</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='3' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>&#160;</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='16' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Референсные значения</fo:block></fo:table-cell>")
		Do stream.WriteLine("        </fo:table-row >")
	
	Set maxrowcount=..RowCount(pDepCode)
	For i=1:1:maxrowcount {
		If '$Data(@pPageGlb@(i))&&($order(@pPageGlb@(i))="") { quit }
		set pRealRowCount=pRealRowCount+1
	Set str="        <fo:table-row line-height='3.45mm'>"
	If pRealRowCount#2 {
	 	Set str="        <fo:table-row line-height='3.45mm' background-color='#FFFFFF'>"
	}	
	Do stream.WriteLine(str) 
	If '$Data(@pPageGlb@(i)) {
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='90'><fo:block>&#160;</fo:block></fo:table-cell>")
	} Else {
		Set col=""
		For  {
			Set col=$Order(@pPageGlb@(i,col))
			If col="" Quit
			Set cssclass=$Get(@pPageGlb@(i,col,"CSSClass"))
			Set colspan=$Get(@pPageGlb@(i,col,"ColSpan"))
			Set value=$Get(@pPageGlb@(i,col,"Value"))
			If value="" {
				Set value=$Char(160)
			}	
			Set bold=$Get(@pPageGlb@(i,col,"Bold"))
			Set italic=$Get(@pPageGlb@(i,col,"Italic"))
			Set underline=$Get(@pPageGlb@(i,col,"Underline"))
			Set str="<fo:table-cell "
			If cssclass'="" {
				Set str=str_"xsl:use-attribute-sets='"_cssclass_"' "
			}
			If colspan>1 {
				Set str=str_"number-columns-spanned='"_colspan_"' "
			}
			If bold {
				Set str=str_" font-weight='bold' "
			}	
			If italic {
				Set str=str_" font-style='italic' "
			}	
			If underline {
				Set str=str_" text-decoration='underline' "
			}	
			
			Set str=str_">"
			Set str=str_"<fo:block>"
			Set str=str_$ZConvert(value,"O","XML")
			Set str=str_"</fo:block></fo:table-cell>"
			Do stream.WriteLine(str)	
		}	
	}	
	Do stream.WriteLine("        </fo:table-row>")
	}	 
	Do stream.WriteLine("      </fo:table-body>")
	Do stream.WriteLine("    </fo:table>")
	Quit stream
]]></Implementation>
</Method>

<Method name="Footer">
<FormalSpec><![CDATA[pPageNumber:%Integer,pTotalPages:%Integer,pRepParamGlb:%String,&pRealRowCount:%Integer]]></FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	/*
	If ..ExtraParams'="" {
		Set ..IsSignatureNeeded=$ListGet(..ExtraParams,2)
		Set ..IsStampNeeded=$ListGet(..ExtraParams,3)
	}	
	*/
	
	Set stream=##class(%GlobalCharacterStream).%New()
	
	set pathImage=##class(TCLEx.Report.Function).ImagePath()
	
	// file with signature (not transparent background)
	Set signfilename=""
	Set doctor=$Get(@pRepParamGlb@("TS_AuthorisedDoctorId"))
	Set userobj=##class(User.SSUser).%OpenId(doctor)
	If $IsObject(userobj) {
		set codeMIS=userobj.SSUSRProvider
		if codeMIS'="" {
			set signfilename=pathImage_"/facsimile_"_userobj.SSUSRProvider_".png"								
		} 
	}	
	If (signfilename'="")&&('##class(%File).Exists(signfilename)) {
			Set signfilename=""
	}
	
	//set top=pRealRowCount*3.57\1+55
	//s ^test(123,$i(^test(123)))=top_"*"_pRealRowCount
	
	// контейнер для слов Анализ проводил ... и для факсимиле (относительное позиционирование) 
	// (у внутренних fo:block-container будет абсолютное позиционирование  с коррдинатами относительно этого блока
	Do stream.WriteLine("<fo:block-container>") // контейнер для других контейнеров
	
	// All elements are considered to have a z-index of 0, therefore, if the user desires for an element to be displayed on the background (like a watermark), 
	// a negative z-index must be used, while for a foreground element (like a stamp) a positive z-index.
	If signfilename'="" {
		Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='40mm' top='0.5mm' width='40mm' height='20mm' overflow='hidden'>")
		Do stream.WriteLine("<fo:block>")
		//Do stream.WriteLine("	<fo:external-graphic content-width='40mm' content-height='40mm'   >")
		Do stream.WriteLine("	<fo:external-graphic content-height='scale-to-fit' content-width='scale-to-fit' height='20mm' width='40mm' scaling='non-uniform' >")
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(signfilename,"o","XML")_"</xsl:attribute>")
		Do stream.WriteLine("	</fo:external-graphic>")
		Do stream.WriteLine("</fo:block>")
		Do stream.WriteLine("</fo:block-container>")
	}

    /*
	 // пустое пространство
    Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>17mm</xsl:attribute>")
	Do stream.WriteLine("</fo:block>")
	*/
	
	Do stream.WriteLine("<fo:block-container z-index='0' position='absolute' left='5mm' top='12mm' width='190mm' height='30mm' overflow='hidden'>")
	//Do stream.WriteLine("<fo:block-container z-index='1' overflow='hidden'>")
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate' height='100%'>")
	Do stream.WriteLine("	<fo:table-column column-width='190mm' />")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<fo:table-row >")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Анализ проводил _____________________________ ( "_$Get(@pRepParamGlb@("TS_AuthorisedDoctor"))_" )","o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
	Do stream.WriteLine("</fo:block-container>")
	
	/*
	 // пустое пространство
    Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>3mm</xsl:attribute>")
	Do stream.WriteLine("</fo:block>")
    */
    
    Do stream.WriteLine("<fo:block-container z-index='0' position='absolute' left='160mm' top='15mm' width='30mm' height='5mm' overflow='hidden'>")
	//Do stream.WriteLine("<fo:block-container>")
	Set str="Стр. "_pPageNumber_" из "_pTotalPages
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='NORMAL' text-align='right'><fo:inline font-size='8pt'>"_$ZConvert(str,"o","XML")_"</fo:inline></fo:block>")
	Do stream.WriteLine("</fo:block-container>")
    
    Do stream.WriteLine("</fo:block-container>") // контейнер для других контейнеров
    
	/*
    // footer with phones
    Set footerfilename=pathImage_"/footer.png" //_..getNameFileLogo(pDepartment, pRepParamGlb)
	If '##class(%File).Exists(footerfilename) set footerfilename=""
	if footerfilename'="" {
    	Do stream.WriteLine("<fo:block-container absolute-position='fixed' position='absolute' left='5mm' top='270mm' width='180mm' height='25mm' overflow='hidden'>")
		Do stream.WriteLine("<fo:block>")
		Do stream.WriteLine("	<fo:external-graphic  content-width='180mm' content-height='25mm'   >")
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(footerfilename,"o","XML")_"</xsl:attribute>")
		Do stream.WriteLine("	</fo:external-graphic>")
		Do stream.WriteLine("</fo:block>")
		Do stream.WriteLine("</fo:block-container>")
	} 
	*/

   // Печать водяного знака
    
    /*  Так раньше был сделан watermark
    if ..IsPreviewResults {
	    
	    set watersignfile=pathImage_"/watersign.png" 
        If '##class(%File).Exists(watersignfile) {
			Set watersignfile=""
		}		
        If watersignfile'="" {
		   Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='20mm' top='110mm' width='150mm' height='80mm' overflow='hidden'>")
		   Do stream.WriteLine("<fo:block>")
		   Do stream.WriteLine("	<fo:external-graphic  content-width='150mm' content-height='80mm'   >")
		   Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(watersignfile,"o","XML")_"</xsl:attribute>")
		   Do stream.WriteLine("	</fo:external-graphic>")
		   Do stream.WriteLine("</fo:block>")
		   Do stream.WriteLine("</fo:block-container>")
	    }
	    
    }
    */
    If pPageNumber<pTotalPages {
		Do stream.WriteLine("<fo:block break-after='page'/>")
	}

	Quit stream
]]></Implementation>
</Method>

<Method name="PageHeader">
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	quit ""
	/*
	Set ..IsLogoNeeded=1
	If (..ExtraParams'="") {
		Set ..IsLogoNeeded=$ListGet(..ExtraParams,1)
		If ..IsLogoNeeded=0 Quit ""
	}
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("<fo:block>")
	Do stream.WriteLine("	<fo:external-graphic  content-height='30mm'  content-width='190mm' >")
	Set logofilename=..LogoFileName(..Episode)
	Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(logofilename,"o","XML")_"</xsl:attribute>")
	Do stream.WriteLine("	</fo:external-graphic>")
	Do stream.WriteLine("</fo:block>")
	
	Quit stream
	*/
]]></Implementation>
</Method>

<Method name="LogoFileName">
<Description>
Имя файла для логотипа отчета
Параметры:
pEpis - ID эпизода
Взвращаемое значение:
Путь к логотипу компании в заголовке отчета
Возможные врианты
Пользовательский логотип (имя файла logo_NNNN.png, где NNNN - код ЛПУ эпизода) При этом не печатается печать в Footer-е
Пользовательский логотип (имя файла logo4stamp_NNNN.png, где NNNN - код ЛПУ эпизода) При этом печатается печать в Footer-е
logo_bion.png - логотип Биона. При этом печатается печать в Footer-е</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ##class(TCLEx.Report.Function).ImagePath()_"/logo.png"
	
	/*
	Set result=""
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	set pathImage=##class(TCLEx.Report.Function).ImagePath()
	If ($IsObject(episobj))&&($IsObject(episobj.EPVISHospitalCodeDR)) {
		Set hospid=episobj.EPVISHospitalCodeDR.%Id()
		Set result=pathImage_"/logo_"_hospid_".png"
		If '##class(%File).Exists(result) {
			Set result=pathImage_"/logo4stamp_"_hospid_".png"
			If '##class(%File).Exists(result) {
				Set result=""
			}	
		} 	
	}
	If result="" {
		Set result=pathImage_"/logo_bion.png"
	}
	Quit result
	*/
]]></Implementation>
</Method>

<Method name="NeedStamp">
<Description>
logo_bion.png - логотип Биона. При этом печатается печать в Footer-е</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If ($IsObject(episobj))&&($IsObject(episobj.EPVISHospitalCodeDR)) {
		Set hospid=episobj.EPVISHospitalCodeDR.%Id()
		Set result=##class(TCLEx.Report.Function).ImagePath()_"\logo_"_hospid_".png" 
		If ##class(%File).Exists(result) {
			Quit 0
		} 	
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="Body">
<Description>
Отрисовка содержания отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	Set glb=..DataGlobal
	If ..OrderNumber="" {
		Set dep="",pagenumber=0
		For  {
			Set dep=$Order(@glb@(dep))
			If dep="" Quit
			Kill ^||ZenEMC.Vals
			Do ##class(TCLEx.Report.DRP).CreateValuesBuf(..Episode,,dep,..Language,$Name(^||ZenEMC.Vals))
			Set headerstream=..ResultHeader(dep,$Name(^||ZenEMC.Vals))
			Set page=""
			For  {
				Set page=$Order(@glb@(dep,page))
				If page="" Quit
				Set pagenumber=pagenumber+1
				Do stream.CopyFrom(headerstream)
				Set tablestream=..ResultTable(dep,pagenumber,..TotalPages,$Name(@glb@(dep,page)),$Name(^||ZenEMC.Vals),.realrowcount)
				Do stream.CopyFrom(tablestream)
				Set footerstream=..Footer(pagenumber,..TotalPages,$Name(^||ZenEMC.Vals),realrowcount)
				Do stream.CopyFrom(footerstream)
			}	
		}
	} Else {
		Set pagenumber=0
		Set epis=""
		For  {
			Set epis=$Order(@glb@(epis))
			If epis="" Quit
			Set ..Episode=epis
			Set dep=""
			For  {
				Set dep=$Order(@glb@(epis,dep))
				If dep="" Quit
				Kill ^||ZenEMC.Vals
				Do ##class(TCLEx.Report.DRP).CreateValuesBuf(..Episode,,dep,..Language,$Name(^||ZenEMC.Vals))
				Set headerstream=..ResultHeader(dep,$Name(^||ZenEMC.Vals))
				Set page=""
				For  {
					Set page=$Order(@glb@(epis,dep,page))
					If page="" Quit
					Set pagenumber=pagenumber+1
					Do stream.CopyFrom(headerstream)
					Set tablestream=..ResultTable(dep,pagenumber,..TotalPages,$Name(@glb@(epis,dep,page)),$Name(^||ZenEMC.Vals),.realrowcount)
					Do stream.CopyFrom(tablestream)
					Set footerstream=..Footer(pagenumber,..TotalPages,$Name(^||ZenEMC.Vals),realrowcount)
					Do stream.CopyFrom(footerstream)
				}	
			}
		}
	}		
	Quit stream
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method outputs the contents of the PDF report
/// RenderServer is set to the port of the hot JVM server
/// There is also a queuing hot JVM server which queues files for PDF rendering later
/// This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  
Method %DisplayPDF1(DisplayLog As %Boolean = 0, RenderServer As %String = "", async As %Boolean = 0, ByRef xmlfile As %String, ByRef xslfile As %String, ByRef pdffile As %String, ByRef lockfile As %String, fromGenerateReport As %Boolean, outputfilename As %String) As %Status [ Internal ]
{
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		//Set ..xmlfile = xmlfile
		Set tSC = ..%MakeToXSLFOFile(.xslfile,xmlfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		; delete logfile so user does not see "ghost" of old logfile when using $REPORTNAME
		i $g(logfile)'="" Do ##class(%File).Delete(logfile)
		if (fromGenerateReport=0 || (DisplayLog=1)) {
			if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
			if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		} else {
			Set pdffile = outputfilename
		}
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		s ^test("pdf")=xmlfile_"||"_xslfile_"||"_pdffile_"||"_logfile
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile), DisplayLog)

#if 0 ; 11-04-11
		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
#else		
		If $$$ISOK(tSC),'async,('fromGenerateReport||(DisplayLog=1)) {
			Set stream=##class(%FileBinaryStream).%New()
			If DisplayLog {
				Set stream.Filename=logfile
			}
			Else {
				Set stream.Filename=pdffile
			}
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
#endif		
		
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile,.xmlfiles,.pdfiles,0,fromGenerateReport)
	} While (0)

	Quit tSC
}*/
]]></Content>
</UDLText>
</Class>
</Export>
