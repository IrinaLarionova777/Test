<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Report.ZenBion">
<Super>%ZEN.Report.reportPage</Super>
<TimeCreated>62355,51855.555434</TimeCreated>

<Property name="OrderNumber">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="Episode">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="Language">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="PDF">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="TotalPages">
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="DataGlobal">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// !!!

]]></Content>
</UDLText>

<Property name="ExtraParams">
<Type>%String</Type>
</Property>

<Property name="IsLogoNeeded">
<Description>
Нужен ли логотип
0 - не печатать лого (без пустого места сверху)
1 - печать лого ЛПУ, если есть файл с лого, иначе печатать лого Биона
2 - печать лого ЛПУ, если есть файл с лого, иначе оставлять пустое место сверху
3 - оставлять пустое место сверху
ExtraParams="" - аналогично 1 </Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsSignatureNeeded">
<Description>
Нужна ли подпись врача
0 - не печатать подпись врача
1 - печатать подпись врача
2 - формирование файла для печати на принтер (своя логика пока, иначе не разобраться)</Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsStampNeeded">
<Description>
Нужна ли печать
0 - не печатать 
1 - печатать 
2 - формирование файла для печати на принтер (своя логика пока, иначе не разобраться)</Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsPreviewResults">
<Description>
Флаг о том, что это файл для предпросмотра результатов и нужен watersign</Description>
<Type>%Boolean</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// !!!

]]></Content>
</UDLText>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition" name='ResultReport' runonce="true"> 
<call method="GenerateReportXML"/>    
 </report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='ResultReport' title='Результат исследования' style='standard'>

<document method="Document" >
<xslinclude href='#(##CLASS(TCLEx.Report.Function).GetPathToXSL())#' />
</document>

<!--
<document width="210mm" height="297mm" marginLeft="10mm" marginRight="10mm" marginTop="5mm" marginBottom="10mm" headerHeight="30mm" referenceOrientation="0">
<xslinclude href='#(##CLASS(TCLEx.Report.Function).GetPathToXSL())#' />
</document>
-->

<pageheader>
<focall method="PageHeader"/>
</pageheader >

<body >
<focall method="Body"/>
</body>
</report>
]]></Data>
</XData>

<Method name="Document">
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	
	
	Do stream.WriteLine("<fo:simple-page-master master-name=""main"" margin-right=""10mm"" margin-left=""10mm"" margin-top=""5mm"" margin-bottom=""10mm"" reference-orientation=""0"" page-width=""210mm"" page-height=""297mm"">")
    Do stream.WriteLine("   <fo:region-body margin-bottom=""0"" margin-top=""30mm"" margin-left=""0"" margin-right=""0"">")
    
    // Если формируется файл для предварительного просмотра по F1, то background-image
    if ..IsPreviewResults {
	    set watersignfile=..ImagePath()_"watersign.png" 
        If '##class(%File).Exists(watersignfile) {
			Set watersignfile=""
		}		
        If watersignfile'="" {
            Do stream.WriteLine("     <xsl:attribute name=""background-image"">")
            Do stream.WriteLine("        <xsl:text>'"_watersignfile_"'</xsl:text>") 
            Do stream.WriteLine("     </xsl:attribute>")
        }
    }
    Do stream.WriteLine("   </fo:region-body>")
    Do stream.WriteLine("   <fo:region-before extent=""0.0pt"" reference-orientation=""0"" display-align=""inherit"" />")
    Do stream.WriteLine("   <fo:region-after extent=""0.0pt"" reference-orientation=""0"" display-align=""after"" />") 
    Do stream.WriteLine("   <fo:region-start extent=""0.0pt"" reference-orientation=""0"" display-align=""inherit"" />") 
    Do stream.WriteLine("   <fo:region-end extent=""0.0pt"" reference-orientation=""0"" display-align=""after"" />") 
    Do stream.WriteLine("</fo:simple-page-master>")

    quit stream
]]></Implementation>
</Method>

<Method name="EpisodeResultFileName">
<Description>
Получение имени файла результата для эпизода
Параметры:
pEpis - ID эпизода
pTestSets - буфер с ID наборов тестов (если пусто,то все наборы эпизода)
pLanguage - язык отчета
pExtension - расширение файла
Возвращаемое значение:
Имя файла результата для эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pLanguage:%String,pExtension:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=pEpis_")."_pExtension
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If $IsObject(episobj) {
		Set result=episobj.EPVISSurname_"("_pEpis_"-"
		If ##class(TCLEx.Function.Episode).IsComplete(pEpis,.pTestSets) {
		Set result=result_"Окончательный"
		} Else {
			Set result=result_"Промежуточный"
		}		
		Set result=result_")."_pExtension
	}
	Set result=$$RemomeNotPrintableCharacters^KSUTIL1(result)		// Был прецедент, когда в Фаимлию записали $Char(10) - операциока не смогла открыть файл с таким именем
	Set result=$Translate(result,"*\/","___")
	Quit result
]]></Implementation>
</Method>

<Method name="LabOrderResultFileName">
<Description>
Получение имени файла результата для эпизода
Параметры:
pEpis - ID эпизода
pTestSets - буфер с ID наборов тестов (если пусто,то все наборы эпизода)
pLanguage - язык отчета
pExtension - расширение файла
Возвращаемое значение:
Имя файла результата для эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLabOrder:%String,pLanguage:%String,pExtension:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=pLabOrder_"."_pExtension
	Kill ^||ZenBion.Episodes
	Do ##class(TCLEx.Function.LabOrder).CreateOrderEpisodesGlb(pLabOrder,$Name(^||ZenBion.Episodes))
	Set episobj=##class(User.EPVisitNumber).%OpenId($Order(^||ZenBion.Episodes("")))
	If $IsObject(episobj) {
		Set result=episobj.EPVISSurname_"("_pLabOrder_"-"
		If ##class(TCLEx.Function.LabOrder).IsComplete(pLabOrder,$Name(^||ZenBion.Episodes)) {
		Set result=result_"Окончательный"
		} Else {
			Set result=result_"Промежуточный"
		}		
		Set result=result_")."_pExtension
	}
	Set result=$$RemomeNotPrintableCharacters^KSUTIL1(result)		// Был прецедент, когда в Фаимлию записали $Char(10) - операциока не смогла открыть файл с таким именем
	Set result=$Translate(result,"*\/","___")
	Quit result
]]></Implementation>
</Method>

<Method name="CreateValuesBuf">
<Description>
Загрузить значения полей, необходимых для печати результата
pEpis - эпизод
pTestSets - буфер наборов тестов 
pDepCode - отдел исследований
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pTestSets:%String,pDepCode:%String,pLanguage:%String,pRepParamGlb:%String]]></FormalSpec>
<Implementation><![CDATA[
	
	Kill @pRepParamGlb
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If '$IsObject(episobj) Quit
	//
	Set @pRepParamGlb@("CardNumber")=$$RemomeNotPrintableCharacters^KSUTIL1($Piece(episobj.EPVISHospitalEpisodeURNumber,",",2))
	Set @pRepParamGlb@("FullName")=$$RemomeNotPrintableCharacters^KSUTIL1($$FullName^KSPCLUtils(episobj.EPVISSurname,episobj.EPVISGivenName,episobj.EPVISName1,40))
	Set @pRepParamGlb@("DOB")=$$RemomeNotPrintableCharacters^KSUTIL1($$DisplayDate^KSPCLUtils(episobj.EPVISDateOfBirth))
	Set @pRepParamGlb@("Address1")=$$RemomeNotPrintableCharacters^KSUTIL1($Extract(episobj.EPVISPatientAddress1,1,45))
	Set @pRepParamGlb@("Address2")=$$RemomeNotPrintableCharacters^KSUTIL1($Extract(episobj.EPVISPatientAddress2,1,45))
	
	Set @pRepParamGlb@("InsCompany")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISExtra9)
	Set @pRepParamGlb@("InsSerial")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISExtra10)
	Set @pRepParamGlb@("InsNumber")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISExtra11)
	
	Set @pRepParamGlb@("HospitalDepartment")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISExtra8)
	Set time=episobj.EPVISTimeOfCollection
	If time=" " Set time=""
	If time'="" Set time=time*60
	Set @pRepParamGlb@("DateTimeOfCollection")=$$RemomeNotPrintableCharacters^KSUTIL1($$DisplayDate^KSPCLUtils(episobj.EPVISDateOfCollection)_" "_$$DisplayTime^KSPCLUtils(time,2))
	Set @pRepParamGlb@("DateOfReceiving")=$$RemomeNotPrintableCharacters^KSUTIL1($$DisplayDate^KSPCLUtils(episobj.EPVISDateOfReceiving))
	
	Set @pRepParamGlb@("PregnancyWeeks")=$$RemomeNotPrintableCharacters^KSUTIL1(episobj.EPVISPregnantNumberOfWeeks)
	;
	Set sexobj=episobj.EPVISSpeciesDR
	If $IsObject(sexobj) {
		Set @pRepParamGlb@("SexCode")=$$RemomeNotPrintableCharacters^KSUTIL1(sexobj.CTSPCode)
		Set @pRepParamGlb@("Sex")=$$RemomeNotPrintableCharacters^KSUTIL1(sexobj.CTSPDesc)
	}	
	Set condobj=episobj.EPVISClinicalConditionsDR
	If $IsObject(condobj) Set @pRepParamGlb@("CyclePhase")=$$RemomeNotPrintableCharacters^KSUTIL1(condobj.CTCLCDescription)
	;
	Set hospobj=episobj.EPVISHospitalCodeDR
	If $IsObject(hospobj) {
		Set @pRepParamGlb@("НospitalCode")=$$RemomeNotPrintableCharacters^KSUTIL1(hospobj.CTHOSCode)
		Set @pRepParamGlb@("Нospital")=$$RemomeNotPrintableCharacters^KSUTIL1("("_hospobj.CTHOSCode_") "_hospobj.CTHOSName)
	}	
	;
	Set doctobj=episobj.EPVISDoctorCodeDR
	If $IsObject(doctobj) Set @pRepParamGlb@("Doctor")=$$RemomeNotPrintableCharacters^KSUTIL1($$FullName^KSPCLUtils(doctobj.CTDRSurname,doctobj.CTDRGivenName))
 	If $Get(pDepCode)="" Quit
	Set summarytestset=##class(TCLEx.Function.SuperSet).SummaryTestSet(pDepCode)
	Set (authtestset,canceltestset)=""
	Set key="",testobj="",canceledobj=""
	For  {
		Set testobj=episobj.ChildEPVisitTestSet.GetNext(.key)
		If key="" Quit
		If '$IsObject(testobj) Continue
		Set testsetid=testobj.%Id()
		If '..IsTestSet4Department(testsetid,.pTestSets,pDepCode,summarytestset) Continue
		If '##class(User.CTSuperSet).%ExistsId(pDepCode) {
			Set sectionstr=..TestSetSection(testsetid)
			Set sectioncode=$Piece(sectionstr,$Char(1),1)
			Set sectionname=$Piece(sectionstr,$Char(1),2)
			If (sectioncode'="")&&('$Data(@pRepParamGlb@("Sections",sectioncode))) {
				Set @pRepParamGlb@("Sections")=$Get(@pRepParamGlb@("Sections"))+1
				Set @pRepParamGlb@("Sections",sectioncode)=sectionname
			}	
		}	
		If (##class(TCLEx.Function.TestSet).IsAuthorised(testobj))&&(authtestset="") {
			Set authtestset=testsetid
		}	
		If (##class(TCLEx.Function.TestSet).IsCanceled(testobj))&&(canceltestset="") {
			Set canceltestset=testsetid
		}	
	}
	Set testsetid=""
	If (authtestset'="") {						// Либо берем подходящий авторизованный набор тестов
		Set testsetid=authtestset
	} Else {
		If (canceltestset'="") {				// (если нет авторизованных, то берем отмененный)
			Set testsetid=canceltestset
		}	
	}		
	If testsetid="" Quit
	Do ..SetTestSetVals(testsetid,pLanguage,pRepParamGlb)
]]></Implementation>
</Method>

<Method name="SetTestSetVals">
<Description>
Загрузить значения полей для печати, которые берутся из набора тестов 
pTestSetId - Id набора тестов
pTestSets - буфер наборов тестов 
pLanguage - язык результата  
pRepParamGlb - глобал с данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String,pLanguage:%String,pRepParamGlb:%String</FormalSpec>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit
	
	Set @pRepParamGlb@("TS_ID")=testsetobj.%Id()
	Set @pRepParamGlb@("TS_DateOfAuthorisation")=$$DisplayDate^KSPCLUtils(testsetobj.VISTSDateOfAuthorisation)
	;
	Set cttestsetobj=testsetobj.VISTSTestSetDR
	If $IsObject(cttestsetobj) { 
		Set depobj=cttestsetobj.CTTSDepartmentDR
		If $IsObject(depobj) {
			Set @pRepParamGlb@("TS_DepartmentName")=depobj.CTDEPName
			Set @pRepParamGlb@("TS_DepartmentCode")=depobj.%Id()
		}
	}	
	;
	Set userobj=testsetobj.VISTSUserAuthorisedDR
	If $IsObject(userobj) { 
		Set @pRepParamGlb@("TS_AuthorisedDoctorId")=userobj.%Id()
		Set @pRepParamGlb@("TS_AuthorisedDoctor")=userobj.SSUSRName
	}	
	;
	Set specimen=""
	Set specobj=testsetobj.VISTSSpecimenTypeDR
	If $IsObject(specobj) Set specimen=specobj.CTSPEDesc
	If specimen="" Set specimen=$$TestSpecimen^KSReportSQL($Piece(testsetobj.%Id(),"||",2))
	Set @pRepParamGlb@("TS_Specimen")=specimen
	;
]]></Implementation>
</Method>

<Method name="IsTestSet4Department">
<Description>
Подходит ли объект набора тестов эпизода pTestSetObj для отдела pDepCode
для супер-набора также проверяется, что код набора тестов является заключением (pSummaryTestSet) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTestSetId:%String,&pTestSets:%String,pDepCode:%String,pSummaryTestSetId:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If '$IsObject(testsetobj) Quit 0
	Set pSummaryTestSetId=$Get(pSummaryTestSetId)
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		If $IsObject(testsetobj.VISTSSuperSetDR)&&(testsetobj.VISTSSuperSetDR.%Id()=pDepCode)&&($IsObject(testsetobj.VISTSTestSetDR)) {
			If testsetobj.VISTSTestSetDR.%Id()=pSummaryTestSetId Quit 1
		}	
	} Else {
		If ('$Data(pTestSets)||($Data(pTestSets(pTestSetId))))  {
			If $IsObject(testsetobj.VISTSTestSetDR) {
				Set testsetcode=testsetobj.VISTSTestSetDR.%Id()
				If $Extract(testsetcode,1,1)=pDepCode {
					Quit 1
				}
			}		
		}	
	}
	Quit 0
]]></Implementation>
</Method>

<Method name="TestSetSection">
<Description>
Код и название секции для набора тестов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSetId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set testsetobj=##class(User.EPVisitTestSet).%OpenId(pTestSetId)
	If ('$IsObject(testsetobj))||('$IsObject(testsetobj.VISTSTestSetDR)) Quit ""
	Set sectionobj=testsetobj.VISTSTestSetDR.CTTSSectionDR
	If '$IsObject(sectionobj) Quit ""
	Set code=sectionobj.CTDSCode
	If code="" Quit ""	
	Set name=sectionobj.CTDSDescription
	Quit code_$Char(1)_name
]]></Implementation>
</Method>

<Method name="%OnBeforeReport">
<Description>
This callback is invoked after this report is instantiated
and before it is run.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..OrderNumber'="" {
		Set glb=..DataGlobal
		Set ..Episode=$Order(@glb@(""))
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RowCount">
<Description>
Число строк для отдела pDepCode</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDepCode:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If (pDepCode="H")||(pDepCode="D") Quit 47
	Quit 45
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method outputs the contents of the PDF report
/// RenderServer is set to the port of the hot JVM server
/// There is also a queuing hot JVM server which queues files for PDF rendering later
/// This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  
Method %DisplayPDF1(DisplayLog As %Boolean = 0, RenderServer As %String = "", async As %Boolean = 0, ByRef xmlfile As %String, ByRef xslfile As %String, ByRef pdffile As %String, ByRef lockfile As %String) As %Status
{
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		Set tSC = ..%MakeToXSLFOFile(.xslfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
		if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile))

		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			if (..#HANG'=0) hang ..#HANG
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile)
	} While (0)

	Quit tSC
}
*/
]]></Content>
</UDLText>

<Method name="GenerateReportXML">
<Description>
Генерация XML данных отчета
Нужно, чтобы что-нибудб было, чтобы сформировался PDF-файл</Description>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	If ..OrderNumber'="" {
		Do stream.WriteLine("<OrderNumber>"_$ZConvert(..OrderNumber,"o","XML")_"</OrderNumber>")
	} Else {
		Do stream.WriteLine("<Episode>"_$ZConvert(..Episode,"o","XML")_"</Episode>")
	}		
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultHeader">
<FormalSpec>pDepCode:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()

	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='62mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='30mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='98mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block><fo:inline>"_$ZConvert("Ист.бол./Амб.карта ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("CardNumber")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("ЛПУ: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("Нospital")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block><fo:inline>"_$ZConvert("Ф.И.О.: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("FullName")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Отделение: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("HospitalDepartment")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Дата рождения: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("DOB")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Пол: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("Sex")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Ф.И.О. врача: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("Doctor")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Set str="&#160;"
	If $Get(@pRepParamGlb@("SexCode"))="Ж" {
		If $Get(@pRepParamGlb@("CyclePhase"))'=""  {
			Set str="<fo:inline>"
			Set str=str_$ZConvert("Фаза цикла:","o","XML")
			Set str=str_"</fo:inline><fo:inline  font-weight='bold'>"
			Set str=str_$ZConvert($Get(@pRepParamGlb@("CyclePhase")),"o","XML")
			Set str=str_"</fo:inline>"
		} ElseIf $Get(@pRepParamGlb@("PregnancyWeeks"))'="" {	
			Set str="<fo:inline>"
			Set str=str_$ZConvert("Срок беременности:","o","XML")
			Set str=str_"</fo:inline><fo:inline  font-weight='bold'>"
			Set str=str_$ZConvert($Get(@pRepParamGlb@("PregnancyWeeks")),"o","XML")
			Set str=str_"</fo:inline>"
			Set str=str_"<fo:inline>"_$ZConvert(" нед.","o","XML")_"</fo:inline>"
		}	
	}
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block>"_str_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Дата/время взятия материала: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("DateTimeOfCollection")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	Set str="<fo:inline>"_$ZConvert("Адрес: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("Address1"))_" "_$Get(@pRepParamGlb@("Address2")),"o","XML")_"</fo:inline>"
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-rows-spanned='2' number-columns-spanned='2'><fo:block>"_str_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Дата доставки материала: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("DateOfReceiving")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Номер заказа: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Extract(..Episode,1,10),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")

	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block><fo:inline>"_$ZConvert("Страховая компания: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("InsCompany")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Set str="&#160;"
	
	If $Length(..Episode)=12 {
		Set str="<fo:inline>"_$ZConvert("Номер образца: ","o","XML")_"</fo:inline>"
		Set str=str_"<fo:inline  font-weight='bold'>"_$ZConvert(..Episode,"o","XML")_"</fo:inline>"
	}
	
	Do stream.WriteLine("			<fo:table-cell ><fo:block>"_str_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	
	Set str="<fo:inline>"_$ZConvert("Стр. полис: Серия ","o","XML")_"</fo:inline>"
	Set str=str_"<fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("InsSerial")),"o","XML")_"</fo:inline>"
	Set str=str_"<fo:inline>"_$ZConvert(" Номер ","o","XML")_"</fo:inline>"
	Set str=str_"<fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("InsNumber")),"o","XML")_"</fo:inline>"
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell number-columns-spanned='2'><fo:block>"_str_"</fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block>&#160;</fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")


	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")
 
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='block.NORMAL' >")
	Do stream.WriteLine("<xsl:attribute name='font-size'>12pt</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='font-weight'>bold</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='space-before.optimum'>5mm</xsl:attribute>")
	Do stream.WriteLine("<xsl:attribute name='text-align'>center</xsl:attribute>")
	Set caption=..ResultHeaderCaption(pDepCode,pRepParamGlb)
	Do stream.WriteLine($ZConvert(caption,"O","XML"))
	Do stream.WriteLine("</fo:block>")
	Do stream.WriteLine("<fo:block><fo:leader leader-pattern='space' rule-thickness='1px'/></fo:block>")
	
	Quit stream
]]></Implementation>
</Method>

<Method name="ResultHeaderCaption">
<Description>
Надпись над таблицей результата
Это либо название супер-набора,
Либо название отдела
Либо название секции (если в отдел результата pDepCode попадают наборы тестов только 1 секции)</Description>
<FormalSpec>pDepCode:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ##class(User.CTSuperSet).%ExistsId(pDepCode) {
		Set supersetobj=##class(User.CTSuperSet).%OpenId(pDepCode)
		If '$IsObject(supersetobj) Quit ""
		Quit supersetobj.CTSSDesc
	}
	Set sectioncnt=$Get(@pRepParamGlb@("Sections"))
	If sectioncnt=1 {
		Set sectioncode=$Order(@pRepParamGlb@("Sections",""))
		If sectioncode'="" Quit $Get(@pRepParamGlb@("Sections",sectioncode))
	}	
	If pDepCode="H" Quit "Микробиологический отчет"
	Set depobj=##class(User.CTDepartment).%OpenId(pDepCode)
	If $IsObject(depobj) Quit depobj.CTDEPName
	Quit ""
]]></Implementation>
</Method>

<Method name="ResultTable">
<FormalSpec>pDepCode:%String,pPageNumber:%Integer,pTotalPages:%Integer,pPageGlb:%String,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("    <fo:table xsl:use-attribute-sets='table1' background-color='#EFEFEF' border-width='1pt' border-style='solid' table-layout='fixed' width='100%' border-collapse='separate'>")
	For i=1:1:90 {
	 Do stream.WriteLine("      <fo:table-column column-width='2.11mm'/>")
	}
	Do stream.WriteLine("      <fo:table-body>")
	
	If (pDepCode'="D")&&(pDepCode'="H")&&(pDepCode'="G") {
		Do stream.WriteLine("        <fo:table-row line-height='5mm'>")		// Для RUS - заголовок в 2 строках по 5 мм
		Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='37' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Наименование теста</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='10' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>&#160;</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='12' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Результат</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='12' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Единицы измерения</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='3' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>&#160;</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='16' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Референсные значения</fo:block></fo:table-cell>")
		Do stream.WriteLine("        </fo:table-row >")
	}
	If (pDepCode="G") {
		Do stream.WriteLine("        <fo:table-row line-height='10mm'>")		// Для RUS - заголовок в 2 строках по 5 мм
		Do stream.WriteLine("		<xsl:attribute name='font-weight'>bold</xsl:attribute>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='37' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Наименование теста</fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='53' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'>Результат</fo:block></fo:table-cell>")
		Do stream.WriteLine("        </fo:table-row >")
	}	
    if (pDepCode="D")||(pDepCode="H") {
		Do stream.WriteLine("        <fo:table-row line-height='0.1mm'>")		// Для RUS - заголовок в 2 строках по 5 мм
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='37' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'> </fo:block></fo:table-cell>")
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='53' border-bottom-width='1pt' border-bottom-style='solid'><fo:block text-align='center'> </fo:block></fo:table-cell>")
		Do stream.WriteLine("        </fo:table-row >")
	}	

	Set maxrowcount=..RowCount(pDepCode)
	For i=1:1:maxrowcount {
	Set str="        <fo:table-row line-height='3.45mm'>"
	If i#2 {
	 	Set str="        <fo:table-row line-height='3.45mm' background-color='#FFFFFF'>"
	}	
	Do stream.WriteLine(str) 
	If '$Data(@pPageGlb@(i)) {
		Do stream.WriteLine("          <fo:table-cell number-columns-spanned='90'><fo:block>&#160;</fo:block></fo:table-cell>")
	} Else {
		Set col=""
		For  {
			Set col=$Order(@pPageGlb@(i,col))
			If col="" Quit
			Set cssclass=$Get(@pPageGlb@(i,col,"CSSClass"))
			Set colspan=$Get(@pPageGlb@(i,col,"ColSpan"))
			Set value=$Get(@pPageGlb@(i,col,"Value"))
			If value="" {
				Set value=$Char(160)
			}	
			Set bold=$Get(@pPageGlb@(i,col,"Bold"))
			Set italic=$Get(@pPageGlb@(i,col,"Italic"))
			Set underline=$Get(@pPageGlb@(i,col,"Underline"))
			Set str="<fo:table-cell "
			If cssclass'="" {
				Set str=str_"xsl:use-attribute-sets='"_cssclass_"' "
			}
			If colspan>1 {
				Set str=str_"number-columns-spanned='"_colspan_"' "
			}
			If bold {
				Set str=str_" font-weight='bold' "
			}	
			If italic {
				Set str=str_" font-style='italic' "
			}	
			If underline {
				Set str=str_" text-decoration='underline' "
			}	
			
			Set str=str_">"
			Set str=str_"<fo:block>"
			Set str=str_$ZConvert(value,"O","XML")
			Set str=str_"</fo:block></fo:table-cell>"
			Do stream.WriteLine(str)	
		}	
	}	
	Do stream.WriteLine("        </fo:table-row>")
	}	 
	Do stream.WriteLine("      </fo:table-body>")
	Do stream.WriteLine("    </fo:table>")
	Quit stream
]]></Implementation>
</Method>

<Method name="Footer">
<FormalSpec>pPageNumber:%Integer,pTotalPages:%Integer,pRepParamGlb:%String</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	//!!!
	If ..ExtraParams'="" {
		Set ..IsSignatureNeeded=$ListGet(..ExtraParams,2)
		Set ..IsStampNeeded=$ListGet(..ExtraParams,3)
	}	
	//!!!
	
	Set stream=##class(%GlobalCharacterStream).%New()
	Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='0mm' top='235mm' width='190mm' height='50mm' overflow='hidden'>")
	Do stream.WriteLine("<fo:table xsl:use-attribute-sets='NORMAL' table-layout='fixed' width='100%' border-collapse='separate'>")
	Do stream.WriteLine("	<fo:table-column column-width='135mm'/>")
	Do stream.WriteLine("	<fo:table-column column-width='55mm'/>")
	Do stream.WriteLine("	<fo:table-body>")
	Do stream.WriteLine("		<fo:table-row>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Выпускающий врач: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("TS_AuthorisedDoctor")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("			<fo:table-cell ><fo:block><fo:inline>"_$ZConvert("Дата выдачи: ","o","XML")_"</fo:inline><fo:inline  font-weight='bold'>"_$ZConvert($Get(@pRepParamGlb@("TS_DateOfAuthorisation")),"o","XML")_"</fo:inline></fo:block></fo:table-cell>")
	Do stream.WriteLine("		</fo:table-row>")
	Do stream.WriteLine("	</fo:table-body>")
	Do stream.WriteLine("</fo:table>")

	Do stream.WriteLine("</fo:block-container>")

	Set doctor=$Get(@pRepParamGlb@("TS_AuthorisedDoctorId"))
	Set userobj=##class(User.SSUser).%OpenId(doctor)
	set hospitalID=$get(@pRepParamGlb@("НospitalCode"))

	if (..IsSignatureNeeded=2)&&(..IsStampNeeded=2) {
		if (doctor'="")&&($data(^BionImg("DoctorSignatures",doctor))) {
			set ..IsSignatureNeeded=1
		}
	    If (hospitalID'="")&&($Data(^BionImg("HospitalWithStamp",hospitalID)))&&(doctor'="")&&($data(^BionImg("DoctorSignaturesStamp",doctor))) {
		    set ..IsSignatureNeeded=1
		    set ..IsStampNeeded=1
	    }
	    if ..IsSignatureNeeded=2 set ..IsSignatureNeeded=0
	    if ..IsStampNeeded=2 set ..IsStampNeeded=0
	}
	
	Set needstamp=..NeedStamp(..Episode)
	
	If ..IsStampNeeded'="" {   // ??? 
		Set needstamp=..IsStampNeeded
	}	
	Set stampfilename=""
	//s ^test("par")=..IsStampNeeded_"*"_..IsSignatureNeeded_"*"_needstamp_"*"_doctor_"*"_userobj.SSUSREMailName
	If $IsObject(userobj) {
		If needstamp {
			If ..IsSignatureNeeded'=0 {
				Set stampfilename=..ImagePath()_"stamp_"_userobj.SSUSREMailName_".png"		// нужна и подпись и печать
			} Else {
				Set stampfilename=..ImagePath()_"stamp.png"								// нужна только печать
			}	
		} Else {
			If ..IsSignatureNeeded'=0 {
				Set stampfilename=..ImagePath()_"sign_"_userobj.SSUSREMailName_".png"
			}
		}
		If '##class(%File).Exists(stampfilename) {
			Set stampfilename=""
		}		
	}
	//!!!
	
	If (stampfilename="")&&(needstamp) {
		Set stampfilename=..ImagePath()_"stamp.png"
	}
	If stampfilename'="" {
		Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='75mm' top='218mm' width='55mm' height='35mm' overflow='hidden'>")
		Do stream.WriteLine("<fo:block>")
		Do stream.WriteLine("	<fo:external-graphic  content-width='55mm' content-height='35mm'   >")
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(stampfilename,"o","XML")_"</xsl:attribute>")
		Do stream.WriteLine("	</fo:external-graphic>")
		Do stream.WriteLine("</fo:block>")
		Do stream.WriteLine("</fo:block-container>")
	}

	Do stream.WriteLine("<fo:block-container z-index='1' position='absolute' left='135mm' top='240mm' width='30mm' height='10mm' overflow='hidden'>")
	Set str="Стр. "_pPageNumber_" из "_pTotalPages
	Do stream.WriteLine("<fo:block xsl:use-attribute-sets='NORMAL'>"_$ZConvert(str,"o","XML")_"</fo:block>")
	Do stream.WriteLine("</fo:block-container>")
	If pPageNumber<pTotalPages {
		Do stream.WriteLine("<fo:block break-after='page'/>")
	}

	Quit stream
]]></Implementation>
</Method>

<Method name="PageHeader">
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	If (..ExtraParams'="") {
		Set ..IsLogoNeeded=$ListGet(..ExtraParams,1)
		If ..IsLogoNeeded=0 Quit ""
	} else {
		Set ..IsLogoNeeded=1
	}
	
	Set stream=##class(%GlobalCharacterStream).%New()
	Set logofilename=..LogoFileName(..Episode,..IsLogoNeeded)
	//Do ..IsCustomLogo(..Episode,.logofilename)
	if logofilename'="" {
	    Do stream.WriteLine("<fo:block>")
	    Do stream.WriteLine("	<fo:external-graphic  content-height='30mm'  content-width='190mm' >")
	
		Do stream.WriteLine("		<xsl:attribute name='src'>"_$ZConvert(logofilename,"o","XML")_"</xsl:attribute>")
	    Do stream.WriteLine("	</fo:external-graphic>")
	    Do stream.WriteLine("</fo:block>")
	}
	Quit stream
]]></Implementation>
</Method>

<Method name="LogoFileName">
<Description>
Имя файла для логотипа отчета
Параметры:
pEpis - ID эпизода
Взвращаемое значение:
Путь к логотипу компании в заголовке отчета
Возможные врианты
Пользовательский логотип (имя файла logo_NNNN.png, где NNNN - код ЛПУ эпизода) При этом не печатается печать в Footer-е
Пользовательский логотип (имя файла logo4stamp_NNNN.png, где NNNN - код ЛПУ эпизода) При этом печатается печать в Footer-е
logo_bion.png - логотип Биона. При этом печатается печать в Footer-е</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String,pIsLogoNeeded:%String=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if pIsLogoNeeded=3 {
		set result=..ImagePath()_"logo_empty.png"
	} else {
		Set result=..LogoFileNameLPU(pEpis)
	    If result="" {
		   if pIsLogoNeeded=2 {
			  set result=..ImagePath()_"logo_empty.png"
		   } else {
			   Set result=..ImagePath()_"logo_bion.png"
		   }
	    }
	}
	Quit result
]]></Implementation>
</Method>

<Method name="LogoFileNameLPU">
<Description>
Имя файла для логотипа отчета
Параметры:
pEpis - ID эпизода
Взвращаемое значение:
Путь к логотипу компании в заголовке отчета
Возможные врианты
Пользовательский логотип (имя файла logo_NNNN.png, где NNNN - код ЛПУ эпизода) При этом не печатается печать в Footer-е
Пользовательский логотип (имя файла logo4stamp_NNNN.png, где NNNN - код ЛПУ эпизода) При этом печатается печать в Footer-е
logo_bion.png - логотип Биона. При этом печатается печать в Footer-е</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result=""
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If ($IsObject(episobj))&&($IsObject(episobj.EPVISHospitalCodeDR)) {
		Set hospid=episobj.EPVISHospitalCodeDR.%Id()
		Set result=..ImagePath()_"logo_"_hospid_".png"
		If '##class(%File).Exists(result) {
			Set result=..ImagePath()_"logo4stamp_"_hospid_".png"
			If '##class(%File).Exists(result) {
				Set result=""
			}	
		} 	
	}
	Quit result
]]></Implementation>
</Method>

<Method name="NeedStamp">
<Description>
logo_bion.png - логотип Биона. При этом печатается печать в Footer-е</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpis:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If ($IsObject(episobj))&&($IsObject(episobj.EPVISHospitalCodeDR)) {
		Set hospid=episobj.EPVISHospitalCodeDR.%Id()
		Set result=..ImagePath()_"logo_"_hospid_".png" 
		If ##class(%File).Exists(result) {
			Quit 0
		} 	
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="IsCustomLogo">
<Description>
Нужен ли для эпизода пользовательский логотип отчета
Параметры:
pEpis - ID эпизода
pLogoFileName - возвращаеый по ссылке путь к логотипу компании в заголовке отчета
Взвращаемое значение:
1 - есть пользовательский логотип (имя файла logo_NNNN.png, где NNNN - код ЛПУ эпизода)
0 - нет пользовательского логотипа (по ссылке возвращаем логотип Биона logo_bion.png)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpis:%String,&pLogoFileName:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set result=0,pLogoFileName=""
	Set episobj=##class(User.EPVisitNumber).%OpenId(pEpis)
	If ($IsObject(episobj))&&($IsObject(episobj.EPVISHospitalCodeDR)) {
		Set pLogoFileName=..ImagePath()_"logo_"_episobj.EPVISHospitalCodeDR.%Id()_".png"
		If '##class(%File).Exists(pLogoFileName) {
			Set pLogoFileName=""
		} Else {
			Set result=1
		}	
	}
	If pLogoFileName="" {
		Set pLogoFileName=..ImagePath()_"logo_bion.png"
	}
	Quit result
]]></Implementation>
</Method>

<Method name="Body">
<Description>
Отрисовка содержания отчета</Description>
<FormalSpec>mode</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	Set stream=##class(%GlobalCharacterStream).%New()
	Set glb=..DataGlobal
	If ..OrderNumber="" {
		Set dep="",pagenumber=0
		For  {
			Set dep=$Order(@glb@(dep))
			If dep="" Quit
			Kill ^||ZenEMC.Vals
			Do ..CreateValuesBuf(..Episode,,dep,..Language,$Name(^||ZenEMC.Vals))
			Set headerstream=..ResultHeader(dep,$Name(^||ZenEMC.Vals))
			Set page=""
			For  {
				Set page=$Order(@glb@(dep,page))
				If page="" Quit
				Set pagenumber=pagenumber+1
				Do stream.CopyFrom(headerstream)
				Set tablestream=..ResultTable(dep,pagenumber,..TotalPages,$Name(@glb@(dep,page)),$Name(^||ZenEMC.Vals))
				Do stream.CopyFrom(tablestream)
				Set footerstream=..Footer(pagenumber,..TotalPages,$Name(^||ZenEMC.Vals))
				Do stream.CopyFrom(footerstream)
			}	
		}
	} Else {
		Set pagenumber=0
		Set epis=""
		For  {
			Set epis=$Order(@glb@(epis))
			If epis="" Quit
			Set ..Episode=epis
			Set dep=""
			For  {
				Set dep=$Order(@glb@(epis,dep))
				If dep="" Quit
				Kill ^||ZenEMC.Vals
				Do ..CreateValuesBuf(..Episode,,dep,..Language,$Name(^||ZenEMC.Vals))
				Set headerstream=..ResultHeader(dep,$Name(^||ZenEMC.Vals))
				Set page=""
				For  {
					Set page=$Order(@glb@(epis,dep,page))
					If page="" Quit
					Set pagenumber=pagenumber+1
					Do stream.CopyFrom(headerstream)
					Set tablestream=..ResultTable(dep,pagenumber,..TotalPages,$Name(@glb@(epis,dep,page)),$Name(^||ZenEMC.Vals))
					Do stream.CopyFrom(tablestream)
					Set footerstream=..Footer(pagenumber,..TotalPages,$Name(^||ZenEMC.Vals))
					Do stream.CopyFrom(footerstream)
				}	
			}
		}
	}		
	Quit stream
]]></Implementation>
</Method>

<Method name="ImagePath">
<Description>
Путь к каталогу с графическими файлами</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ##class(TCLEx.Report.Function).ImagePath()
	//Quit "C:\InterSystems\Ensemble\CSP\bion\Report"
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method outputs the contents of the PDF report
/// RenderServer is set to the port of the hot JVM server
/// There is also a queuing hot JVM server which queues files for PDF rendering later
/// This is queuing mechanism is never called visually but only by AsynchGenerateReport which always generates PDFs  
Method %DisplayPDF1(DisplayLog As %Boolean = 0, RenderServer As %String = "", async As %Boolean = 0, ByRef xmlfile As %String, ByRef xslfile As %String, ByRef pdffile As %String, ByRef lockfile As %String, fromGenerateReport As %Boolean, outputfilename As %String) As %Status [ Internal ]
{
	Set tSC=$$$OK
	Do {
		#; Generate data file and XSLT stylesheet which transforms data to HTML
		Set tSC = ..%MakeXMLDataFile(.xmlfile,0) Quit:$$$ISERR(tSC)
		//Set ..xmlfile = xmlfile
		Set tSC = ..%MakeToXSLFOFile(.xslfile,xmlfile) Quit:$$$ISERR(tSC)

		#; Generate filenames for log/pdf
		Set tmpdir=..GetRootDir()
		Set tRootName=..GetSafeRootName()
		if tRootName="" Set logfile = tmpdir_##class(%FileBinaryStream).NewFileName("txt",..%GetTempDir())		
		if tRootName'="" Set logfile = ..MakeFileName(..GetRootDir(),tRootName,".txt")
		; delete logfile so user does not see "ghost" of old logfile when using $REPORTNAME
		i $g(logfile)'="" Do ##class(%File).Delete(logfile)
		if (fromGenerateReport=0 || (DisplayLog=1)) {
			if tRootName="" Set pdffile = tmpdir_##class(%FileBinaryStream).NewFileName("pdf",..%GetTempDir())
			if tRootName'="" Set pdffile = ..MakeFileName(..GetRootDir(),tRootName,".pdf")
		} else {
			Set pdffile = outputfilename
		}
		if (async'=0) {
			if tRootName="" Set lockfile = tmpdir_##class(%FileBinaryStream).NewFileName("lck",..%GetTempDir())
			if tRootName'="" Set lockfile = ..MakeFileName(..GetRootDir(),tRootName,".lck")
		}


		#; Command line callout to FOP or XEP
		s ^test("pdf")=xmlfile_"||"_xslfile_"||"_pdffile_"||"_logfile
		Set tSC = ..%PerformTransform(xmlfile, xslfile, pdffile, logfile, 1, RenderServer, async, $g(lockfile), DisplayLog)

#if 0 ; 11-04-11
		If $$$ISOK(tSC),'async {
			If DisplayLog {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(logfile)
			}
			Else {
				Set oid = ##class(%CSP.StreamServer).GetOidForFile(pdffile)
			}
			Set stream=##class(%Stream.Object).%Open(oid)
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
#else		
		If $$$ISOK(tSC),'async,('fromGenerateReport||(DisplayLog=1)) {
			Set stream=##class(%FileBinaryStream).%New()
			If DisplayLog {
				Set stream.Filename=logfile
			}
			Else {
				Set stream.Filename=pdffile
			}
			$$$SETIO("RAW")
			Do stream.OutputToDevice()
		}
#endif		
		
		; if in asynch mode generation of PDF is done by queuing hot JVM server which has responsibility for
		; deleting xmlfile and xslfile.  The queing hot JVM server needs to be connected to a print management system
		; that has the responsibilty for deleting the pdf file when renered.  No logfile is created when PDF rendering
		; is done by hot JVM server.
		//if ('async) do ..DeleteTempFiles(.xmlfile,.xslfile,.pdffile,.logfile,.xmlfiles,.pdfiles,0,fromGenerateReport)
	} While (0)

	Quit tSC
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
