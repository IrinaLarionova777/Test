<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.DeepSee.Utils">
<Super>%RegisteredObject</Super>
<TimeCreated>62880,70341.112081</TimeCreated>

<Method name="UpdateCubes2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set cubeepis="lab.EPVisitNumber"
		set cubeepisBI=$piece(cubeepis,".",2) //"TCBI.Cubes.EPVisitNumber"
		
		set cubetestset="lab.EPVisitTestSet"
		set cubetestsetBI=$piece(cubetestset,".",2) //"TCBI.Cubes.EPVisitTestSet"
		
		set cubetestsetdata="lab.EPVisitTestSetData"
		set cubetestsetdataBI=$piece(cubetestsetdata,".",2) //"TCBI.Cubes.EPVisitTestSetData"
		
		set cubetestsetqueue="lab.EPVisitTestSetQueue"
		set cubetestsetqueueBI=$piece(cubetestsetqueue,".",2) //"TCBI.Cubes.EPVisitTestSetQueue"
		
		// создаем буфер эпизодов, по которым будем пересчитывать все кубы
		//(TCBI.Cubes.EPVisitNumber,TCBI.Cubes.EPVisitTestSet,TCBI.Cubes.EPVisitTestSetQueue,TCBI.Cubes.EPVisitTestSetData)
		kill ^||bufRecountEpis
		// идем по ^SpeedI.DeltaP(cubeepis)
		set epis=""
        for {
	        set epis=$order(^SpeedI.DeltaP(cubeepis,epis)) if epis="" quit
	        set ^||bufRecountEpis(epis)=""
        }
        // идем по ^SpeedI.DeltaP(cubetestset)
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(cubetestset,id)) if id="" quit
	        set epis=$piece(id,"||",1) if epis="" continue
	        set ^||bufRecountEpis(epis)=""
        }
        // идем по ^SpeedI.DeltaP(cubetestsetdata)
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(cubetestsetdata,id)) if id="" quit
	        set epis=$piece(id,"||",1) if epis="" continue
	        set ^||bufRecountEpis(epis)=""
        }
        // идем по ^SpeedI.DeltaP(cubetestsetqueue)
        set id=""
        for {
	        set id=$order(^SpeedI.DeltaP(cubetestsetqueue,id)) if id="" quit
	        set epis=$piece(id,"||",1) if epis="" continue
	        set ^||bufRecountEpis(epis)=""
        }
        
        // Пересчитываем кубы
		set epis=""
        for {
	        set epis=$order(^||bufRecountEpis(epis)) if epis="" quit
	        
	        // EPVisitNumber
	        set vals=$get(^SpeedI.DeltaP(cubeepis,epis))
	        if vals="" set vals=1
	        set ok=0
	        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubeepisBI,epis)
		    }
		    if vals=0  {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cubeepisBI,epis)
		    } 
		    if ok {
			    kill ^SpeedI.DeltaP(cubeepis,epis)
		    } 
		    else  {
			    set ^log("UpdateCubes",$zd(+$h,4),cubeepis,epis)=$System.Status.GetErrorText(ok)
		    }
	        
	        if 'ok continue
	        
	        // EPVisitTestSet удаление
	        set id=epis
	        for {
		        set id=$order(^SpeedI.DeltaP(cubetestset,id),1,vals) if (id="")||($piece(id,"||",1)'=epis) quit
		        if vals'=0 continue
		        set ok=0
		        set ok=##class(%DeepSee.Utils).%DeleteFact(cubetestsetBI,id)
		        if ok {
			        kill ^SpeedI.DeltaP(cubetestset,id)
		        }
		        else  {
			        set ^log("UpdateCubes",$zd(+$h,4),cubetestset,id)=$System.Status.GetErrorText(ok)
		        }
            }
	        
	        // EPVisitTestSet 
	        set ts=""
	        for {
		        set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
		        set tscnt=""
		        for {
			        set tscnt=$order(^TEPI(epis,1,ts,tscnt)) if tscnt="" quit
			        set id=epis_"||"_ts_"||"_tscnt
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubetestsetBI,id)
			        if ok {
				        kill ^SpeedI.DeltaP(cubetestset,id) 
			        }
		            else  {
			            set ^log("UpdateCubes",$zd(+$h,4),cubetestset,id)=$System.Status.GetErrorText(ok)
		            }
		        }
	        }
	        
	        // EPVisitTestSetQueue 
	        set id=epis
	        for {
		        set id=$order(^SpeedI.DeltaP(cubetestsetqueue,id),1,vals) if (id="")||($piece(id,"||",1)'=epis) quit
		        
		        set ok=0
		        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubetestsetqueueBI,id)
		        } 
		        elseif vals=0 {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cubetestsetqueueBI,id)
			    }    
		        if ok {
			        kill ^SpeedI.DeltaP(cubetestsetqueue,id)
		        }
		        else  {
			        set ^log("UpdateCubes",$zd(+$h,4),cubetestsetqueue,id)=$System.Status.GetErrorText(ok)
		        }
            }
	        
	        // EPVisitTestSetData 
	        set id=epis
	        for {
		        set id=$order(^SpeedI.DeltaP(cubetestsetdata,id),1,vals) if (id="")||($piece(id,"||",1)'=epis) quit
		        
		        set ok=0
		        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cubetestsetdataBI,id)
		        } 
		        elseif vals=0 {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cubetestsetdataBI,id)
			    }    
		        if ok {
			        kill ^SpeedI.DeltaP(cubetestsetdata,id)
		        }
		        else  {
			        set ^log("UpdateCubes",$zd(+$h,4),cubetestsetdata,id)=$System.Status.GetErrorText(ok)
		        }
            }
		    
        }
    } catch(exception) {
	       set ok=exception.AsStatus()
	       set ^ERRORS($zn,$i(^ERRORS($zn)))=$system.Status.GetErrorText(ok)   
    }   
  quit ok
]]></Implementation>
</Method>

<Method name="UpdateCubes1">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set cube=""
        for {
	        set cube=$order(^DeepSee.Cubes("cubes",cube)) if cube="" quit
	        //set classsource=##class(%DeepSee.Utils).%Get //.%GetCubeClass(cube,.ok)
	        //if 'ok continue
	        set classsource=$get(^DeepSee.Cubes("cubes",cube,"sourceClass"))
	        if classsource="" continue
	        set classsourcenew=classsource
	        if $piece(classsource,".",1)="User" set $piece(classsourcenew,".",1)="lab"
	        if '$data(^SpeedI.DeltaP(classsourcenew)) continue
	        set id=""
	        for {
		        set id=$order(^SpeedI.DeltaP(classsourcenew,id),1,vals) if id="" quit
		        set ok=0
		        if vals=1 {
			        set ok=##class(%DeepSee.Utils).%ProcessFact(cube,id)
		        }
		        if vals=0  {
			        set ok=##class(%DeepSee.Utils).%DeleteFact(cube,id)
		        } 
		        
		        //
		        if ok kill ^SpeedI.DeltaP(classsourcenew,id)
		        else  set ^log("UpdateCubes",$zd(+$h,4),classsource,id)=$System.Status.GetErrorText(ok)
		        
	        }
        }
    } catch(exception) {
	       set ok=exceptin.AsStatus()   
    }   
  quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// для тестовых целей

]]></Content>
</UDLText>

<Method name="UpdateCubes3">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set cubeepis="lab.EPVisitNumber"
		set cubeepisBI=$piece(cubeepis,".",2) //"TCBI.Cubes.EPVisitNumber"
		
		set cubetestset="lab.EPVisitTestSet"
		set cubetestsetBI=$piece(cubetestset,".",2) //"TCBI.Cubes.EPVisitTestSet"
		
		set cubetestsetdata="lab.EPVisitTestSetData"
		set cubetestsetdataBI=$piece(cubetestsetdata,".",2) //"TCBI.Cubes.EPVisitTestSetData"
		
		set cubetestsetqueue="lab.EPVisitTestSetQueue"
		set cubetestsetqueueBI=$piece(cubetestsetqueue,".",2) //"TCBI.Cubes.EPVisitTestSetQueue"
		
		// создаем буфер эпизодов, по которым будем пересчитывать все кубы
		//(TCBI.Cubes.EPVisitNumber,TCBI.Cubes.EPVisitTestSet,TCBI.Cubes.EPVisitTestSetQueue,TCBI.Cubes.EPVisitTestSetData)
		kill ^||bufRecountEpis
		// идем по ^TEPI (последние 500 эпизодов)
		set epis="",count=0
        for {
	        set epis=$order(^TEPI(epis)) if epis=""||(count>500) quit
	        set ^||bufRecountEpis(epis)=""
	        set count=count+1
        }
        // Чистим кубы
        //set ok=##class(%DeepSee.Utils).
        $$$ThrowOnError(##class(%DeepSee.Utils).%KillCube(cubeepisBI))
        $$$ThrowOnError(##class(%DeepSee.Utils).%KillCube(cubetestsetBI))
        $$$ThrowOnError(##class(%DeepSee.Utils).%KillCube(cubetestsetdataBI))
        
        // Пересчитываем кубы
		set epis=""
        for {
	        set epis=$order(^||bufRecountEpis(epis)) if epis="" quit
	        
	        $$$ThrowOnError(##class(%DeepSee.Utils).%ProcessFact(cubeepisBI,epis))
	        
	        // EPVisitTestSet удаление
	        set ts=""
	        for {
		        set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
		        set tscnt=""
		        for {
			        set tscnt=$order(^TEPI(epis,1,ts,tscnt)) if tscnt="" quit
			        set id=epis_"||"_ts_"||"_tscnt
			        $$$ThrowOnError(##class(%DeepSee.Utils).%ProcessFact(cubetestsetBI,id))
		        }
            }
	        
	        // EPVisitTestSetData 
	        set ts=""
	        for {
		        set ts=$order(^TEPI(epis,1,ts)) if ts="" quit
		        set tscnt=""
		        for {
			        set tscnt=$order(^TEPI(epis,1,ts,tscnt)) if tscnt="" quit
			        set test=""
			        for {
				        set test=$order(^TEPI(epis,1,ts,tscnt,"DATA",test)) if test="" quit
			            set id=epis_"||"_ts_"||"_tscnt_"||"_test
			            $$$ThrowOnError(##class(%DeepSee.Utils).%ProcessFact(cubetestsetdataBI,id))
			        }
		        }
            }
	        
	        }		    
    } catch(exception) {
	       set ok=exception.AsStatus()
	       set ^ERRORS($zn,$i(^ERRORS($zn)))=$system.Status.GetErrorText(ok)   
    }   
  quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// end class

]]></Content>
</UDLText>
</Class>
</Export>
