<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="TCLEx.Data.BindUserReportDeepSee">
<Description>
Связка Группа пользователей - Отчет DeepSee - для ограничения доступа</Description>
<ProcedureBlock>0</ProcedureBlock>
<SqlTableName>BindUserReportDeepSee</SqlTableName>
<StorageStrategy>SQLStorage</StorageStrategy>
<Super>%Persistent,,%ZEN.DataModel.Adaptor</Super>
<TimeCreated>62935,64813.956249</TimeCreated>

<Index name="RowIDBasedIDKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SSUSRGroup,ReportDeepSee</Properties>
<Unique>1</Unique>
</Index>

<Property name="SSUSRGroup">
<Description>
Security Group</Description>
<Type>User.SSGroup</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<SqlFieldName>SSUSR_Group</SqlFieldName>
</Property>

<Property name="ReportDeepSee">
<Description>
Отчет DeepSee (фактически второй уровень в папке для Deepsee отчета (разделитель /))</Description>
<Type>%String</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<SqlFieldName>ReportDeepSee</SqlFieldName>
</Property>

<Query name="qReportGroupByUserGroup">
<Description>
Запрос Всех групп отчетов с пометкой, какие отчеты доступны указанной группе пользователей</Description>
<Type>%Query</Type>
<FormalSpec>pUserGroup1:%String,pCountRows1:%Integer=0</FormalSpec>
<Parameter name="ROWSPEC" value="CodeReportGroup:%String,FlagUseDisplay:%String,ReportGroupDescription:%String,FlagUse:%String"/>
</Query>

<Method name="qReportGroupByUserGroupExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pUserGroup1:%String,pCountRows1:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	Kill ^||res1
	
	Set qHandle=$lb("",pCountRows1,0)
	
	/*
	set ok=##class(%DeepSee.Utils).%GetDashboardList(.pList)
	if 'ok quit
	
	set str=""
    for {
	    set str=$order(pList(str)) if str="" quit
	    set reportGroup=$piece(str,"/",1) if reportGroup="" continue
	    set reportDesc=reportGroup
	    set flagUse=..GetFlagUseReportGroupByUserGroup(pUserGroup1,reportGroup,.err)
		if 'err set flagUse=""
		set flagUseDisplay=$select(flagUse=1:"*",flagUse=2:"**",1:" ")	
		set ^||res1(reportGroup)=$LB(reportGroup,flagUseDisplay,reportDesc,flagUse)
	}
	*/
	set pShowAll=1
	set pUser=""
	Set ok = ..%GetFolderItemList(.tItemIDs,,pShowAll,"",pUser)
	if 'ok quit
	set k=""
	for {
		Set k = $order(tItemIDs(k),1,tID) if k="" quit
		Set tItem = ##class(%DeepSee.UserLibrary.FolderItem).%OpenId(tID)
		if $extract($piece(tItem.folderName,"/",1),1)="$" {
				continue
			}
		set folderName=$piece(tItem.folderName,"/",1)
		if folderName="" {
			continue
		}
		set flagUse=..GetFlagUseReportGroupByUserGroup(pUserGroup1,folderName,.err)
		if 'err set flagUse=""
		set flagUseDisplay=$select(flagUse=1:"*",flagUse=2:"**",1:"")	
		set ^||res1(folderName)=$LB(folderName,flagUseDisplay,folderName,flagUse)

	}	
	//k ^test(1) m ^test(1)=^||res1
 } catch(exeption) {
	 set ok=exeption.AsStatus()
 }
 Quit $$$OK  //!!!!
]]></Implementation>
</Method>

<Method name="qReportGroupByUserGroupClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>qReportGroupByUserGroupExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res1
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="qReportGroupByUserGroupFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>qReportGroupByUserGroupExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//quit:'$D(^||res1) $$$OK
	set key=$lg(qHandle,1)
	set count=$lg(qHandle,2)
	set flag=$lg(qHandle,3)
	if flag=0 {
		Set key=$Order(^||res1(key))
	}
	If (key="")&&(count'>0) Set AtEnd=1,Row="" Quit $$$OK
	if key'="" {
		Set Row=$G(^||res1(key))
	} else {
		set Row=$lb("","","")
	}
	set qHandle=$lb(key,count-1,$select(key="":1,1:0)) 
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Testq">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 Set result=##class(%ResultSet).%New("TCLEx.Data.BindUserReportDeepSee:qReportGroupByUserGroup")
 set ok=result.Execute(2)
 if 'ok quit
 For  Quit:'result.Next()  Do
 . Write result.Data("CodeReportGroup")," ",result.Data("ReportGroupDescription")," ",result.Data("FlagUse"),!
]]></Implementation>
</Method>

<Query name="qReportsByUserGroupReportGroup">
<Description>
Запрос Отчетов по группе отчетов и по групе пользователей
pUserGroup2 - код группы пользователей 
pReportGroup - код группы отчетов
pCountRows2 - кол-во записей для вывода (если данные кончились раньше, то дальше пустые строки)</Description>
<Type>%Query</Type>
<FormalSpec>pUserGroup2:%String,pReportGroup:%String,pCountRows2:%Integer=0</FormalSpec>
<Parameter name="ROWSPEC" value="CodeReport:%String,FlagUseDisplay:%String,ReportDescription:%String,FlagUse:%String"/>
</Query>

<Method name="qReportsByUserGroupReportGroupExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pUserGroup2:%String,pReportGroup:%String,pCountRows2:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res
	s ^test("par2")=pUserGroup2_"*"_pReportGroup
	
	Set qHandle=$lb("",pCountRows2,0)
	/*
	set ok=##class(%DeepSee.Utils).%GetDashboardList(.pList)
	if 'ok quit
	
	set str=""
    for {
	    set str=$order(pList(str)) if str="" quit
	    set reportGroup=$piece(str,"/",1) if reportGroup="" continue
	    if reportGroup'=pReportGroup continue
	    set report=$piece(str,"/",2) if report="" continue
	    set reportDesc=$piece(report,".dashboard",1)
	    set flagUse=..GetFlagUseReportByUserGroup(pUserGroup2, report)
		set flagUseDisplay=$select(flagUse=1:"*",1:" ")
	    set flagUseDisplay=$select(flagUse=1:"*",flagUse=2:"**",1:" ")	
		set ^||res(report)=$LB(report,flagUseDisplay,reportDesc,flagUse)
	}
    */
    set pShowAll=1
	set pUser=""
	Set ok = ..%GetFolderItemList(.tItemIDs,,pShowAll,"",pUser)
	if 'ok quit
	set k=""
	for {
		Set k = $order(tItemIDs(k),1,tID) if k="" quit
		Set tItem = ##class(%DeepSee.UserLibrary.FolderItem).%OpenId(tID)
		if $extract($piece(tItem.folderName,"/",1),1)="$" {
				continue
			}
		set folderName=$piece(tItem.folderName,"/",1)
		if folderName="" {
			continue
		}
		if folderName'=pReportGroup {
			continue
		}
		set fullName=tItem.fullName
		if $zcvt($piece(fullName,".",$length(fullName,".")),"U")'="DASHBOARD" continue
		set reportDesc=$piece(fullName,"/",2,$length(fullName,"/")) if reportDesc="" continue
	    set flagUse=..GetFlagUseReportByUserGroup(pUserGroup2, tID)
		set flagUseDisplay=$select(flagUse=1:"*",1:" ")
	    set flagUseDisplay=$select(flagUse=1:"*",flagUse=2:"**",1:"")	
		set ^||res(tID)=$LB(tID,flagUseDisplay,reportDesc,flagUse)
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="qReportsByUserGroupReportGroupClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>qReportsByUserGroupReportGroupExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="qReportsByUserGroupReportGroupFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>qReportsByUserGroupReportGroupExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set key=$lg(qHandle,1)
	set count=$lg(qHandle,2)
	set flag=$lg(qHandle,3)
	if flag=0 {
		Set key=$Order(^||res(key))
	}
	If (key="")&&(count'>0) Set AtEnd=1,Row="" Quit $$$OK
	if key'="" {
		Set Row=$G(^||res(key))
	} else {
		set Row=$lb("","","")
	}
	set qHandle=$lb(key,count-1,$select(key="":1,1:0)) 
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Testq1">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 Set result=##class(%ResultSet).%New("TCLEx.Data.BindUserReportDeepSee:qReportsByUserGroupReportGroup")
 Do result.Execute("1","",50) //"ACC",50)
 For  Quit:'result.Next()  Do
 . Write result.Data("CodeReport")," ",result.Data("ReportDescription")," ",result.Data("FlagUse"),!
]]></Implementation>
</Method>

<Method name="GetFlagUseReportGroupByUserGroup">
<Description>
Флаг использования группы отчетов указанной группой пользователей
=2 - если все отчеты группы отчетов видны для данной группы пользователей
=1 - если часть отчетов группы отчетов видны для данной группы пользователей
=0 =если ни один отчет из группы отчетов не виден для данной группы пользователей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pUserGroup:%String,pReportGroup:%String,&pError:%Status]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set pError=$$$OK,FlagUse=2
	try {
		/*
		set pError=##class(%DeepSee.Utils).%GetDashboardList(.pList)
	    if 'pError quit
	
	   set str="",flagNoOne=1
       for {
	    set str=$order(pList(str)) if str="" quit
	    set reportGroup=$piece(str,"/",1) if reportGroup="" continue
	    if reportGroup'=pReportGroup continue
	    set report=$piece(str,"/",2) if report="" continue
	    set reportDesc=report
	    set flagUse=..GetFlagUseReportByUserGroup(pUserGroup, report)
	    if flagUse=0 {
			   set FlagUse=1
		} else {
			   set flagNoOne=0
		}
       }	
	    if flagNoOne=1 {
		    set FlagUse=0
	    }
	    */
	    set pShowAll=1
	    set pUser=""
	    Set ok = ..%GetFolderItemList(.tItemIDs,,pShowAll,"",pUser)
	    if 'ok quit
	    set k=""
	    for {
		   Set k = $order(tItemIDs(k),1,tID) if k="" quit
		   Set tItem = ##class(%DeepSee.UserLibrary.FolderItem).%OpenId(tID)
		   if $extract($piece(tItem.folderName,"/",1),1)="$" {
				continue
		   }
		   set folderName=$piece(tItem.folderName,"/",1)
		   if folderName'=pReportGroup continue
	       set flagUse=..GetFlagUseReportByUserGroup(pUserGroup, tID)
	       if flagUse=0 {
			   set FlagUse=1
		   } else {
			   set flagNoOne=0
		   }
        }	
	    if flagNoOne=1 {
		    set FlagUse=0
	    }
		
	} catch(exeption) {
		set pError=exeption.AsStatus()
		set FlagUse=0
	}
	quit FlagUse
]]></Implementation>
</Method>

<Method name="GetFlagUseReportByUserGroup">
<Description>
Получить флаг использования отчета для группы пользователей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUserGroup:%String,pReport:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(pUserGroup)=""||($get(pReport)="") quit ""
  	if $data(^TTABex("BindUserGroupReportDeepSee",pUserGroup,pReport)) quit 1
  	else  quit 0
]]></Implementation>
</Method>

<Method name="SetFlagUseReport">
<Description>
Установить флаг использования отчета для группы пользователей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUserGroup:%String,pReport:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
  	   if '$data(^TTABex("BindUserGroupReportDeepSee",pUserGroup,pReport)) {
			   set ^TTABex("BindUserGroupReportDeepSee",pUserGroup,pReport)=""
	   }
	} catch(exeption) {
		set ok=exeption.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="DeleteFlagUseReport">
<Description>
Снять флаг использования отчета для группы пользователей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUserGroup:%String,pReport:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
  	   if $data(^TTABex("BindUserGroupReportDeepSee",pUserGroup,pReport)) {
			   kill ^TTABex("BindUserGroupReportDeepSee",pUserGroup,pReport)
	   }
	} catch(exeption) {
		set ok=exeption.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="%GetFolderItemsForUser">
<Description><![CDATA[
Return a list of folder items for the current user:<br/>
pItems(n) = $LB(name,type,tip,date,url,icon,keywords,public,title,createdBy,resource)<br/>
This list is returned in ID order; the caller will sort it.
If <var>pShowAll</var> is true, list items for all users.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pItems,pFolderName:%String,pSearchKey:%String="",pIncludePrivate:%Boolean=0,pShowAll:%Boolean=0,pUser:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Kill pItems

		Set tSC = ..%GetFolderItemList(.tItemIDs,,pShowAll,"",pUser)
		If $$$ISERR(tSC) Quit

		Set n = 0
		Set k = $O(tItemIDs(""),1,tID)
		While (k'="") {
			Set tSkip = 0
			Set tItem = ##class(%DeepSee.UserLibrary.FolderItem).%OpenId(tID)
			Set tFID = tItem.folderGetObjectId()
			If (tFID'="") {
				// test if folder exists
				If ('##class(%DeepSee.UserLibrary.Folder).%ExistsId(tFID)) {
					// orphaned item
					Set tSkip = 1
				}
			}
			
			If ('tSkip && (pShowAll || pIncludePrivate || tItem.public || (tItem.public=""))) {
				If (pShowAll || ($E($P(tItem.folderName,"/",1),1)'="$")) {
					Set n = n + 1
					// $LB(name,type,tip,date,url,icon,keywords)
					Set tTip = ##class(%DeepSee.UserPortal.Utils).%ResolveText(tItem.description)
					Set:tTip="" tTip = ##class(%DeepSee.UserPortal.Utils).%ResolveText(tItem.title)
					Set:tTip="" tTip = tItem.name
					set url=tItem.%GetURL()
					set $piece(url,"?DASHBOARD=",1)="TCLEx.BI.UI.UserPortal.DashboardViewer.zen"
					Set pItems(n) = $LB(tItem.fullName,tItem.%GetTypeName(),tTip,tItem.timeModified,url,tItem.%GetIcon(),##class(%DeepSee.UserPortal.Utils).%ResolveTextList(tItem.keywords),tItem.public,##class(%DeepSee.UserPortal.Utils).%ResolveText(tItem.title),tItem.createdBy,tItem.%GetResource())
				}
			}
			Set k = $O(tItemIDs(k),1,tID)
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%GetFolderItemList">
<Description><![CDATA[
Return an array of all folder items visible to the current user within the given folder.
This list is in the form:<br/>
pList(n) = id<br/>
If <var>pShowAll</var> is true, list items for all users.<br/>
If <var>pFolderClass</var> is provided, only list items of the given type.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pList:%String,pFolderName:%String="",pShowAll:%Boolean=0,pFolderClass:%String="",pUser:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tFlag = $zu(115,8,0)
		Set tSQL = "SELECT ID FROM %DeepSee_UserLibrary.FolderItem"
		Set tWHERE = ""
		If (pFolderName'="") {
			Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ "folder->fullName="_ ##class(%ZEN.Auxiliary.QueryInfo).QuoteSQL(pFolderName)
		}
		If (pFolderClass'="") {
			Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ "x__classname['"_pFolderClass_"'"
		}
		Set:tWHERE'="" tSQL = tSQL_" WHERE "_tWHERE

		Set tStatement = ##class(%SQL.Statement).%New(,"DEFAULT_SCHEMA")
		Set tSC = tStatement.%Prepare(tSQL)
		If $$$ISERR(tSC) Quit

		Set n = 0
		Set tRS = tStatement.%Execute()
		While (tRS.%Next(.tSC)) {
			If $$$ISERR(tSC) Quit
			If (tRS.ID '="") {
				Set tItem = ##class(%DeepSee.UserLibrary.FolderItem).%OpenId(tRS.ID)
				If ($IsObject(tItem)&&(tItem.%IsVisibleToPortal()||pShowAll)) {
					If (pShowAll||..CheckAccess(pUser,tRS.ID)) {
						Set n = n + 1
						Set pList(n) = tRS.ID
					}
				}
			}
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Set tFlag = $zu(115,8,tFlag)
	Quit tSC
]]></Implementation>
</Method>

<Method name="CheckAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUser,pReportDeepSee</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set iii=$i(^test(2))
	s ^test(2,iii)=pUser_"*"_pReportDeepSee
	if ($get(pUser)="")||($get(pReportDeepSee)="") quit 0
	set objuser=##class(User.SSUser).%OpenId(pUser)
	set userRole=""
	if $IsObject(objuser) {
		set userRole=objuser.SSUSRGroup
		//s ^test(2,iii)=^test(2,iii)_"*"_userRole_"*"_pReportDeepSee_"*"_..GetFlagUseReportByUserGroup(userRole.%Id(),pReportDeepSee) 
		quit ..GetFlagUseReportByUserGroup(userRole.%Id(),pReportDeepSee) 
	}
	quit 0
]]></Implementation>
</Method>

<Method name="GetURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReport=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $select(pReport'="":"TCLEx.BI.UI.UserPortal.DashboardViewer.zen?DASHBOARD="_pReport,1:"")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod CheckAccessRole(pUserRole, pReportDeepSee) As %Boolean
{
	s ^test(2,$i(^test(2)))=pUser_"*"_pReportDeepSee
	if ($get(pUserRole)="")||($get(pReportDeepSee)="") quit 0
	quit $select($data(^TTABex("BindUserGroupReportDeepSee",pUserRole,pReportDeepSee)):1,1:0)
}
*/
]]></Content>
</UDLText>

<Storage name="SQLStorage">
<Type>%CacheSQLStorage</Type>
<SqlRowIdName>TTABEx_BindUserGroupReportDeepSee_RowId</SqlRowIdName>
<StreamLocation>^TCLEx.Data.BindUserReportDeepSeeS</StreamLocation>
<SQLMap name="DataMaster">
<Type>data</Type>
<Global>^TTABex</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"BindUserGroupReportDeepSee"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{SSUSR_Group}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{ReportDeepSee}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>{L2}</Expression>
<Field>SSUSR_Group</Field>
</RowIdSpec>
<RowIdSpec name="2">
<Expression>{L3}</Expression>
<Field>ReportDeepSee</Field>
</RowIdSpec>
</SQLMap>
</Storage>
</Class>
</Export>
