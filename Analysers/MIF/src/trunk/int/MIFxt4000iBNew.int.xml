<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="MIFxt4000iBNew" type="INT" languagemode="0"><![CDATA[
MIFxt4000iBNew(mi) ; ASTM protocol  -  XT 4000 i (Sysmex)  (Bi-Directional) (Russion Burdenko))
 //LIS - server (для этого надо в настройках прибора не вводить ip-адрес, только порт)
 // host - server (par41="(::"PST")"
 set mi=$get(mi) if '$length(mi) quit
 kill ^TMIF(mi,10) set $ztrap="err^MIF000"
 if $$select^LVBMIMP(mi) quit
 for j=1:1:PLIST set @("par"_j)=PLIST(j)
 
 set stx=$char(2),etx=$char(3),ack=$char(6),enq=$char(5),eot=$char(4),nak=$char(21),etb=$char(23)
 set lf=$char(10),cr=$char(13) 
 
 if $$start^MIF000() quit
 do trace^MIF000(mi,"Started job="_$job,"DEBUG")
 set nameMachine="",nameLIS=""
 set tcpadr=$get(^TMIF(mi,"TCP"))
 for {
	 if tcpadr'="" {
		 do Main
	 } else {
		 do MainWithCatchError
	 }
	 if $$stop^MIF000() d trace^MIF000(mi,"stop","DEBUG")  quit
 }
 close par4
 quit

Main 
 read *R:10
 //if $c(R)'=enq d trace^MIF000(mi,"Waiting <ENQ> but received <"_R_">","H<--M") q
 if $c(R)'=enq q
 do receiveENQ
 do ORDER
 quit 

MainWithCatchError 
 try {
	 read *R:10
    //if $c(R)'=enq d trace^MIF000(mi,"Waiting <ENQ> but received <"_R_">","H<--M") q
    if $c(R)'=enq q
    set nameMachine="",nameLIS=""
    do receiveENQ
    do ORDER
 } catch {
	 do err^MIF000
 }  
 quit 

 ;обработка полученного от прибора ENQ c обработкой ETB 
receiveENQ 
 do trace^MIF000(mi,"ENQ","H<--M")
 do ACK
 s (sample,epis,surname,result,date,time,QC)=""
 set buffer=""
 for {
	 read *R:10 
	 if $c(R)=eot quit
     if $c(R)'=stx continue
     set record=$$read^MIF000("",lf) if '$l(record)  continue
     do trace^MIF000(mi,record_lf,"H<--M")
     set record=$e(record,1,$l(record)-1) //$c(13)
     ;do trace^MIF000(mi,$tr(record,$c(13,3)," "),"H<--M")
     ; check record validity
     set endtext=$select('$find(record,etx):etb,1:etx)
     set chsum=$p(record,endtext,2),chrecord=$piece(record,endtext,1)_endtext
     if $$CHSUM(chrecord)'=chsum do NAK continue
     do ACK
     set record=$piece(record,endtext,1)
     set record=$e(record,2,$l(record)) ;на 1-ом месте стоит номер записи - на записях-продолжениях он мешает
     if endtext=etb {
	     set buffer=buffer_record
	     continue
     }
     set buffer=buffer_record
     if buffer="" continue
     do trace^MIF000(mi,"buffer="_buffer,"H<--M")
     for pp=1:1:$length(buffer,$c(13)) {
	     set record=$piece(buffer,$c(13),pp)
	     if record="" continue 
	     set typerecord=$piece(record,"|",1)
	     if typerecord="" continue
	     set typerecord=$select($length(typerecord)=1:typerecord,1:$e(typerecord,2))
	     do trace^MIF000(mi,typerecord_" "_record,"H<--M")
	     ; head record
         if typerecord="H" {
            set nameMachine=$piece(record,"|",5),nameLIS=$piece(record,"|",10)  
            continue
         }
         ; query record
         if typerecord="Q" {
	        set epis=$$DeleteLeftAndRightSpaces^KSUTIL1($p($p(record,"|",3),"^",3))
	        if $l(epis) set ^TMP($zn,$j,"ENQ",epis)="" continue
            ;if $l(epis),$d(^TEPI(epis,1)) set ^TMP($zn,$j,"ENQ",epis)="" continue
            ;set suffix=$e(epis,$l(epis)),epis=$e(epis,1,$l(epis)-1)
            ;if $l(epis),$d(^TEPI(epis,1)) set ^TMP($zn,$j,"ENQ",epis)=suffix continue
            ;set epis=$p($p(record,"|",3),"^",2) if $l(epis) set ^TMP($zn,$j,"ENQ",epis)=""
            continue
         }    
         ; patient record
         if typerecord="P" {
            do Last s (sample,epis,surname,result,date,time,QC)=""
            set surname=$p(record,"|",6)
            set surname=$$DeleteLeftAndRightSpaces^KSUTIL1($piece(surname,"^",2)_" "_$piece(surname,"^",3)) 
            continue
         }
         ; order record
         if typerecord="O" {
	        set epis=$$DeleteLeftAndRightSpaces^KSUTIL1($p($p(record,"|",4),"^",3)),QC=$tr($p(record,"|",12)," ") s:'$l(epis) epis=$tr($p($p(record,"|",4),"^",1)," ")
            set QC=$select(QC="Q":"Y",1:"")
            continue
         }
         ; result record
         if typerecord="R" {
            ; strip trailing spaces
            set x1=$p($p(record,"|",3),"^",5) set xx1=x1 for i=$l(x1):-1 quit:$e(x1,i)'=" "  s xx1=$e(x1,1,i-1)
            if $extract($piece(x1,"|",2),1,3)="PNG" continue
            set x1=xx1,x2=$tr($p(record,"|",4),", ","."),x3=$tr($p(record,"|",7)," ")
            if x3="N" s x3="" ; normal flag
            if $l(x1),$l(x2) s result=result_x1_$c(par10)_x2_$c(par10)_x3_$c(par11)
            ; date and time
            set datetime=$p(record,"|",13)
            if $l($tr(datetime," ")) {
	            s date=$$intdate^SSUTIL4($e(datetime,5,6)_"/"_$e(datetime,7,8)_"/"_$e(datetime,1,4))
                s time=($e(datetime,9,10)*3600)+($e(datetime,11,12)*60)
            }
            continue
         }
         ; last record
         if typerecord="L" {
	        d Last 
	        continue
         }
    }
    set buffer=""
 } 
 do trace^MIF000(mi,$s($c(R)=eot:"EOT",1:R),"H<--M")
 quit 
 
Last ; file result if exists
 do trace^MIF000(mi,"Write episode="_epis_": QC="_QC_" results="_result_" date="_date_" time="_time_"surname="_surname,"H<--H")
 if epis?1.99AN,$l(result) {
 	 do file^MIF000(mi,sample,epis,surname,result,date,time,QC)
 }
 set (sample,epis,surname,result,date,time,QC)=""
 quit
 
ORDER ; create list of orders if exists
 s epis="" 
 for {
	 set epis=$o(^TMP($zn,$j,"ENQ",epis)) quit:epis="" 
     do scanone^MIF000(mi,epis)
     if $$select^LVBEPVIS(epis,"Y") k ^TMP($zn,$j,"ENQ",epis) continue
     set sex=$s($g(PLIST(5))="M":"M",$g(PLIST(5))="F":"F",1:"U")
     ;s sex=$s($g(PLIST(5))="М":"M",$g(PLIST(5))="Ж":"F",1:"U")
     set surname=$get(PLIST(3)),name=$get(PLIST(4)),birthday=$zdate($get(PLIST(6)),8)
     set mrn=$get(PLIST(20)) if mrn="" set mrn=epis
     set mrn=$extract(mrn,1,15)
     
     set dataWL=##class(TCLEx.Function.WorkList).getDataWorkList(epis)
     set numWorkList=$piece(dataWL,"\",1),numInWorkList=$piece(dataWL,"\",2)
     set surname=$select(numInWorkList'="":numInWorkList_" ",1:"")_surname
     set surname=$extract(surname,1,15)
     
     set hospitalID=$get(PLIST(22))
     set hospitalName=##class(TCLEx.Function.Hospital).GetName(hospitalID)
     set nameWrite=name_$select(hospitalName'="":"("_hospitalName_")",1:"")
     if $length(nameWrite)>20 {
	     if $length(hospitalName)=0 {
		     set nameWrite=$extract(name,1,20)
	     }
	     else {
		     set name=$extract(name,1,12)
	         set nameWrite=name_"("_$extract(hospitalName,1,20-$length(name)-2)_")" 
	     }
     }
     
     set line=$o(^TMIF(mi,10,""),-1)+1
     set ^TMIF(mi,10,line)="P|1|||"_$$Translit^KSUTIL1(mrn)_"|"_$$Translit^KSUTIL1("^"_surname_"^"_nameWrite)_"||"_birthday_"|"_sex_"||||||||||||||||||" ;_$g(PLIST(15))
     set tc="",strtest="" 
     for N=1:1 {
	     set tc=$o(^TMP("MIF-SINGLE",$j,mi,epis,tc)) 
	     if tc="" quit
	     set strtest=strtest_$select(strtest'="":"\",1:"")_"^^^^"_tc
	 }
	 do SET(epis,strtest)
     set line=$order(^TMIF(mi,10,""),-1)+1,^TMIF(mi,10,line)="L|1|"_$s(N>1:"F",1:"I")
     kill ^TMP($zn,$j,"ENQ",epis)
     d Send
 }
 quit
SET(epis,tcx) ; set record to be sent to instrument
 set line=$order(^TMIF(mi,10,""),-1)+1
 set hh=$h
 set datetime=$zdate(+hh,8)_$tr($ztime($piece(hh,",",2),1),":","")
 set ^TMIF(mi,10,line)="O|"_"1"_"|^^"_epis_"^C||"_tcx_"||"_datetime_"|||||N||||||||||||||Q"
 quit
Send ; send list of orders if exists
 do ENQ 
 for j=1:1:10 {
	 read *R:1 
	 quit:$char(R)=ack!($char(R)=enq)  
	 //d trace^MIF000(mi,"Waiting <ACK> or <EOT> (10) but received <"_R_">","H<--M")
 }
 if $c(R)=enq quit
 if $c(R)'=ack do EOT quit
 do trace^MIF000(mi,"ACK","H<--M")
 set recordHead="1H|\^&|||"_$select($get(nameLIS)'="":nameLIS,1:"LIS")_"|||||"_$select($get(nameMachine)'="":nameMachine,1:"ACCESS^505081")_"||P|1|"_$Translate($ZDateTime($Horolog,8)," :")
 quit:$$SEND(recordHead)
 set x="" for FRAME=2:1 set x=$Order(^TMIF(mi,10,x)) quit:x=""  quit:$$SEND(FRAME#8_^TMIF(mi,10,x))
 if x="" kill ^TMIF(mi,10)
 do EOT
 quit
SEND(str) ; send string to instrument
 set str=str_cr_etx,chsum=$$CHSUM(str)
 write stx,str,chsum,cr,lf,*-3 
 do trace^MIF000(mi,str_chsum,"H-->M")
 for j=1:1:6 {
	 read *R:1 
	 quit:($c(R)=ack)!($c(R)=eot)
	 //d trace^MIF000(mi,"Waiting <ACK> or <EOT> (6) but received <"_R_">","H<--M")
 }
 if $c(R)=ack do trace^MIF000(mi,"ACK","H<--M") quit 0
 if $c(R)=eot do trace^MIF000(mi,"EOT","H<--M") quit 1
 do trace^MIF000(mi,R,"H<--M")
 quit 2
CHSUM(x) ; calculate check sum
 new (x) 
 set z=0 for y=1:1:$length(x) set z=z+$a(x,y)
 set z=$tr($j($zhex(z#256),2)," ","0") 
 quit z
ACK write ack,*-3 do trace^MIF000(mi,"ACK","H-->M") quit
NAK write nak,*-3 do trace^MIF000(mi,"NAK","H-->M") quit
EOT write eot,*-3 do trace^MIF000(mi,"EOT","H-->M") quit
ENQ write enq,*-3 do trace^MIF000(mi,"ENQ","H-->M") quit


 /* 
start(mi,dev,params)
 s $zt="err^MIFstartServer" //???? 
 s date=$$extdate2^SSUTIL4(+$h),time=$$exttime^SSUTIL4($p($h,",",2))
 ;if '$$TestLicense^MIFstartServer(mi) d message^MIF000(mi,"Unable to start due to License limit "_date_" "_time) quit 
 set ip=$g(^TMIF(mi,"TCP")) set ip=""   
 ;клиент
 if $length(ip) {
	 open dev:(ip::"C"):20 set ok=$test
	 if 'ok do message^MIF000(mi,"Unable to start "_date_" "_time) quit
	 xecute "use "_dev_$select($get(params)'="":":"_params,1:"") 
	 do setStart^MIFstartServer(mi)
	 do Main^MIFxt4000iB(mi,dev)
	 quit 
 }
 ;сервер
 if '$length(ip) {
	 S mode="A" 
     Open dev:(:$piece(dev,"|TCP|",2)):5 set ok=$test
     if 'ok do message^MIF000(mi,"Unable to start "_date_" "_time) quit
     do setStart^MIFstartServer(mi)
     Set to=0 // job time out
     set jobflag=4 //Pass an open TCP/IP socket to the spawned job using the principal I/O device ($PRINCIPAL).
     For  {      
            Use dev Read *x // wait connection
            Job MainJob^MIFxt4000iB(mi,dev):(:jobflag:$IO:$IO):to 
            if $$stop^MIF000() quit
     }
     close dev
 }
 quit 
 */



]]></Routine>
</Export>
