<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="MIFabl80" type="INT" languagemode="0"><![CDATA[
MIFabl80(mi) ; ASTM protocol  -  ABL 80 (Bi-Directional) (Russion EMC)
 // host - server (par41="(::"PST")"
 // нет контрольных сумм
 // нужно ли обрабатывать BuiltinQC result?
 set mi=$get(mi) if '$length(mi) quit
 kill ^TMIF(mi,10) 
 s $zt="err^MIF000"
 if $$select^LVBMIMP(mi) quit
 for j=1:1:PLIST set @("par"_j)=PLIST(j)
 set stx=$char(2),etx=$char(3),ack=$char(6),enq=$char(5),eot=$char(4),nak=$char(21)
 set lf=$char(10),cr=$char(13),soh=$char(1)
 if $$start^MIF000() quit
 do trace^MIF000(mi,"Started job="_$job,"DEBUG")
 set nameMachine="",nameLIS="",version=""
 for {
	 if $$stop^MIF000() quit
	 read *R:10
     ;if $c(R)'=soh d trace^MIF000(mi,"Waiting <SOH> but received <"_R_">","H<--M") q
     if $char(R)'=soh continue
     do receiveENQ
 }
 close par4
 quit

 ;обработка полученного от прибора ENQ
receiveENQ
 set (sample,epis,surname,result,date,time,QC)="" 
 do trace^MIF000(mi,"SOH","H<--M")
 set ok=1
 //do ACK
 for {
	 //читаем до $char(13)
     set record=$$read() if '$length(record) continue
     // если получен EOT, то выходим Не понятно, надо ли посылать ACK.
     if record=eot do trace^MIF000(mi,"EOT","M-->H") do ACK quit
     do trace^MIF000(mi,record,"H<--M")
     ; check record validity
     ;set chsum=$piece(record,etx,2),chrecord=$piece(record,etx,1)_etx
     ;if $$CHSUM(chrecord)'=chsum do NAK continue
     ;do ACK
   
     set typerecord=$extract(record,1)
     
     ; head record
     if typerecord="H" {
        set nameMachine=$piece(record,"|",5),nameLIS=$piece(record,"|",10),version=$piece(record,"|",13)
        continue
     }
     ; query record
     if typerecord="Q" {
	     set epis=$piece(record,"|",3)
	     If epis="ALL" Do PrepareAllOrders(mi) continue
	     if $length(epis) set ^TMP($zname,$job,"ENQ",epis)="" 
         continue
     }    
     ; patient record
     if typerecord="P" {
        do Last set (sample,epis,surname,result,date,time,QC)=""
        set epis=$translate($piece(record,"|",4),"")
        //set surname=$translate($translate($piece(record,"|",6),""),"^"," ") 
        continue
     }
     ; order record
     if typerecord="O" {
	     ;set epis=$translate($piece($piece(record,"|",3),"^",1)," ")
	     ;if '$length(epis) set epis=$translate($piece($piece(record,"|",4),"^",1)," ")
	     if $extract($piece(record,"|",4),1,2)="QC" set QC="Y"
	     // 16 piece !!! возможно QC level/QC lot
	     // нужно ли обрабатывать BuiltinQC result?
	     continue
     }
     ; result record
     if typerecord="R" {
         ; strip trailing spaces
         set test=$piece($piece(record,"|",3),"^",4) set test=$$DeleteLeftAndRightSpaces^KSUTIL1(test)
         set res=$translate($piece(record,"|",4),", ",".")
         if $extract(res,1,5)="?...." continue
         set flag=$translate($piece(record,"|",7)," ") if flag="N" set flag="" ; normal flag
         if $length(res),$isvalidnum(res) set res=+res // так как перед в обработке результата перед округлением до нужного кол-во десятичных знаков проверка :i $l(tires),tires=(+tires),$l(dec) s tires=$j(tires,0,dec)  
         if $length(test),$length(res) set result=result_test_$char(par10)_res_$char(par10)_flag_$char(par11)
         ; date and time
         if $length($translate($piece(record,"|",13)," ")) {
	         set datetime=$piece(record,"|",13)
	         set date=$$intdate^SSUTIL4($extract(datetime,5,6)_"/"_$extract(datetime,7,8)_"/"_$extract(datetime,1,4))
             set time=($extract(datetime,9,10)*3600)+($extract(datetime,11,12)*60)
         }
         continue
     }
     ; last record
     if typerecord="L" {
	     do Last 
	     continue
     }
     
 }
 if ok=1 {
	 //do trace^MIF000(mi,"before ORDER","DEBUG")
	 do ORDER
 }
 quit
Last ; file result if exists
 do trace^MIF000(mi,"Write results episode="_epis_": "_result_" date="_date_" time="_time,"H<--H")
 if epis?1.99AN,$length(result) {
 	 do file^MIF000(mi,sample,epis,surname,result,date,time,QC)
 }
 set (sample,epis,surname,result,date,time,QC)=""
 quit
 
  ;создание глобали ^TMIF(pInstrument,10) с заказами к прибору 
PrepareAllOrders(pInstrument) public {
	Do scanall^MIF000(pInstrument)
	Set epis="" 
	For  {
		Set epis=$Order(^TMP("MIF-SCAN",$Job,pInstrument,epis))
		If epis="" Quit
		if $$select^LVBEPVIS(epis,"Y") continue
		set ^TMP($zname,$job,"ENQ",epis)="" 
	}
}	 
 
ORDER ; create list of orders if exists
  // посылка ранее не посланных заданий 
 set epis=""
 for {
	 set epis=$order(^TMIF(mi,10,epis)) quit:epis="" 
	 do Send(epis)
 }
 set epis="" 
 for {
	 set epis=$order(^TMP($zname,$job,"ENQ",epis)) quit:epis="" 
     do scanone^MIF000(mi,epis)
     if $$select^LVBEPVIS(epis,"Y") kill ^TMP($zname,$job,"ENQ",epis) continue
     set sex=$select($get(PLIST(5))="M":"M",$get(PLIST(5))="F":"F",1:"U")
     ;s sex=$s($g(PLIST(5))="М":"M",$g(PLIST(5))="Ж":"F",1:"U")
     set surname=$get(PLIST(3)),name=$get(PLIST(4)),birthday=$zdate($get(PLIST(6)),8) 
     // header record
     set line=$order(^TMIF(mi,10,epis,""),-1)+1
     //set ^TMIF(mi,10,epis,line)="H|\^&|||"_$select($get(nameLIS)'="":nameLIS,1:"LIS")_"|||||"_$select($get(nameMachine)'="":nameMachine,1:"Centaur")_"|||"_$select($get(version)'="":version,1:"1")_"|" 
     set datetime=$zdate(+$h,8)_$translate($ztime($p($h,",",2)),":","")
     set ^TMIF(mi,10,epis,line)="H|\^&|||"_$select($get(nameLIS)'="":nameLIS,1:"LIS")_"||||||||"_$select($get(version)'="":version,1:"1")_"|"_datetime 
     // patient record
     set line=$order(^TMIF(mi,10,epis,""),-1)+1
     set ^TMIF(mi,10,epis,line)="P|1||"_epis_"||"_$$Translit^KSUTIL1(surname_"^"_name)_"||"_birthday_"|"_sex_"|||||" 
     // order records
     set tc="" 
     for N=1:1 {
	     set tc=$order(^TMP("MIF-SINGLE",$job,mi,epis,tc)) 
	     if tc="" quit
	     do SET(epis,tc)
     }
     // terminate record
     set line=$order(^TMIF(mi,10,epis,""),-1)+1,^TMIF(mi,10,epis,line)="L|1|N" //_$select(N>1:"F",1:"I")
     kill ^TMP($zname,$job,"ENQ",epis)
     do Send(epis)
 }
 quit
SET(epis,tcx) ; set record to be sent to instrument
 set line=$order(^TMIF(mi,10,epis,""),-1)+1
 set ^TMIF(mi,10,epis,line)="O|"_N_"|"_epis_"||^^^"_tcx_"|||||||||||||||||||||"
 quit
Send(epis) ; send list of orders if exists
 do SOH 
 ;for j=1:1:10 {
 ;	 read *R:1 
 ;	 quit:$char(R)=ack!($char(R)=enq)  
 ; 	 //d trace^MIF000(mi,"Waiting <ACK> or <EOT> (10) but received <"_R_">","H<--M")
 ;}
 ;if $char(R)=enq quit
 ;if $char(R)'=ack do EOT quit
 ;do trace^MIF000(mi,"ACK","H<--M")
 set x="" for FRAME=1:1 set x=$Order(^TMIF(mi,10,epis,x)) quit:x=""  quit:$$SEND(FRAME#8_^TMIF(mi,10,epis,x))
 if x="" kill ^TMIF(mi,10,epis)
 do EOT
 quit
SEND(str) ; send string to instrument
 //set str=str_cr_etx,chsum=$$CHSUM(str)
 //write stx,str,chsum,cr,lf,*-3 
 write str,cr,*-3 
 do trace^MIF000(mi,str,"H-->M")
 ;for j=1:1:6 {
 ;	 read *R:1 
 ;	 quit:($char(R)=ack)!($char(R)=eot)
 ;	 //d trace^MIF000(mi,"Waiting <ACK> or <EOT> (6) but received <"_R_">","H<--M")
 ;}
 ;if $char(R)=ack do trace^MIF000(mi,"ACK","H<--M") quit 0
 ;if $char(R)=eot do trace^MIF000(mi,"EOT","H<--M") quit 1
 ;do trace^MIF000(mi,R,"H<--M")
 quit 0
CHSUM(x) ; calculate check sum
 new (x) 
 set z=0 for y=1:1:$length(x) set z=z+$ascii(x,y)
 quit $translate($justify($zhex(z#256),2)," ","0")
 
ACK write ack,*-3 do trace^MIF000(mi,"ACK","H-->M") quit
NAK write nak,*-3 do trace^MIF000(mi,"NAK","H-->M") quit
EOT write eot,*-3 do trace^MIF000(mi,"EOT","H-->M") quit
ENQ write enq,*-3 do trace^MIF000(mi,"ENQ","H-->M") quit
SOH write soh,*-3 do trace^MIF000(mi,"SOH","H-->M") quit

read() 
 new result,time,x
 set time=10 
 set result="" 
 for {
	 read *x:time 
	 if x=-1 quit
	 if $char(x)=eot set result=eot quit  
	 if $char(x)=cr quit
     set result=result_$char(x)
 }
 quit result

]]></Routine>
</Export>
