<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="PRTCLNRUS54" type="INT" languagemode="0"><![CDATA[
PRTCLNRUS54  ;Отчет по контролю качества ; liv 
 ; for version L2012
 ;
 q
 ; Отчет CLNRUS54  +  CLNRUS54.xsl  + DLL: PRTCLNRUS.clsSTART
 ;==================================================================================================================
CREATE(REPID,PAR,USER,%msql) ; create report
 n (REPID,PAR,USER,%msql) k ^TMP($zn,$j)
 q
 ;==================================================================================================================
FORM(USER) new (USER) s USER=$G(USER) 
 S Par="^TEMP($J)" k @Par 
 
  ; период дат
 s @Par@("PAR1a")="Label   : 100 : 200 : 1000 : 300 : Дата от:"
 s @Par@("PAR1")="DateText: 1300: 200 : 1100 : 300 : t-7 :True"
 s @Par@("PAR2a")="Label   : 100: 600 : 1000 : 300 : Дата до:"
 s @Par@("PAR2")="DateText: 1300: 600 : 1100 : 300 : t:True"
 
 ; список приборов
 set @Par=""
 s @Par@("PAR3a")="Label   : 100 : 1000 : 1000 : 300 : Прибор:"
 ;s @Par@("PAR3")="ListBox: 1300 : 1000 : 4000 : 300 : :True:::List"         ;Standart
 set default="0"
 s @Par@("PAR3")="ComboBox: 1300 : 1000 : 4000 : 300 : :True: "_default_" :List" ;Standart
 set id=""
 for {
	 set id=$order(^TMIF(id),1,record) if id="" quit
	 set name=$piece(record,"\",1)
	 ;set @Par@("PAR3",name_$char(4)_id)=name
	 set @Par@("PAR3",id)=name
 }
 ;if $data(@Par@("PAR3"))>1 set @Par@("PAR3",0)="Все приборы"
 ;
 ; настройка формы
 s @Par@("form")="Отчет для анализа работы прибора:500:300:Формиров.:Выход"
 q Par //"^TEMP("_$J_")" 
 ;==================================================================================================================
 ; Формирование отчета согласно заданным критериям (передаются из формы VB)
 ; Формат PAR = поле $С(3) значение { $C(1) значение $C(1) значение } $C(2) поле $С(3) значение { $C(2) поле ... }
 ; Возвращает:   0^сообщение^имя файла^программ для открытия файла ( EXPLORER, EXCEL, WINWORD )
 ;             100^сообщение об ошибке
 ; 
START(USER,PAR) n (USER,PAR)  s USER=$G(USER),PAR=$G(PAR) 
 i $G(PAR)="" q "100^нет входных параметров!"    ;при выходе из DLL была нажата кнопка Отмена
 ;
 ;k ^zz   m ^zz("FORM")=^TEMP($j) s ^zz="$j="_$j_" ; $h="_$h   s ^zz("PAR")=PAR       ;@@@
 k ^TEMP($j),^TEMP($zn,$J)
 s Mas="^TEMP($zn,$J)" k @Mas
 s MSGERROR=""            
 d INIT i $g(MSGERROR)'="" quit MSGERROR
 g Report
 ;------------------------------------------------
INIT ; инициализация входных параметров
 New mas,str,str1,str2,i,j,pay
 d PARAM^REPORTSPB(PAR,"mas")
 s j="" f  s j=$O(mas(j)) q:j=""  s @j=$g(mas(j))
  ; период дат
 i $G(PAR1)="" s MSGERROR="100^Не определено значение <Дата от>" q
 i $G(PAR2)="" s MSGERROR="100^Не определено значение <Дата до>" q
 ; прибор
 i $G(PAR3)="" s MSGERROR="100^Не определено значение <Прибор>" q
 quit
 
 ; обработка данных и формирование XML ...
XML(pDateFrom,pDateTo,devices,MasXML) public
{  
  set ok=1
  try {

      set @MasXML@("User",1,"DateFrom")=$TR($$extdate2^SSUTIL4(pDateFrom),"/",".")
      set @MasXML@("User",1,"DateTo")=$TR($$extdate2^SSUTIL4(pDateTo),"/",".")
  
      do GetData($get(pDateFrom),$get(pDateTo),.devices,$na(@MasXML@("Data")))

	  kill @MasXML@("Data2")
	  set mi=""
	  for {
		  set mi=$order(@MasXML@("Data",mi)) if mi="" quit
		  set testcode=""
          for {
	          set testcode=$order(@MasXML@("Data",mi,testcode)) if testcode="" quit 
	          set testcodeAnal=$piece($get(^TMIF(mi,2,testcode)),"\",1) 
	          set testname=$piece($get(^TTAB("TC",testcode)),"\",1)
	          set key=testname_$char(1)_testcodeAnal_$char(1)_testcode
	          merge @MasXML@("Data2",mi,key)=@MasXML@("Data",mi,testcode)
          }
      }
      kill @MasXML@("Data")
  
      set nn=0
      set mi=""
      for {
	      set mi=$order(@MasXML@("Data2",mi)) if mi="" quit
	      set devicename=$piece($get(^TMIF(mi)),"\",1)
          set test=""
          for {
	         set test=$order(@MasXML@("Data2",mi,test)) if test="" quit 
	         set testcodeAnal=$piece(test,$char(1),2)
	         set testname=$piece(test,$char(1),1)
	         set material=""
	         for {
		         set material=$order(@MasXML@("Data2",mi,test,material)) if material="" quit
		         set materialName=$piece($get(^TTQC(material)),"\",1)
		         set lot=""
		         for {
			        set lot=$order(@MasXML@("Data2",mi,test,material,lot)) if lot="" quit
			        set lotname=$piece($get(^TTQC(material,"LOT",lot)),"\",1)
			        set level=""
			        for {
				        set level=$order(@MasXML@("Data2",mi,test,material,lot,level)) if level="" quit
				        set levelname=$piece($get(^TTQC(material,"LOT",lot,"LEVEL",level)),"\",1)
				        set datetime=""
				        for {
					        set datetime=$order(@MasXML@("Data2",mi,test,material,lot,level,datetime),1,record) if datetime="" quit
					        set nn=nn+1
	                        set @MasXML@("User",1,"QC",nn,"Device")=$zstrip(devicename,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"TestName")=$zstrip(testname,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"TestCode")=$zstrip(testcodeAnal,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"Material")=$zstrip(materialName,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"LotCode")=$zstrip(lot,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"LotName")=$zstrip(lotname,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"Level")=$zstrip(level,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"LevelName")=$zstrip(levelname,"<>W")
	                        set date=$tr($zdate($piece(datetime,$char(1),1),4),"/",".")
	                        set time=$ztime($piece(datetime,$char(1),2),2)
	                        set time=+$piece(time,":",1)_":"_$piece(time,":",2)  // так как надо 8:05, а не 08.05
	                        set @MasXML@("User",1,"QC",nn,"DateTime")=date_" "_time
	                        set @MasXML@("User",1,"QC",nn,"Result")=$zstrip(record,"<>W")
	                        set @MasXML@("User",1,"QC",nn,"Odd")=$select(nn#2'=0:"1",1:"0")
				        }
				  }
			  }
		  }
	    }  
	  }
      kill @MasXML@("Data2")
  } catch(exception) {
	  set ok=exception.AsStatus()
  }
  quit ok
}
 	
Report
  S MasXML="^TEMP($zn,$J,""XML"")" kill @MasXML
  
  kill devices set devices(PAR3)=""
  set ok=$$XML(PAR1,PAR2,.devices, $na(@MasXML))
  if 'ok quit "100^Ошибка:"_$system.Status.GetErrorText(ok)
  ;log
  //k ^zz M ^zz("XML")=@MasXML     ;@@@
  ;
  S %Ret=$$WriteFileLabTrakClient^REPORTSPB($na(@MasXML),"CLNRUS54.xsl",USER)
  kill @MasXML
  k ^TEMP($zn,$J),^TEMP($j)   
  i $E(%Ret)="*" q "100^Ошибка:"_$E(%Ret,2,$L(%Ret)) 
  ; Возвращаем:  0^сообщение^имя файла^программа для открытия файла ( EXPLORER, EXCEL, WINWORD ) / 100^сообщение об ошибке
  quit "0^^"_%Ret_"^EXCEL"  ;"^WINWORD  ;^EXCEL"  ;^EXPLORER"  

GetData(pDateFrom,pDateTo,pDevices,pGlb) public
  // если у анализатора несколько материалов, то надо заводить разные группы
  // к группе к уровню можно прицкрепить только одну дату (ну и к каждой дпте только один материал-лот-уровень
  // поэтому по дате и номеру уровня можно определить  материал-лот-уровень
  set pDateFrom=pDateFrom-0.5
  kill @pGlb
  /*
  set material=""
  for {
		  set material=$order(^TTQC(material)) if material="" quit
		  set lot=""
		  for {
			  set lot=$order(^TTQC(material,"LOT",lot)) if lot="" quit
			  set mi=""
			  for {
				  set mi=$order(^TTQC(material,"LOT",lot,"TYPE","M",mi)) if mi="" quit
				  if ($data(pDevices)>1) if '$data(pDevices(mi)) continue
			      set testcode=""
			      for {
				      set testcode=$order(^TTQC(material,"LOT",lot,"TYPE","M",mi,"TEST",testcode)) if testcode="" quit
				      set level=""
				      for {
					      set level=$order(^TTQC(material,"LOT",lot,"TYPE","M",mi,"TEST",testcode,"DATA",level)) if level="" quit
					      set date=pDateFrom
					      for {
						      set date=$order(^TTQC(material,"LOT",lot,"TYPE","M",mi,"TEST",testcode,"DATA",level,date)) if date=""||(date>pDateTo) quit  
						      set num=""
						      for {
							     set num=$order(^TTQC(material,"LOT",lot,"TYPE","M",mi,"TEST",testcode,"DATA",level,date,num),1,record) if num="" quit
							     set time=$piece(record,"\",4),result=$piece(record,"\",1)
							     set result=$$FormatResult(result)
							     set @pGlb@(mi,testcode,material,lot,level,date_$char(1)_time_$char(1)_num)=result
						      }  
						  }
					  }
				  }  
			  }
		  }
	  }
	  */
  set pDateFrom=pDateFrom-0.5
  kill @pGlb
  set group=""
  for {
		  set group=$order(^TQCA("GROUP",group)) if group="" quit
		  // Test Area and Analisator
		  set recGroup=$get(^TTAB("CTQC-G",group))
		  set area=$piece(recGroup,"\",2) if area'="M" continue // M-Mashines
		  set mi=$piece(recGroup,"\",3) if mi="" continue
		  if ($data(pDevices)>1) if '$data(pDevices(mi)) continue
		  //^TQCA("GROUP","GR13","LINK","C","LEVEL","1","DATE") 
		  set QCtype=""
		   for {
			  set QCtype=$order(^TQCA("GROUP",group,"RUN",QCtype)) if QCtype="" quit
			  set testcode=""
		      for {
			      set testcode=$order(^TQCA("GROUP",group,"RUN",QCtype,testcode)) if testcode="" quit
			      set date=pDateFrom
			      for {
				      set date=$order(^TQCA("GROUP",group,"RUN",QCtype,testcode,"DATE",date)) if date=""||(date>pDateTo) quit  
				      set num=""
				      for {
					      set num=$order(^TQCA("GROUP",group,"RUN",QCtype,testcode,"DATE",date,"RUNNUMBER",num)) if num="" quit
					      set level=""
					      for {
						      set level=$order(^TQCA("GROUP",group,"RUN",QCtype,testcode,"DATE",date,"RUNNUMBER",num,"LEVEL",level),1,record) if level="" quit
						      set time=$piece(record,"\",6),result=$piece(record,"\",1)
						      // определение материала
						      set dateStart=$order(^TQCA("GROUP",group,"LINK",QCtype,"LEVEL",level,"DATE",date+0.5),-1)
						      if dateStart="" continue
						      set materialLotLevel=$piece($get(^TQCA("GROUP",group,"LINK",QCtype,"LEVEL",level,"DATE",dateStart)),"\",1)
						      if materialLotLevel="" quit 
                              set material=$piece(materialLotLevel,"||",1)
                              set lot=$piece(materialLotLevel,"||",2)
						      set result=$$FormatResult(result)
						      set @pGlb@(mi,testcode,material,lot,level,date_$char(1)_time_$char(1)_num)=result
					      }
					  }  
				  }
		      }
		   }
	  }
 quit	   
 
CreateFile(filereal)
 set ok=1
 try {
	 set date=+$h
     set pDateFrom=date-1
     set pDateTo=date-1
     set glb=$na(^||xml)
     // данные
     set ok=$$XML(pDateFrom,pDateTo,"",glb)
     if 'ok quit
     if '$data(@glb@("User",1,"QC")) set ok=$$Error^%apiOBJ(5001,"Нет данных за "_$zd($h-1,4)) quit
     
     // создание файла во временной директории
     set filename=$$GetFileName(pDateFrom)
     
     set pathArcFile=$$GetPathArcFile()
     if pathArcFile="" set ok=$$Error^%apiOBJ(5001,"Не указан путь к архивным файлам.") quit  
     if '##class(%File).DirectoryExists(pathArcFile) {
	    set ok=##class(%File).CreateDirectory(pathArcFile)
	    if 'ok set ok=$$Error^%apiOBJ(5001,"Не удалось создать директорию "_pathArcFile_".") quit    
     }
     
     set pathRealFile=$$GetPathRealFile()
     if pathRealFile="" set ok=$$Error^%apiOBJ(5001,"Не указан путь к файлам для Unity.") quit  
     if '##class(%File).DirectoryExists(pathRealFile) {
	    set ok=$$Error^%apiOBJ(5001,"Не существует директория "_pathRealFile_".") quit    
     }
     
     set filearc=pathArcFile_"\"_filename_".tmp" // файл во временной директории с расширением tmp
     Set filearc=$$ArchiveFileName^KSUTIL1(filearc)
     set dir=pathRealFile_"\"
	 set filetmp=dir_filename_".tmp" // файл во рабочей директории с расширением tmp
	 set filereal=dir_filename_".csv" // файл во рабочей директории с расширением csv
	 
	 if ##class(%File).Exists(filetmp) {
		//set ok=$$Error^%apiOBJ(5001,"Файл "_filereal_" уже существует.") quit 
		set ok=##class(%File).Delete(filetmp)
		if 'ok set ok=$$Error^%apiOBJ(5001,"Не удалось удалить уже существующий файл "_filetmp_".") quit 
	 }
	 
	 if ##class(%File).Exists(filereal) {
		//set ok=$$Error^%apiOBJ(5001,"Файл "_filereal_" уже существует.") quit 
		set ok=##class(%File).Delete(filereal)
		if 'ok set ok=$$Error^%apiOBJ(5001,"Не удалось удалить уже существующий файл "_filereal_".") quit 
	 }
	 
     //Set file=##class(%File).%New(filearc) 
	 //set ok=file.Open("WSN")
	 //if 'ok quit
	 Set stream=##class(%FileCharacterStream).%New()
	 Set stream.TranslateTable="CP1251"  
	 Set stream.Filename=filearc
	 //Set ok=stream.MoveToEnd()
	 
	 set nn=""
     for {
	     set nn=$order(@glb@("User",1,"QC",nn)) if nn="" quit
	     set devicename=$get(@glb@("User",1,"QC",nn,"Device"))
	     set testname=$get(@glb@("User",1,"QC",nn,"TestName"))
	     set testcodeAnal=$get(@glb@("User",1,"QC",nn,"TestCode"))
	     set materialName=$get(@glb@("User",1,"QC",nn,"Material"))
	     set lot=$get(@glb@("User",1,"QC",nn,"LotCode"))
	     set lotname=$get(@glb@("User",1,"QC",nn,"LotName"))
	     set level=$get(@glb@("User",1,"QC",nn,"Level"))
	     set levelname=$get(@glb@("User",1,"QC",nn,"LevelName"))
	     set datetime=$get(@glb@("User",1,"QC",nn,"DateTime"))
	     set result=$get(@glb@("User",1,"QC",nn,"Result"))
	     set record=devicename_";"_testname_";"_testcodeAnal_";"_materialName_";"_lot_";"_lotname_";"_level_";"_levelname_";"_datetime_";"_result
		 //set ok=file.WriteLine(record)
		 Set ok=stream.WriteLine(record)
		 if 'ok quit
	 }
	 if 'ok quit
	 
	 //set ok=file.%Save()  
	 Set ok=stream.SaveStream()
	 if 'ok quit
	 Set stream=""
	 
	 // копирование файла из временной директории в рабочую
	 Set ok=##class(%File).CopyFile(filearc,filetmp) 
	 if 'ok set ok=$$Error^%apiOBJ(5001,"Не удалось скопировать файл "_filearc_" в файл "_filetmp_".") quit
	 Set ok=##class(%File).Rename(filetmp,filereal)
	 if 'ok set ok=$$Error^%apiOBJ(5001,"Не удалось переименовать файл "_filetmp_" в файл "_filereal_".") quit
	 
     
 } catch(exeption) {
	 set ok=exeption.AsStatus()
	 Set stream=""
	 /*
	 if ($get(file)'="")&&(IsObject(file)) {
		 do file.Close()
	 }*/
 }
 if $get(glb)'="" kill @glb 
 
 quit ok
 
FormatResult(result)
 new p1,p2,len,i,pp
 if $isvalidnum(result) {
	 set p1=$piece(result,".",1),p2=$piece(result,".",2)
	 // .23->0.23 0.20->0.2, 1.0->1
     if (+p2'=0) {
	     set len=$length(p2)
	     for i=len:-1:1 set pp=$extract(p2,i) quit:pp'="0"  set p2=$extract(p2,1,len-1)
	     set result=$select(p1="":"0."_p2,p1="-":"-0."_p2,p2'="":p1_"."_p2,1:result)
     }
     if +p2=0 set result=+p1
 }
 set result=$tr(result,".",",")
 quit result
 
GetFileName(date)
 quit "lis_"_$zd(date,8) 

GetPathArcFile() 
 quit $get(^Settings("Unity","pathArcFile"))
   
GetPathRealFile()
 quit $get(^Settings("Unity","pathRealFile"))   
   
LogMessage(pMessage) public
{
	if $get(pMessage)="" quit
	;
	Set logdir=$ZUtil(12)_"LIS"
	Set fullpath=$ZUtil(12)_"LIS"_"\"_"unity.log"
	Set stream=##class(%FileCharacterStream).%New()
	Set stream.TranslateTable="CP1251"  
	Set stream.Filename=fullpath
	Set ok=stream.MoveToEnd()
	If ok Set ok=stream.WriteLine(pMessage)
	If ok Set ok=stream.SaveStream()
	If 'ok Quit
	Set stream=""

}  
]]></Routine>
</Export>
