<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="UnitTest.BiRLab.CT.PriceListVersionDetails">
<Super>UnitTest.TestCase</Super>
<TimeCreated>63348,56974.38342</TimeCreated>

<Method name="FindAnyObject">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pObject:BiRLab.CT.HospitalPaymentCategoryVersionPriority,&pHospital:%String,&pPayer:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject="",pHospital="",pPayer="",ok=$$$OK
	try {
		kill ^||d
		&sql(DECLARE cur CURSOR FOR
	                 SELECT TOP 10 ID	
	                 INTO :pricelistdetailid
	                 from BiRLab_CT.PriceListVersionDetails
	                 where PriceListVersion->PriceList=:pricelistid
	    )
   		&sql(DECLARE cur2 CURSOR FOR
	                 SELECT TOP 10 ID,HospitalPaymentCategory->PayerHospital->Payer->Code,HospitalPaymentCategory->PayerHospital->Hospital->Code,PriceList
	                 INTO :id,:payer,:hospital,:pricelistid
	                 from BiRLab_CT.HospitalPaymentCategoryVersion
	    )
	        
        &sql(OPEN cur2)
        set npp=0
        for {
	        &sql(FETCH cur2)
            if (SQLCODE'=0) {
	            quit
            } else {
	            set npp=npp+1
	            set ^||d(npp)=$lb(hospilal,payer,pricelistid)
            }
        }
        &sql(CLOSE cur2)
        if '$data(^||d) {
	            set ok=$$$ERROR($$$GeneralError,"Нет ни одного объекта класса BiRLab.CT.PriceListVersionDetails")
	            quit
        }

        set npp=""
        for {
	        set npp=$order(^||d(npp),1,rec) if npp="" quit
	        set hospital=$listget(rec,1)
	        set payer=$listget(rec,2)
	        set pricelistid=$listget(rec,3)
            &sql(OPEN cur)
            &sql(FETCH cur)
            set sqlcode=SQLCODE
            &sql(CLOSE cur)
                                  
            if (sqlcode = 0) {  //
	            set pHospital=hospital
	            set pPayer=payer
	            set pObject=##class(BiRLab.CT.PriceListVersionDetails).%OpenId(pricelistdetailid)
	            b  quit
            }
        }
        if (pHospital="")||(pPayer="")||('$IsObject(pObject)) {
	            set ok=$$$ERROR($$$GeneralError,"Нет ни одного объекта класса BiRLab_CT.HospitalPaymentCategoryVersion для выбранного pricelist")
        }
             
	} catch(e) {
		set ok=e.AsStatus()
		set pObject="",pHospital="",pPayer=""
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestUpdate">
<Implementation><![CDATA[
	#dim obj As BiRLab.CT.PriceListVersionDetails
	try {
		
		// поиск объекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority
        set obj=""
		set ok=..FindAnyObject(.obj,.hospital,.payer)
		do $$$AssertStatusOK(ok, "Нахождение какого-нибудь объекта класса BiRLab.CT.PriceListVersionDetails")
        set value=$IsObject(obj) 
        do $$$AssertNotEquals(value,1,"Нахождение какого-нибудь объекта класса BiRLab.CT.PriceListVersionDetails (проверка найденного объекта)")
        if ('ok)||(value'=1) {
	        do ..LogMessage("Дальнейшие тесты прекращены")
	        quit
        }
        
        // Создание нужного объекта класса TCLEx.Data.EPVisitNumberExt
		set objEPVisitNumberExt=""
		set episode=""
		set ok=##class(UnitTest.TCLEx.Data.EPVisitNumberExt).TestCreateObject(hospital,payer,.objEPVisitNumberExt,.episode)
		do $$$AssertStatusOK(ok, "Создание объекта класса TCLEx.Data.EPVisitNumberExt")
        if 'ok {
	        do ..LogMessage("Дальнейшие тесты прекращены")
	        quit
        }

        // тест объектного подхода
        kill ^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode)
        set price=obj.Price
		set obj.Price=price+1
		set ok=obj.%Save()
		do $$$AssertStatusOK(ok, "Сохрание объекта класса BiRLab.CT.PriceListVersionDetails после корректировки (объектный метод)")
		set value=$data(^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode))
		do $$$AssertEquals(value,1,"Создание ссылки в глобали ^SpeedI.DeltaP(""TCLEx.Data.EPVisitNumberExt"") (объектный метод)")
		
		// тест SQL подхода
		kill ^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode)
		set price=price-1
		set id=obj.%Id()
		&sql(UPDATE BiRLab_CT.PriceListVersionDetails (Price) VALUES (:price) WHERE ID=:id)
		set ok=1
		if SQLCODE'=0 {
			    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			         set ok=%objlasterror
		        }  else {
			         Set ok=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		        }
		}
		do $$$AssertStatusOK(ok, "Сохрание объекта класса BiRLab.CT.PriceListVersionDetails после корректировки (SQL метод)")
		set value=$data(^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode))
		do $$$AssertEquals(value,1,"Создание ссылки в глобали ^SpeedI.DeltaP(""TCLEx.Data.EPVisitNumberExt"") (SQL метод)")
		
        // Удаление созданного объекта класса TCLEx.Data.EPVisitNumberExt
		set ok=##class(UnitTest.TCLEx.Data.EPVisitNumberExt).TestDeleteObject(objEPVisitNumberExt)
		do $$$AssertStatusOK(ok, "Удаление объекта класса TCLEx.Data.EPVisitNumberExt")
		
	} catch(e) {
		throw e
	}
]]></Implementation>
</Method>
</Class>
</Export>
