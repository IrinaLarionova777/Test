<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="UnitTest.BiRLab.CT.HospitalPaymentCategoryVersionPriority">
<Super>UnitTest.TestCase</Super>
<TimeCreated>63348,51146.276871</TimeCreated>

<Method name="TestFindAnyObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>pObject:BiRLab.CT.HospitalPaymentCategoryVersionPriority</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject="",ok=$$$OK
	try {
		set id=""
		&sql(DECLARE cur CURSOR FOR
	                 SELECT TOP 1 ID
	                 INTO :id
	                 from BiRLab_CT.HospitalPaymentCategoryVersionPriority
	    )

        &sql(OPEN cur)
        &sql(FETCH cur)
                                  
        if (SQLCODE = 0) {
	        set pObject=##class(BiRLab.CT.HospitalPaymentCategoryVersionPriority).%OpenId(id)
        } else {
	        set ok=$$$ERROR($$$GeneralError,"Нет ни одного объекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority")
        }
        &sql(CLOSE cur)
        
	} catch(e) {
		set ok=e.AsStatus()
		set pObject=""
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestUpdate">
<Implementation><![CDATA[
	#dim obj As BiRLab.CT.HospitalPaymentCategoryVersionPriority
	try {
		
		// поиск обэекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority
        set obj=""
		set ok=..TestFindAnyObject(.obj)
		do $$$AssertStatusOK(ok, "Нахождение какого-нибудь объекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority")
        set value=$IsObject(obj) 
        do $$$AssertNotEquals(value,1, "Нахождение какого-нибудь объекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority (проверка найденного объекта)")
        if ('ok)||(value'=1) {
	        do ..LogMessage("Дальнейшие тесты прекращены")
	        quit
        }
        
        // Создание нужного объекта класса TCLEx.Data.EPVisitNumberExt
		set objEPVisitNumberExt=""
		set hospital=obj.HospitalPaymentCategoryVersion.HospitalPaymentCategory.PayerHospital.Hospital.Code
		set payer=obj.HospitalPaymentCategoryVersion.HospitalPaymentCategory.PayerHospital.Payer.Code
		set episode=""
		set ok=##class(UnitTest.TCLEx.Data.EPVisitNumberExt).TestCreateObject(hospital,payer,.objEPVisitNumberExt,.episode)
		do $$$AssertStatusOK(ok, "Создание объекта класса TCLEx.Data.EPVisitNumberExt")
        if 'ok {
	        do ..LogMessage("Дальнейшие тесты прекращены")
	        quit
        }

        // тест объектного подхода
        kill ^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode)
        set coef=obj.Coef
		set obj.Coef=coef+1
		set ok=obj.%Save()
		do $$$AssertStatusOK(ok, "Сохрание объекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority после корректировки (объектный метод)")
		set value=$data(^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode))
		do $$$AssertEquals(value,1,"Создание ссылки в глобали ^SpeedI.DeltaP(""TCLEx.Data.EPVisitNumberExt"") (объектный метод)")
		
		// тест SQL подхода
		kill ^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode)
		set coef=coef-1
		set id=obj.%Id()
		&sql(UPDATE BiRLab_CT.HospitalPaymentCategoryVersionPriority (Coef) VALUES (:coef) WHERE ID=:id)
		set ok=1
		if SQLCODE'=0 {
			    if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			         set ok=%objlasterror
		        }  else {
			         Set ok=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		        }
		}
		do $$$AssertStatusOK(ok, "Сохрание объекта класса BiRLab.CT.HospitalPaymentCategoryVersionPriority после корректировки (SQL метод)")
		set value=$data(^SpeedI.DeltaP("TCLEx.Data.EPVisitNumberExt",episode))
		do $$$AssertEquals(value,1,"Создание ссылки в глобали ^SpeedI.DeltaP(""TCLEx.Data.EPVisitNumberExt"") (SQL метод)")
		
        // Удаление созданного объекта класса TCLEx.Data.EPVisitNumberExt
		set ok=##class(UnitTest.TCLEx.Data.EPVisitNumberExt).TestDeleteObject(objEPVisitNumberExt)
		do $$$AssertStatusOK(ok, "Удаление объекта класса TCLEx.Data.EPVisitNumberExt")
		
	} catch(e) {
		throw e
	}
]]></Implementation>
</Method>
</Class>
</Export>
