<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="mt71" type="INT" languagemode="0"><![CDATA[
mt71  ; Compiled September 6, 1999 21:07:17 for Cache for Windows
delete(%rowid,%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%data(1)=%rowid,tupkill=1
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt71(.%edit) i SQLCODE s SQLCODE=-106 g gunlock
 d file
 g gunlock
insert(%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%edit=1
 d insertnw^mt71(+%check=1) i '%ok s SQLCODE=-104 q
winsert i $c(1)[%data(1),$g(%data(0))'="",$g(%data(3))'="" d
 . s %data(1)=$g(%data(0))_"||"_$g(%data(3))
 . d insertnw^mt71(+%check=1,0,1) i '%ok s SQLCODE=-104 q
 s %ROWID=%data(1)
 d:%check'["nolock" glock q:SQLCODE
 d:%check uniqfile(-104) i '%ok s SQLCODE=-104 g gunlock
 i +%check d required^mt71 i '%ok s SQLCODE=-108 g gunlock
 d file
 g gunlock
update(%rowid,%check,%copyedi) n icol,ir,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1
 i '%copyedi f icol=0:1:3 k:'$d(%edit(icol)) %data(icol)
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt71(.%edit) i SQLCODE s SQLCODE=-109 g gunlock
 f icol=0:1:3 i '$d(%data(icol)),$d(%edit(icol)) s %data(icol)=%edit(icol) d:$d(%edit(icol,1))  k %edit(icol)
 . f ir=1:1:%edit(icol) s %data(icol,ir)=%edit(icol,ir)
 d uniqfile(-105) i '%ok s SQLCODE=-105 g gunlock
 d updatenw^mt71(%check) i '%ok s SQLCODE=-105 g gunlock
 i +%check d required^mt71 i '%ok s SQLCODE=-108 g gunlock
 d file
 g gunlock
lock(%ROWID)   ;  user entry
glock q:$c(1)[%ROWID
 l +^SSU("SSGRP",$p(%ROWID,"||",1,1),"SSGMF",$p(%ROWID,"||",2,2)):5 e  s SQLCODE=-110
 q
unlock(%ROWID)   ;  user entry
gunlock q:%check["nolock"
 q:$c(1)[%ROWID
 l -^SSU("SSGRP",$p(%ROWID,"||",1,1),"SSGMF",$p(%ROWID,"||",2,2))
 q
file n subs,tempn,irep,x,node,sn s %file=1,sn=0,subs(28)=$p(%data(1),"||",1,1)
 i $g(tupkill) k ^SSU("SSGRP",subs(28),"SSGMF",%edit(3))
 g:$g(tupkill) maps
 s:$g(%edit) tempn=""
 i 'sn,$d(tempn)=1 s ^SSU("SSGRP",subs(28),"SSGMF",%data(3))=""
maps q
%0Ao n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val  ;  Code for update (get old values) of table: SS_GroupMFunctions
 s %mmmsqlE=$zt,$zt="%0Aerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%rowid,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$E(%rowid,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(7)=$p($g(%mmmsqld(3)),"||",1,1),%dataold(3)=$p($g(%mmmsqld(3)),"||",2,2)
 s %dataold(1)=$g(%mmmsqld(3))
 i %mmmsqld(7)'="",%dataold(3)'="",$d(^SSU("SSGRP",%mmmsqld(7),"SSGMF",%dataold(3)))
 e  g %0ABdun
 s %dataold(0)=$p(%dataold(1),"||",1,1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ac
%0ABdun 
%0AAdun 
%0Ac q
%0Aerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0AAdun
getold(%dataold) g %0Ao
lookupB d %RSBcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",5),1,$zposition(%datars(2)_$j("",5),5))_"  "_$e(%datars(3)_$j("",30),1,$zposition(%datars(3)_$j("",30),30))
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupB
%RSBcuro s SQLCODE=$s($g(%RSBcurc):-101,1:0) q:SQLCODE'=0
 s %RSBcurc=1 k %RSBcurm
 s %RSBcurE=$zt,%RSBcurf=0,%RSBcure=0,%RSBcurL=""
 s %RSBcurd(8)=$P(%data(0),$C(1)),%RSBcurd(9)=$P(%data(3),$C(1))
 s:%RSBcurd(8)="" %RSBcurd(8)=$E(%data(0),2,999)
 s:%RSBcurd(9)="" %RSBcurd(9)=$E(%data(3),2,999)
 l +^mtemp s %RSBcurt(1)=$zp(^mtemp(" "))+1,^(%RSBcurt(1))="" l -^mtemp
 q
%0Bfirst   ;  init
 k ^mtemp(%RSBcurt(1),0)
 ; asl MOD# 3
 d %0BBMod
 s %RSBcurs(2)=""
%0BCk1 s %RSBcurs(2)=$o(^mtemp(%RSBcurt(1),0,%RSBcurs(2)))
 i %RSBcurs(2)="" g %0BCdun
 s %datars(2)=$s(%RSBcurs(2)=" ":"",1:%RSBcurs(2))
 s %RSBcurs(1)=""
%0BCk2 s %RSBcurs(1)=$o(^mtemp(%RSBcurt(1),0,%RSBcurs(2),%RSBcurs(1)))
 i %RSBcurs(1)="" g %0BCk1
 s %datars(1)=$s(%RSBcurs(1)=" ":"",1:%RSBcurs(1))
 s %RSBcurd(14)=$p($g(%datars(1)),"||",1,1),%datars(2)=$p($g(%datars(1)),"||",2,2)
 i %RSBcurd(14)'="",%datars(2)'="",$d(^SSU("SSGRP",%RSBcurd(14),"SSGMF",%datars(2)))
 e  g %0BCk2
 s %RSBcurd(7)=$p(%datars(1),"||",1,1)
 s %RSBcurd(15)=$p($g(%datars(2)),"||",1,1)
 s %RSBcurd(11)=$g(%datars(2))
 i %RSBcurd(15)'="",$d(^SS("SSMFS",%RSBcurd(15)))
 i '$t
 e  i 1>%RSBcurd(15),%RSBcurd(15)=+%RSBcurd(15)
 i  s (%RSBcurd(11),%datars(3))="" g %0BCp2
 s %RSBcurn=$g(^SS("SSMFS",%RSBcurd(15)))
 s %datars(3)=$p(%RSBcurn,"^",1)
%0BCp2 
 s SQLCODE=0 s:SQLCODE=0 %RSBcurf=%RSBcurf+1 s %RSBcurc=10 q
%RSBcurf i '$g(%RSBcurc) s SQLCODE=-102 q
 i %RSBcurc=100 s SQLCODE=100 q
 s $zt="%0Berr^"_$zn s $ze="" n %val g %0Bfirst:%RSBcurc=1
 g %0BCk2
%0BCdun 
%0BAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSBcurc=100 q
%RSBcurc i '$g(%RSBcurc) s SQLCODE=-102 q
 f %RSBcurt=1:1:1 k ^mtemp(%RSBcurt(%RSBcurt))
 k %RSBcurc,%RSBcurd,%RSBcure,%RSBcurE,%RSBcurf,%RSBcurl,%RSBcurL,%RSBcurn,%RSBcurr,%RSBcurR,%RSBcurs,%RSBcurt s SQLCODE=0 q
%0Berr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSBcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0BAdun
%0BBMod ; asl MOD# 2
 n %RSBcurn  ; Nested NEWing for Subquery...
 s %RSBcurd(12)=""
%0BBk1 s %RSBcurd(12)=$o(^SSU("SSGRP",%RSBcurd(12)))
 i %RSBcurd(12)="" g %0BBdun
 s %RSBcurd(13)=""
%0BBk2 s %RSBcurd(13)=$o(^SSU("SSGRP",%RSBcurd(12),"SSGMF",%RSBcurd(13)))
 i %RSBcurd(13)="" g %0BBk1
 s %datars(1)=(%RSBcurd(12))_"||"_(%RSBcurd(13))
 s %datars(2)=$p(%datars(1),"||",2),%RSBcurd(7)=$p(%datars(1),"||",1,1)
 g:'((%RSBcurd(7))=(%RSBcurd(8))) %0BBk2
 g:'((%datars(2))=(%RSBcurd(9))) %0BBk2
 s %RSBcurs(2)=$s(%datars(2)'="":%datars(2),1:" "),%RSBcurs(1)=$s(%datars(1)'="":%datars(1),1:" "),^mtemp(%RSBcurt(1),0,%RSBcurs(2),%RSBcurs(1))=""
 g %0BBk2
%0BBdun 
 q
lookupC d %RSCcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",5),1,$zposition(%datars(2)_$j("",5),5))_"  "_$e(%datars(3)_$j("",30),1,$zposition(%datars(3)_$j("",30),30))
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupC
%RSCcuro s SQLCODE=$s($g(%RSCcurc):-101,1:0) q:SQLCODE'=0
 s %RSCcurc=1 k %RSCcurm
 s %RSCcurE=$zt,%RSCcurf=0,%RSCcure=0,%RSCcurL=""
 s %RSCcurd(8)=$P(%data(0),$C(1))
 s:%RSCcurd(8)="" %RSCcurd(8)=$E(%data(0),2,999)
 l +^mtemp s %RSCcurt(1)=$zp(^mtemp(" "))+1,^(%RSCcurt(1))="" l -^mtemp
 q
%0Cfirst  s %RSCcurd(13)=""
 k ^mtemp(%RSCcurt(1),0)
 d %0CBMod
 ; asl MOD# 3
 s %RSCcurs(2)=""
%0CCk1 s %RSCcurs(2)=$o(^mtemp(%RSCcurt(1),0,%RSCcurs(2)))
 i %RSCcurs(2)="" g %0CCdun
 s %datars(2)=$s(%RSCcurs(2)=" ":"",1:%RSCcurs(2))
 s %RSCcurs(13)=""
%0CCk2 s %RSCcurs(13)=$o(^mtemp(%RSCcurt(1),0,%RSCcurs(2),%RSCcurs(13)))
 i %RSCcurs(13)="" g %0CCk1
 s %RSCcurd(13)=$s(%RSCcurs(13)=" ":"",1:%RSCcurs(13))
 s %RSCcurn=$g(^mtemp(%RSCcurt(1),0,%RSCcurs(2),%RSCcurd(13)))
 s %datars(1)=$p(%RSCcurn,"|~|",1) s %datars(3)=$p(%RSCcurn,"|~|",2)
 s SQLCODE=0 s:SQLCODE=0 %RSCcurf=%RSCcurf+1 s %RSCcurc=10 q
%RSCcurf i '$g(%RSCcurc) s SQLCODE=-102 q
 i %RSCcurc=100 s SQLCODE=100 q
 s $zt="%0Cerr^"_$zn s $ze="" n %val g %0Cfirst:%RSCcurc=1
 g %0CCk2
%0CCdun 
%0CAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSCcurc=100 q
%RSCcurc i '$g(%RSCcurc) s SQLCODE=-102 q
 f %RSCcurt=1:1:1 k ^mtemp(%RSCcurt(%RSCcurt))
 k %RSCcurc,%RSCcurd,%RSCcure,%RSCcurE,%RSCcurf,%RSCcurl,%RSCcurL,%RSCcurn,%RSCcurr,%RSCcurR,%RSCcurs,%RSCcurt s SQLCODE=0 q
%0Cerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSCcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0CAdun
%0CBMod ; asl MOD# 2
 n %RSCcurn  ; Nested NEWing for Subquery...
 s %RSCcurd(11)=""
%0CBk1 s %RSCcurd(11)=$o(^SSU("SSGRP",%RSCcurd(11)))
 i %RSCcurd(11)="" g %0CBdun
 s %RSCcurd(12)=""
%0CBk2 s %RSCcurd(12)=$o(^SSU("SSGRP",%RSCcurd(11),"SSGMF",%RSCcurd(12)))
 i %RSCcurd(12)="" g %0CBk1
 s %datars(1)=(%RSCcurd(11))_"||"_(%RSCcurd(12))
 s %datars(2)=$p(%datars(1),"||",2),%RSCcurd(7)=$p(%datars(1),"||",1,1)
 g:'((%RSCcurd(7))=(%RSCcurd(8))) %0CBk2
 s %RSCcurd(14)=$p($g(%datars(2)),"||",1,1)
 s %RSCcurd(10)=$g(%datars(2))
 i %RSCcurd(14)'="",$d(^SS("SSMFS",%RSCcurd(14)))
 i '$t
 e  i 1>%RSCcurd(14),%RSCcurd(14)=+%RSCcurd(14)
 i  s (%RSCcurd(10),%datars(3))="" g %0CBp2
 s %RSCcurn=$g(^SS("SSMFS",%RSCcurd(14)))
 s %datars(3)=$p(%RSCcurn,"^",1)
%0CBp2 
 s %RSCcurs(2)=$s(%datars(2)'="":%datars(2),1:" "),%RSCcurd(13)=%RSCcurd(13)+1,%RSCcurn="",$p(%RSCcurn,"|~|",1)=%datars(1),$p(%RSCcurn,"|~|",2)=%datars(3),^mtemp(%RSCcurt(1),0,%RSCcurs(2),%RSCcurd(13))=%RSCcurn
 g %0CBk2
%0CBdun 
 q
selitmC  ; entry point to select the Row Selection Item
 i $c(1)'[$g(%data(3)) s item=1 q
 s item=0 f  s item=$o(%data(item)) q:item=""  i $c(1)'[%data(item) s item=1 q
 s item=$s(item=1:"",1:2) q
 s item="" q
%mdiag(oper,sqlcode,class,subclass,field,cursor,%msg) ; diagnostics for sql operations
 i '$d(%mdiag) s $p(%mdiag,$c(1),2,3)="NO"_$c(1)_oper
 i ($p(%mdiag,$c(1))+1)>10 s $p(%mdiag,$c(1),2)="YES" q
 s $p(%mdiag,$c(1))=$p(%mdiag,$c(1))+1,%mdiag($p(%mdiag,$c(1)))=$g(sqlcode)_$c(1)_$g(class)_$c(1)_$g(subclass)_$c(1)_"SS_GroupMFunctions"_$c(1)_$g(field)_$c(1)_$g(cursor)_$c(1)_$g(%msg) q
 ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
required ; Entry point to check the required fields
 n %lang,%oper k %mdiag s %msg="",%ok=1,%oper=$s($g(%edit):"INSERT",1:"UPDATE"),%lang=$p($g(%msql),$c(1),5) s:'%lang %lang=1
 i $c(1,1)[$g(%data(3)) s %ok="Des Ref to SSMFS" d %mdiag(%oper,-106,"Fld Int","Req","SSGMF_MFunction_DR","",%ok) s %msg=%ok,%ok=0
 i $c(1,1)[$g(%data(1)) s %ok="SSGMF Row Id" d %mdiag(%oper,-106,"Fld Int","Req","SSGMF_RowId","",%ok) s %msg=%ok,%ok=0
 i $c(1,1)[$g(%data(0)) s %ok="SSGRP Parent Reference" d %mdiag(%oper,-106,"Fld Int","Req","SSGMF_SSGRP_ParRef","",%ok) s %msg=%ok,%ok=0
 q
inf0 ; get value for field SSGMF_SSGRP_ParRef
 i $c(1)'[$g(%data(0)),$p(%data(0),$c(1))="" s %val=$p(%data(0),$c(1),2) g ine0
 i $c(1)'[$g(%data(0)) s %val=$p(%data(0),$c(1)) g ini0
 i $c(1)'[$g(%insert(0)),$p(%insert(0),$c(1))="" s %val=$p(%insert(0),$c(1),2) g ine0
 i $c(1)'[$g(%insert(0)) s %val=$p(%insert(0),$c(1)) g ini0
 s %val=$g(da770)
ine0 ; external to internal conversion code for field SSGMF_SSGRP_ParRef
ini0 ; internal validation code and uniqueness, also int-ext
 d fdv0^mt71 q:'%ok
 s %data(0)=%val
 s:$c(1)[%data(0) %ok=0 s:%ok %edit(0)=""
 q
inf3 ; get value for field SSGMF_MFunction_DR
 i $c(1)'[$g(%data(3)),$p(%data(3),$c(1))="" s %val=$p(%data(3),$c(1),2) g ine3
 i $c(1)'[$g(%data(3)) s %val=$p(%data(3),$c(1)) g ini3
 i $c(1)'[$g(%insert(3)),$p(%insert(3),$c(1))="" s %val=$p(%insert(3),$c(1),2) g ine3
 i $c(1)'[$g(%insert(3)) s %val=$p(%insert(3),$c(1)) g ini3
 s %ok=0 q
ine3 ; external to internal conversion code for field SSGMF_MFunction_DR
ini3 ; internal validation code and uniqueness, also int-ext
 d fdv3^mt71 q:'%ok
 s %data(3)=%val
 s:$c(1)[%data(3) %ok=0 s:%ok %edit(3)=""
 q
rowiderr s %ok=0 q
insertnw(%check,iform,recheck) ; insert tuple for table SS_GroupMFunctions
 n %based,%call,%done,%i,%icol,%irep,%irepi,%oper,%val,db,rowerr
 s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),recheck=$g(recheck),%oper="INSERT",rowerr=0 k %mdiag
 i recheck s %val=$g(%data(1)) g inrwid
 i iform s redrawit=0,idexist=2
 i '$d(rptform) n rptform s rptform=0
 s %val=""
 i $c(1)'[$g(%data(1)),$p(%data(1),$c(1))="" s %val=$p(%data(1),$c(1),2) g inrwide
 i $c(1)'[$g(%data(1)) s %val=$p(%data(1),$c(1)) g inrwid
 i $c(1)'[$g(%insert(1)),$p(%insert(1),$c(1))="" s %val=$p(%insert(1),$c(1),2) g inrwide
 i $c(1)'[$g(%insert(1)) s %val=$p(%insert(1),$c(1)) g inrwid
 s %based=""
 d inf0 i '%ok g:'iform rowiderr s rowerr=1
 d inf3 i '%ok g:'iform rowiderr s rowerr=1
 s %val=$s(rowerr:"",1:$p(%data(0),$c(1))_"||"_$p(%data(3),$c(1))),%based=1 g inrwid
inrwide ; external to internal conversion for rowid
inrwid ; rowid in internal
 i 'rowerr d fdv1^mt71 i '%ok s rowerr=1 g rowiderr
 s %data(1)=%val
 i $c(1)[%data(1) g:'iform rowiderr s rowerr=1
 s:'$g(rowerr) %edit(1)=""
 ; set the based on fields if we did not calculate them
 ; based on already calculated and validated
 g:$g(%based) insarr
 s %val=$p(%data(1),"||",1) g:%val="" rowiderr d ini0 g:'%ok rowiderr
 s %val=$p(%data(1),"||",2) g:%val="" rowiderr d ini3 g:'%ok rowiderr
insarr q:$g(recheck)  ; entry point to spin through the %insert array
 s %icol=""
insloop s %icol=$o(%insert(%icol)) g insdef:%icol="",insloop:$d(%data(%icol))
 i ",1,0,3,"[(","_%icol_",") g insloop
 s %data(%icol)=%insert(%icol) s:+%check %edit(%icol)=""
 i $d(%insert(%icol))>9 g insrep
 g insloop
insrep ; entry point to work on repeating fields in the %insert array
 s %irep=0
insreplp s %irep=%irep+1 g:%irep>%insert(%icol) insloop
 s %data(%icol,%irep)=%insert(%icol,%irep) g insreplp
insdef ; entry point to compile all of the defaults
 d extint g:'%ok rowiderr:'iform i +%check=1 d validate g:'%ok rowiderr:'iform
 d intext^mt71
 g:+%check inscomp
insedit s %icol=""
insedlop s %icol=$o(%insert(%icol)) g inscomp:%icol="",insedlop:$d(%edit(%icol))!(",1,0,3,"[(","_%icol_",")) s %edit(%icol)="" g insedlop
inscomp ; entry point to calculate all computed fields
 s %data=%data(1) s:$g(iform) %ok=1 q
etiok i '%ok,'$d(%edit(%icol)) k %data(%icol) s %ok=1 q
 i '%ok s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
 s $p(%data(%icol),$c(1))=%val q
etiokrp i '%ok k %data(%icol,%irep) s %ok=1 q
 s $p(%data(%icol,%irep),$c(1))=%val q
etivalen s %irepi=0 f %irep=1:1:$g(%data(%icol)) i $d(%data(%icol,%irep)) s %irepi=%irepi+1,%data(%icol,%irepi)=%data(%icol,%irep)
 i '$g(%data(%icol))!%irepi s %data(%icol)=%irepi q
 k %data(%icol) q:'$d(%edit(%icol))
 f %irep=1:1:%edit(%icol) s %data(%icol,%irep)=%edit(%icol,%irep)
 s %data(%icol)=%edit(%icol) k %edit(%icol) q
extint s %ok=1 ; entry point to do all external to internal conversion code
 i $d(%data(3)),$p(%data(3),$c(1))="",$p(%data(3),$c(1),2)'="" s %val=$p(%data(3),$c(1),2) s %data(3)=%val
 i $d(%data(1)),$p(%data(1),$c(1))="",$p(%data(1),$c(1),2)'="" s %val=$p(%data(1),$c(1),2) s %data(1)=%val
 i $d(%data(0)),$p(%data(0),$c(1))="",$p(%data(0),$c(1),2)'="" s %val=$p(%data(0),$c(1),2) s %data(0)=%val
 q
fdv0 ; DO validation and additional validation code
 n nval s nval=%val d %0Ho
  i SQLCODE'=0 s %ok=0
 q
%0HAr1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num
 q  
%0HBs1 i %val'=+%val s %val=""
 e  s %val=$fn(%val,"")
 q
%0Ho n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Herr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(nval,$C(1))
 i %mmmsqld(2)="",$L(nval)>1 s %val=$E(nval,2,999) d %0HAr1 s %mmmsqld(2)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s $P(%mmmsqld(1),$C(1))=$g(%mmmsqld(2))
 i $P(%mmmsqld(1),$C(1))'="",$d(^SSU("SSGRP",$P(%mmmsqld(1),$C(1))))
 e  g %0HBdun
 
 s %val=$P(%mmmsqld(1),$C(1)) d %0HBs1:%val'="" s $P(%mmmsqld(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Hc
%0HBdun 
%0HAdun 
%0Hc q
%0Herr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0HAdun
fdv1 ; DO field validation (ALL of it)
 s %ok=1 s:'$$uniq1($g(%data(1)),%val) %ok=0,%msg=$$setmsg^%qarzst("UniqueQ") q
fdv3 ; DO validation and additional validation code
 n nval s nval=%val d %0Eo
  i SQLCODE'=0 s %ok=0
 q
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Eerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(nval,$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$E(nval,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(4)=$p($g(%mmmsqld(2)),"||",1,1)
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(4)'="",$d(^SS("SSMFS",%mmmsqld(4)))
 i '$t
 e  i 1>%mmmsqld(4),%mmmsqld(4)=+%mmmsqld(4)
 i  g %0EBdun
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ec
%0EBdun 
%0EAdun 
%0Ec q
%0Eerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0EAdun
uniq1(%rowid,%unique) n SQLCODE,%val d %0Fo q SQLCODE=100
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%unique,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$E(%unique,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(5)=$p($g(%mmmsqld(3)),"||",1,1),%mmmsqld(6)=$p($g(%mmmsqld(3)),"||",2,2)
 s %mmmsqld(1)=$g(%mmmsqld(3))
 i %mmmsqld(5)'="",%mmmsqld(6)'="",$d(^SSU("SSGRP",%mmmsqld(5),"SSGMF",%mmmsqld(6)))
 e  g %0FBdun
 s %mmmsqld(2)=%mmmsqld(1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Fc
%0FBdun 
%0FAdun 
%0Fc q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
uniqfile(%sqcode) k %mdiag
 i %sqcode=-104,%ok,$c(1)'[$g(%data(1)),'$$uniq1($g(%data(1)),$g(%data(1))) s %ok="SSGMF_RowId"_": "_$$setmsg^%qarzst("UniqueQ") d %mdiag("",%sqcode,"","","SSGMF_RowId","",%ok)
 q
valok i %ok s $p(%data(%icol),$c(1))=%val q
 s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
valokrp i %ok s $p(%data(%icol,%irep),$c(1))=%val q
 k %data(%icol,%irep) s %ok=1 q
validate s %ok=1 ; entry point to do all validation code
 i $d(%edit(3)),%data(3)'=%edit(3) s %icol=3 s %val=$p(%data(3),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv3 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSGMF_MFunction_DR","",$g(%msg))
 i $d(%edit(1)),%data(1)'=%edit(1) s %icol=1 s %val=$p(%data(1),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSGMF_RowId","",$g(%msg))
 i $d(%edit(0)),%data(0)'=%edit(0) s %icol=0 s %val=$p(%data(0),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv0 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSGMF_SSGRP_ParRef","",$g(%msg))
 q
intext ; entry point to do all internal to external conversion code
 i $d(%data(3)),%data(3)[$c(1) s %data(3)=$s($p(%data(3),$c(1))'="":$p(%data(3),$c(1)),1:$p(%data(3),$c(1),2))
 i $d(%data(1)),%data(1)[$c(1) s %data(1)=$s($p(%data(1),$c(1))'="":$p(%data(1),$c(1)),1:$p(%data(1),$c(1),2))
 i $d(%data(0)),%data(0)[$c(1) s %data(0)=$s($p(%data(0),$c(1))'="":$p(%data(0),$c(1)),1:$p(%data(0),$c(1),2))
 q
updatenw(%check,iform) n %i,%icol,%irep,%irepi,%oldval,%oper,%val,db s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),%oper="UPDATE" k %mdiag
 d:%check'=2 extint g:'%ok rowiderr:'iform i %check=1 d validate g:'%ok rowiderr:'iform
 d:%check'=2 intext^mt71 q:'%ok
 q
 g ^mt72
UPPER(val) d:'$d(%trans) %trans^%qarztrm q $tr(val,%trans(3),%trans(4))
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
]]></Routine>
</Export>
