<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="epr.Log">
<Description>
used to log routine data and calls
can be switched on/off using ^zEPR("Control")</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>60218,47094.147726</TimeCreated>

<Method name="Add">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[ID1:%Library.String,ID2:%Library.String="",&Array:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Stream</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; ID1 - main class	(required)
 ; ID2 - sub-class	(not required)
 ; Array - strings to be logged
 ;
 n dttm,strix,user,ix
 ;
 ; quit if we're not logging these IDs
 q:'$g(^zTRAK("EPR","Log","Control","ValidClass")) "No logging"
 q:'$g(^zTRAK("EPR","Log","Control","ValidClass",ID1)) ID1_" not currently logged"
 i ID2'="",'$g(^zTRAK("EPR","Log","Control","ValidClass",ID1,ID2)) q ID1_", "_ID2_" not currently logged"
 i ID2="" s ID2="_"
 ;
 s dttm=(+$h*86400)+$p($h,",",2)
 i $d(%session) {
 s user=%session.Get("LOGON.USERID")
 } else {
 s user=""
 }	
 s strix="",ix=0
 ;s ^zTRAK("EPR","Log","Data",ID1,ID2,dttm,0)=user
 ;s ^zTRAK("EPR","Log","Index","DateTime",dttm,ID1,ID2)=""
 f  s strix=$o(Array(strix)) q:strix=""  d
 . s ix=ix+1
 . ;s ^zTRAK("EPR","Log","Data",ID1,ID2,dttm,ix)=Array(strix)
 ;
 ; try and cleanup only if no-one's cleaned up in the last 2 days
 i $g(^zTRAK("EPR","Log","Control","Cleanup","LastRun"))<($h-1) d
 . ;s ^zTRAK("EPR","Log","Control","Cleanup","LastRun")=+$h
 . j Cleanup
 ;
 ; quit with null if OK...
 q ""
 ;
Cleanup ;
 n days,dttm,id1,id2
 s days=$g(^zTRAK("EPR","Log","Control","Cleanup","DaysOld"),10)
 s days=($h-days)*86400
 s dttm="" f  s dttm=$o(^zTRAK("EPR","Log","Index","DateTime",dttm)) q:dttm=""  q:(dttm'<days)  d
 . s id1="" f  s id1=$o(^zTRAK("EPR","Log","Index","DateTime",dttm,id1)) q:id1=""  d
 . . s id2="" f  s id2=$o(^zTRAK("EPR","Log","Index","DateTime",dttm,id1,id2)) q:id2=""  d
 . . . k ^zTRAK("EPR","Log","Data",ID1,ID2,dttm),^zTRAK("EPR","Log","Index","DateTime",dttm,id1,id2)
 q


]]></Implementation>
</Method>

<Method name="ViewLogClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>ViewLogFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 k ^TMP("web",$j)
 s QHandle=""
 ;
 Quit $$$OK


]]></Implementation>
</Method>

<Method name="ViewLogExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,LogClass:%Library.String="",LogSubClass:%Library.String="",DateFrom:%Library.String="",DateTo:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; 'user' search values, 'work' current values, 
 n user,work,class,subclass,date,dateto
 s class=LogClass
 s subclass=LogSubClass
 s date=(DateFrom*86400)-1
 s dateto=DateTo*86400
 s cnt=0
 k ^TMP("web",$j)
 ;
 i DateFrom="" d
 . ; go back one, in case we only want 1 'class'
 . i LogClass'="" s class=$o(^zTRAK("EPR","Log","Data",LogClass),-1)
 . f  s class=$o(^zTRAK("EPR","Log","Data",class)) q:class=""  q:$e(class,1,$l(LogClass))'=LogClass  d
 . . i LogSubClass'="" s subclass=$o(^zTRAK("EPR","Log","Data",LogClass,LogSubClass),-1)
 . . f  s subclass=$o(^zTRAK("EPR","Log","Data",class,subclass)) q:subclass=""  q:(($e(subclass,1,$l(LogSubClass))'=LogSubClass)&(LogSubClass'=""))  d
 . . . f  s date=$o(^zTRAK("EPR","Log","Data",class,subclass,date)) q:date=""  q:((date'<dateto)&(dateto'=0))  d
 . . . . d Add(class,subclass,date)
 i DateFrom'="" d
 . f  s date=$o(^zTRAK("EPR","Log","Index","DateTime",date)) q:date=""  q:((date'<dateto)&(dateto'=0))  d
 . . i LogClass'="" s class=$o(^zTRAK("EPR","Log","Index","DateTime",date,LogClass),-1)
 . . f  s class=$o(^zTRAK("EPR","Log","Index","DateTime",date,class)) q:class=""  q:$e(class,1,$l(LogClass))'=LogClass  d
 . . . i LogSubClass'="" s subclass=$o(^zTRAK("EPR","Log","Index","DateTime",date,LogClass,LogSubClass),-1)
 . . . f  s subclass=$o(^zTRAK("EPR","Log","Index","DateTime",date,class,subclass)) q:subclass=""  q:(($e(subclass,1,$l(LogSubClass))'=LogSubClass)&(LogSubClass'=""))  d
 . . . . d Add(class,subclass,date)
 ;
 s user=$lb("")
 s work=$lb("")
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
 ;
Add(class,subclass,date)
 n ix,list,dt,tm
 s cnt=cnt+1
 s ix=0 f  s ix=$o(^zTRAK("EPR","Log","Data",class,subclass,date,ix)) q:ix=""  s $li(list,ix)=^zTRAK("EPR","Log","Data",class,subclass,date,ix)
 s dt=(date\86400),tm=(date#86400)
 i subclass="_" s subclass=""
 s ^TMP("web",$j,"Data",cnt)=$lb(class,subclass,dt,tm,list)
 q

]]></Implementation>
</Method>

<Method name="ViewLogFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>ViewLogExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n cnt
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 s cnt=$li(work,1)
 ;
 ;
 s cnt=$o(^TMP("web",$j,"Data",cnt))
 i cnt="" s Row="" q $$$OK
 ;
 s $li(work,1)=cnt
 ;
 s Row=^TMP("web",$j,"Data",cnt)
 ;
 s QHandle=$lb(AtEnd,user,work)
 q $$$OK
]]></Implementation>
</Method>

<Query name="ViewLog">
<Type>%Library.Query</Type>
<FormalSpec>LogClass:%String,LogSubClass,DateFrom,DateTo</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery/>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="LogClass:%String,LogSubClass:%String,LogDate:%Date,LogTime:%Time,LogStrings:%List"/>
</Query>
</Class>
</Export>
