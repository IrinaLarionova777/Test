<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBCTTS1" type="INT" languagemode="0" generated="1"><![CDATA[
LVBCTTS1 ; IG 1/5/98 ;MVB Control code access for CT_TestSet
 ;
 ; supported calls:
 ;
 ; $$open^LVBCTTS1(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBCTTS1(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBCTTS1(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBCTTS1(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBCTTS1()
 ; $$getall^LVBCTTS1()
 ; $$save^LVBCTTS1()
 ; $$check^LVBCTTS1(list)
 ;
check(list) n (list,PLIST) s list=$g(list),(result1,result2)="" k ^TMP($zn,$j,"check")
 f j1=1:1:$l(list,",") s x1=$p(list,",",j1) d
 .i $e(x1)=" " s x1=$e(x1,2,$l(x1))
 .i $e(x1,$l(x1))=" " s x1=$e(x1,1,$l(x1)-1)
 .i x1'["[" s ^TMP($zn,$j,"check",0,x1)="" q
 .s x2=$p($p(x1,"[",2),"]",1) f j2=1:1:$l(x2," ") s x3=$p(x2," ",j2) i $l(x3) s ^TMP($zn,$j,"check",0,x3)=""
 s ts="" f  s ts=$o(^TMP($zn,$j,"check",0,ts)) q:ts=""  d
 .i '$$selskip^LVBCTTS(ts) d  q
 ..s ^TMP($zn,$j,"check",0,ts)="Y"
 ..s syn=$s($l(PLIST(4)):PLIST(4),1:PLIST(2)) s ^TMP($zn,$j,"check",1,syn,ts)=""
 .i $d(^TTAB("SY",ts,"TS")) d  q
 ..s ts1="" f  s ts1=$o(^TTAB("SY",ts,"TS",ts1)) q:ts1=""  d
 ...s ^TMP($zn,$j,"check",1,ts,ts1)=""
 ...s ^TMP($zn,$j,"check",0,ts1)="Y"
 .s ^TMP($zn,$j,"check",1,ts,ts)=""
 s syn="" f  s syn=$o(^TMP($zn,$j,"check",1,syn)) q:syn=""  d
 .s ts="" f x=0:1 s ts=$o(^TMP($zn,$j,"check",1,syn,ts)) q:ts=""  d
 ..i $g(^TMP($zn,$j,"check",0,ts))="Y" d  q
 ...i 'x s result1=result1_$s($l(result1):" , ",1:"")_syn_"["
 ...i x s result1=result1_$s($l(result1):" ",1:"")
 ...s result1=result1_ts
 ...i $o(^TMP($zn,$j,"check",1,syn,ts))=""  s result1=result1_"]"
 ...s result2=result2_$s($l(result2):",",1:"")_ts
 ..s result1=result1_$s($l(result1):" , ",1:"")_"<"_syn_">"
 k PLIST s PLIST(1)=result2,PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j,"check")
 q result1
 ; Open the cursor
open(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) i $$getall()
 k ^TMP($zn,$j,0) f j=1:1:PLIST s ^TMP($zn,$j,0,j)=PLIST(j)
 s ^TMP($zn,$j,0)=""
 Q 0
 ;
 ; Fetch the data
fetch(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) K PLIST s SQLCODE=100
 s line=$g(^TMP($zn,$j,0)),line=$o(^TMP($zn,$j,0,line)) i $l(line) d
 .s SQLCODE=0
 .k PLIST f j=1:1:3 s PLIST(j)=$p(^(line),"^",j)
 .s PLIST=$o(PLIST(""),-1)
 .s ^TMP($zn,$j,0)=line
 S PLIST=$o(PLIST(""),-1) 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) k ^TMP($zn,$j,1)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch() q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,1,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,1,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j,1) k ^TMP($zn,$j,1)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) N (PLIST) k ^TMP($zn,$j,1)
 i $$open()
 f cnt=1:1 Q:$$fetch()  s ^TMP($zn,$j,1,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,1,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j,1)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j,1)
 q 0
 ;
 ; Close the cursor 
close() k ^TMP($zn,$j,0)
 q 0
 ;
getall() n (PLIST) K ^TMP($zn,$j,"getall")
 i $$open^LVBCTTS(,,,,"Y")
 f  q:$$fetch^LVBCTTS(,,,,"Y")  d
 .s group=0 i $l(PLIST(10)) d
 ..f j=1:1:$l(PLIST(10),",") s x=$p(PLIST(10),",",j) i $l(x),$l($g(^TMP($zn,$j,"getall",0,x))) s group=^TMP($zn,$j,"getall",0,x) q
 ..i 'group s group=$o(^TMP($zn,$j,"getall",1,""),-1)+1
 ..s ^TMP($zn,$j,"getall",0,PLIST(2))=group
 ..s ^TMP($zn,$j,"getall",1,group)=PLIST(68)
 ..s ^TMP($zn,$j,"getall",1,group,PLIST(2))=PLIST(4)
 i $$close^LVBCTTS()
 s group="" f cnt=1:1 s group=$o(^TMP($zn,$j,"getall",1,group)) q:group=""  d
 .s time=^(group)
 .s (list,ts)="" f  s ts=$o(^TMP($zn,$j,"getall",1,group,ts)) q:ts=""  s xx=^(ts),list=list_$s($l(list):",",1:"")_ts
 .k PLIST
 .s $p(^TMP($zn,$j,"getall",2,cnt),"^",3)=time
 .s $p(^TMP($zn,$j,"getall",2,cnt),"^",2)=$$check(list)
 .s $p(^TMP($zn,$j,"getall",2,cnt),"^",1)=PLIST(1)
 k PLIST M PLIST=^TMP($zn,$j,"getall",2)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j,"getall")
 q 0
save() n (PLIST) k ^TMP($zn,$j) m ^TMP($zn,$j,0)=PLIST
 s cnt="" f  s cnt=$o(^TMP($zn,$j,0,cnt)) q:cnt=""  s xx1=$p(^(cnt),"\",1),xx2=$p(^(cnt),"\",2) d
 .f j=1:1:$l(xx1,",") s ts=$p(xx1,",",j) i $l(ts) s ^TMP($zn,$j,1,cnt,ts)=xx2
 s cnt="" f  s cnt=$o(^TMP($zn,$j,1,cnt)) q:cnt=""  d
 .s ts1="" f  s ts1=$o(^TMP($zn,$j,1,cnt,ts1)) q:ts1=""  s xx2=^(ts1) d
 ..s (list,ts2)="" f  s ts2=$o(^TMP($zn,$j,1,cnt,ts2)) q:ts2=""  d
 ...i ts1'=ts2 s list=list_$s($l(list):",",1:"")_ts2
 ..s ^TMP($zn,$j,2,ts1)=list_"\"_xx2
 s ts="" f  s ts=$o(^TTAB("TS",ts)) q:ts=""  d
 .s list1=$p($g(^TMP($zn,$j,2,ts)),"\",1),list2=$p($g(^TMP($zn,$j,2,ts)),"\",2)
 .  ;---&SQL(UPDATE CT_TestSet SET CTTS_ReportGroup=:list1,CTTS_ReportGroupTime=:list2 WHERE CTTS_RowID=:ts)
  .  ;--- ** SQL PUBLIC Variables: SQLCODE, list1, list2, ts
 . Do %0Ao
 k ^TMP($zn,$j)
 q 0
%0Ao n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Aerr" s %mmmsqld(7)=0 s %mmmsqld(8)=""
 s %mmmsqld(2)=$g(list1),%mmmsqld(4)=$g(list2),%mmmsqld(6)=$g(ts)
 n %data
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(5)=%mmmsqld(6)
 i %mmmsqld(5)'="",$d(^TTAB("TS",%mmmsqld(5)))
 e  g %0ABdun
 s %mmmsqld(13)=$$%getlock^User.CTTestSet.T1(%mmmsqld(5)) i '%mmmsqld(13) s SQLCODE=-110 g %0Ac
 ; asl MOD# 3
 i %mmmsqld(5)'="",$d(^TTAB("TS",%mmmsqld(5)))
 e  g %0ACdun
 k %data
 s %data(10)=$g(%mmmsqld(2)),%data(68)=$g(%mmmsqld(4))
 d %update^User.CTTestSet.T1(%mmmsqld(5),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(7))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(13)=1 %ReleaseLock^User.CTTestSet.T1(%mmmsqld(5)) g %0Ac
%0ACdun 
 d:%mmmsqld(13)=1 %ReleaseLock^User.CTTestSet.T1(%mmmsqld(5)) g:SQLCODE<0 %0Ac
%0ABdun 
%0AAdun 
%0Ac s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(7)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(13))=1 %ReleaseLock^User.CTTestSet.T1(%mmmsqld(5)) g %0Ac
]]></Routine>
</Export>
