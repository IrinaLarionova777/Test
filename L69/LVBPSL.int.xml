<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBPSL" type="INT" languagemode="0" generated="1"><![CDATA[
LVBPSL ; IG 30/4/98 ;MVB Control code access for PSL_PackingSlip
 ;
 ; supported calls:
 ;
 ; $$receive^LVBPSL(ROWID)
 ; $$check^LVBPSL(ROWID)
 ; $$select^LVBPSL(ROWID,skip)
 ; $$open^LVBPSL(from,type,to,skip,pslip,mode,p6,p7,p8,p9)
 ; $$fetch^LVBPSL(from,type,to,skip,pslip,mode,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBPSL(from,type,to,skip,pslip,mode,p6,p7,p8,p9)
 ; $$fetchall^LVBPSL(from,type,to,skip,pslip,mode,p6,p7,p8,p9)
 ; $$close^LVBPSL()
 ; $$insert^LVBPSL()
 ; $$update^LVBPSL(ROWID)
 ; $$delete^LVBPSL(ROWID,Comments)
 ; $$getall^LVBPSL(from,type,to,pslip,mode)
 ; $$send^LVBPSL(type,from,toUS,toRL,slip)
 ;
  ;---&SQL(DECLARE PSL CURSOR FOR SELECT * FROM PSL_PackingSlip
   ;---         WHERE ((PSL_Sender_DR = :from) OR (:from IS NULL))
   ;---         AND ((PSL_ToType = :type) OR (:type IS NULL))
   ;---         AND ((PSL_Destination = :to) OR (:to IS NULL))
   ;---         AND ((PSL_Code = :pslip) OR (:pslip IS NULL)))
   ;--- ** SQL PUBLIC Variables: SQLCODE, from, pslip, to, type
 ; send ALL selected tests at once
send(type,from,toUS,toRL,slip) n (type,from,toUS,toRL,slip,PLIST) s type=$g(type),from=$g(from),toUS=$g(toUS),toRL=$g(toRL),slip=$g(slip),user=$$user^MVBSSUSR()
 k ^TMP($zn,$j) m ^TMP($zn,$j,0)=PLIST
 s x="" f  s x=$o(^TMP($zn,$j,0,x)) q:x=""  s vts=^(x),ep=$p(vts,"||") i $l(ep) s ^TMP($zn,$j,1,ep,vts)=""
 s ep="" f  s ep=$o(^TMP($zn,$j,1,ep)) q:ep=""  d
 .s vts="" f  s vts=$o(^TMP($zn,$j,1,ep,vts)) q:vts=""  d
 ..k PLIST
 ..f j=1:1:21 s PLIST(j)=""
 ..s PLIST(3)=from
 ..s PLIST(4)=toUS
 ..s PLIST(5)=toRL
 ..s PLIST(8)=slip
 ..i type="S" d
 ...s PLIST(9)=+$h
 ...s PLIST(10)=$p($h,",",2)
 ...s PLIST(11)=user
 ..s PLIST(12)=type
 ..s PLIST(20)=vts
 ..s PLIST(21)="***EMPTY***"
 ..i $$save^LVBVISMV(ep,type)
 k ^TMP($zn,$j),PLIST
 q 0
receive(RowID)     n (RowID,PLIST) s RowID=$g(RowID),user=$$user^MVBSSUSR()
 k ^TMP($zn,$j,0) m ^TMP($zn,$j,0)=PLIST
 s x="" f  s x=$o(^TMP($zn,$j,0,x)) q:x=""  s vts=^(x) i $l(vts) s ^TMP($zn,$j,1,vts)=""
 f j=1:1:4 s @("x"_j)=$p(RowID,"||",j)
 i $l(x1),$l(x2),$l(x3),$l(x4) d
 . ; Receive some
 .i $g(^TMP($zn,$j,0)) d  q
 ..s ord="" f  s ord=$o(^TMP($zn,$j,0,ord)) q:ord=""  d
 ...s vts=^(ord),ep=$p(vts,"||",1)
 ...s mv="" f  s mv=$o(^TEPI(ep,9,mv)) q:mv=""  i $d(^TEPI(ep,9,mv,"VTS",vts)),$p(^TEPI(ep,9,mv,"VTS",vts),"\")'="Y" q
 ...i $l(mv) d receiveMovement(ep,mv)
 .
 . ; Receive ALL ^TMP($zn,$j,0)=0
 .s ep="" f  s ep=$o(^TPSL(x1,x2,x3,x4,ep)) q:ep=""  d
 ..s mv="" f  s mv=$o(^TPSL(x1,x2,x3,x4,ep,mv)) q:mv=""  d receiveMovement(ep,mv)
 k ^TMP($zn,$j),PLIST
 q 0
receiveMovement(ep,mv) n vts,tests,PLIST
 i '$$select^LVBVISMV(ep_"||"_mv,"Y") d
 .s (vts,tests)="" f  s vts=$o(^TEPI(ep,9,mv,"VTS",vts)) q:vts=""  d
 ..i $d(^TMP($zn,$j,1)),'$d(^TMP($zn,$j,1,vts)) q
 ..i $$ValUser^LVBVIS14(user,vts,,PLIST(4)) q
 ..i $p(^TEPI(ep,9,mv,"VTS",vts),"\")'="Y" s tests=tests_$s($l(tests):",",1:"")_vts
 .
 .i $l(tests) d
 ..s PLIST(13)=+$h
 ..s PLIST(14)=$p($h,",",2)
 ..s PLIST(15)=user
 ..s PLIST(20)=tests
 ..s PLIST(21)="***EMPTY***"
 ..s PLIST=$o(PLIST(""),-1)
 ..i $$save^LVBVISMV(ep_"||"_mv,"R")
 q
 ; Insert the data
insert() K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO PSL_PackingSlip VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) S ROWID=$G(ROWID) d pre("Y") 
  ;---&SQL(UPDATE PSL_PackingSlip VALUES :PLIST() WHERE PSL_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; Delete the data
delete(ROWID,Comments) s ROWID=$g(ROWID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM PSL_PackingSlip WHERE PSL_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 k ^TMP("Comments",$j)
 Q SQLCODE
 ;
 ; Open the cursor
open(from,type,to,skip,pslip,mode,p6,p7,p8,p9) 
 s from=$g(from),type=$g(type),to=$g(to),skip=$g(skip),pslip=$g(pslip),mode=$g(mode)
  ;---&SQL(OPEN PSL)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %PSL0o
 Q 0
 ; mode : W - has not been sent yet
 ;        S - has been sent but not received yet
 ; Fetch the data
fetch(from,type,to,skip,pslip,mode,p6,p7,p8,p9) k PLIST
 s from=$g(from),type=$g(type),to=$g(to),skip=$g(skip),pslip=$g(pslip),mode=$g(mode) 
  ;---&SQL(FETCH PSL INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 i 'SQLCODE,$l(mode) d  i SQLCODE g fetch+1
 .f j=1:1:4 s @("x"_j)=$p(PLIST(1),"||",j)
 .s SQLCODE=100
 .s epis="" f  s epis=$o(^TPSL(x1,x2,x3,x4,epis)) q:epis=""  d  q:'SQLCODE
 ..s move="" f  s move=$o(^TPSL(x1,x2,x3,x4,epis,move)) q:move=""  d  q:'SQLCODE
 ...i mode="W",$p($g(^TEPI(epis,9,move)),"\",9)="W" s SQLCODE=0 q
 ...i mode="S",$p($g(^TEPI(epis,9,move)),"\",9)="S" s SQLCODE=0 q
 ...i mode="S",$p($g(^TEPI(epis,9,move)),"\",9)="P" s SQLCODE=0 q
 i 'SQLCODE d adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(from,type,to,skip,pslip,mode,p6,p7,p8,p9) k ^TMP($zn,$j)
 s from=$g(from),type=$g(type),to=$g(to),skip=$g(skip),pslip=$g(pslip),mode=$g(mode)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(from,type,to,skip,pslip,mode) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(from,type,to,skip,pslip,mode,p6,p7,p8,p9) N (from,type,to,skip,pslip,mode,PLIST) k ^TMP($zn,$j)
 s from=$g(from),type=$g(type),to=$g(to),skip=$g(skip),pslip=$g(pslip),mode=$g(mode)
 i $$open(from,type,to,skip,pslip)
 f cnt=1:1 Q:$$fetch(from,type,to,skip,pslip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor 
close()  ;---&SQL(CLOSE PSL) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %PSL0c 
 q 0
check(RowID) s RowID=$g(RowID),result=100
 i $$open^LVBPSLM(RowID,"Y")
 f  q:$$fetch^LVBPSLM(RowID,"Y")  i '$$select^LVBVISMV(PLIST(2)_"||"_PLIST(3),"Y"),PLIST(12)'="R" s result=0 q
 i $$close^LVBPSLM()
 q result
 ; select data by code
select(ROWID,skip) K PLIST S ROWID=$G(ROWID),skip=$g(skip)
  ;---&SQL(SELECT * INTO :PLIST() FROM PSL_PackingSlip WHERE PSL_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4()
 q
 ; Post-filing adjustments
adjust d PostSQL^SSUTIL4("")
 N plist,j,I,J,SQLCODE,X F J=1:1:PLIST I $D(PLIST(J)) S PLIST(J)=$P(PLIST(J),$C(1),1)
 i $g(skip)="Y" q
 ;
 I $G(PLIST(3))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTUSL(plist(3),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(3)=X K plist
 I $G(PLIST(5))'="",PLIST(4)="US" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTUSL(plist(5),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(5)=X K plist
 I $G(PLIST(5))'="",PLIST(4)="RL" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTRL(plist(5),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(5)=X K plist
 Q
 ;
getall(from,type,to,pslip,mode) N (from,type,to,pslip,mode,PLIST) k ^TMP($zn,$j)
 s from=$g(from),type=$g(type),to=$g(to),skip=$g(skip),pslip=$g(pslip),mode=$g(mode)
 I $$open(from,type,to,"Y",pslip,mode)
 F cnt=1:1 Q:$$fetch(from,type,to,"Y",pslip,mode)  d
 .s str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))_$c(2)_str
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
 ;
 q
%PSL0o s $zt="%PSL0E" s SQLCODE=$s($g(%PSL0c):-101,1:0) q:SQLCODE'=0  s %PSL0d(21)=0 s %PSL0d(22)=0,%PSL0d(23)=""
 s %PSL0d(12)=$g(from),%PSL0d(13)=$g(from),%PSL0d(14)=$g(type),%PSL0d(15)=$g(type),%PSL0d(16)=$g(to),%PSL0d(17)=$g(to),%PSL0d(18)=$g(pslip),%PSL0d(19)=$g(pslip)
 s %PSL0c=1 q
%PSL0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %PSL0c,%PSL0d,%PSL0E,%PSL0l,%PSL0n,%PSL0R,%PSL0Z q
%0Afirst 
 ; asl MOD# 2
 s %PSL0d(2)=""
%0ABk1 s %PSL0d(2)=$o(^TPSL(%PSL0d(2)))
 i %PSL0d(2)="" g %0ABdun
 i '((%PSL0d(2)=%PSL0d(18))||(%PSL0d(19)="")) g %0ABk1
 s %PSL0d(3)=""
%0ABk2 s %PSL0d(3)=$o(^TPSL(%PSL0d(2),%PSL0d(3)))
 i %PSL0d(3)="" g %0ABk1
 i '((%PSL0d(3)=%PSL0d(12))||(%PSL0d(13)="")) g %0ABk2
 s %PSL0d(4)=""
%0ABk3 s %PSL0d(4)=$o(^TPSL(%PSL0d(2),%PSL0d(3),%PSL0d(4)))
 i %PSL0d(4)="" g %0ABk2
 i '((%PSL0d(4)=%PSL0d(14))||(%PSL0d(15)="")) g %0ABk3
 s %PSL0d(5)=""
%0ABk4 s %PSL0d(5)=$o(^TPSL(%PSL0d(2),%PSL0d(3),%PSL0d(4),%PSL0d(5)))
 i %PSL0d(5)="" g %0ABk3
 i '((%PSL0d(5)=%PSL0d(16))||(%PSL0d(17)="")) g %0ABk4
 s %PSL0d(29)=$g(^TPSL(%PSL0d(2),%PSL0d(3),%PSL0d(4),%PSL0d(5)))
 s %PSL0d(6)=$p(%PSL0d(29),"\",1) s %PSL0d(7)=$p(%PSL0d(29),"\",2) s %PSL0d(8)=$p(%PSL0d(29),"\",3) s %PSL0d(9)=$p(%PSL0d(29),"\",4) s %PSL0d(10)=$p(%PSL0d(29),"\",5) s %PSL0d(11)=$p(%PSL0d(29),"\",6)
 s %PSL0d(1)=(%PSL0d(2))_"||"_(%PSL0d(3))_"||"_(%PSL0d(4))_"||"_(%PSL0d(5))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TPSL($p(%PSL0d(1),"||",1),$p(%PSL0d(1),"||",2),$p(%PSL0d(1),"||",3),$p(%PSL0d(1),"||",4))#"S":$zu(115,4) i $t { s %PSL0d(22)=1,%PSL0d(23)=$name(^TPSL($p(%PSL0d(1),"||",1),$p(%PSL0d(1),"||",2),$p(%PSL0d(1),"||",3),$p(%PSL0d(1),"||",4)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PSL_PackingSlip for RowID value: "_%PSL0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %PSL0d(2)=$p(%PSL0d(1),"||"),%PSL0d(3)=$p(%PSL0d(1),"||",2),%PSL0d(4)=$p(%PSL0d(1),"||",3),%PSL0d(5)=$p(%PSL0d(1),"||",4)
 i %PSL0d(2)'="",%PSL0d(3)'="",%PSL0d(4)'="",%PSL0d(5)'="",$d(^TPSL(%PSL0d(2),%PSL0d(3),%PSL0d(4),%PSL0d(5)))
 e  g %0ACdun
 s %PSL0d(35)=$g(^TPSL(%PSL0d(2),%PSL0d(3),%PSL0d(4),%PSL0d(5)))
 s %PSL0d(6)=$p(%PSL0d(35),"\",1) s %PSL0d(7)=$p(%PSL0d(35),"\",2) s %PSL0d(8)=$p(%PSL0d(35),"\",3) s %PSL0d(9)=$p(%PSL0d(35),"\",4) s %PSL0d(10)=$p(%PSL0d(35),"\",5) s %PSL0d(11)=$p(%PSL0d(35),"\",6)
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %PSL0d(21)=%PSL0d(21)+1,%ROWCOUNT=%PSL0d(21),%ROWID=%PSL0d(1),%PSL0c=10 q
%PSL0f i '$g(%PSL0c) { s SQLCODE=-102 q  } i %PSL0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%PSL0d(21))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%PSL0d(21),%PSL0c=100 q  } g %0Afirst:%PSL0c=1
%0ACdun i $zu(115,2)=1,$g(%PSL0d(22))=1 { l -@%PSL0d(23) s %PSL0d(22)=0 }
 g %0ABk4
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%PSL0d(21),SQLCODE=100,%PSL0c=100 q
%PSL0c i '$g(%PSL0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%PSL0d(21)),1:0)
 i $zu(115,2)=1,$g(%PSL0d(22))=1 { l -@%PSL0d(23) } k %PSL0c,%PSL0d,%PSL0E,%PSL0l,%PSL0n,%PSL0R,%PSL0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %PSL0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:11 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.PSLPackingSlip.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(8)=0 s %mmmsqld(9)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3),%mmmsqld(7)=$p(%mmmsqld(2),"||",4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",$d(^TPSL(%mmmsqld(4),%mmmsqld(5),%mmmsqld(6),%mmmsqld(7)))
 e  g %0EBdun
 s %mmmsqld(15)=$$%getlock^User.PSLPackingSlip.T1(%mmmsqld(2)) i '%mmmsqld(15) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3),%mmmsqld(7)=$p(%mmmsqld(2),"||",4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",$d(^TPSL(%mmmsqld(4),%mmmsqld(5),%mmmsqld(6),%mmmsqld(7)))
 e  g %0ECdun
 k %data
 f icol=0:1:11 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.PSLPackingSlip.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(8))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(15)=1 %ReleaseLock^User.PSLPackingSlip.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(15)=1 %ReleaseLock^User.PSLPackingSlip.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(8)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(15))=1 %ReleaseLock^User.PSLPackingSlip.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(7)=0 s %mmmsqld(8)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3),%mmmsqld(6)=$p(%mmmsqld(1),"||",4)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^TPSL(%mmmsqld(3),%mmmsqld(4),%mmmsqld(5),%mmmsqld(6)))
 e  g %0GBdun
 s %mmmsqld(14)=$$%getlock^User.PSLPackingSlip.T1(%mmmsqld(1)) i '%mmmsqld(14) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3),%mmmsqld(6)=$p(%mmmsqld(1),"||",4)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^TPSL(%mmmsqld(3),%mmmsqld(4),%mmmsqld(5),%mmmsqld(6)))
 e  g %0GCdun
 d %delete^User.PSLPackingSlip.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(7))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(14)=1 %ReleaseLock^User.PSLPackingSlip.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(14)=1 %ReleaseLock^User.PSLPackingSlip.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(7)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(14))=1 %ReleaseLock^User.PSLPackingSlip.T1(%mmmsqld(1)) g %0Gc
%0Jo d %PSL0f q:SQLCODE'=0
 s PLIST(1)=%PSL0d(1),PLIST(2)=%PSL0d(2),PLIST(3)=%PSL0d(3),PLIST(4)=%PSL0d(4),PLIST(5)=%PSL0d(5),PLIST(6)=%PSL0d(6),PLIST(7)=%PSL0d(7),PLIST(8)=%PSL0d(8),PLIST(9)=%PSL0d(9),PLIST(10)=%PSL0d(10),PLIST(11)=%PSL0d(11)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(15)=0,%mmmsqld(16)=""
 s %mmmsqld(13)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(13)
 s PLIST(2)=$p(PLIST(1),"||"),PLIST(3)=$p(PLIST(1),"||",2),PLIST(4)=$p(PLIST(1),"||",3),PLIST(5)=$p(PLIST(1),"||",4)
 i PLIST(2)'="",PLIST(3)'="",PLIST(4)'="",PLIST(5)'="",$d(^TPSL(PLIST(2),PLIST(3),PLIST(4),PLIST(5)))
 e  g %0LBdun
 s %mmmsqld(22)=$g(^TPSL(PLIST(2),PLIST(3),PLIST(4),PLIST(5)))
 s PLIST(6)=$p(%mmmsqld(22),"\",1) s PLIST(7)=$p(%mmmsqld(22),"\",2) s PLIST(8)=$p(%mmmsqld(22),"\",3) s PLIST(9)=$p(%mmmsqld(22),"\",4) s PLIST(10)=$p(%mmmsqld(22),"\",5) s PLIST(11)=$p(%mmmsqld(22),"\",6)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TPSL($p(PLIST(1),"||",1),$p(PLIST(1),"||",2),$p(PLIST(1),"||",3),$p(PLIST(1),"||",4))#"S":$zu(115,4) i $t { s %mmmsqld(15)=1,%mmmsqld(16)=$name(^TPSL($p(PLIST(1),"||",1),$p(PLIST(1),"||",2),$p(PLIST(1),"||",3),$p(PLIST(1),"||",4)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PSL_PackingSlip for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s PLIST(2)=$p(PLIST(1),"||"),PLIST(3)=$p(PLIST(1),"||",2),PLIST(4)=$p(PLIST(1),"||",3),PLIST(5)=$p(PLIST(1),"||",4)
 i PLIST(2)'="",PLIST(3)'="",PLIST(4)'="",PLIST(5)'="",$d(^TPSL(PLIST(2),PLIST(3),PLIST(4),PLIST(5)))
 e  g %0LCdun
 s %mmmsqld(28)=$g(^TPSL(PLIST(2),PLIST(3),PLIST(4),PLIST(5)))
 s PLIST(6)=$p(%mmmsqld(28),"\",1) s PLIST(7)=$p(%mmmsqld(28),"\",2) s PLIST(8)=$p(%mmmsqld(28),"\",3) s PLIST(9)=$p(%mmmsqld(28),"\",4) s PLIST(10)=$p(%mmmsqld(28),"\",5) s PLIST(11)=$p(%mmmsqld(28),"\",6)
%0LBuncommitted ;
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(15))=1 { l -@%mmmsqld(16) s %mmmsqld(15)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(15))=1 { l -@%mmmsqld(16) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
