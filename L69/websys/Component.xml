<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.Component">
<Description>
A re-usable server side component which may be used on one or more pages.
An indivdual component may be used on one or more CSP pages, and a CSP page may contain zero or more components.
A component consists of one or more components items (websys.ComponentItem), where a ComponentItem may be an items such as a data entry field or buttons, or a table item which is used to build a column in a table.

There are four main categories of component.
Find - Typically used to prompt the user for some search criteria.
List - Typically used to display a list of search results, optionally based on user entered search criteria from a Find.
Custom - A component which is not directly linked to any persistent objects, or which does not sensibly fall into one of the above categories.</Description>
<Abstract>0</Abstract>
<ClassType>persistent</ClassType>
<IncludeCode>TRAK</IncludeCode>
<IncludeGenerator>TRAK</IncludeGenerator>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.Persistent,websys.Abstract,XML.Abstract</Super>
<TimeCreated>60218,47034.737743</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="BUILD">
<Internal/>
<Default>17</Default>
</Parameter>

<Parameter name="SQLDATEFROM">
<Internal/>
</Parameter>

<Parameter name="SQLDATETO">
<Internal/>
</Parameter>

<Parameter name="EXTENTSIZE">
<Default>961</Default>
</Parameter>

<Parameter name="MINORVERSION">
<Final>0</Final>
<Default>51</Default>
</Parameter>

<Parameter name="SQLCODE">
<Final>0</Final>
<Default>Name</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Final>0</Final>
<Default>Caption</Default>
</Parameter>

<Parameter name="SQLROWID">
<Default>ID</Default>
</Parameter>

<Parameter name="xmlTypeQuerySQLParsed">
<Final>0</Final>
<Default>IGNORE</Default>
</Parameter>

<Parameter name="xmlidentifiedby">
<Description>
Used in conjunction with XMLId method to unqiuely identify a record.
By default ..%Id() is used unless other properties are specified. A comma separated list may be provided and processed by overridding XMLId method</Description>
<Final>0</Final>
<Default>%Id()</Default>
</Parameter>

<Parameter name="xmltoclass">
<Description>
Mapping from XML to Class</Description>
<Final>0</Final>
<Default>component</Default>
</Parameter>

<Parameter name="xmltypeHelp">
<Final>0</Final>
<Default>CDATA</Default>
</Parameter>

<Parameter name="xmltypeItems">
<Final>0</Final>
<Default>componentitems</Default>
</Parameter>

<Parameter name="xmltypeMessages">
<Final>0</Final>
<Default>componentmessages</Default>
</Parameter>

<Parameter name="xmltypeNotes">
<Final>0</Final>
<Default>IGNORE</Default>
</Parameter>

<Parameter name="xmltypeQuerySQL">
<Final>0</Final>
<Default>CDATA</Default>
</Parameter>

<Parameter name="xmltypeQuerySQLNames">
<Final>0</Final>
<Default>IGNORE</Default>
</Parameter>

<Parameter name="xmltypeTableItems">
<Final>0</Final>
<Default>componenttableitems</Default>
</Parameter>

<Parameter name="xmltypeTemplate">
<Final>0</Final>
<Default>CDATA</Default>
</Parameter>

<Index name="UniqueNameIndex">
<Description>
Uniqueness index for property Name</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Property name="Build">
<Description>
Saved version. Incremented on each save.
Used in GetVersion.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>1</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="SELECTIVITY" value="0.9804%"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BuildDate">
<Type>%Library.Date</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>1</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="SELECTIVITY" value="3.8462%"/>
</Property>

<Property name="BuildTime">
<Type>%Library.Time</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>1</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="SELECTIVITY" value="0.8065%"/>
</Property>

<Property name="Caption">
<Description>
The Default caption for a component. Used in the menu title bar. May be translated to foreigh languages.</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption1">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption2">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption3">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption4">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption5">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption6">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption7">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption8">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption9">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CenterForm">
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ClassName">
<Description><![CDATA[
The class on which the component is based.<br>
Applies to Find,List and Edit type components.]]></Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CodeTable">
<Description>
Identifies if a component is updating code table data.
If this value it true then certain restrictions apply:
The user must be connected to the code table server.
The system configuration must have code table updates enabled.</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="CustomScript">
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Disabled">
<Description>
If set all items within the component will be disabled and cannot be updated. This setting overrides per component item settings.
Typically used for 'Edit' type components when a record is locked by another user to stop the possibility of multiple updates.
This can be set explicity in code, or may automatically set within the component if a lock cannot be obtained.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DisplayType">
<Description><![CDATA[
Type of component.<br>
May be one of:<br>
Find<br>
List<br>
Edit<br>
Custom<br>]]></Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>"F"</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="DISPLAYLIST" value=",Find,List,Edit,Custom,Lookup,"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",F,L,E,C,K,"/>
</Property>

<Property name="FormSizeAndPosition">
<Description>
comma separated (pixels)
top, left, height, width</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Help">
<Description>
HTML Help text.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HideHeadings">
<Description>
Hide or Show headings in a table. Can be set a design time or run time.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HideMenus">
<Description>
Hide or Show menus. Can be set a design time or run time.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Items">
<Type>websys.ComponentItems</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Cardinality>children</Cardinality>
<Collection/>
<Inverse>ParRef</Inverse>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>1</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="LastUpdateDate">
<Type>%Library.Date</Type>
<Collection/>
<Relationship>0</Relationship>
</Property>

<Property name="LastUpdateTime">
<Type>%Library.Time</Type>
<Collection/>
<Relationship>0</Relationship>
</Property>

<Property name="ListPrint">
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ListRows">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LockExtraClass">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LockExtraId">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Menus">
<Description>
Comma separated list of menu names</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Messages">
<Type>websys.ComponentMessages</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Cardinality>children</Cardinality>
<Collection/>
<Inverse>ParRef</Inverse>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>1</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="MultiPart">
<Description>
Identify HTML FORM as multipart</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Name">
<Description>
A Name that unqiuely identifies a component</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>"Component"_$I(^websys.Unique)</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>1</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="AlphaUp"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Notes">
<Type>websys.ComponentNotes</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Cardinality>children</Cardinality>
<Collection/>
<Inverse>ParRef</Inverse>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>1</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="OtherScripts">
<Description>
Comma separated list of scripts.
Typically used to include standard utility scripts.
The path to the script in not required.
The referenced script is located in the scripts folder.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PassThruParameters">
<Description>
Additional parameters to be passed through during pageing and sorting.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QueryName">
<Description><![CDATA[
Name of a query which has been pre-defined in the object architect for the specified ClassName.<br>
used to derive Search criteria for Find Components and search Results forList components .<br>
Applies to Find and List type components.]]></Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QuerySQL">
<Description><![CDATA[
Dynamic SQL query used to derive Search criteria for Find Components and search Results forList components .<br>
Applies to Find and List type components.]]></Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QuerySQLNames">
<Description>
Named parameters derived from SQLQuery</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>$LB()</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QuerySQLParsed">
<Description>
The parsed version of the SQL query with :name replaced with ?, and names populated inot SQLQueryNames</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Script">
<Description>
If true component will include coded script file from the scripts folder. N.B. This flag has no effect on the scripts_gen generated scripts.
The name of the script is the names of the component with ".js" appended to the end.</Description>
<Type>%Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ShowNextInNewWindow">
<Description>
Applies to List Components.
Will open a new window when user clicks on next page.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Style">
<Description><![CDATA[
CSS Style applied to the component.<br>
Typically this will be set using the layout manager,<br>
but may be edited manually where required.]]></Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TableDelimiters">
<Description>
System default delimiters for each table item for when displaying merged columns
String separated by "^"</Description>
<Type>%String</Type>
<Collection/>
<Relationship>0</Relationship>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TableItems">
<Type>websys.ComponentTableItems</Type>
<Cardinality>children</Cardinality>
<Collection/>
<Inverse>ParRef</Inverse>
<Relationship>1</Relationship>
<Transient>0</Transient>
</Property>

<Property name="TableSequence">
<Description>
System default Sequence of table columns.
If not specified then columns will be displayed in TableItems sequence.
Sequence may be overridden with Site, Group, User and context setttings.</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Template">
<Description>
HTML describing the System default layout.
Template may be overridden with Site, Group, User and context setttings.
Typically manipulated using the web edit layout manager tool.</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>"No Layout has been configured."</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UseFormSizeAndPosition">
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="pNested">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>1</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>1</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="pOutput">
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>1</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>1</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnAfterSave">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>insert:%Library.Boolean</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //OPTIMISED//d ..JSPublish()
 //d ##Class(websys.ComponentXRef).MakeDirtyComponent(..%Id())
 ;
 ; Do we need to audit this transation ?
 n rule
 s rule=$o(^websys.LogRulesI("Component",..%Id(),""))
 i rule'="" d
 . s rule=$g(^websys.LogRulesD(rule))
 . if $lg(rule,3) d ##Class(websys.Log).AddItem("S","websys.Component",..%Id())
 q $$$OK

 q 1
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description>
Update build information on save.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>insert:%Library.Boolean</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n h
 s h=$h
 s i%LastUpdateDate=+h
 s i%LastUpdateTime=$p(h,",",2)

 s i%Build=i%Build+1
 s i%BuildDate=+$h
 s i%BuildTime=$p($h,",",2)
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>oid:%Library.ObjectIdentity</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Do we need to audit this transation ?
 n rule
 s rule=$o(^websys.LogRulesI("Component",$li(oid,1),""))
 i rule'="" d
 . s rule=$g(^websys.LogRulesD(rule))
 . if $lg(rule,4) d ##Class(websys.Log).AddItem("D","websys.Component",$li(oid,1))
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&initvalue:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Do we need to audit this transation ?
 ; there's no way of checking
 ;n rule
 ;s rule=$o(^websys.LogRulesI("Component",..%Id(),""))
 ;i rule'="" d
 ;. s rule=$g(^websys.LogRulesD(rule))
 d ##Class(websys.Log).AddItem("N","websys.Component","")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddDefaults">
<Description><![CDATA[
Add default items to a component.<br>
This will only add items which are not already present in the component.<br>
Name is used to determine if an item exists.<br>]]></Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 if ..DisplayType="F" do ..AddDefaultsFind() quit
 if ..DisplayType="L" do ..AddDefaultsList() quit
 if ..DisplayType="E" do ..AddDefaultsEdit() quit
 quit
]]></Implementation>
</Method>

<Method name="AddDefaultsEdit">
<Description><![CDATA[
Add Default properties for an edit form.<br>
Properties are based on the class definition.<br>
Default UPDATE and DELETE buttons are added.<br>
Invoked from AddDefaults().<br>]]></Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 #class websys.ComponentItem item
 new j,names,spec,name,type,item,rs,addlu,collection,webclass,labclass
 ;
 ; If we are referenceing a method it is likely we want to operate on the core class not the web class
 s (webclass,labclass)=..ClassName i "web,lab"[$p(..ClassName,".",1) s $p(labclass,".",1)="lab",$p(webclass,".",1)="web"
 ;
 ; Get an array of existing items names
 do ..GetItemNames(.names)
 ;
 ; Get the row specification (there is a better way to do this - but this is consistent with the params)
 if ..ClassName'="" d
 . ; Insert the hidden ID field
 . i '$d(names("ID")) d
 . . s item=##Class(websys.ComponentItems).%New()
 . . i item d
 . . . s item.ParRef=%this
 . . . s item.Name="ID"
 . . . s item.Caption=""
 . . . s item.DataType="%String"
 . . . s item.DisplayType="T"
 . . . s item.Hidden=1
 . . . s item.ReferencedObject="obj.%Id()"
 . . . s item.ValueGet="s val=$s(obj:obj.%Id(),1:""ERROR!"")"
 . . . s item.ValueSet=""
 . . . d item.%Save(0)
 . . . d ..Items.InsertObject(item.%Oid()),item.%Close()
 . ;
 . s rs=##Class(%Library.ResultSet).%New("%CompiledProperty:PropertyInfo")
 . d rs.Execute(labclass)
 . f  q:'rs.Next()  d
 . . s name=rs.Data("Name")
 . . s type=rs.Data("Type")
 . . s collection=rs.Data("Collection")
 . . i collection="array" q  //It's probably a child table so ignore it...
 . . i type="" s type="%String"
 . . i name="" q
 . . i $d(names(name)) q
 . . s names(name)=""
 . . s item=##Class(websys.ComponentItems).%New()
 . . i item d
 . . . s item.ParRef=%this
 . . . s item.Name=name
 . . . s item.Caption=name
 . . . ; Special for questionnaire
 . . . i ..ClassName["questionnaire.",$g($$$PROPdescription($$$TRAKDEF,..ClassName,name))'=""  s item.Caption=$g($$$PROPdescription($$$TRAKDEF,..ClassName,name))
 . . . s item.ReferencedObject="obj."_name
 . . . i type'["%" d
 . . . . ; we don't want to show the object id, so let's get show the first property that looks like a description, if there is no DESC, just show the first property
 . . . . n prp,tmp
 . . . . s prp="" f  s prp=$o($$$PROP($$$TRAKDEF,type,prp)) q:prp=""  i ##Class(%Collation).Upper(prp)["DESC" q
 . . . . s:prp="" prp=$o($$$PROP($$$TRAKDEF,type,prp)) i prp="" q
 . . . . ; Set the caption to the description of this field
 . . . . s tmp=$g($$$PROPdescription($$$TRAKDEF,type,prp))  s:tmp'="" item.Caption=tmp
 . . . . s item.ReferencedObject=item.ReferencedObject_"."_prp
 . . . ; This should really be in the item method
 . . . i $g($$$PROPrequired($$$TRAKDEF,labclass,name))  s item.Required=1
 . . . s item.DataType=type
 . . . s item.DisplayType="T"
 . . . ; Is it a Yes/No field
 . . . i ##Class(websys.Conversions).GetPropertyParameter(labclass,item.Name,"DISPLAYLIST")["Yes" d
 . . . . s item.DisplayType="C"
 . . . ; Some special stuff for questionnaires with lookups
 . . . i ..ClassName["questionnaire." d
 . . . . ;questionnaire combobox control display as lookup
 . . . . i ##Class(websys.Conversions).GetPropertyParameter(labclass,item.Name,"DISPLAYLIST")'="" d
 . . . . . s item.DisplayType="T" ;reset for Yes/No display lookups
 . . . . . s item.LookupClassName="websys.ComponentItem"
 . . . . . s item.LookupQueryName="LookupList"
 . . . . . ; remove first ',', convert ',' to '^', surround the whole thing with single quotes.
 . . . . . s item.LookupProperties="'"_$tr($p(##Class(websys.Conversions).GetPropertyParameter(labclass,item.Name,"DISPLAYLIST"),",",2,999),",","^")_"',"_item.Name_""
 . . . . ;questionnaire listbox control display as listbox
 . . . . i $d($$$PARAMdefault($$$TRAKDEF,..ClassName,"LB"_item.Name)) d
 . . . . . s item.DisplayType="L"
 . . . . . s item.LookupClassName="websys.ComponentItem"
 . . . . . s item.LookupQueryName="LookupList"
 . . . . . ; remove first ',', convert ',' to '^', convert one double quote to 2 double quotes surround the whole thing with one set doublequote.
 . . . . . s item.LookupProperties=""""_$tr($p($$$PARAMdefault($$$TRAKDEF,..ClassName,"LB"_item.Name),",",2,999),",","^")_""""
 . . . . ;questionnaire codetable control display as lookup to associated web codetable
 . . . . i $d($$$PARAMdefault($$$TRAKDEF,..ClassName,"CT"_item.Name)) d
 . . . . . s item.DisplayType="T"
 . . . . . s item.LookupClassName="web."_$$$PARAMdefault($$$TRAKDEF,..ClassName,"CT"_item.Name)
 . . . . . ;i $d($$$PARAMdefault($$$TRAKDEF,item.LookupClassName,"SQLDESCRIPTION")) d
 . . . . . i ##Class(websys.Conversions).IsValidClassName(item.LookupClassName) d
 . . . . . . ;s item.ReferencedObject="obj."_item.Name_"."_$g($$$PARAMdefault($$$TRAKDEF,item.LookupClassName,"SQLDESCRIPTION"))
 . . . . . . s item.LookupQueryName="LookUp"
 . . . . . . s item.LookupBrokerMethod="LookUpBroker"
 . . . . . . s item.LookupProperties=item.Name
 . . . . . . s item.ValueGet="s val=$lg(##Class("_item.LookupClassName_").GetCodeDescriptionFromId(obj."_item.Name_"),1)"
 . . . . . . s item.ValueSet="s:$l($g(val)) val=##Class("_item.LookupClassName_").GetIdFromCodeOrDescription($g(val)) s obj."_item.Name_"=$g(val)"

 . . . s item.ReferencedObject="obj."_item.Name
 . . . d item.AddDefaults("E",collection)
 . . . ;
 . . . d item.%Save(0)
 . . . d ..Items.InsertObject(item.%Oid()),item.%Close()
 . d rs.%Close()
 ;
 ; Insert the default 'Update' link
 i '$d(names("update1")) d
 . s item=##Class(websys.ComponentItems).%New()
 . i item d
 . . s item.ParRef=%this
 . . s item.Name="update1"
 . . s item.Caption="Update"
 . . s item.DisplayType="B"
 . . s item.Image="websys/update.gif"
 . . s item.LinkUrl="",item.ClassMethod=webclass_",websysSave,%request.Get(""TEVENT""),%request.Get(""ID"")"
 . . s item.ShortcutKey="U"
 . . d item.%Save(0)
 . . d ..Items.InsertObject(item.%Oid()),item.%Close()
 ;
 ; Insert the default 'Delete' link
 i '$d(names("delete1")) d
 . s item=##Class(websys.ComponentItems).%New()
 . i item d
 . . s item.ParRef=%this
 . . s item.Name="delete1"
 . . s item.Caption="Delete"
 . . s item.DisplayType="A"
 . . s item.Image="websys/delete.gif"
 . . s item.LinkUrl=""
 . . s item.LinkExpression="""&ID=""_$s(obj:obj.%Id(),1:"""")"
 . . s item.ClassMethod=webclass_",websysDelete,%request.Get(""ID"")"
 . . s item.ShortcutKey="D"
 . . d item.%Save(0)
 . . d ..Items.InsertObject(item.%Oid()),item.%Close()
 ;
 quit
 #endclass item
]]></Implementation>
</Method>

<Method name="AddDefaultsFind">
<Description>
Add Default properties for a seach criteria form.
This will get the search parameters from the query definition, and add default NEW and FIND buttons.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 #class %Library.ResultSet rs
 #class websys.ComponentItem item
 new j,names,spec,name,type,item,webclass,labclass
 ;
 ; If we are referenceing a method it is likely we want to operate on the core class not the web class
 s (webclass,labclass)=..ClassName i "web,lab"[$p(..ClassName,".",1) s $p(labclass,".",1)="lab",$p(webclass,".",1)="web"
 ;
 ;
 ; Get an array of existing items names
 do ..GetItemNames(.names)
 ;
 ; Get the query parameters
 ; Unfortunately at this time there is elegant way to get the formal spec
 if ..ClassName'="",..QueryName'="" {
 //i $d(^oddDEF(webclass,"query",..QueryName,"formalspec")) {
 //s spec=^oddDEF(webclass,"query",..QueryName,"formalspec")
 i $d($$$QUERYformalspec($$$TRAKDEF,webclass,..QueryName)) {
 s spec=$$$QUERYformalspec($$$TRAKDEF,webclass,..QueryName)
 s spec=$tr(spec,"()","")
 f j=1:1:$l(spec,",") {
 s name=$p($p(spec,",",j),":",1)
 s type=$p($p(spec,",",j),":",2)
 i type="" s type="%String"
 i name'="",'$d(names(name)) {
 s item=##Class(websys.ComponentItems).%New()
 i item {
 s item.ParRef=%this
 s item.Name=name
 s item.Caption=name
 s item.DataType=type
 ; Attempt to deduce the data type from the name (for dates and times)
 i ##Class(%Collation).Upper(name)["DATE" s item.DataType="%Date"
 i ##Class(%Collation).Upper(name)["TIME" s item.DataType="%Time"
 s item.DisplayType="T"
 d item.AddDefaults("F","")
 d item.%Save(0)
 d ..Items.InsertObject(item.%Oid()),item.%Close()
 }
 }
 }
 }
 } elseif ..QuerySQL'="" {  //Get the query parameters from the SQL
 s rs=##Class(%Library.ResultSet).%New("%Library.DynamicQuery:SQL")
 //Some error trapping required here
 d rs.Prepare(##Class(websys.Conversions).WhiteSpace(..QuerySQL))
 f j=1:1:rs.GetParamCount() {
 s name=rs.GetParamName(j)
 i name'="",'$d(names(name)) {
 s item=##Class(websys.ComponentItems).%New()
 i item {
 s item.ParRef=%this
 s item.Name=name
 s item.Caption=name
 s item.DataType="%String" //unfortunately we can't get type from the query----so all are %String - user must change these e.g. Date,Time etc
 ; Attempt to deduce the data type from the name (for dates and times)
 i ##Class(%Collation).Upper(name)["DATE" s item.DataType="%Date"
 i ##Class(%Collation).Upper(name)["TIME" s item.DataType="%Time"
 s item.DisplayType="T"
 d item.AddDefaults("F","")
 d item.%Save(0)
 d ..Items.InsertObject(item.%Oid()),item.%Close()
 }
 }
 }
 d rs.%Close()
 }
 ;
 ;
 ; Insert the default 'Find' button
 i '$d(names("find1")) d
 . s item=##Class(websys.ComponentItems).%New()
 . i item d
 . . s item.ParRef=%this
 . . s item.Name="find1"
 . . s item.Caption="Find"
 . . s item.DisplayType="B"
 . . s item.Image="websys/find.gif"
 . . s item.ShortcutKey="F"
 . . s item.LinkUrl="websys.default.csp"  //always lowercase
 . . s item.LinkComponent=$e(..Name,1,$s($f(..Name,"Find"):$f(..Name,"Find")-4-1,1:$l(..Name)))_"List" //subst Find with List
 . . d item.%Save(0)
 . . d ..Items.InsertObject(item.%Oid()),item.%Close()
 ;
 ; Insert the default 'New' link
 i '$d(names("new1")) d
 . s item=##Class(websys.ComponentItems).%New()
 . i item d
 . . s item.ParRef=%this
 . . s item.Name="new1"
 . . s item.Caption="New"
 . . s item.DisplayType="A"
 . . s item.Image="websys/new.gif"
 . . s item.ShortcutKey="N"
 . . s item.LinkUrl="websys.default.csp"  //always lowercase
 . . s item.LinkComponent=$e(..Name,1,$s($f(..Name,"Find"):$f(..Name,"Find")-4-1,1:$l(..Name)))_"Edit" //subst Find with Edit
 . . d item.%Save(0)
 . . d ..Items.InsertObject(item),item.%Close()
 ;
 quit
 #endclass item
]]></Implementation>
</Method>

<Method name="AddDefaultsList">
<Description>
Add Default properties for a seach results table.
This will get the search parameters from the query definition, and add default EDIT link.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 #class %Library.ResultSet rs
 #class websys.ComponentItem item
 new j,names,spec,name,type,item,rs,webclass,labclass
 ;
 ; If we are referenceing a method it is likely we want to operate on the core class not the web class
 s (webclass,labclass)=..ClassName i "web,lab"[$p(..ClassName,".",1) s $p(labclass,".",1)="lab",$p(webclass,".",1)="web"
 ;
 ;
 ; Get an array of existing items names
 do ..GetItemNames(.names)
 ;
 ; Insert the default 'Edit' button
 ;i '$d(names("edit1")) {
 ;s item=##Class(websys.ComponentItem).%New()
 ;i item {
 ;s item.Name="edit1"
 ;s item.Caption="Edit"
 ;s item.DisplayType="A"
 ;s item.Image="websys/edit.gif"
 ;s item.ValueGet="s val=""&ID=""_rs.Data(rs.ContainsID)"
 ;d ..TableItems.Insert(item),item.%Close()
 ;}
 ;}
 ;
 ; Get the row specification (there is a better way to do this - but this is consistent with the params)
 if ..ClassName'="",..QueryName'="" {
 //i $d(^oddDEF(webclass,"query",..QueryName,"parameter","ROWSPEC")) {
 //s spec=^oddDEF(webclass,"query",..QueryName,"parameter","ROWSPEC")
 i $d($$$QUERYPARAM($$$TRAKDEF,webclass,..QueryName,"ROWSPEC")) {
 s spec=$$$QUERYPARAM($$$TRAKDEF,webclass,..QueryName,"ROWSPEC")
 s spec=$tr(spec,"()","")
 f j=1:1:$l(spec,",") {
 s name=$p($p(spec,",",j),":",1)
 s type=$p($p(spec,",",j),":",2)
 i type="" s type="%String"
 i name'="",'$d(names(name)) {
 s item=##Class(websys.ComponentTableItems).%New()
 i item {
 s item.ParRef=%this
 s item.Name=name
 s item.Caption=name
 s item.DataType=type
 ; Attempt to deduce the data type from the name (for dates and times)
 i ##Class(%Collation).Upper(name)["DATE" s item.DataType="%Date"
 i ##Class(%Collation).Upper(name)["TIME" s item.DataType="%Time"
 s item.DisplayType="T"
 d item.AddDefaults("L","")
 d item.%Save(0)
 d ..TableItems.InsertObject(item.%Oid()),item.%Close()
 }
 }
 }
 }
 } elseif ..QuerySQL'="" {  //Get the query parameters from the SQL
 s rs=##Class(%Library.ResultSet).%New("%Library.DynamicQuery:SQL")
 //Some error trapping required here
 d rs.Prepare(##Class(websys.Conversions).WhiteSpace(..QuerySQL))
 //Assume the first row is ID and that we don't want to display it
 f j=2:1:rs.GetColumnCount() {
 s name=rs.GetColumnName(j)
 i name'="",'$d(names(name)) {
 s item=##Class(websys.ComponentTableItems).%New()
 i item {
 s item.ParRef=%this
 s item.Name=name
 s item.Caption=name
 s item.DataType="%String" //unfortunately we can't get type from the query----so all are %String - user must change these e.g. Date,Time etc
 ; Attempt to deduce the data type from the name (for dates and times)
 i ##Class(%Collation).Upper(name)["DATE" s item.DataType="%Date"
 i ##Class(%Collation).Upper(name)["TIME" s item.DataType="%Time"
 s item.DisplayType="T"
 s:j=2 item.DisplayType="A"
 d item.AddDefaults("L","")
 s:j=2 item.Image="websys/edit.gif"
 s:j=2 item.LinkUrl="websys.default.csp" //always lower case
 s:j=2 item.LinkComponent=$e(..Name,1,$s($f(..Name,"List"):$f(..Name,"List")-4-1,1:$l(..Name)))_"Edit" //subst List with Edit
 s:j=2 item.LinkExpression="""&ID=""_rs.GetData(1)" // assume that the first column is the ID and we don't know the name !
 d item.%Save(0)
 d ..TableItems.InsertObject(item.%Oid()),item.%Close()
 }
 }
 }
 d rs.%Close()
 }
 ;
 ;
 quit
 #endclass item
]]></Implementation>
</Method>

<Method name="Caption1Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M1")):tc("_COMPONENT","M1"),1:i%Caption1)
]]></Implementation>
</Method>

<Method name="Caption2Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M2")):tc("_COMPONENT","M2"),1:i%Caption2)
]]></Implementation>
</Method>

<Method name="Caption3Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M3")):tc("_COMPONENT","M3"),1:i%Caption3)
]]></Implementation>
</Method>

<Method name="Caption4Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M4")):tc("_COMPONENT","M4"),1:i%Caption4)
]]></Implementation>
</Method>

<Method name="Caption5Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M5")):tc("_COMPONENT","M5"),1:i%Caption5)
]]></Implementation>
</Method>

<Method name="Caption6Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M6")):tc("_COMPONENT","M6"),1:i%Caption6)
]]></Implementation>
</Method>

<Method name="Caption7Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M7")):tc("_COMPONENT","M7"),1:i%Caption7)
]]></Implementation>
</Method>

<Method name="Caption8Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M8")):tc("_COMPONENT","M8"),1:i%Caption8)
]]></Implementation>
</Method>

<Method name="Caption9Get">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M9")):tc("_COMPONENT","M9"),1:i%Caption9)
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s($d(tc("_COMPONENT","M")):tc("_COMPONENT","M"),1:i%Caption)
]]></Implementation>
</Method>

<Method name="DeleteItems">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 d ..Items.Clear()
 d ..TableItems.Clear()
 q
]]></Implementation>
</Method>

<Method name="FindSqlItemsClose">
<Description>
Default implementation of LookUp Query.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>FindSqlItemsFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 k ^TMP("WEB",$J)
 s QHandle=""
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindSqlItemsExecute">
<Description>
Default implementation of LookUp Query.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,compname:%String=""]]></FormalSpec>
<PlaceAfter>GetIdFromCodeOrDescription</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,cmp,cnt,j,itm,Row
 k ^TMP("WEB",$J)
 s cnt=0
 s cmp=##Class(websys.Component).OpenName(compname)
 if cmp {
 f j=1:1:cmp.Items.Count() {
 s itm=cmp.Items.GetAt(j)
 s Row=$lb(itm.Caption,itm.Name,itm.SQLExtendedReference,itm.SQLTable,itm.SQLColumn,itm.SQLToVBCodeTable,itm.SQLComment)
 s cnt=cnt+1
 s ^TMP("WEB",$j,cnt)=Row
 }
 f j=1:1:cmp.TableItems.Count() {
 s itm=cmp.TableItems.GetAt(j)
 s Row=$lb(itm.Caption,itm.Name,itm.SQLExtendedReference,itm.SQLTable,itm.SQLColumn,itm.SQLToVBCodeTable,itm.SQLComment)
 s cnt=cnt+1
 s ^TMP("WEB",$j,cnt)=Row
 }
 d cmp.%Close()
 }
 ;
 s user=$lb(classname)
 s work=$lb(0)
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindSqlItemsFetch">
<Description>
Default implementation of LookUp Query.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>FindSqlItemsExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 n cnt
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s cnt=$li(work,1)
 ;
 s cnt=$o(^TMP("WEB",$j,cnt))
 ;
 i cnt {
 s Row=^TMP("WEB",$j,cnt)
 } else {
 s AtEnd=1,Row=""
 }
 ;
 s work=$lb(cnt)
 ;
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetActiveLayoutInfo">
<Description>
Determine which layout is active.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>UserID:%Library.String,GroupID:%Library.String,SiteCODE:%Library.String,context:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new j,active,template,data,app
 ;
 ;
 ; Process the template
 s template="",active=""
 s data=##Class(websys.Preferences).GetDataEx(UserID,GroupID,SiteCODE,context,.app,"LAYOUT",..%Id())
 i data'="" s template=$li(data,1),active=app_" "_context
 i template="" s active="SYS"
 ;
 ;
 quit active
]]></Implementation>
</Method>

<Method name="GetComponentMessages">
<Description>
KM 24-Oct-2001: Adds Component Messages to the message array  i.e.t()</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&t:%Library.String,components:%Library.String]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n obj,j,id
 f j=1:1:$l(components,",") {
 s obj=##Class(websys.Component).OpenName($p(components,",",j))
 i obj d obj.LoadTrans(),obj.%Close()
 }
 q
]]></Implementation>
</Method>

<Method name="GetIconProfileId">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itemname:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n itm,j,profid,context,loc,hospid,trustid,data,ActiveContext,ActiveObject,ActiveReferance
 s profid=""

 ; THIS SHOULD NOT BE USED ANYWHERE EXCEPT FLOORPLAN
 ; 
 ;
 ; now this is nasty !!
 s context=$g(%request.Data("CONTEXT",1))
 s loc=$g(%session.Data("LOGON.CTLOCID")),hospid="",trustid="" i loc s hospid=$p($g(^CTLOC(loc)),"^",22) i hospid s trustid=##Class(web.CTHospital).getTrustId(hospid)
 s data=##Class(websys.Preferences).GetDataExLE($g(%session.Data("LOGON.USERID")),$g(%session.Data("LOGON.GROUPID")),hospid,$g(%session.Data("LOGON.SITECODE")),context,"LAYOUT",..%Id(),.ActiveObject,.ActiveReference,.ActiveContext,trustid)
 d ##Class(websys.Translation).Load("COMP",%session.Get("LOGON.LANGID"),..%Id())
 d ##Class(websys.Translation).LoadContext(%session.Get("LOGON.LANGID"),..%Id(),ActiveContext,ActiveObject,ActiveReference)
 ;
 f j=1:1:..Items.Count() {
 s itm=..Items.GetAt(j)
 //watch out this is not a proper DR !
 i itm.Name=itemname,itm.IconProfile s profid=itm.IconProfile q
 }
 q profid
]]></Implementation>
</Method>

<Method name="GetIdFromCodeOrDescription">
<Description>
Override generic GetIdFromCodeOrDescription as we want to check by Name first before caption</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>val:%Library.String</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
	n id
	s id=""
	&sql(SELECT ID INTO :id FROM websys.Component WHERE Name=:val)
	i $l(id) q id
	&sql(SELECT ID INTO :id FROM websys.Component WHERE Caption=:val)
	i $l(id) q id
	q id
]]></Implementation>
</Method>

<Method name="GetItemNames">
<Description>
Build an array of component item names</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&names:%String]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new j
 for j=1:1:..Items.Count() set names(..Items.GetAt(j).Name)=""
 for j=1:1:..TableItems.Count() set names(..TableItems.GetAt(j).Name)=""
 quit
]]></Implementation>
</Method>

<Method name="GetVersion">
<Description>
Return the version of the instance based on Build, BuildDate and BuildTime.</Description>
<Final>1</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s %code=0
 ;
 n major,minor
 ;
 s major=$g($$$PARAMdefault($$$TRAKDEF,"websys.Abstract","MAJORVERSION"))
 s minor=$g($$$PARAMdefault($$$TRAKDEF,"websys.Abstract","MINORVERSION"))
 ;
 ; Use raw $Z functions we can't assume standard websys.conversions are compiled.
 s timestamp=$zd($h,3)_" "_$zt($p($h,",",2),3)
 ;
 ; write the parameter back
 ;
 ; Generate a simple run time string.
 $$$GENERATE(" q """_major_"."_minor_".""_..Build_"" on ""_$zd(..BuildDate,3)_"" ""_$zt(..BuildTime,3)")
 ;
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="HelpDisplay">
<Description>
Used to show help text...
Separate to helpExtended...</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>langid:%Library.String,context:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s hlp=$g(^websys.TranslationD("CONTEXT"_langid,..%Id()_context,"_COMPONENT","Help"))
 i $l(hlp) q hlp
 ;
 s hlp=$g(^websys.TranslationD("CONTEXT"_langid,..%Id(),"_COMPONENT","Help"))
 i $l(hlp) q hlp
 ;
 s hlp=$g(^websys.TranslationD("COMP",langid,..%Id(),"_COMPONENT","Help"))
 i $l(hlp) q hlp
 ;
 q i%Help
]]></Implementation>
</Method>

<Method name="HelpExtended">
<Description>
This is a workaround to load context specific help into the help editor.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>langid:%Library.String,context:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; This is a bit ugly !
 ;
 ;TN:22July2005:don't need to grab captions
 ;d ##Class(websys.Translation).Load("COMP",langid,..%Id())
 d ##Class(websys.Translation).LoadContext(langid,..%Id(),context)
 ;
 q $s($d(tc("_COMPONENT","Help")):tc("_COMPONENT","Help"),1:i%Help)
]]></Implementation>
</Method>

<Method name="IsValidName">
<Description>
Validate if a component exists</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>name:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s %code=0
 i $$$CLASSabstract($$$MGINFO,%class) $$$GENERATE(" QUIT") QUIT $$$OK
 ;
 $$$GENERATE(" n id")
 $$$GENERATE(" s id=""""")
 $$$GENERATE(" &sql(SELECT ID INTO :id FROM "_%class_" WHERE Name=:name)")
 $$$GENERATE(" i 'SQLCODE,id'="""" q 1")
 $$$GENERATE(" q 0")
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="JSBuild">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>template:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,k,item,firstfocustab,firstfocusat,hasdates,hastimes,hasnumbers,hascurrency,tabseq,name,lucls,luqry,luprp,lubrk,inclitem
 ;
 s firstfocusat="",firstfocustab=999,hasdates=0,hastimes=0,hasnumbers=0,hascurrency=0
 ;
 //
 //html form name with "." in it screws up javascript object references (i.e. document.forms...)

 //try this with a hardcoded PAADMEDIT template
 //s template=$li($li(^websys.PreferencesD(422),3),1)


 n cname
 s cname=$tr(..Name,".","_")

 //invalid file path
 i ..pOutput="" q
 u ..pOutput
 ;
 w "// Copyright (c) 2001 TrakHealth Pty Limited. ALL RIGHTS RESERVED. ",!
 w "// Code generated automatically on "_$zd(+$h,4)_","_$zt(+$p($h,",",2))_" - manual changes will be overwritten",!
 ; knobble events to stop broker when we do a lookup
 w "var evtTimer;",!
 w "var evtName;",!
 w "var doneInit=0;",!
 ; Get the first item which fails validation and focus to that
 w " var focusat=null;",!
 n dateformat s dateformat=$lg($g(^websys.ConfigurationD(1)),10)
 ;
 ; Bug with XP - window.open does not get focus
 ; Take out again as screw up broker lookups when first item has broker lu...
 ;w " try {self.focus();} catch(e) {};",!
 ;
 ; ***
 ; N.B. Note it may seem ineffient to loop through ..Items several times,
 ; but after the first time they are swizzled in memory - and it is much more efficient than accessing the globals... 
 ; ***
 ;
 ; Build tabsequence where explicit sequence exists
 for j=1:1:..Items.Count() d
 . s item=..Items.GetAt(j)
 . i 'item q
 . i item.Hidden q
 . i item.DisplayOnly q
 . i item.Disabled q
 . ; only bother with items on the layout
 . ; only bother with items on the layout
 . ; only bother with items on the layout ( use the later part of the {DcomponetiName} thing
 . i $f(template,"i"_item.Name_"}")=0 q
 . i +item.TabSequence s tabseq(item.TabSequence)=item.Name i +item.TabSequence<firstfocustab s firstfocusat=item.Name,firstfocustab=+item.TabSequence
 ;
 ; Process each field for field processing and validation
 for j=1:1:..Items.Count() d
 . s item=..Items.GetAt(j)
 . i 'item q
 . ; only bother with items on the layout (unless they are hidden - in which case include....)
 . ; only bother with items on the layout
 . ; only bother with items on the layout ( use the later part of the {DcomponetiName} thing
 . 
 . ;i 'item.Hidden,$f(template,"i"_item.Name_"}")=0,$zcvt(item.Name,"U")'["DUMMY" q
 . s inclitem=0
 . i item.Hidden s inclitem=1 ; if it's hidden include it
 . i $f(template,"i"_item.Name_"}") s inclitem=1 ; if it's on the template include it
 . i $zcvt(item.Name,"U")["DUMMY" s inclitem=1 ; if it's a dummy field include it
 . i 'inclitem q
 . ; Default to string, and don't save it
 . i item.DataType="" s item.DataType="%Library.String"
 . i item.DisplayType'="CT" d
 . . s lucls=item.LookupClassName
 . . s luqry=item.LookupQueryName
 . . s luprp=item.LookupProperties
 . . s lubrk=item.LookupBrokerMethod
 . i item.DisplayType="CT" d
 . . s lucls=item.CustomLookupClassName
 . . s luqry=item.CustomLookupQueryName
 . . s luprp=item.CustomLookupProperties
 . . s lubrk=item.CustomLookupBrokerMethod
 . ; We don't need this now because we do it at the end. 
 . ;i 'firstfocus,..DisplayType="F"!(..DisplayType="E"),'item.Hidden,'item.DisplayOnly d
 . ;. ;set focus GOOD for IE5/NS6 !
 . ;. w "try {",!
 . ;. w "	var obj=document.getElementById('"_item.Name_"');",!
 . ;. w "	obj.focus();",!
 . ;. w "} catch(e) {};",!
 . ;. s firstfocus=1
 . ; If it's on button (on a form !)
 . i item.DisplayType="B" d
 . . ; Generate the handler
 . . w "function "_item.Name_"_click() {",!
 . . //set the focus to generate onchange, onblur for broker etc when called from shortcut key
 . . //wait for broker to finish
 . . w $c(9)_"if (evtTimer) {",!
 . . w $c(9,9)_"setTimeout('"_item.Name_"_click();',200)",!
 . . w $c(9)_"} else {",!
 . . w $c(9,9)_"websys_setfocus('"_item.Name_"');",!
 . . w $c(9,9)_"var frm=document.f"_cname_";",!
 . . w $c(9,9)_"websys_isInUpdate=true;",!
 . . w $c(9,9)_"if (f"_cname_"_submit()) {",!
 . . if item.ClassMethodIfDirty d
 . . . w $c(9,9,9)_"if (frm.TDIRTY.value!='2') {",!
 . . . w $c(9,9,9,9)_"if (websys_isDirty(frm)) {",!
 . . . w $c(9,9,9,9,9)_"frm.TDIRTY.value='1';",!
 . . . ;w $c(9,9,9,9,9)_"if (frm.TDIRTY.value!='2') frm.TDIRTY.value='1';",!
 . . . ;w "				alert('something changed');",!
 . . . w $c(9,9,9,9)_"} else {",!
 . . . ;w "				alert('nothing changed');",!
 . . . w $c(9,9,9,9,9)_"frm.TDIRTY.value='';",!
 . . . w $c(9,9,9,9)_"}",!
 . . . w $c(9,9,9)_"}",!
 . . if item.LinkWorkFlow d
 . . . w $c(9,9,9)_"frm.TWKFL.value='"_item.LinkWorkFlow_"';",!
 . . . w $c(9,9,9)_"frm.TWKFLI.value='';",!
 . . . //we passed the validation so disable the button
 . . w $c(9,9,9)_"var obj=document.getElementById('"_item.Name_"');",!
 . . w $c(9,9,9)_"if (obj) {obj.disabled=true;obj.onclick=function() {return false};}",!
 . . w $c(9,9,9)_"frm.TEVENT.value='"_"d"_..%Id()_"i"_item.Name_"';",!
 . . w $c(9,9,9)_"frm.submit();",!
 . . w $c(9,9)_"}",!
 . . w $c(9,9)_"return false;",!
 . . w $c(9)_"}",!
 . . w "}",!
 . . ; 
 . . ; Hook in the handler
 . . w "try {",!
 . . w "	var obj=document.getElementById('"_item.Name_"');",!
 . . w "	if (obj) obj.onclick="_item.Name_"_click;",!
 . . w "} catch(e) { alert(e.number + ' ' + e.description) };",!
 . . ;
 . . ; We do this at run time now because of translation issues
 . . ; Hook in the access key
 . . ;i item.ShortcutKey'="" d
 . . ;. n k s k=##Class(%Library.Collation).Upper($e(item.ShortcutKey))
 . . ;. w "websys_sckeys['"_k_"']="_item.Name_"_click;",!
 . ;
 . i item.DisplayType="A" d
 . . ; Hook in the access key
 . . i item.ShortcutKey'="" d
 . . . ; Generate the handler
 . . . w "function "_item.Name_"_click() {",!
 . . . w "	var obj=document.getElementById('"_item.Name_"');",!
 . . . w "	if (obj) obj.click();",!
 . . . w "}",!
 . . . ; 
 . . . n k s k=##Class(%Library.Collation).Upper($e(item.ShortcutKey))
 . . . w "websys_sckeys['"_k_"']="_item.Name_"_click;",!
 . ;
 . ; If we have (lookupclass and query) OR (lookuplist)
 . ;;i item.LookupClassName'="",item.LookupQueryName'="",item.DisplayType'="L",item.DisplayType'="TA",item.DisplayType'="R" d
 . i lucls'="",luqry'="",item.DisplayType'="L",item.DisplayType'="TA",item.DisplayType'="R" d
 . . w "function "_item.Name_"_lookuphandler(e) {",!
 . . ; cancel the broker if it is for this field
 . . w "	if (evtName=='"_item.Name_"') {",!
 . . w "		window.clearTimeout(evtTimer);",!
 . . w "		evtTimer='';",!
 . . w "		evtName='';",!
 . . w "	}",!
 . . w "	var type=websys_getType(e);",!
 . . w "	var key=websys_getKey(e);",!
 . . w "	if ((type=='click')||((type=='keydown')&&(key==117))) {",!
 . . w "		var url='websys.lookup.csp';",!
 . . w "		url += ""?ID=d"_..%Id()_"i"_item.Name_""";",!
 . . w "		url += ""&CONTEXT=K"_lucls_":"_luqry_""";",!
 . . i item.LookupCustomComponent'="" w "		url += ""&WEBSYS.TCOMPONENT="_item.LookupCustomComponent.Name_""";",!
 . . ;; yes this is custom lookup only, set this first to override .LookupJavascriptFunction which gets called in _lookupselx
 . . i item.CustomLookupClassName'="",item.CustomLookupQueryName'="" w "		url += ""&TLUJSF="_item.Name_"_lookupselx"";",!
 . . i $l(item.LookupJavascriptFunction) w "		url += ""&TLUJSF="_item.LookupJavascriptFunction_""";",!
 . . ;;i 'item.LookupUserDefined,item.LookupProperties'="" f k=1:1:$l(item.LookupProperties,",") d
 . . i 'item.LookupUserDefined,luprp'="" f k=1:1:$l(luprp,",") d
 . . . ; a property on the form
 . . . ;;i $p(item.LookupProperties,",",k)'["'" d
 . . . i $p(luprp,",",k)'["'" d
 . . . . n kk,reftype
 . . . . ;;w "		var obj=document.getElementById('"_$p(item.LookupProperties,",",k)_"');",!
 . . . . w "		var obj=document.getElementById('"_$p(luprp,",",k)_"');",!
 . . . . ;; thisbits nasty - good chance for optimisation....
 . . . . ;;s reftype="" f kk=1:1:..Items.Count() i ..Items.GetAt(kk),..Items.GetAt(kk).Name=$p(item.LookupProperties,",",k) s reftype=..Items.GetAt(kk).DisplayType q
 . . . . s reftype="" f kk=1:1:..Items.Count() i ..Items.GetAt(kk),..Items.GetAt(kk).Name=$p(luprp,",",k) s reftype=..Items.GetAt(kk).DisplayType q
 . . . . if reftype'="C" w "		if (obj) url += ""&P"_k_"="" + websys_escape(obj.value);",!
 . . . . if reftype="C" w "		if (obj) url += ""&P"_k_"="" + obj.checked;",!
 . . . ; a literal - convert double quotes to 2 double quotes
 . . . i $p(luprp,",",k)["'" d
 . . . . ;;w "		url += ""&P"_k_"="" + "_$p(item.LookupProperties,",",k)_";",!
 . . . . ;;eg. 'desc for this item' need to convert out any JS chars and escape URL chars.
 . . . . w "		url += ""&P"_k_"="" + '"_$zcvt($zcvt($e($p(luprp,",",k),2,$l($p(luprp,",",k))-1),"O","URL"),"O","JS")_"';",!
 . . i item.LookupUserDefined d
 . . . w "		url += ""&P1="" + '"_$zcvt($zcvt($tr(item.LookupUserDefinedValues,",","^"),"O","URL"),"O","JS")_"';",!
 . . ;w "		var tmp=url.split('%');",!
 . . ;w "		url=tmp.join('%25');",!
 . . ;w "		websys_lu(url,1,'');",!
 . . i item.LookupCustomComponent'="" w "		websys_lu(url,'"_$tr(item.LookupCustomComponent.Name,".","_")_"','');",!
 . . i item.LookupCustomComponent="" w "		websys_lu(url,1,'');",!
 . . w "		return websys_cancel();",!
 . . w "	}",!
 . . w "}",!
 . . ; Set up the event handlers
 . . ; The text box key stoke event
 . . w "	var obj=document.getElementById('"_item.Name_"');",!
 . . w "	if (obj) obj.onkeydown="_item.Name_"_lookuphandler;",!
 . . ; The lookup (icon) click event
 . . w "	var obj=document.getElementById('"_"ld"_..%Id()_"i"_item.Name_"');",!
 . . w "	if (obj) obj.onclick="_item.Name_"_lookuphandler;",!
 . . ;
 . . ; Lookup selection - called from sys_lookup
 . . ; Good for IE - not tested for NS
 . . w "function "_item.Name_"_lookupsel(value) {",!
 . . w "	try {",!
 . . w "		var obj=document.getElementById('"_item.Name_"');",!
 . . w "		if (obj) {",!
 . . w "  			obj.value=unescape(value);",!
 . . w "			obj.className='';",!
 . . i $e(..Name,1,14)="questionnaire." w "			try {"_item.Name_"_lookuptoggle(value);} catch(err) {};",!
 . . ;w "  			websys_nextfocus(obj.sourceIndex);",!
 . . ; If we have an explicit tab sequence then use that, else go to the next focusable item
 . . ;s k=$o(tabseq(item.TabSequence))
 . . ;i k="" w "		websys_nextfocus(obj.sourceIndex);",!
 . . ;i k'="" w "		websys_setfocus('"_tabseq(k)_"');",!
 . . i item.TabSequence w "			websys_nexttab('"_item.TabSequence_"',obj.form);",!
 . . i 'item.TabSequence w "			websys_nextfocusElement(obj);",!
 . . w "		}",!
 . . w "	} catch(e) {};",!
 . . w "}",!
 . . ;
 . . ; yes, we really do mean custom lookup only for this....
 . . ; automatically populate a hidden field (same name +id) with the id
 . . if item.CustomLookupClassName'="",item.CustomLookupQueryName'="" d
 . . . w "function "_item.Name_"_lookupselx(str) {",!
 . . . w "	try {",!
 . . . //w "		alert(str);",!
 . . . w "		var lu=str.split(""^"");",!
 . . . w "		var obj=document.getElementById('"_item.Name_"ID');",!
 . . . w "		if (obj) {",!
 . . . w "  			obj.value=unescape(lu[1]);",! ; should always be Description,ID(hidden)
 . . . w "		}",!
 . . . i item.LookupJavascriptFunction'="" w "		"_item.LookupJavascriptFunction_"(str);",!
 . . . w "	} catch(e) {};",!
 . . . w "}",!
 . . ;
 . . ; Javabroker validation
 . . ; The method is encrypted at run time - so we need to pass it at run time
 . . ;;i item.LookupBrokerMethod'="" d
 . . i lubrk'="" d
 . . . n broker
 . . . s broker="cspHttpServerMethod(encmeth,'"_item.Name_"_lookupsel','"_item.LookupJavascriptFunction_"'"
 . . . ; yes. this is just for custom lookups - use the hardcode broker thing
 . . . i item.CustomLookupClassName'="",item.CustomLookupQueryName'="" d
 . . . . s broker="cspHttpServerMethod(encmeth,'"_item.Name_"_lookupsel','"_item.Name_"_lookupselx'"
 . . . w "function "_item.Name_"_changehandler(encmeth) {",!
 . . . w "	evtName='"_item.Name_"';",!
 . . . ;if setTimeout value changes, please change websys.js variable websys_brokerTime
 . . . w "	if (doneInit) { evtTimer=window.setTimeout("""_item.Name_"_changehandlerX('""+encmeth+""');"",200); }",!
 . . . w "	else { "_item.Name_"_changehandlerX(encmeth); evtTimer=""""; }",!
 . . . w "}",!
 . . . w "function "_item.Name_"_changehandlerX(encmeth) {",!
 . . . //cancel the timer
 . . . w "	if (evtTimer) {",!
 . . . w "		window.clearTimeout(evtTimer);",!
 . . . w "		evtName='';",!
 . . . w "		evtTimer='';",!
 . . . w "	}",!
 . . . //
 . . . w "	var obj=document.getElementById('"_item.Name_"');",!
 . . . w "	if (obj.value!='') {",!
 . . . ;;i item.LookupProperties'="" f k=1:1:$l(item.LookupProperties,",") d
 . . . i luprp'="" f k=1:1:$l(luprp,",") d
 . . . . ; a property on the form
 . . . . ;;i $p(item.LookupProperties,",",k)'["'" d
 . . . . i $p(luprp,",",k)'["'" d
 . . . . . ;;w "		var tmp=document.getElementById('"_$p(item.LookupProperties,",",k)_"');",!
 . . . . . w "		var tmp=document.getElementById('"_$p(luprp,",",k)_"');",!
 . . . . . w "		if (tmp) {var p"_k_"=tmp.value } else {var p"_k_"=''};",!
 . . . . ; a literal
 . . . . ;;i $p(item.LookupProperties,",",k)["'" d
 . . . . i $p(luprp,",",k)["'" d
 . . . . . ;????w "		url += ""&P"_k_"="" + "_$p(item.LookupProperties,",",k)_";",!
 . . . . . ;;w "		var p"_k_"="_$p(item.LookupProperties,",",k)_";",!
 . . . . . w "		var p"_k_"="_$p(luprp,",",k)_";",!
 . . . . s broker=broker_",p"_k
 . . . i item.LookupUserDefined d
 . . . . s broker=broker_",'"_$tr(item.LookupUserDefinedValues,",","^")_"'"
 . . . s broker=broker_")"
 . . . w "		if ("_broker_"=='0') {",!
 . . . ;w "			alert(""\'"" + t['"_item.Name_"'] + ""\' "" + t['XINVALID'] + ""\n"");",!
 . . . w "			obj.className='clsInvalid';",!
 . . . ;w "			obj.focus();",!
 . . . w "			websys_setfocus('"_item.Name_"');",!
 . . . w "			return websys_cancel();",!
 . . . w "		}",!
 . . . w "	}",!
 . . . w "	obj.className='';",!
 . . . w "}",!
 . . ; Hook in the handler - do this from the component at run time as we need the encrypted method name
 . . ;w "try {",!
 . . ;w "	var obj=document.getElementById('"_item.Name_"');",!
 . . ;w "	if (obj) obj.onchange="_item.Name_"_changehandler;",!
 . . ;w "} catch(e) { alert(e.number + ' ' + e.description) };",!
 . . ;
 . . ;; Go to the next field if these is one, else back to the lookup field
 . . ;;w "function "_item.Name_"_lookupnext() {",!
 . . ;;i $d(lookup(lookup,1)) &html<	document.all("<%=lookup(lookup,1)%>").focus();> i 1
 . . ;;e  &html<	document.all("<%=lookup(lookup,0)%>").focus();>
 . . ;;w "}",!
 . ;
 . ; SPECIAL VALIDATION
 . ; DATE
 . i "LIBRARY.DATE"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%",""),'item.Hidden d
 . . s hasdates=1
 . . q:item.DisplayOnly    ;just allow DateValidation scripts to be added, but no need to write lookup scripts
 . . ;date field does not have own lookup create stuff for generic datelookup
 . . i item.LookupClassName_item.LookupQueryName="" d
 . . . w "function "_item.Name_"_lookuphandler(e) {",!
 . . . w "	var type=websys_getType(e);",!
 . . . w "	var key=websys_getKey(e);",!
 . . . w "	if ((type=='click')||((type=='keydown')&&(key==117))) {",!
 . . . ;w "		var eSrc=websys_getSrcElement(e);",!
 . . . ;w "		eSrc.className='';",!
 . . . ; validate the entered date before the lookup
 . . . ;w "		if ((eSrc.name=='"_item.Name_"')&&(!IsValidDate(eSrc))) return;",!
 . . . w "		var obj=document.getElementById('"_item.Name_"');",!
 . . . w "		if (!IsValidDate(obj)) return;",!
 . . . w "		var url='websys.lookupdate.csp?ID="_item.Name_"&STARTVAL=';",!
 . . . w "		url += '&DATEVAL=' + escape(obj.value);",!
 . . . w "		var tmp=url.split('%');",!
 . . . w "		url=tmp.join('%25');",!
 . . . ;w "		websys_lu(url,1,'top=200,left=200,width=370,height=230');",!
 . . . w:dateformat'="HIJRA" "		websys_lu(url,1,'top=200,left=200,width=370,height=230');",!
 . . . w:dateformat="HIJRA" "		websys_lu(url,1,'top=200,left=200,width=460,height=290');",!
 . . . w "		return websys_cancel();",!
 . . . w "	}",!
 . . . w "}",!
 . . . w "function "_item.Name_"_lookupSelect(dateval) {",!
 . . . w "	var obj=document.getElementById('"_item.Name_"');",!
 . . . w "	obj.value=dateval;",!
 . . . ;w "	websys_nextfocus(obj.sourceIndex);",!
 . . . i item.TabSequence w "		websys_nexttab('"_item.TabSequence_"',obj.form);",!
 . . . i 'item.TabSequence w "		websys_nextfocusElement(obj);",!
 . . . w "}",!
 . . . w "var obj=document.getElementById('"_item.Name_"');",!
 . . . w "if (obj) obj.onkeydown="_item.Name_"_lookuphandler;",!
 . . . w "var obj=document.getElementById('"_"ld"_..%Id()_"i"_item.Name_"');",!
 . . . w "if (obj) obj.onclick="_item.Name_"_lookuphandler;",!
 . . ;end datelookup
 . . w "function "_item.Name_"_changehandler(e) {",!
 . . w "	var eSrc=websys_getSrcElement(e);",!
 . . w "	if (!IsValidDate(eSrc)) {",!
 . . ;w "		alert(""\'"" + t['"_item.Name_"'] + ""\' "" + t['XDATE'] + ""\n"");",!
 . . w "		eSrc.className='clsInvalid';",!
 . . ;w "		eSrc.focus();",!
 . . w "		websys_setfocus('"_item.Name_"');",!
 . . w "		return  websys_cancel();",!
 . . w "	} else {",!
 . . w "		eSrc.className='';",!
 . . w "	}",!
 . . w "}",!
 . . ; Hook in the the text box change event
 . . w "var obj=document.getElementById('"_item.Name_"');",!
 . . w "if (obj) obj.onchange="_item.Name_"_changehandler;",!
 . ;
 . ; TIME
 . i "LIBRARY.TIME"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%",""),'item.Hidden d
 . . s hastimes=1
 . . q:item.DisplayOnly    ;just allow TimeValidation scripts to be added, but no need to write lookup scripts
 . . w "function "_item.Name_"_changehandler(e) {",!
 . . w "	var eSrc=websys_getSrcElement(e);",!
 . . w "	if (!IsValidTime(eSrc)) {",!
 . . ;w "		alert(""\'"" + t['"_item.Name_"'] + ""\' "" + t['XTIME'] + ""\n"");",!
 . . w "		eSrc.className='clsInvalid';",!
 . . ;w "		eSrc.focus();",!
 . . w "		websys_setfocus('"_item.Name_"');",!
 . . w "		return websys_cancel();",!
 . . w "	} else {",!
 . . w "		eSrc.className='';",!
 . . w "	}",!
 . . w "}",!
 . . ; Hook in the the text box change event
 . . w "var obj=document.getElementById('"_item.Name_"');",!
 . . w "if (obj) obj.onchange="_item.Name_"_changehandler;",!
 . ;
 . ; Numeric general - we may want to split numbers and currency at some stage
 . ; SA 1.4.03 - 32676/32817: LIBRARY.CURRENCY removed from here. New validation will be used for currency.
 . i "LIBRARY.FLOAT,LIBRARY.INTEGER,LIBRARY.NUMERIC"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%+",""),'item.Hidden d
 . . s hasnumbers=1
 . . q:item.DisplayOnly    ;just allow NumberValidation scripts to be there, but no need to write lookup scripts
 . . w "function "_item.Name_"_changehandler(e) {",!
 . . w "	var eSrc=websys_getSrcElement(e);",!
 . . w "	var isValid=0;",!
 . . w "	if (IsValidNumber(eSrc)) {",!
 . . w "		isValid=1;",!
 . . i "LIBRARY.INTEGER"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%+","") w "		if (!IsValidInteger(eSrc)) isValid=0;",!
 . . i item.DataType["+" w "		if (!IsPositiveNumber(eSrc)) isValid=0;",!
 . . w "	}",!
 . . w "	if (!isValid) {",!
 . . ;w "	if (!IsValidNumber(eSrc)) {",!
 . . ;w "		alert(""\'"" + t['"_item.Name_"'] + ""\' "" + t['XNUMBER'] + ""\n"");",!
 . . w "		eSrc.className='clsInvalid';",!
 . . ;w "		eSrc.focus();",!
 . . w "		websys_setfocus('"_item.Name_"');",!
 . . w "		return websys_cancel();",!
 . . w "	} else {",!
 . . w "		eSrc.className='';",!
 . . w "	}",!
 . . w "}",!
 . . ; Hook in the the text box change event
 . . w "var obj=document.getElementById('"_item.Name_"');",!
 . . w "if (obj) obj.onchange="_item.Name_"_changehandler;",!
 . ;
 . ; SA 1.4.03 - 32676/32817: SPECIAL VALIDATION -> CURRENCY
 . i "LIBRARY.CURRENCY"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%",""),'item.Hidden d
 . . s hascurrency=1
 . . q:item.DisplayOnly    ;just allow CurrencyValidation scripts to be added, but no need to write lookup scripts
 . . w "function "_item.Name_"_changehandler(e) {",!
 . . w "	var eSrc=websys_getSrcElement(e);",!
 . . w "	if (!IsValidCurrency(eSrc)) {",!
 . . ;w "		alert(""\'"" + t['"_item.Name_"'] + ""\' "" + t['XNUMBER'] + ""\n"");",!
 . . w "		eSrc.className='clsInvalid';",!
 . . ;w "		eSrc.focus();",!
 . . w "		websys_setfocus('"_item.Name_"');",!
 . . w "		return websys_cancel();",!
 . . w "	} else {",!
 . . w "		eSrc.className='';",!
 . . w "	}",!
 . . w "}",!
 . . ; Hook in the the text box change event
 . . w "var obj=document.getElementById('"_item.Name_"');",!
 . . w "if (obj) obj.onchange="_item.Name_"_changehandler;",!
 ;
 ; Process each field for form validation (required fields and any cross validation)
 ; Assume all pages can be forms !
 w "function f"_cname_"_submit() {",!
 w "  var msg='';",!
 for j=1:1:..Items.Count() d
 . s item=..Items.GetAt(j)
 . i 'item q
 . s inclitem=0
 . i item.Hidden s inclitem=1 ; if it's hidden include it
 . i $f(template,"i"_item.Name_"}") s inclitem=1 ; if it's on the template include it
 . i $zcvt(item.Name,"U")["DUMMY" s inclitem=1 ; if it's a dummy field include it
 . i 'inclitem q
 . ;i ..DisplayType="F"!(..DisplayType="L")!(..DisplayType="E"),'item.Hidden,'item.DisplayOnly,item.Required d
 . ; Do this for all types
 . i 'item.Hidden,'item.DisplayOnly,item.Required d
 . . ;;w "  try {",!
 . . ;;i item.DisplayType'="L" w "	if (document.getElementById('"_item.Name_"').value=='') {",!
 . . ;;i item.DisplayType="L" w "	if (document.getElementById('"_item.Name_"').selectedIndex==-1) {",!
 . . ;;w "		msg+=""\'"" + t['"_item.Name_"'] + ""\' "" + t['XMISSING'] + ""\n"";",!
 . . ;;w "		if (focusat==null) focusat=document.getElementById('"_item.Name_"');",!
 . . ;;w "	}",!
 . . ;;w "  } catch(e) {};",!
 . . i item.DisplayType'="L" w "  msg+=RequiredMsgObj(document.forms['f"_cname_"'].elements['"_item.Name_"'],false);",!
 . . i item.DisplayType="L" w "  msg+=RequiredMsgObj(document.forms['f"_cname_"'].elements['"_item.Name_"'],true);",!
 . //squash this all down to a single wrapper method
 . i "LIBRARY.DATE"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%",""),'item.Hidden,'item.DisplayOnly d
 . . ;;w "  try {",!
 . . ;;w "	if (!IsValidDate(document.getElementById('"_item.Name_"'))) {",!
 . . ;;w "		msg+=""\'"" + t['"_item.Name_"'] + ""\' "" + t['XDATE'] + ""\n"";",!
 . . ;;w "		if (focusat==null) focusat=document.getElementById('"_item.Name_"');",!
 . . ;;w "	}",!
 . . ;;w "  } catch(e) {};",!
 . . w "  msg+=DateMsg('"_item.Name_"');",!
 . i "LIBRARY.TIME"[$tr(##Class(%Library.Collation).Upper(item.DataType),"%",""),'item.Hidden,'item.DisplayOnly d
 . . ;;w "  try {",!
 . . ;;w "	if (!IsValidTime(document.getElementById('"_item.Name_"'))) {",!
 . . ;;w "		msg+=""\'"" + t['"_item.Name_"'] + ""\' "" + t['XTIME'] + ""\n"";",!
 . . ;;w "		if (focusat==null) focusat=document.getElementById('"_item.Name_"');",!
 . . ;;w "	}",!
 . . ;;w "  } catch(e) {};",!
 . . w "  msg+=TimeMsg('"_item.Name_"');",!
 w "  if (msg!='') {",!
 w "    alert(msg);",!
 ;w "		focusat.focus();",!
 w "    websys_setfocus(focusat.name);",!
 w "    return false;",!
 w "  } else {",!
 w "    return true;",!
 w "  }",!
 w "}",!
 ;
 ;;SP - only first focus if no explit tab sequence
 w "function InitMe() {",!
 i (("CFE"[..DisplayType)!(firstfocusat'="")) {
 if firstfocusat'="" {
 //w "	websys_setfocus('"_firstfocusat_"');",!
		//sometimes, firstfocusat is not on screen
		//w " websys_nexttab(0);",!
		w " if (document.getElementById('"_firstfocusat_"')&&(websys_canfocus(document.getElementById('"_firstfocusat_"')))) websys_setfocus('"_firstfocusat_"'); else websys_nexttab(0,document.f"_cname_");",!
 } else {
 w " websys_firstfocus();",!
 }
 }
 w " doneInit=1;",!
 w "}",!
 ; Something changed and not updated
 ;i (..DisplayType="E")!(..DisplayType="C") d
 ;. w "window.onbeforeunload=websys_isDirtyPagePrompt;",!
 ;. ; This didn't work greatly good - so have gone back to first item !
 ;. ; If we have an explicit tab sequence then use that, else go to the first focusable item
 ;. ;s k=$o(tabseq(""))
 ;. ;i k="" w "websys_firstfocus();",!
 ;. ;i k'="" w "websys_setfocus('"_tabseq(k)_"');",!
 ;. 
 ;
 //wrapper for required validation on submit
 //not used anymore but should leave in scripts in case custom scripts still call this
 w "function RequiredMsg(itemname,islist) {",!
 w " var msg='';",!
 w " var req=false;",!
 w " try {",!
 w "  if (!document.getElementById(itemname).disabled) {",!
 w "    if (islist) req=document.getElementById(itemname).selectedIndex==-1;",!
 w "    else req=document.getElementById(itemname).value=='';",!
 w "    if (req) {",!
 w "      msg+=""\'"" + t[itemname] + ""\' "" + t['XMISSING'] + ""\n"";",!
 w "      if (focusat==null) focusat=document.getElementById(itemname);",!
 w "    }",!
 w "  }",!
 w "  return msg;",!
 w " } catch(e) {return msg;};",!
 w "}",!
 w "function RequiredMsgObj(obj,islist) {",!
 w " var msg='';",!
 w " var req=false;",!
 w " try {",!
 w "  if (!obj.disabled) {",!
 w "    if (islist) {",!
 ;w "      req=obj.selectedIndex==-1;",!
 w "      if (typeof obj.tkItemPopulate!='undefined') req=obj.options.length<1;",!
 w "      else req=obj.selectedIndex==-1;",!
 w "    } else {",!
 w "      req=obj.value=='';",!
 w "    }",!
 w "    if (req) {",!
 w "      msg+=""\'"" + t[obj.id] + ""\' "" + t['XMISSING'] + ""\n"";",!
 w "      if (focusat==null) focusat=obj;",!
 w "    }",!
 w "  }",!
 w "  return msg;",!
 w " } catch(e) {return msg;};",!
 w "}",!

 ; General validation - only include if needed
 i hasdates d ..JSWriteDateValidation()
 i hastimes d ..JSWriteTimeValidation()
 i hasnumbers d ..JSWriteNumericValidation()
 i hascurrency d ..JSWriteCurrencyValidation()
 ;
 ; If there is a default expression, and a lookup then we need to run the broker (if there is one)
 ; this needs to go after all other JS - so put it in the component...
 q
]]></Implementation>
</Method>

<Method name="JSClose">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n f1,f2,fi1ename,p2,allpaths,i,slash
 ;
 //invalid file path
 i ..pOutput="" q
 c ..pOutput
 s f1=..pOutput
 //s f1=(..pOutput).Name
 //d (..pOutput).Close(),(..pOutput).%Close()
 ;
 s slash=##Class(websys.Conversions).GetDirectoryPathSlash()
 s fi1ename=$p(f1,slash,$l(f1,slash))
 s allpaths=$lg($g(^websys.ConfigurationD(1)),1)
 f i=2:1:$l(allpaths,";") d
 . s p2=$p(allpaths,";",i)
 . i p2'="" d
 . . s p2=##class(%Library.File).NormalizeDirectory(p2)
 . . s f2=p2_fi1ename
 . . i ##class(%Library.File).CopyFile(f1,f2)
 q
]]></Implementation>
</Method>

<Method name="JSOpen">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>extname:%Library.String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n path,filename

 s ..pOutput=""
 //get this directly
 s path=$lg($g(^websys.ConfigurationD(1)))
 s path=$p($g(path),";",1)
 i path="" q $$$ERROR($$$GeneralError)
 ;
 ; test directory
 s path=##class(%Library.File).NormalizeDirectory(path)
 i ##class(%Library.File).DirectoryExists(path)=0 q $$$ERROR($$$GeneralError)

 //build filename with extended name or without
 s filename=path_..Name_$s(extname'="":"_"_extname,1:"")_".js"

 o filename:"WSN":10 E  q $$$ERROR($$$GeneralError)
 s ..pOutput=filename
 ;
 q $$$OK
]]></Implementation>
</Method>

<Method name="JSPublish">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>currcontext:%Library.String="ALL"</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //don't publish for looKup component(s)
 i ..DisplayType="K" q $$$OK
 ;
 ;currcontext stuff - no longer used - we now defer generation of JS until component is displayed.
 ;unless we are doing the JSPublish from PublishAll in which case we do publish the lot.
 ;
 ; SP log 28514
 ; currcontext="" - called from LE without a current context
 ; currcontext=ctx - called from LE without a current context
 ; currcontext="ALL" - called without this parameter 
 ; i.e. this stuff  d:((context=currcontext)||(context="ALL")) 
 ;
 s langid=""
 ; Interactive user - get the first language
 i $d(%session) s langid=%session.Get("LOGON.LANGID")
 i langid d ##Class(websys.Translation).Load("COMP",langid,..%Id())
 i langid="" s langid=$o(^websys.TranslationD("COMP",""))

 //aways do self with no prefs etc
 d ##Class(websys.Translation).LoadContext(langid,..%Id(),"")
 i ..JSOpen() d ..JSBuild(..Template),..JSClose()

 ;
 f qry="websys.SysPreferences:FindByAppSubKey","websys.Preferences:FindByAppSubKey" {
	 s rs=##Class(%ResultSet).%New(qry)
	 d rs.Execute(..%Id())
	 while rs.Next() {
		 s prefid=$g(rs.Data("ID"))
		 s appkey=$g(rs.Data("AppKey"))
		 s appsubkey=$g(rs.Data("AppSubKey"))
		 s data=$g(rs.Data("Data"))
		 s otype=$g(rs.Data("ObjectType"))
		 s oreference=$g(rs.Data("ObjectReference"))
		 
		 //w !!,prefid," ",appkey," ",appsubkey," ",$l(data)," ",otype," ",oreference
		 
		 s context=$e(appkey,$l("LAYOUT")+1,999)
		 s otypex=$s(otype="User.SSUser":"U",otype="User.SSGroup":"G",otype="User.CTHospital":"H",1:"")
		 
		 s fileext=context //e.g W123
		 i otypex'="" {
			 i fileext'="" s fileext="_"_fileext
			 s fileext=otypex_oreference_fileext //prefix e.g. U1_
		 }
		 
		 //w !,fileext
		 if qry="websys.SysPreferences:FindByAppSubKey" {
			 s template=$lg($lg($g(^websys.SysPreferencesD(prefid)),3),1)
		 } else {
			 s template=$lg($lg($g(^websys.PreferencesD(prefid)),3),1)
		 }
		
		 i template="" s template=..Template 
		 //no template - no point :-)
		 i template'="" {
		 	 d ##Class(websys.Translation).LoadContext(langid,..%Id(),context)
 i ..JSOpen(fileext) d ..JSBuild(template),..JSClose()
		 } else {
			 //template not found
		 }
	 }
	 d rs.Close()
 }
]]></Implementation>
</Method>

<Method name="JSWriteCurrencyValidation">
<Description>
SA 1.4.03 - 32676/32817:
Generate currency validation based on configuration settings for decimal places and decimal separator.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n Config,GroupingSymbol,DecimalSymbol,DecimalPlaces
 ;
 s Config=$g(^websys.ConfigurationD(1))
 s DecimalSymbol=$s($lg(Config,62)'="":$lg(Config,62),1:".")
 s GroupingSymbol=$s(DecimalSymbol=",":".",1:",")
 s DecimalPlaces=$s($lg(Config,61)'="":$lg(Config,61),1:2)	
 ;
 ; IsValidCurrency function will:
 ; - check the number is a valid js number (remove grouping symbols, convert commas to dec -> run isNaN)
 ; - check grouping symbols (which must be 3 digits apart)
 ; - check decimal symbol only appears once
 ; - format the number to system defined number of decimal places
 ; - format the number to insert grouping symbols where required (hardcoded - in groups of 3)
 ;
 w "var curydecimalsym='"_DecimalSymbol_"';",!
 w "var curygroupsym='"_GroupingSymbol_"';",!
 w "function IsValidCurrency(p)  {",!
 w "	var CurrencyEntered=p.value;",!
 w "	// js doesn't recognise grouping symbols when doing isNaN, remove grouping symbols",!
 w "	// for check. These will be reset in CurrencyRound",!
 w "	var strCheckNum=CurrencyEntered.replace(/\"_GroupingSymbol_"/g, '');",!
 w "	var CurrNoGrpSym=CurrencyEntered.replace(/\"_GroupingSymbol_"/g, '');",!
 w "	if (('"_DecimalSymbol_"'==',')&&(strCheckNum.indexOf('"_DecimalSymbol_"')!=-1)) {",!
 w "		//js doesn't recognise dec. comma, only dec. point.",!
 w "		strCheckNum=strCheckNum.replace(/\,/g, '.');",!
 w "	}",!
 w "	if (isNaN(strCheckNum)) return false;",!
 w "	var IntegerPart='';",!
 w "	// Ignore any spaces passed",!
 w "	CurrencyEntered=CurrencyEntered.replace(/\ /g, '');",!
 w "	if ((CurrencyEntered.indexOf('"_DecimalSymbol_"'))!=-1) {",!
 w "		var AryCurrencyEntered=CurrencyEntered.split('"_DecimalSymbol_"');",!
 w "		if (AryCurrencyEntered.length>2) {",!
 w "			return false;",!
 w "		} else if (AryCurrencyEntered.length==2) {",!
 w "			//If decimal symbol is entered and decimal part is blank, number is invalid",!
 w "			if (AryCurrencyEntered[1] == '') return false;",!
 w "			//If a grouping symbol appears in the decimal part, number is invalid",!
 w "			if (AryCurrencyEntered[1].indexOf('"_GroupingSymbol_"')!=-1) return false;",!
 w "			IntegerPart=AryCurrencyEntered[0];",!
 w "		} else {",!
 w "			if (AryCurrencyEntered[0]) IntegerPart=AryCurrencyEntered[0];",!
 w "		}",!
 w "	} else {",!
 w "		IntegerPart=CurrencyEntered;",!
 w "	}",!
 w "	if ((IntegerPart!='')&&((IntegerPart.indexOf('"_GroupingSymbol_"'))!=-1)) {",!
 w "		var ArrIntegerPart=IntegerPart.split('"_GroupingSymbol_"');",!
 w "		//If first element of array is blank then a leading grouping symbol has been passed",!
 w "		if (ArrIntegerPart[0] == '') return false;",!
 w "		// j set to 1 since 1st element [0] can be shorter than 3, all other groups must be 3.",!
 w "		for (var j=1; j<ArrIntegerPart.length; j++) {",!
 w "			if (ArrIntegerPart[j].length != 3) return false",!
 w "		}",!
 w "	}",!
 w "	p.value=CurrencyRound(MedtrakCurrToJSMath(CurrNoGrpSym));",!
 w "	websys_returnEvent();",!
 w "	return true;",!
 w "}",!
 ;
 ; CurrencyRound function rounds value to system defined number of decimal places
 ; and also adds grouping symbols
 ;
 w "function CurrencyRound(flt) {",!
 w "	// CurrencyRound function rounds value to system defined number of decimal places",!
 w "	// and also adds grouping symbols",!
 w "	var bNeg=false;",!
 w "	var RoundedNum='';",!
 w "	var fltStr=flt.toString();",!
 w "	var fltArr=fltStr.split('.');",!
 w "	if (fltArr[0]) {",!
 w "		fltArr[0]=fltArr[0].replace(/\ /g, '');",!
 w "		if (fltArr[0]=='') fltArr[0]='0';",!
 w "	} else {",!
 w "		fltArr[0]='0';",!
 w "	}",!
 w "	if (fltArr[1]) {",!
 w "		if ((flt.toString().length - flt.toString().lastIndexOf('"_DecimalSymbol_"')) > (parseFloat("_DecimalPlaces_" + 1))) {",!
 w "			var Rounder = Math.pow(10,"_DecimalPlaces_");",!
 w "			var fltJS=flt.toString().replace(/\"_DecimalSymbol_"/g, '.');",!
 w "			RoundedNum=Math.round(fltJS * Rounder) / Rounder;",!
 w "			var RoundedNumStr=RoundedNum.toString();",!
 w "			if ('"_DecimalSymbol_"'!='.') RoundedNumStr=RoundedNumStr.replace(/\./g, '"_DecimalSymbol_"');",!
 w "			var RoundedNumArr=RoundedNumStr.split('"_DecimalSymbol_"');",!
 w "			if (!(RoundedNumArr[1])) {",!
 w "				RoundedNumArr[1]='';",!
 w "			}",!
 w "			for (var j=1; RoundedNumArr[1].length<"_DecimalPlaces_"; j++) {",!
 w "				RoundedNumArr[1]+='0';",!
 w "			}",!
 w "			// Case 0.000000 does not get rounded correctly",!
 w "			if (RoundedNumArr[1].length>"_DecimalPlaces_") RoundedNumArr[1]=RoundedNumArr[1].substring(0,"_DecimalPlaces_");",!
 w "			RoundedNumArr[0] = AddGroupingSymbol(RoundedNumArr[0]);",!
 w "			RoundedNum = RoundedNumArr.join('"_DecimalSymbol_"');",!
 w "			return RoundedNum;",!
 w "		}",!
 w "	} else {",!
 w "		fltArr[1]='';",!
 w "	}",!
 w "	for (var i=1; fltArr[1].length<"_DecimalPlaces_"; i++) {",!
 w "		fltArr[1]+='0';",!
 w "	}",!
 w "	fltArr[0] = AddGroupingSymbol(fltArr[0]);",!
 w "	fltStr = fltArr.join('"_DecimalSymbol_"');",!
 w "	return fltStr;",!
 w "}",!
 ;
 ; AddGroupingSymbol will add the system defined grouping symbol when passed in to 
 ; the integer part of the number (decimal part must NOT be passed). The group
 ; length is fixed to 3. We may need to add a new system param if we run into
 ; sites which group by 2.
 ;
 w "function AddGroupingSymbol(number) {",!
 w "	// AddGroupingSymbol will add the system defined grouping symbol when passed in to",!
 w "	// the integer part of the number (decimal part must NOT be passed). The group",!
 w "	// length is fixed to 3. We may need to add a new system param if we run into",!
 w "	// sites which group by 2.",!
 w "	number = '' + number;",!
 w "	if (number.length > 3) {",!
 w "		var mod = number.length % 3;",!
 w "		var output = (mod > 0 ? (number.substring(0,mod)) : '');",!
 w "		for (i=0 ; i < Math.floor(number.length / 3); i++) {",!
 w "			if ((mod == 0) && (i == 0)) {",!
 w "				output += number.substring(mod+ 3 * i, mod + 3 * i + 3);",!
 w "			} else {",!
 w "				output+= '"_GroupingSymbol_"' + number.substring(mod + 3 * i, mod + 3 * i + 3);",!
 w "			}",!
 w "		}",!
 w "		if (output.substring(0,2)=='-"_GroupingSymbol_"') {",!
 w "			output='-'+output.substring(2,output.length);",!
 w "		}",!
 w "		return (output);",!
 w "	} else { ",!
 w "		return number;",!
 w "	}",!
 w "}",!
 ;
 w "function SubtractCurrencyValues(StrNum1,StrNum2,StrNum3) {",!
 w "	// Function to subtract Medtrak Currency Values",!
 w "	// Up to 2 numbers can be subtracted from the first.",!
 w "	var strRemainder='';",!
 w "	var str1='';",!
 w "	var str2='';",!
 w "	var str3='';",!
 w "	Str1 = ((!StrNum1) ? '0' : MedtrakCurrToJSMath(StrNum1));",!
 w "	Str2 = ((!StrNum2) ? '0' : MedtrakCurrToJSMath(StrNum2));",!
 w "	Str3 = ((!StrNum3) ? '0' : MedtrakCurrToJSMath(StrNum3));",!
 w "	strRemainder=CurrencyRound(parseFloat(Str1)-parseFloat(Str2)-parseFloat(Str3));",!
 w "	return strRemainder;",!
 w "}",!
 ;
 w "function AddCurrencyValues(StrNum1,StrNum2,StrNum3) {",!
 w "	// Function to add Medtrak Currency Values",!
 w "	// Up to 3 numbers can added.",!
 w "	var strAddTotal='';",!
 w "	var str1='';",!
 w "	var str2='';",!
 w "	var str3='';",!
 w "	Str1 = ((!StrNum1) ? '0' : MedtrakCurrToJSMath(StrNum1));",!
 w "	Str2 = ((!StrNum2) ? '0' : MedtrakCurrToJSMath(StrNum2));",!
 w "	Str3 = ((!StrNum3) ? '0' : MedtrakCurrToJSMath(StrNum3));",!
 w "	strAddTotal=CurrencyRound(parseFloat(Str1)+parseFloat(Str2)+parseFloat(Str3));",!
 w "	return strAddTotal;",!
 w "}",!
 ;
 w "function MedtrakCurrToJSMath(StrNum) {",!
 w "	// JS Math class functions don't recognise decimal commas",!
 w "	// This function will format the Medtrak currency into a string",!
 w "	// JS recognises before Math function is called",!
 w "	var ReturnStr=StrNum.replace(/\ /g, '');",!
 w "	if (ReturnStr=='') {",!
 w "		ReturnStr='0';",!
 w "	} else {",!
 w "		ReturnStr=ReturnStr.replace(/\"_GroupingSymbol_"/g, '');",!
 w "		if (('"_DecimalSymbol_"'!='.')&&(ReturnStr.indexOf('"_DecimalSymbol_"')!=-1)) {",!
 w "			ReturnStr=ReturnStr.replace(/\"_DecimalSymbol_"/g, '.');",!
 w "		}",!
 w "	}",!
 w "	return ReturnStr;",!
 w "}",!
 ;
]]></Implementation>
</Method>

<Method name="JSWriteDateValidation">
<Description>
Generate date validation based on configuration</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n config,separator,format,todaych,cslide,maxdays
 s config=$g(^websys.ConfigurationD(1))
 s separator=$lg(config,4) s:separator="" separator="/"
 s format=$lg(config,10) s:separator="" separator="DMY"
 s todaych=$lg(config,5)
 s weekch=$lg(config,26)
 s monthch=$lg(config,25)
 s yearch=$lg(config,27)
 s cslide=$lg(config,3)
 s maxdays=+$lg(config,34)

 w "var dtseparator='"_separator_"';",!
 w "var dtformat='"_format_"';",!
 w:format="DMMMY" " var arrMONTH=session['XMONTHSSHORT'].split(',');",!

 //wrapper for date validation on submit 
 w "function DateMsg(itemname) {",!
 w "  var msg='';",!
 w "  try {",!
 w "	if (!IsValidDate(document.getElementById(itemname))) {",!
 w "		msg+=""\'"" + t[itemname] + ""\' "" + t['XDATE'] + ""\n"";",!
 w "		if (focusat==null) focusat=document.getElementById(itemname);",!
 w "	}",!
 w "	return msg;",!
 w "  } catch(e) {return msg;};",!
 w "}",!

 w "function isLeapYear(y) {",!
 w " return ((y%4)==0)&&(!(((y%100)==0)&&((y%400)!=0)));",!
 w "}"

 ;default format is DMY
 w "function ReWriteDate(d,m,y) {",!
 w " y=parseInt(y,10);",!
 w:format'="THAI" " if (y<"_cslide_") y+=2000; else if (y<100) y+=1900;",!
 w:format="THAI" " if (y<"_cslide_") y+=2500; else if (y<100) y+=2400;",!
 w " if ((y>99)&&(y<1000)) y+=1900;",!
 w " if ((d<10)&&(String(d).length<2)) d='0'+d;",!
 w " if ((m<10)&&(String(m).length<2)) m='0'+m;",!
 w:format="DMMMY" " m=arrMONTH[Number(m)-1];",!
 w " var newdate='';",!
 w:format="DMY" " newdate=d+'"_separator_"'+m+'"_separator_"'+y;",!
 w:format="THAI" " newdate=d+'"_separator_"'+m+'"_separator_"'+y;",!
 w:format="YMD" " newdate=y+'"_separator_"'+m+'"_separator_"'+d;",!
 w:format="MDY" " newdate=m+'"_separator_"'+d+'"_separator_"'+y;",!
 w:format="DMMMY" " newdate=d+' '+m+' '+y;",!
 w:format="HIJRA" " newdate=d+'"_separator_"'+m+'"_separator_"'+y+' ['+GregorianToHijra(d,m,y)+']';",!
 w " return newdate;",!
 w "}",!
 ;
 ;validates a date string following format: DMY,MDY, or YMD
 ;empty string is valid
 ;also if valid and non empty, converts date string
 ;eg. if 5th February 1999, and separator is "/", and format is YMD, accepts:
 ;  99/2/5, 1999/2/5,
 ;  5, 2/5, are valid but current year and month will be appended instead
 w "function IsValidDate(fld) {",!
 w " var dt=fld.value;",!
 w:format="HIJRA" " if ((dt.indexOf('[')!=-1)&&(dt.indexOf(']')!=-1)) dt=dt.slice(0,dt.indexOf(' ['));",!
 w " var re = /^(\s)+/ ; dt=dt.replace(re,'');",!
 w " var re = /(\s)+$/ ; dt=dt.replace(re,'');",!
 w " var re = /(\s){2,}/g ; dt=dt.replace(re,' ');",!
 w " if (dt=='') {fld.value=''; return 1;}",!
 w:format="DMMMY" " re=/^\d{1,2}\s\w+/; //re=/^\d{1,2}\s\w+\s\d{2,4}$/;",!
 w:format="DMMMY" " if (dt.search(re) != -1) {",!
 w:format="DMMMY" "  var dtArr=dt.split(' '); var mmm=dtArr[1].toUpperCase();",!
 w:format="DMMMY" "  for (var i=0, found=0; (i<12)&&(!found); i++) if (mmm==arrMONTH[i].toUpperCase()) {dtArr[1]=i+1; found=1;} ",!
 w:format="DMMMY" "  if (!found) return 0;",!
 w:format="DMMMY" "  dt=dtArr.join('"_separator_"');",! ;join again with month converted to num to validate day an year
 w:format="DMMMY" " }",!
 w " re = /[^0-9A-Za-z]/g ;",!
 w " dt=dt.replace(re,'"_separator_"');",!
 w " for (var i=0;i<dt.length;i++) {",!
 w "    var type=dt.substring(i,i+1).toUpperCase();",!
 w "    if (type=='"_todaych_"'||type=='"_weekch_"'||type=='"_monthch_"'||type=='"_yearch_"') {",!
 w "       if (type=='"_todaych_"') {return ConvertTDate(fld);} else {return ConvertWMYDate(fld,i,type);}",!
 w "       break;",!
 w "    }",!
 w " }",!
 w " if ((dt.indexOf('"_separator_"')==-1)&&(dt.length>2)) dt=ConvertNoDelimDate(dt);",!
 w:format="HIJRA" " if (dt.charAt(0).toUpperCase()=='H') return HijraIsValid(fld);",!
 w:format="HIJRA" " if (dt.charAt(0).toUpperCase()=='G') dt=dt.slice(1);",!
 w " var dtArr=dt.split('"_separator_"');",!
 w " var len=dtArr.length;",!
 w " if (len>3) return 0;",!
 w " for (i=0; i<len; i++) {",!
 w "  if (dtArr[i]=='') return 0;",!
 w " }",!
 w " var dy,mo,yr;",!
 w " for (i=len; i<3; i++) dtArr[i]='';",!
 ;
 w:format="MDY" " if (len==1) {dy=dtArr[0];mo=dtArr[1];} else {mo=dtArr[0];dy=dtArr[1];}",!
 w:format="MDY" " yr=dtArr[2];",!
 ;
 w:format="YMD" " if (len==1) {",!
 w:format="YMD" "  dy=dtArr[0];mo=dtArr[1];yr=dtArr[2];",!
 w:format="YMD" " } else if (len==2) {",!
 w:format="YMD" "  mo=dtArr[0];dy=dtArr[1];yr=dtArr[2];",!
 w:format="YMD" " } else {",!
 w:format="YMD" "  yr=dtArr[0];mo=dtArr[1];dy=dtArr[2];",!
 w:format="YMD" " }",!
 ;
 w:format="DMY" " dy=dtArr[0];mo=dtArr[1];yr=dtArr[2];",!
 w:format="THAI" " dy=dtArr[0];mo=dtArr[1];yr=dtArr[2];",!
 w:format="DMMMY" " dy=dtArr[0];mo=dtArr[1];yr=dtArr[2];",!
 w:format="HIJRA" " dy=dtArr[0];mo=dtArr[1];yr=dtArr[2];",!
 ;
 w " if ((String(yr).length!=2)&&(String(yr).length!=4)&&(String(yr).length!=0)) return 0;",!
 w " if ((String(yr).length==4)&&(yr<1840)) return 0;",!
 w " var today=new Date();",!
 w " if (yr=='') {",!
 w "  yr=today.getYear();",!
 w "  if (mo=='') mo=today.getMonth()+1;",!
 w " }",!
 w " if ((isNaN(dy))||(isNaN(mo))||(isNaN(yr))) return 0;",!
 w " if ((dy<1)||(dy>31)||(mo<1)||(mo>12)||(yr<0)) return 0;",!
 w " if (mo==2) {",!
 w "  if (dy>29) return 0;",!
 w "  if ((!isLeapYear(yr))&&(dy>28)) return 0;",!
 w " }",!
 w " if (((mo==4)||(mo==6)||(mo==9)||(mo==11))&&(dy>30)) return 0;",!
 w:+maxdays " if (isMaxedDate(dy,mo,yr)) return 0;",!
 w " fld.value=ReWriteDate(dy,mo,yr);",!
 w " websys_returnEvent();",!
 w " return 1;",!
 w "}",!

 if +maxdays {
 w "function isMaxedDate(dy,mo,yr) {",!
 w " var maxDate = new Date();",!
 w " maxDate.setTime(maxDate.getTime() + (1000*24*60*60*"_maxdays_"));",!
 w:format="THAI" " maxDate.setYear(maxDate.getFullYear()+543);",!
 w " yr = parseInt(yr,10); if (yr<15) yr+=2000; else if (yr<100) yr+=1900;",!
 w " if ((yr>99)&&(yr<1000)) yr+=1900;",!
 w " var objDate = new Date(yr,mo-1,dy,0,0,0);",!
 w " if (maxDate.getTime() < objDate.getTime()) return 1;",!
 w " return 0;",!
 w "}",!
 }

 ;converts the today character format to the current date
 ;allows for addition and subtraction from today
 w "function ConvertTDate(fld) {",!
 w " var today=new Date();",!
 w:format="THAI" "today.setYear(today.getFullYear()+543);",!
 w " var dt=fld.value;",!
 w " var re = /(\s)+/g ;",!
 w " dt=dt.replace(re,'');",!
 w " if (dt.charAt(0).toUpperCase()=='"_todaych_"') {",!
 w "  xdays = dt.slice(2);",!
 w "  if (xdays=='') xdays=0;",!
 w "  if (isNaN(xdays)) return 0;",!
 w:+maxdays "  if ((dt.charAt(1)=='+')&&(xdays>"_+maxdays_")) return 0;",!
 w "  xdays_ms = xdays * 24 * 60 * 60 * 1000;",!
 w "  if (dt.charAt(1) == '+') today.setTime(today.getTime() + xdays_ms);",!
 w "  else if (dt.charAt(1) == '-') today.setTime(today.getTime() - xdays_ms);",!
 w "  else if (dt.length>1) return 0;",!
 w "  fld.value=ReWriteDate(today.getDate(),today.getMonth()+1,today.getFullYear());",!
 w "  websys_returnEvent();",!
 w "  return 1;",!
 w " }",!
 w " return 0;",!
 w "}",!
 ;
 ;KM 3-Oct-2001: converts the week,month or year character format to the current date
 ;allows for addition and subtraction from today
 w "function ConvertWMYDate(fld,pos,type) {",!
 w " var today=new Date();",!
 w:format="THAI" "   today.setYear(today.getFullYear()+543);",!
 w " var dt=fld.value;",!
 w " var re = /(\s)+/g ;",!
 w " dt=dt.replace(re,'');",!
 w " var x = dt.substring(0,pos);xmn=0;xyr=0;",!
 w " if (x=='') x=1;",!
 w " if (isNaN(x)) return 0;",!
 w " if (dt.substring(pos+1,dt.length)!='') return 0;",!
 w " if (type=='"_monthch_"') {",!
 w " while (x>11) {xyr++;x=x-12}",!
 w " xmn=today.getMonth()+eval(x);",!
 w " if (xmn>=11) {xyr++;today.setMonth(eval(xmn-12));} else {today.setMonth(xmn);}",!
 w " } else if (type=='"_yearch_"') {xyr=x;",!
 w " } else {today.setTime(today.getTime() + (x * 7 * 24 * 60 * 60 * 1000));}",!
 w:+maxdays " if (isMaxedDate(today.getDate(),today.getMonth()+1,today.getFullYear()+eval(xyr))) return 0;",!
 w " fld.value=ReWriteDate(today.getDate(),today.getMonth()+1,today.getFullYear()+eval(xyr));",!
 w " websys_returnEvent();",!
 w " return 1;",!
 w " }",!
 ;
 // converts a datestr with no delimiter to one that has
 // eg. 150299 = 15/2/1999
 // note: datestr needs to be 4, 6 or 8 characters
 w "function ConvertNoDelimDate(dt)  {",!
 w " var len = dt.length;",!
 w " if (len%2) return dt;",!
 w " if (len>8) return dt;",!
 ;
 w:format="MDY" " var mn=dt.slice(0,2); var dy=dt.slice(2,4); var yr=dt.slice(4);",!
 ;
 w:format="DMY" " var dy=dt.slice(0,2); var mn=dt.slice(2,4); var yr=dt.slice(4);",!
 ;
 w:format="THAI" " var dy=dt.slice(0,2); var mn=dt.slice(2,4); var yr=dt.slice(4);",!
 ;
 w:format="DMMMY" " var dy=dt.slice(0,2); var mn=dt.slice(2,4); var yr=dt.slice(4);",!
 ;
 w:format="YMD" " var dy=dt.slice(len-2,len); var mn=dt.slice(len-4,len-2);",!
 w:format="YMD" " if (len==8) var yr=dt.slice(0,4);",!
 w:format="YMD" " else if (len==6) var yr=dt.slice(0,2);",!
 w:format="YMD" " else var yr='';",!
 ;
 w:format="HIJRA" " var dy=dt.slice(0,2); var mn=dt.slice(2,4); var yr=dt.slice(4);",!
 ;
 w " if (yr=='') {",!
 w "  var today = new Date();",!
 w:format="THAI" "   today.setYear(today.getFullYear()+543);",!
 w "  yr=today.getYear();",!
 w " }",!
 ;
 w:format="MDY" " var dtconv=mn+'"_separator_"'+dy+'"_separator_"'+yr;",!
 w:format="DMY" " var dtconv=dy+'"_separator_"'+mn+'"_separator_"'+yr;",!
 w:format="THAI" " var dtconv=dy+'"_separator_"'+mn+'"_separator_"'+yr;",!
 w:format="DMMMY" " var dtconv=dy+'"_separator_"'+mn+'"_separator_"'+yr;",!
 w:format="YMD" " var dtconv=yr+'"_separator_"'+mn+'"_separator_"'+dy;",!
 w:format="HIJRA" " var dtconv=dy+'"_separator_"'+mn+'"_separator_"'+yr;",!
 ;
 w " return dtconv",!
 w "}",!
 ;
 if format="HIJRA" {
 w "function GregorianToHijra(d,m,y) {",!
 w " d=parseInt(d,10);m=parseInt(m,10);y=parseInt(y,10);",!
 w " var jd=GregorianToJD(y,m,d)+(43200/86400.0);",!
 w " var hijra=JDToHijra(jd);",!
 w " y=hijra[0];m=hijra[1];d=hijra[2];",!
 w " if (d<10) d='0'+d;",!
 w " if (m<10) m='0'+m;",!
 w " return d+'"_separator_"'+m+'"_separator_"'+y;",!
 w "}",!
 w "function HijraIsValid(fld) {",!
 w " var dt=fld.value;",!
 w " var re = /(\s)+/g ;",!
 w " dt=dt.replace(re,'');",!
 w " dt=dt.slice(1);",!
 w " var arr=dt.split('"_separator_"');",!
 w " var dy=parseInt(arr[0],10),mo=parseInt(arr[1],10),yr=parseInt(arr[2],10);",!
 w " if ((isNaN(dy))||(isNaN(mo))||(isNaN(yr))) return 0;",!
 w " if ((dy<1)||(dy>30)||(mo<1)||(mo>12)||(yr<0)) return 0;",!
 w " if ((mo%2==0)&&(mo!=12)&&(dy>29)) return 0;",!
 w " if (mo==12) {var isleap=((((yr*11)+14)%30)<11); if ((!isleap)&&(dy>29)) return 0;}",!
 w " var jd=HijraToJD(yr,mo,dy)-0.5;",!
 w " var date=JDToGregorian(jd);",!
	w:maxdays " if (isMaxedDate(date[2],date[1],date[0])) return 0;",!
 w " if (date[0]<1841) return 0;",!
 w " if (dy<10) dy='0'+dy;",!
 w " if (mo<10) mo='0'+mo;",!
 w " fld.value=date[2]+'"_separator_"'+date[1]+'"_separator_"'+date[0] +' ['+dy+'"_separator_"'+mo+'"_separator_"'+yr+']';",!
 w " websys_returnEvent();",!
 w " return 1;",!
 w "}",!
 w "var GREGORIAN_EPOCH = 1721425.5;",!
 w "var HIJRA_EPOCH = 1948439.5;",!
 w "function JDToGregorian(jd) {",!
 w " var wjd=Math.floor(jd-0.5)+0.5;",!
 w " var depoch=wjd-GREGORIAN_EPOCH;",!
 w " var dqc=depoch%146097;",!
 w " var cent=Math.floor(dqc/36524);",!
 w " var dcent=dqc%36524;",!
 w " var dquad=dcent%1461;",!
 w " var yidx=Math.floor(dquad/365);",!
 w " var y=(Math.floor(depoch/146097)*400)+(cent*100)+(Math.floor(dcent/1461)*4)+yidx;",!
 w " if (!((cent==4)||(yidx==4))) y++;",!
 w " var yearday=wjd-GregorianToJD(y,1,1);",!
 w " var leapadj=((wjd<GregorianToJD(y,3,1))?0 : (isLeapYear(y)?1 : 2));",!
 w " var m=Math.floor((((yearday+leapadj)*12)+373)/367);",!
 w " var d=(wjd-GregorianToJD(y,m,1))+1;",!
 w " return new Array(y,m,d);",!
 w "}",!
 w "function GregorianToJD(y,m,d) {",!
 w " return (GREGORIAN_EPOCH-1) + (365*(y-1)) + Math.floor((y-1)/4) + (-Math.floor((y-1)/100)) + Math.floor((y-1)/400) + Math.floor((((367*m)-362)/12) + ((m<=2)?0 : (isLeapYear(y)?-1 : -2)) + d);",!
 w "}",!
 w "function JDToHijra(jd) {",!
 w " jd=Math.floor(jd)+0.5;",!
 w " var y=Math.floor(((30*(jd-HIJRA_EPOCH))+10646)/10631);",!
 w " var m=Math.min(12,Math.ceil((jd-(29+HijraToJD(y,1,1)))/29.5)+1);",!
 w " var d=(jd-HijraToJD(y,m,1))+1;",!
 w " return new Array(y,m,d);",!
 w "}",!
 w "function HijraToJD(y,m,d) {",!
 w " return (d + Math.ceil(29.5*(m-1)) + ((y-1)*354) + Math.floor((3+(11*y))/30) + HIJRA_EPOCH) - 1;",!
 w "}",!
 }

 q
]]></Implementation>
</Method>

<Method name="JSWriteNumericValidation">
<Description>
Generate numeric validation based on configuration settingd</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n config,decsym,grpsym
 s config=$g(^websys.ConfigurationD(1))
 s decsym=$s($lg(config,62)'="":$lg(config,62),1:".")
 s grpsym=$s(decsym=",":".",1:",")
 w "var curydecimalsym='"_decsym_"';",! //use same naming convention as currency
 w "var curygroupsym='"_grpsym_"';",!
 w "function IsValidNumber(p)  {",!
 w " var theNumber=p.value;",!
 w " if (isNaN(theNumber)) return false;",!
 w " return true;",!
 w "}",!
 w "function IsValidInteger(p)  {",!
 w " var theNumber=p.value; if (theNumber.charAt(0)=='+') theNumber=theNumber.slice(1);",!
 w " var re=/\D/g;",!
 w " if ((theNumber.charAt(0)=='+')||(theNumber.charAt(0)=='-')) theNumber=theNumber.slice(1);",!
 w " if ((theNumber!='')&&(re.test(theNumber))) return false;",!
 w " return true;",!
 w "}",!
 w "function IsPositiveNumber(p)  {",!
 w " var theNumber=p.value;",!
 w " if ((theNumber!='')&&(theNumber<0)) return false;",!
 w " return true;",!
 w "}",!
]]></Implementation>
</Method>

<Method name="JSWriteTimeValidation">
<Description>
Generate javascript time validation based on configuration.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n config,separator,format,todaych,cslide
 s config=##Class(websys.Configuration).%OpenId(1)
 s separator=$s(config:config.TimeSeparator,1:":")
 ;s format=$s(config:##Class(%Collation).Upper(config.TimeFormat),1:"")
 s nowch=$s(config:##Class(%Collation).Upper(config.TimeNowCharacter),1:"")
 s AMsym=$s(config:##Class(%Collation).Upper(config.TimeAMSymbol),1:"")
 s PMsym=$s(config:##Class(%Collation).Upper(config.TimePMSymbol),1:"")
 d:config config.%Close()

 //wrapper for time validation on submit 
 w "function TimeMsg(itemname) {",!
 w "  var msg='';",!
 w "  try {",!
 w "	if (!IsValidTime(document.getElementById(itemname))) {",!
 w "		msg+=""\'"" + t[itemname] + ""\' "" + t['XTIME'] + ""\n"";",!
 w "		if (focusat==null) focusat=document.getElementById(itemname);",!
 w "	}",!
 w "	return msg;",!
 w "  } catch(e) {return msg;};",!
 w "}",!
 ;
 ;converts a valid time string according to format")
 w "var tmseparator='"_separator_"';",!
 w "function ReWriteTime(h,m,s) {",!
 w " var newtime='';",!
 w " if (h<10) h='0'+h;",!
 w " if (m<10) m='0'+m;",!
 w " if (s<10) s='0'+s;",!
 w " newtime=h+'"_separator_"'+m ;",!
 w " return newtime;",!
 w "}",!
 ;
 ;validates a time string following a format:
 ;empty string is valid
 ;also if valid and non empty, converts time string
 ;the valid format should be h{:mm}{:ss}{F}
 ;where F is the form such as am,pm (case insensitive) or blank
 ; valid strings are: 1 (=1am), 1:00pm, 13:00, 13:00pM, 1pm, 13:00:00  (zeros can precede the hour)
 ; invalid are such: 13:00am, 13:1, 13:01:2, 13:00p,
 w "function IsValidTime(fld) {",!
 w " var TIMER=0;",!
 w " var tm=fld.value;",!
 w " var re = /^(\s)+/ ; tm=tm.replace(re,'');",!
 w " var re = /(\s)+$/ ; tm=tm.replace(re,'');",!
 w " var re = /(\s){2,}/g ; tm=tm.replace(re,' ');",!
 w " tm=tm.toUpperCase();",!
 w " var x=tm.indexOf(' "_AMsym_"');",!
 w " if (x==-1) x=tm.indexOf(' "_PMsym_"');",!
 w " if (x!=-1) tm=tm.substring(0,x)+tm.substr(x+1);",!
 w " if (tm=='') {fld.value=''; return 1;}",!
 w " re = /[^0-9A-Za-z]/g ;",!
 w " tm=tm.replace(re,'"_separator_"');",!
 w " if (isNaN(tm.charAt(0))) return ConvNTime(fld);",!
 w " if ((tm.indexOf('"_separator_"')==-1)&&(tm.length>2)) tm=ConvertNoDelimTime(tm);",!
 w " symIdx=tm.indexOf('"_PMsym_"');",!
 w " if (symIdx==-1) {",!
 w "  symIdx=tm.indexOf('"_AMsym_"');",!
 w "  if (symIdx!=-1) {",!
 w "   if (tm.slice(symIdx)!='"_AMsym_"') return 0;",!
 w "   else {",!
 w "    tm=tm.slice(0,symIdx);",!
 w "    TIMER=1;",!
 w "  }}",!
 w " } else {",!
 w "  if (tm.slice(symIdx)!='"_PMsym_"') return 0;",!
 w "  else {",!
 w "   tm=tm.slice(0,symIdx);",!
 w "   TIMER=2;",!
 w "  }",!
 w " }",!
 w " if (tm=='') return 0;",!
 w " var tmArr=tm.split('"_separator_"');",!
 w " var len=tmArr.length;",!
 w " if (len>3) return 0;",!
 w " for (i=0; i<len; i++) {",!
 w "  if (tmArr[i]=='') return 0;",!
 w " }",!
 w " var hr=tmArr[0];",!
 w " var mn=tmArr[1];",!
 w " var sc=tmArr[2];",!
 w " if (len==1) {",!
 w "  mn=0;",!
 w "  sc=0;",!
 w " } else if (len==2) {",!
 w "  if (mn.length!=2) return 0;",!
 w "  sc=0;",!
 w " } else if (len==3) {",!
 w "  if (mn.length!=2) return 0;",!
 w "  if (sc.length!=2) return 0;",!
 w " }",!
 w " if ((hr>12)&&(TIMER==1)) return 0;",!
 w " if ((hr==12)&&(TIMER==1)) hr=00;",!
 w " if ( isNaN(hr)||isNaN(mn)||isNaN(sc) ) return 0;",!
 w " hr=parseInt(hr,10);",!
 w " mn=parseInt(mn,10);",!
 w " sc=parseInt(sc,10);",!
 w " if ((hr>23)||(hr<0)||(mn>59)||(mn<0)||(sc>59)||(sc<0)) return 0;",!
 w " if ((hr<12)&&(TIMER==2)) hr+=12;",!
 w " fld.value=ReWriteTime(hr,mn,sc);",!
 w " websys_returnEvent();",!
 w " return 1;",!
 w "}",!
 ;
 ;converts the now format to the current time
 ;allows for addition and subtraction from "now"
 w "function ConvNTime(fld) {",!
 w " var now=new Date();",!
 w " var tm=fld.value;",!
 w " var re = /(\s)+/g ;",!
 w " tm=tm.replace(re,'');",!
 w " if (tm.charAt(0).toUpperCase()=='"_nowch_"') {",!
 w "  xmin = tm.slice(2);",!
 w "  if (xmin=='') xmin=0;",!
 w "  if (isNaN(xmin)) return 0;",!
 w "  xmin_ms = xmin * 60 * 1000;",!
 w "  if (tm.charAt(1) == '+') now.setTime(now.getTime() + xmin_ms);",!
 w "  else if (tm.charAt(1) == '-') now.setTime(now.getTime() - xmin_ms);",!
 w "  else if (tm.length>1) return 0;",!
 w "  fld.value=ReWriteTime(now.getHours(),now.getMinutes(),now.getSeconds());",!
 w "  websys_returnEvent();",!
 w "  return 1;",!
 w " }",!
 w " return 0;",!
 w "}",!
 ;
 // converts a timestr with no delimiter to one that has
 // eg. 0359 = 03:59
 // note: timestr needs to be 4 characters
 w "function ConvertNoDelimTime(tm)  {",!
 w " if (isNaN(tm)) return tm;",!
 w " var hr=tm.slice(0,2);",!
 w " var mn=tm.slice(2);",!
 w " var tmconv=hr+'"_separator_"'+mn;",!
 w " return tmconv",!
 w "}",!
 q
]]></Implementation>
</Method>

<Method name="JobPublishAll">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 j PublishAllX
 q
PublishAllX
 d ##Class(websys.Component).PublishAll()
 q
]]></Implementation>
</Method>

<Method name="LoadTrans">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;k t
 n j,m
 ;
 f j=1:1:..Messages.Count() s m=..Messages.GetAt(j) i m.Code'="" s t(m.Code)=$p(m.Description,"^")
 ;
 d ##Class(websys.Translation).Load("COMP",%session.Get("LOGON.LANGID"),..%Id())
 i ..%Id()=1906,$g(%request.Data("CONTEXT",1))'="" d ##Class(websys.Translation).Load("COMP",%session.Get("LOGON.LANGID"),..%Id()_%request.Data("CONTEXT",1))
 d ##Class(websys.Translation).LoadContext(%session.Get("LOGON.LANGID"),..%Id(),%request.Get("CONTEXT"))
 q
]]></Implementation>
</Method>

<Method name="LookUpByNameBroker">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",val:%Library.String=""</FormalSpec>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
	n name,cls,qry,type,retval
	s (name,cls,qry,type,retval)=""
	&sql(SELECT Name, ClassName, QueryName, DisplayType INTO :name,:cls,:qry,:type FROM websys.Component WHERE (Name=:val) ORDER BY Name)
	i 'SQLCODE d  q 1
	. s retval=itmjs_"('"_$ZCVT(name,"O","JS")_"');"
	. i itmjsex'="" s retval=retval_itmjsex_"('"_$ZCVT(name,"O","JS")_"^"_$ZCVT(cls,"O","JS")_"^"_$ZCVT(qry,"O","JS")_"^"_$ZCVT(type,"O","JS")_"');"
	. If 1 { Write (retval),! } 
	q 0
]]></Implementation>
</Method>

<Method name="LookUpWithDisplayTypeClose">
<Description>
Default implementation of LookUp Query.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>LookUpWithDisplayTypeFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n work,rs
 s work=$lb(QHandle,3)
 s rs=$lb(work,1)
 //SYSTEMOREF i rs d rs.%Close()
 s QHandle=""
 k %trakobjects(+rs) //SYSTEMOREF
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpWithDisplayTypeExecute">
<Description>
Default implementation of LookUp Query.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,name:%String=""]]></FormalSpec>
<PlaceAfter>GetIdFromCodeOrDescription</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 n rs
 s rs=##Class(%Library.ResultSet).%New("websys.Component:LookUpByName")
 s %trakobjects(+rs)=rs //SYSTEMOREF
 d rs.Execute(name)
 ;
 s user=$lb(name)
 s work=$lb(rs)
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpWithDisplayTypeFetch">
<Description>
Default implementation of LookUp Query.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>LookUpWithDisplayTypeExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 n rs,Name,DisplayType
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s rs=$li(work,1)
 s rs=$g(%trakobjects(+rs)) //SYSTEMOREF
 i rs.Next() {
 s Name=rs.GetData(1)
 s DisplayType=##Class(websys.StandardTypeItem).GetDescription("websys.Component.DisplayType",rs.GetData(4))
 s Row=$lb(Name,DisplayType)
 } else {
 s AtEnd=1,Row=""
 }
 ;
 s work=$lb(rs)
 ;
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="OpenName">
<Description>
Open an instance of the class by unique name</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>name:%String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id,namex
 s namex=$zcvt($zstrip(name,"*P",,",?"),"U"),id=""
 s:namex'="" id=$o(^websys.ComponentI("UniqueNameIndex",namex,id))
 i id="" q ""
 q ##Class(websys.Component).%OpenId(id,0)
 //s %code=0
 //i $$$CLASSabstract($$$MGINFO,%class) $$$GENERATE(" QUIT") QUIT $$$OK
 //;
 //$$$GENERATE(" n id")
 //$$$GENERATE(" s id=""""")
 //$$$GENERATE(" &sql(SELECT ID INTO :id FROM "_%class_" WHERE Name=:name)")
 //$$$GENERATE(" i 'SQLCODE,id'="""" q ##Class("_%class_").%OpenId(id,0)")
 //$$$GENERATE(" q """"")
 //QUIT $$$OK
]]></Implementation>
</Method>

<Method name="PublishAll">
<Description>
Invoke JSPublish for each Component.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n comp,obj,trm
 s trm=$i["TRM"
 ;
 s comp=""
 f  s comp=$o(^websys.ComponentD(comp))  q:comp=""  d
 . s obj=##Class(websys.Component).%OpenId(comp)
 . ;show the component name if we are running from a terminal session 
 . i obj d obj.JSPublish() w:trm !,obj.Name d obj.%Close()
 ;
 q
]]></Implementation>
</Method>

<Method name="QuerySQLNamesSet">
<Description>
Read only - property is set when QuerySQL is updated.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 ; property is set when QuerySQL is updated
 q
]]></Implementation>
</Method>

<Method name="QuerySQLParsedSet">
<Description>
Read only - property is set when QuerySQL is updated.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q
]]></Implementation>
</Method>

<Method name="QuerySQLSet">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n qry,pos,pos2,names,j
 ;
 i val="" d  q
 . s i%QuerySQL=""
 . s i%QuerySQLParsed=""
 . s i%QuerySQLNames=""
 ;
 ;s qry="SELECT blah FROM table WHERE x %startswith :foo AND y %startswith :bar AND z %startswith :bollox "
 s qry=##Class(websys.Conversions).WhiteSpace(val)_" "
 s pos=$f(qry,":",1)
 s names=""
 f j=1:1 q:pos=0  d 
 . f pos2=pos:1:$l(qry) q:(" ,)"[$e(qry,pos2))
 . s names=names_$LB($e(qry,pos,pos2-1))
 . s $e(qry,pos-1,pos2-1)="?"
 . s pos=$f(qry,":",pos)
 ;
 s i%QuerySQL=val
 ; Make upper so we can strip any ORDER by at run time
 s i%QuerySQLParsed=$ZCVT(qry,"U")
 s i%QuerySQLNames=names
 ;
 q
]]></Implementation>
</Method>

<Method name="ResetLayout">
<Description>
Reset layout to default.
Warning: This will remove any customised layout !</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 if ..DisplayType="F" do ..ResetLayoutFind() quit
 if ..DisplayType="L" do ..ResetLayoutFind() quit
 ; For now have the same default !
 if ..DisplayType="E" do ..ResetLayoutFind() quit
 if ..DisplayType="C" do ..ResetLayoutFind() quit
 quit
]]></Implementation>
</Method>

<Method name="ResetLayoutCustom">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ quit
]]></Implementation>
</Method>

<Method name="ResetLayoutEdit">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ quit
]]></Implementation>
</Method>

<Method name="ResetLayoutFind">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html
 s html="<TABLE>"_$c(13,10)
 ;
 ; Show all data entry fields, then show all buttons and links
 f j=1:1:..Items.Count() d
 . i ",B,A,"[(","_..Items.GetAt(j).DisplayType_",") q
 . ; Don't include hidden items
 . i ..Items.GetAt(j).Hidden q
 . s html=html_"<TR><TD>{c"_..%Id()_"i"_..Items.GetAt(j).Name_"}</TD>"_$c(13,10)
 . s html=html_"<TD>{d"_..%Id()_"i"_..Items.GetAt(j).Name_"}</TD></TR>"_$c(13,10)
 ;
 ; Show buttons and links (no caption)
 f j=1:1:..Items.Count() d
 . i ",B,A,"'[(","_..Items.GetAt(j).DisplayType_",") q
 . s html=html_"<TR><TD></TD>"_$c(13,10)
 . s html=html_"<TD>{d"_..%Id()_"i"_..Items.GetAt(j).Name_"}</TD></TR>"_$c(13,10)
 ;
 i ..TableItems.Count() d
 . s html=html_"<TR><TD>"_$c(13,10)
 . ;
 . ; The list
 . s html=html_"{table}"_$c(13,10)
 . ;
 . s html=html_"</TD></TR>"_$c(13,10)
 ;
 s html=html_"</TABLE>"_$c(13,10)
 s ..Template=html
 q
]]></Implementation>
</Method>

<Method name="ResetLayoutList">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>1</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html
 ; Main table with an element for the generated table and an element for the buttons
 s html="<TABLE>"_$c(13,10)
 s html=html_"<TR><TD>"_$c(13,10)
 ;
 ; The list
 s html=html_"{table}"_$c(13,10)
 ;
 s html=html_"</TD></TR>"_$c(13,10)
 ;
 ; Any buttons not on the list
 if ..Items.Count() d
 . s html=html_"<TR><TD>"_$c(13,10)
 . s html=html_"<TABLE>"_$c(13,10)
 . f j=1:1:..Items.Count() d
 . . s html=html_"<TR><TD class=""CellCaption"">{c"_..%Id()_"i"_..Items.GetAt(j).Name_"}</TD>"_$c(13,10)
 . . s html=html_"<TD class=""CellData"">{d"_..%Id()_"i"_..Items.GetAt(j).Name_"}</TD></TR>"_$c(13,10)
 . s html=html_"</TABLE>"_$c(13,10)
 . s html=html_"</TD></TR>"_$c(13,10)
 ;
 s html=html_"</TABLE>"_$c(13,10)
 ;
 s ..Template=html
 q
]]></Implementation>
</Method>

<Method name="SaveCustomLayout">
<Description>
Saves from Column Editor screen</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>UpdateDelete:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,id,cols,wids,sorts,saveas,context,uSet,comp,uRows,uPrint,uWrap,uFixedWidth,uExpandTree,uDelims,uSortCol,uSortOrd,ucaps,uSort2Col,uSort2Ord
 n prefid,xdata,xapp,xappid
 ;
 s id=$g(%request.Data("ID",1))
 s cols=$g(%request.Data("HCOLUMNS",1))
 s wids=$g(%request.Data("HWIDTHS",1))
 s saveas=$g(%request.Data("HSAVEAS",1))
 s context=$g(%request.Data("HCONTEXT",1))
 s sorts=$g(%request.Data("HENABLESORT",1))
 s uDelims=$g(%request.Data("HDELIMS",1))
 s uPrint=##Class(websys.Conversions).BooleanHtmlToLogical($g(%request.Data("Print",1)))
 s uWrap=##Class(websys.Conversions).BooleanHtmlToLogical($g(%request.Data("Wrap",1)))
 s uFixedWidth=##Class(websys.Conversions).BooleanHtmlToLogical($g(%request.Data("FixedWidth",1)))
 s uExpandTree=##Class(websys.Conversions).BooleanHtmlToLogical($g(%request.Data("ExpandTree",1)))
 s uSortOrd=##Class(websys.StandardTypeItem).GetIdFromCodeOrDescription("COLUMNSortOrder",$g(%request.Data("SortOrderDefault",1)))
 s uSort2Ord=##Class(websys.StandardTypeItem).GetIdFromCodeOrDescription("COLUMNSortOrder",$g(%request.Data("SortOrder2",1)))
 s uSortCol=$g(%request.Data("SortColumnDefault",1)),uSort2Col=$g(%request.Data("SortColumn2",1))
 if (uSortCol_uSort2Col'="") {
 s ucaps=$g(%request.Data("HCAPTIONS",1))
 f j=1:1:$l(ucaps,"^") {
	 	i uSortCol'="",$zcvt($p(ucaps,"^",j),"U")=$zcvt(uSortCol,"U") s uSortCol=j
	 	i uSort2Col'="",$zcvt($p(ucaps,"^",j),"U")=$zcvt(uSort2Col,"U") s uSort2Col=j
 }
 i uSortCol,uSortOrd="" s uSortOrd="A"
 i uSort2Col,uSort2Ord="" s uSort2Ord="A"
 }
 s:'uSortCol uSortOrd="" s:'uSort2Col uSort2Ord=""
 s prefid=$g(%request.Data("PREFID",1))
 ;i 'prefid,'##Class(websys.Conversions).BooleanHtmlToLogical($g(%request.Data("UseContext",1))) s context=""
 ;
 ;s uSet=cols
 s uSet="" f j=1:1:$l(cols,",") i $p(cols,",",j)'="" s:$l(uSet) uSet=uSet_"|" s uSet=uSet_$p(cols,",",j)_","_$p(wids,",",j)_","_$p(sorts,",",j)
 ;TN: 1-July-2003: uSet will now store like: 5:6:7:8,,|2,,|9:10,, where 
 ; $p(cols,",",j)=5:6:7:8 for columns 6,7,8 to be merged into column 5, etc
 ; list of column delimiters stored as string delimited by ^ require this list to be stored using $lb format so moving into "Rows" data
 ; even though "Rows" contain data applied to whole table, not individual columns
 s uRows=$lb($g(%request.Data("Rows",1)),uPrint,uWrap,uFixedWidth,uExpandTree,uDelims,uSortCol,uSortOrd,uSort2Col,uSort2Ord)
 ;
 s comp=##Class(websys.Component).%OpenId(id,0)
 ;
 i UpdateDelete="D" d
 . i saveas="U" d
 . . d ##Class(websys.Preferences).KillData("User.SSUser",%session.Get("LOGON.USERID"),"COLUMNS"_context,comp.Name)
 . . d ##Class(websys.Preferences).KillData("User.SSUser",%session.Get("LOGON.USERID"),"ROWS"_context,comp.Name)
 . i saveas="G" d
 . . d ##Class(websys.Preferences).KillData("User.SSGroup",%session.Get("LOGON.GROUPID"),"COLUMNS"_context,comp.Name)
 . . d ##Class(websys.Preferences).KillData("User.SSGroup",%session.Get("LOGON.GROUPID"),"ROWS"_context,comp.Name)
 . i saveas="T" d
 . . d ##Class(websys.Preferences).KillData("SITE",%session.Get("LOGON.SITECODE"),"COLUMNS"_context,comp.Name)
 . . d ##Class(websys.Preferences).KillData("SITE",%session.Get("LOGON.SITECODE"),"ROWS"_context,comp.Name)
 . i saveas="S",$l(context) d 
 . . d ##Class(websys.Preferences).KillData("SYS","SYS","COLUMNS"_context,comp.Name)
 . . d ##Class(websys.Preferences).KillData("SYS","SYS","ROWS"_context,comp.Name)
 . i saveas="S",'$l(context) s comp.TableSequence="",comp.ListRows="",comp.ListPrint=0,comp.TableDelimiters="" d comp.%Save()
 ;
 i UpdateDelete="U" d
 . i prefid d  q
 . . s xdata=$g(^websys.PreferencesD(prefid)),xapp=$lg(xdata,5),xappid=$lg(xdata,4)
 . . d ##Class(websys.Preferences).SetData(xapp,xappid,"COLUMNS"_context,comp.Name,uSet)
 . . d ##Class(websys.Preferences).SetData(xapp,xappid,"ROWS"_context,comp.Name,uRows)
 . . d comp.%Close()
 . ;
 . i saveas="U" d
 . . d ##Class(websys.Preferences).SetData("User.SSUser",%session.Get("LOGON.USERID"),"COLUMNS"_context,comp.Name,uSet)
 . . d ##Class(websys.Preferences).SetData("User.SSUser",%session.Get("LOGON.USERID"),"ROWS"_context,comp.Name,uRows)
 . i saveas="G" d
 . . d ##Class(websys.Preferences).SetData("User.SSGroup",%session.Get("LOGON.GROUPID"),"COLUMNS"_context,comp.Name,uSet)
 . . d ##Class(websys.Preferences).SetData("User.SSGroup",%session.Get("LOGON.GROUPID"),"ROWS"_context,comp.Name,uRows)
 . i saveas="T" d
 . . d ##Class(websys.Preferences).SetData("SITE",%session.Get("LOGON.SITECODE"),"COLUMNS"_context,comp.Name,uSet)
 . . d ##Class(websys.Preferences).SetData("SITE",%session.Get("LOGON.SITECODE"),"ROWS"_context,comp.Name,uRows)
 . i saveas="S",$l(context) d
 . . d ##Class(websys.Preferences).SetData("SYS","SYS","COLUMNS"_context,comp.Name,uSet)
 . . d ##Class(websys.Preferences).SetData("SYS","SYS","ROWS"_context,comp.Name,uRows)
 . i saveas="S",'$l(context) s comp.TableSequence=uSet,comp.ListRows=%request.Get("Rows"),comp.ListPrint=uPrint,comp.TableDelimiters=uDelims d comp.%Save()
 ;
 d comp.%Close()
 q
]]></Implementation>
</Method>

<Method name="SetDataWrapper">
<Description>
wrapper for websys.Preferences as at this time a list when send from VB appears blank on the server.
Includes:
Template
Menus
Columns</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>objectType:%Library.String,objectReference:%Library.String,appKey:%Library.String,appSubKey:%Library.String,template:%Library.String,activedata:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;d ##Class(websys.Preferences).SetData(objectType,objectReference,appKey,appSubKey,$lb(template,menus,headings))
 d ##Class(websys.Preferences).SetData(objectType,objectReference,appKey,appSubKey,$lb(template,$p(activedata,"^",2),$p(activedata,"^",3),$p(activedata,"^",4),$p(activedata,"^",5),$p(activedata,"^",6)))
 q
]]></Implementation>
</Method>

<Method name="SetItemData">
<Description>
Called from layout editor to set item properties</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itemname:%Library.String,ActiveObject:%Library.String,ActiveReference:%Library.String,ActiveData:%Library.String,context:%Library.String,langid:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,itm,itemtype,captionstyle,caption,style,required,displayonly,tooltip,shortcutkey,tabsequence,valuelist,iconprofile,defaultexpression,defaultalways,descr,linkworkflow,clucls,cluqry,cluprp,clubrk,istblitm
 ;
 s itemtype=$p(ActiveData,"^",1)
 s captionstyle=$p(ActiveData,"^",2)
 s caption=$p(ActiveData,"^",3)
 s style=$p(ActiveData,"^",4)
 s required=$p(ActiveData,"^",5)
 s displayonly=$p(ActiveData,"^",6)
 s tooltip=$p(ActiveData,"^",7)
 s shortcutkey=$p(ActiveData,"^",8)
 s tabsequence=$p(ActiveData,"^",9)
 s valuelist=$p(ActiveData,"^",10)
 s iconprofile=$p(ActiveData,"^",11)
 i iconprofile'="" s iconprofile=##Class(epr.CTIconProfile).GetIdFromCodeOrDescription(iconprofile)
 s defaultexpression=$tr($p(ActiveData,"^",12),"~","^")
 s defaultalways=$p(ActiveData,"^",13)
 s descr=$p(ActiveData,"^",14)
 s linkworkflow=$p(ActiveData,"^",15)
 s clucls=$p(ActiveData,"^",16)
 s cluqry=$p(ActiveData,"^",17)
 s cluprp=$p(ActiveData,"^",18)
 s clubrk=$p(ActiveData,"^",19,999)
 ; one or more ^
 i clubrk?1"^"."^" s clubrk=""
 ;
 ; try and find the item matching the name
 s itm=0,istblitm=0
 ;we can optimise this in Cache5 where we have index by name...
 f j=1:1:..Items.Count() i ..Items.GetAt(j).Name=itemname s itm=..Items.GetAt(j) q
 ;
 i 'itm f j=1:1:..TableItems.Count() i ..TableItems.GetAt(j).Name=itemname s itm=..TableItems.GetAt(j),istblitm=1 q
 ;
 i itm {
	 if itemtype="d"&("BA"[itm.DisplayType) s itemtype="b"
	 s:istblitm tabsequence="999"
	 ;
	 if ActiveObject="SYS"&(context="") {
	 	s:"c"[itemtype itm.CaptionStyle=captionstyle
	 	s:"cb"[itemtype itm.Caption=caption
	 	s:"bd"[itemtype itm.Style=style
	 	;s:"CL"[..DisplayType itm.Style=style
	 	s:istblitm itm.Style=style
	 	s:"bd"[itemtype itm.Tooltip=tooltip
	 	s:"bd"[itemtype itm.ShortcutKey=shortcutkey
	 	s:"bd"[itemtype itm.TabSequence=tabsequence
	 	s:"d"[itemtype itm.Required=required
	 	s:"bd"[itemtype itm.DisplayOnly=displayonly
	 	s:"d"[itemtype itm.IconProfile=iconprofile
	 	s:"d"[itemtype itm.DefaultValueAlways=defaultalways
	 	s:"d"[itemtype itm.DefaultValueExpression=defaultexpression
	 	i "bcd"[itemtype,descr'="~" s itm.Description=descr
	 	s:"bd"[itemtype itm.LinkWorkFlow=linkworkflow
	 	s:"bd"[itemtype itm.CustomLookupClassName=clucls
	 	s:"bd"[itemtype itm.CustomLookupQueryName=cluqry
	 	s:"bd"[itemtype itm.CustomLookupProperties=cluprp
	 	s:"bd"[itemtype itm.CustomLookupBrokerMethod=clubrk
 } else {
	 //remove langid from those that are not language specific
	 d:"c"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"CaptionStyle",captionstyle,"",ActiveObject,ActiveReference)
	 ;i itm.Caption'=caption d:"cb"[itemtype ##Class(websys.Translation).AddItem("COMP",langid,..%Id(),itemname,caption,1)
	 i itm.Caption'=caption,"cb"[itemtype {
		 i ..%Id()=1906,context'="" {d ##Class(websys.Translation).AddItem("COMP",langid,..%Id()_context,itemname,caption,1)}
		 else {d ##Class(websys.Translation).AddItem("COMP",langid,..%Id(),itemname,caption,1)}
	 }
	 i "cbd"[itemtype, descr'="~" d ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"Description",descr,langid,ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"Style",style,"",ActiveObject,ActiveReference)
	 ;d:"CL"[..DisplayType ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"Style",style,"",ActiveObject,ActiveReference)
	 d:istblitm ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"Style",style,"",ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"Tooltip",tooltip,langid,ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"ShortcutKey",shortcutkey,langid,ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"TabSequence",tabsequence,"",ActiveObject,ActiveReference)
	 d:"d"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"Required",required,"",ActiveObject,ActiveReference)
	 d:"d"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"DisplayOnly",displayonly,"",ActiveObject,ActiveReference)
	 d:"d"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"LookupUserDefinedValues",valuelist,"",ActiveObject,ActiveReference)
	 d:"d"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"IconProfile",iconprofile,"",ActiveObject,ActiveReference)
	 d:"d"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"DefaultValueAlways",defaultalways,"",ActiveObject,ActiveReference)
	 d:"d"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"DefaultValueExpression",defaultexpression,"",ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"LinkWorkFlow",linkworkflow,"",ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"CustomLookupClassName",clucls,"",ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"CustomLookupQueryName",cluqry,"",ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"CustomLookupProperties",cluprp,"",ActiveObject,ActiveReference)
	 d:"bd"[itemtype ##Class(websys.Translation).AddContextItem(..%Id(),context,itemname,"CustomLookupBrokerMethod",clubrk,"",ActiveObject,ActiveReference)
	}
 }
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetItemTranslation">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itemname:%Library.String,itemcaption:%Library.String,langid:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n t,j,itm,id,transid
 //new t to make sure we dont get any translated values in itm.Caption
 //check if the item has a protected translation first
 i $p($g(^websys.TranslationD("COMP",+langid,..%Id(),itemname)),"^",2) q 0

 //Find the item by name
 f j=1:1:..Items.Count() {
 s itm=..Items.GetAt(j)
 i itm.Name=itemname {
 ; add the item to the dictionary
 s id=##Class(websys.Dictionary).AddItem(itm.Caption)
 ; add the translation to the translated items
 d ##Class(websys.DictionaryTranslated).AddItem(langid,id,itemcaption)
 q
 }
 }
 f j=1:1:..TableItems.Count() {
 s itm=..TableItems.GetAt(j)
 i itm.Name=itemname {
 ; add the item to the dictionary
 s id=##Class(websys.Dictionary).AddItem(itm.Caption)
 ; add the translation to the translated items
 d ##Class(websys.DictionaryTranslated).AddItem(langid,id,itemcaption)
 q
 }
 }
 q $$$OK
]]></Implementation>
</Method>

<Method name="Show">
<Description>
Show the component - i.e. write out the HTML.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>isnested:%Library.String=""</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //Moved from webutils.inc dues to cache4.14 patches
 #define rget(%n)        $g(%request.Data(%n,1))
 #define sget(%n)        %session.Get(%n)
 //comment this line out of the component generator is in effect
 //s ..pNested=isnested
 //n (%request,%session,%this,msg,isnested)
 new j,template,obj,id,tmp,url,title,item,labclassName,WebClassName,parref,token,name,names,data,style,warning,menus,headings,itms
 new count,itmarray,tprint,xtra,loc,hospid,trustid
 ;
 //n mon
 i $g(%session.Data("LOGON.PPMCAPTURE"))!$g(%session.Data("LOGON.PPMDISPLAY")) s mon=##Class(websys.Monitor).%New(..Name_"^"_$g(%request.Data("TSRTITM_"_$tr(..Name,".","_"),1)))
 ;
 n rule
 s rule=$o(^websys.LogRulesI("Component",..%Id(),""))
 i rule'="" d
 . s rule=$g(^websys.LogRulesD(rule))
 . if $lg(rule,2) d ##Class(websys.Log).AddItem("O","websys.Component",..%Id())
 ; 
 ; Process the template
 s tprint=$$$rget("TPRINT")
 s context=$$$rget("CONTEXT")
 s template="",app="",warning=""
 //optimisation opportunity for trust id 
 s loc=$$$sget("LOGON.CTLOCID"),hospid="",trustid="" i loc s hospid=$p($g(^CTLOC(loc)),"^",22) i hospid s trustid=##Class(web.CTHospital).getTrustId(hospid)
 s data=##Class(websys.Preferences).GetDataExLE($$$sget("LOGON.USERID"),$$$sget("LOGON.GROUPID"),hospid,$$$sget("LOGON.SITECODE"),context,"LAYOUT",..%Id(),.ActiveObject,.ActiveReference,.ActiveContext,trustid)
 i data'="" s template=$lg(data,1),menus=+$lg(data,2),headings=+$lg(data,3),useformsize=$lg(data,4),formsize=$lg(data,5),formcenter=+$lg(data,6)
 i template="" s template=..Template,menus=..HideMenus,headings=..HideHeadings,useformsize=..UseFormSizeAndPosition,formsize=..FormSizeAndPosition,formcenter=..CenterForm
 // and then pass it back in ! odd construct !
 s ..Template=template,..HideMenus=menus,..HideHeadings=headings,..UseFormSizeAndPosition=useformsize,..FormSizeAndPosition=formsize,..CenterForm=formcenter
 ;
 d ##Class(websys.ComponentXRef).GetXRef(%this,ActiveContext,$$$sget("LOGON.LANGID"),ActiveObject,ActiveReference,isnested)
 ;
 i $g(%session.Data("LOGON.PPMDISPLAY")) d mon.Show()
 i $g(%session.Data("LOGON.PPMCAPTURE")) d mon.Freeze(),mon.%Save()
 ;
 i $d(mon) d mon.%Close()
 ;
 quit
]]></Implementation>
</Method>

<Method name="ShowLayoutCaption">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>id:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html,caption,cls,dis
 ;
 s html=""
 s cls="COMPONENTCAPTION"
 s html="<span CLASS="_cls_" id="""_id_""" name="""_id_""" >"
 if (id="M") {
 s html=html_..Caption
 } elseif (id="M1") {
 s html=html_..Caption1
 } elseif (id="M2") {
 s html=html_..Caption2
 } elseif (id="M3") {
 s html=html_..Caption3
 } elseif (id="M4") {
 s html=html_..Caption4
 } elseif (id="M5") {
 s html=html_..Caption5
 } elseif (id="M6") {
 s html=html_..Caption6
 } elseif (id="M7") {
 s html=html_..Caption7
 } elseif (id="M8") {
 s html=html_..Caption8
 } elseif (id="M9") {
 s html=html_..Caption9
 }
 s html=html_"</span>"

 q html
]]></Implementation>
</Method>

<Method name="ShowLayoutEditor">
<Description>
Include OBJECT tags for layout editor.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //note: 642 will have skipped a version of LE, but is still compatible - 12-Jan-2004
 //&html<
 //<object id="MSXML3" classid="clsid:f5078f32-c551-11d3-89b9-0000f81fe221" codebase="../addins/client/msxml3.cab#version=8,00,7820,0" type="application/x-oleobject" STYLE="display: none"></object>
 //<OBJECT ID="TrakWeb" CLASSID="CLSID:B70C2903-B228-4F42-BE0A-3A536B2B86CA" CODEBASE="../addins/client/trakWebEdit3.CAB#version=3,0,0,74"></object>>

 //XML no longer required since XML options have been removed from LE
 &html<
 <OBJECT ID="TrakWeb" CLASSID="CLSID:B70C2903-B228-4F42-BE0A-3A536B2B86CA" CODEBASE="../addins/client/trakWebEdit3.CAB#version=3,0,0,188"></object>>
 q
]]></Implementation>
</Method>

<Method name="ShowLayoutLE">
<Description>
Generate HTML (as a string) for use in GUI Layout editor - excludes all scripting.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&UserID:%Library.String,&GroupID:%Library.String,&HospID:%Library.String,&SiteCODE:%Library.String,context:%Library.String,langid:%Library.String,&ActiveObject:%Library.String,&ActiveContext:%Library.String,&ActiveData:%Library.String,&TrustID:%Library.String="",prefid:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new j,html,obj,id,template,token,item,name,names,menus,headings,data,useformsize,formsize,formcenter,prefdata,cnt
 k ^TMP("WEB",$j)
 ;
 ; replace the items in the template
 set html="",token=""
 ;
 s obj="",cnt=0
 ;
 ; Process the template
 ; At this time assume that all items belong to the same component
 ; wow - this bit's getting a bit convoluted
 s template=""
 if prefid="" {
	 s data=##Class(websys.Preferences).GetDataExLE(UserID,GroupID,HospID,SiteCODE,context,"LAYOUT",..%Id(),.ActiveObject,.ActiveReference,.ActiveContext,TrustID)
 } else {
	 s prefdata=$g(^websys.PreferencesD(prefid))
	 s ActiveContext=$p($lg(prefdata,1),"LAYOUT",2,999) ; take the string after 'LAYOUT'
	 ;componentid = $lg(,2)
	 s data=$lg(prefdata,3)
	 s ActiveReference=$lg(prefdata,4)
	 s ActiveObject=$lg(prefdata,5)
	 if ActiveObject="User.SSUser" s UserID=$lg(prefdata,4)
	 if ActiveObject="User.SSGroup" s GroupID=$lg(prefdata,4)
	 if ActiveObject="SITE" s SiteCODE=$lg(prefdata,4)
 }
 i data'="" s template=$lg(data,1),menus=+$lg(data,2),headings=+$lg(data,3),useformsize=$lg(data,4),formsize=$lg(data,5),formcenter=+$lg(data,6)
 i template="" s template=..Template,menus=..HideMenus,headings=..HideHeadings,useformsize=..UseFormSizeAndPosition,formsize=..FormSizeAndPosition,formcenter=..CenterForm
 ;
 i ..DisplayType'="K" {
 d ##Class(websys.Translation).Load("COMP",langid,..%Id())
 i ..%Id()=1906,context'="" d ##Class(websys.Translation).Load("COMP",langid,..%Id()_ActiveContext)
 d ##Class(websys.Translation).LoadContext(langid,..%Id(),ActiveContext,ActiveObject,ActiveReference)
 } else {
 d ##Class(websys.Translation).LoadLookup(langid,context)
 }

 ;
 ; Re-package the return data (;eave out the template - not required)
 ; lets hope we won;t have to do much of this nonsense...
 s ActiveData="^"_menus_"^"_headings_"^"_useformsize_"^"_formsize_"^"_formcenter
 ;
 ; Build an index of names
 f j=1:1:..Items.Count() i ..Items.GetAt(j).Name'="" s names(..Items.GetAt(j).Name)=j
 ;
 ; while template'=""
 f  q:template=""  d
 . i $l(html)>16000 s cnt=cnt+1,^TMP("WEB",$j,cnt)=html,html=""
 . ; process the head
 . s html=html_$p(template,"{")
 . ; keep the body
 . s template=$p(template,"{",2,99999)
 . ;
 . ; Try and find a matching token
 . s token=$p(template,"}",1),template=$p(template,"}",2,99999)
 . q:token=""
 . ;
 . ; If it is something we can process then process it
 . i token?1"c"1n.n1"i"1e.e s name=$p(token,"i",2,99),item=$g(names(name)) i +item s html=html_..Items.GetAt(item).ShowLayoutCaption(token) q
 . i token?1"M"1n.n s html=html_..ShowLayoutCaption(token) q
 . i token?1"R"1n.n1"i"1e.e s name=$p(token,"i",2,99),item=$g(names(name)) i +item s html=html_..Items.GetAt(item).ShowLayoutDescription(token) q
 . i token?1"d"1n.n1"i"1e.e s name=$p(token,"i",2,99),item=$g(names(name)) i +item s html=html_..Items.GetAt(item).ShowLayout(token) q
 . i token="table" d  q
 . . i ..DisplayType'="K" s html=html_..ShowLayoutList() q
 . . i ..DisplayType="K" s html=html_..ShowLayoutListLookup($p(context,"K",2,999)) q
 . ; else its just some other html so write out we've got
 . s html=html_"{"_token_"}"
 ;
 ; and then whatever is left over
 s cnt=cnt+1,^TMP("WEB",$j,cnt)=html,html=""
 q ""
 //quit html
]]></Implementation>
</Method>

<Method name="ShowLayoutLENext">
<CodeMode>code</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	n tmp,data
	
	s tmp=""
	s tmp=$o(^TMP("WEB",$j,tmp))
	
	//this means we are at the end as there should be no blank lines
	i tmp="" q ""
	
	s data=$g(^TMP("WEB",$j,tmp))
	//kill as we go
	k ^TMP("WEB",$j,tmp)
	q data
]]></Implementation>
</Method>

<Method name="ShowLayoutList">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,html,itm
 ;
 s html=""
 s html=html_"<TABLE CLASS=COMPONENTTABLE>"
 ; Table Heading
 s html=html_"<THEAD>"
 for j=1:1:..TableItems.Count() d
 . s itm=..TableItems.GetAt(j)
 . i "IP,A"[itm.DisplayType d
 . . s html=html_"<TH>"_itm.ShowLayout("d"_..%Id()_"i"_itm.Name)_"</TH>"
 . i "IP,A"'[itm.DisplayType d
 . . s html=html_"<TH>"_itm.ShowLayoutCaption("c"_..%Id()_"i"_itm.Name,1)_"</TH>"
 s html=html_"</THEAD>"
 s html=html_"</TABLE>"
 ;
 q html
]]></Implementation>
</Method>

<Method name="ShowLayoutListLookup">
<CodeMode>code</CodeMode>
<FormalSpec>classqueryname:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 n j,html,rs,caption,id
 ;
 s html=""
 s html=html_"<TABLE CLASS=COMPONENTTABLE>"
 ; Table Heading
 s html=html_"<THEAD>"

 s rs=##Class(%ResultSet).%New(classqueryname)

 for j=1:1:rs.GetColumnCount() {
	 //use the caption
	 s caption=rs.GetColumnHeader(j)
	 //else make something up
	 s:caption="" caption="Col "_j
	 
	 //ignore hidden columns (e.g. col2)
	 i $zcvt(caption,"U")'="HIDDEN" {
		 
		 //use the column no. instead of the name
		 s id="c"_..%Id()_"i"_j
		 
		 s html=html_"<TH>"
		 s html=html_"<INPUT CLASS=COMPONENTITEMD"_" id="""_id_""" name="""_id_""" value="""_$tr($g(t(j),caption),"""","'")_""">"
		 s html=html_"</TH>"
	 }

 }
 s html=html_"</THEAD>"
 s html=html_"</TABLE>"
 ;
 q html
]]></Implementation>
</Method>

<Method name="XMLId">
<Description>
Get the ID from the identified by string.
By default the generated version of this returns the value passed.
In general this method will be overridden to provide the required behaviour.
For example - Component name is passed - this will return ..%Id()</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;q ..GetIdFromCodeOrDescription(val)
 i '$d(^websys.ComponentD(val)) s ^websys.ComponentD(val)=$lb("Component"_val)
 q val
]]></Implementation>
</Method>

<Query name="Find">
<Type>%SQLQuery</Type>
<FormalSpec>name:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT Name
FROM Component
WHERE (Name %STARTSWITH :name)</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Name:%String"/>
</Query>

<Query name="FindSqlItems">
<Description>
Show the data dictionary stuff in a list component in the same format as the layout editor option</Description>
<Type>%Library.Query</Type>
<FormalSpec>compname:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Caption,Name,SQLReference,SQLTable,SQLColumn,VBCodeTable,Comment"/>
</Query>

<Query name="LookUpByName">
<Type>%Library.SQLQuery</Type>
<FormalSpec>name:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT Name, ClassName, QueryName, DisplayType
FROM websys.Component
WHERE (Name %STARTSWITH :name)
ORDER BY Name</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Name:%String,ClassName:%String,QueryName:%String,HIDDEN"/>
</Query>

<Query name="LookUpWithDisplayType">
<Type>%Library.Query</Type>
<FormalSpec>name:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Name:%String,DisplayType:%String"/>
</Query>

<Query name="VBFind">
<Description>
Used by component manager</Description>
<Type>%SQLQuery</Type>
<FormalSpec>name</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT ID, Name, ClassName, QueryName, DisplayType
FROM Component
WHERE Name %STARTSWITH :name
ORDER BY Name</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Name:%String,ClassName:%String,QueryName:%String,DisplayType:%String"/>
</Query>

<Query name="VBFindLE">
<Type>%Library.SQLQuery</Type>
<FormalSpec>name:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT ID, Name
FROM Component
WHERE Name %STARTSWITH :name
ORDER BY Name</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID:%Library.String,Name:%Library.String"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^websys.ComponentD</DataLocation>
<DefaultData>ComponentDefaultData</DefaultData>
<IdLocation>^websys.ComponentD</IdLocation>
<IndexLocation>^websys.ComponentI</IndexLocation>
<StreamLocation>^websys.ComponentS</StreamLocation>
<Data name="ComponentClassName">
<Attribute>%%CLASSNAME</Attribute>
<Structure>node</Structure>
<Subscript>0</Subscript>
</Data>
<Data name="ComponentDefaultData">
<Structure>listnode</Structure>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>QueryName</Value>
</Value>
<Value name="4">
<Value>DisplayType</Value>
</Value>
<Value name="5">
<Value>Caption</Value>
</Value>
<Value name="6">
<Value>Style</Value>
</Value>
<Value name="7">
<Value>TableSequence</Value>
</Value>
<Value name="8">
<Value>Menus</Value>
</Value>
<Value name="9">
<Value>QuerySQL</Value>
</Value>
<Value name="10">
<Value>Script</Value>
</Value>
<Value name="11">
<Value>HideMenus</Value>
</Value>
<Value name="12">
<Value>HideHeadings</Value>
</Value>
<Value name="13">
<Value>MultiPart</Value>
</Value>
<Value name="14">
<Value>Build</Value>
</Value>
<Value name="15">
<Value>BuildDate</Value>
</Value>
<Value name="16">
<Value>BuildTime</Value>
</Value>
<Value name="17">
<Value>Disabled</Value>
</Value>
<Value name="18">
<Value>CustomScript</Value>
</Value>
<Value name="19">
<Value>pOutput</Value>
</Value>
<Value name="20">
<Value>ListRows</Value>
</Value>
<Value name="21">
<Value>ShowNextInNewWindow</Value>
</Value>
<Value name="22">
<Value>OtherScripts</Value>
</Value>
<Value name="23">
<Value>Help</Value>
</Value>
<Value name="24">
<Value>QuerySQLNames</Value>
</Value>
<Value name="25">
<Value>QuerySQLParsed</Value>
</Value>
<Value name="26">
<Value>pNested</Value>
</Value>
<Value name="27">
<Value>CodeTable</Value>
</Value>
<Value name="28">
<Value>ListPrint</Value>
</Value>
<Value name="29">
<Value>PassThruParameters</Value>
</Value>
<Value name="30">
<Value>LockExtraClass</Value>
</Value>
<Value name="31">
<Value>LockExtraId</Value>
</Value>
<Value name="32">
<Value>CenterForm</Value>
</Value>
<Value name="33">
<Value>FormSizeAndPosition</Value>
</Value>
<Value name="34">
<Value>UseFormSizeAndPosition</Value>
</Value>
<Value name="35">
<Value>Caption1</Value>
</Value>
<Value name="36">
<Value>Caption2</Value>
</Value>
<Value name="37">
<Value>Caption3</Value>
</Value>
<Value name="38">
<Value>Caption4</Value>
</Value>
<Value name="39">
<Value>Caption5</Value>
</Value>
<Value name="40">
<Value>Caption6</Value>
</Value>
<Value name="41">
<Value>Caption7</Value>
</Value>
<Value name="42">
<Value>Caption8</Value>
</Value>
<Value name="43">
<Value>Caption9</Value>
</Value>
<Value name="44">
<Value>TableDelimiters</Value>
</Value>
<Value name="45">
<Value>LastUpdateDate</Value>
</Value>
<Value name="46">
<Value>LastUpdateTime</Value>
</Value>
</Data>
<Data name="ComponentTemplate">
<Attribute>Template</Attribute>
<Structure>node</Structure>
<Subscript>"Template"</Subscript>
</Data>
<Property name="Caption"/>
<Property name="Caption1"/>
<Property name="Caption2"/>
<Property name="Caption3"/>
<Property name="Caption4"/>
<Property name="Caption5"/>
<Property name="Caption6"/>
<Property name="Caption7"/>
<Property name="Caption8"/>
<Property name="Caption9"/>
<Property name="CenterForm"/>
<Property name="ClassName"/>
<Property name="CodeTable"/>
<Property name="CustomScript"/>
<Property name="Disabled"/>
<Property name="DisplayType"/>
<Property name="FormSizeAndPosition"/>
<Property name="Help"/>
<Property name="HideHeadings"/>
<Property name="HideMenus"/>
<Property name="ListPrint"/>
<Property name="ListRows"/>
<Property name="LockExtraClass"/>
<Property name="LockExtraId"/>
<Property name="Menus"/>
<Property name="MultiPart"/>
<Property name="Name"/>
<Property name="OtherScripts"/>
<Property name="PassThruParameters"/>
<Property name="QueryName"/>
<Property name="QuerySQL"/>
<Property name="QuerySQLNames"/>
<Property name="QuerySQLParsed"/>
<Property name="Script"/>
<Property name="ShowNextInNewWindow"/>
<Property name="Style"/>
<Property name="TableSequence"/>
<Property name="Template"/>
<Property name="UseFormSizeAndPosition"/>
</Storage>
</Class>
</Export>
