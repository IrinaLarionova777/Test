<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.Patch">
<Description>
Very simple class to handle interface for patching.
This is by design simple so we don't have to patch it !!!
This should therefore not be used by parts of the application other than patching.</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>60218,47035.212982</TimeCreated>

<Method name="Execute">
<Description>
Execute a expression.
Used (ONLY) by patch utilities.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>exp:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s $zt="Executeztrap"
 ;
 ; Always set the variable 'ret' as the return string from the execution
 ; This method will quit with the value of ret.
 ;
 k e,ret
 i exp'="""" x exp
 s ret=$g(ret)
 q ret
Executeztrap
 ; This interface provides an output mechanism
 w !,$ze
 q $ze
]]></Implementation>
</Method>

<Method name="xxxBackupSource">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>MEDnamespace:%Library.String,WEBnamespace:%Library.String,CachePathToMBackup:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n cns,x,dr,logfile,tmeBefore,tmeAfter
 ;
 s $zt="BPerr"
 s logfile=CachePathToMBackup_".log"
 ;
 s cns=$zu(5),dr(0)="",dr(1)=""
 i MEDnamespace'="" s x=$zu(5,MEDnamespace),dr(0)=$zu(168)
 i WEBnamespace'="" s x=$zu(5,WEBnamespace),dr(1)=$zu(168)
 S x=$zu(5,"%SYS")
 ;
 k ^SYS("BACKUP")     
 m ^SYS("BACKUP")=^SYS("BACKUPCHUI") K ^SYS("BACKUPCHUI")
 ;
 s $zt="BPerr1"
 i dr(0)'="" s ^SYS("BACKUPCHUI","DIRECTORIES",dr(0))=""
 i dr(1)'="" s ^SYS("BACKUPCHUI","DIRECTORIES",dr(1))=""
 ;     
 s tmeBefore=$p($h,",",2)
 d BACKUP^DBACK("","F","Automatic Backup",CachePathToMBackup,"Y",logfile,"NOISY","Y","Y","")     
 s tmeAfter=$p($h,",",2)
 ;
Restore k ^SYS("BACKUPCHUI")
 m ^SYS("BACKUPCHUI")=^SYS("BACKUP") k ^SYS("BACKUP")     
 s x=$zu(5,cns)
 ;
 i (tmeAfter-tmeBefore)<4 q "Backup prior to patching failed."	
 q ""
 ;
BPerr q $ze
 ;
BPerr1 d Restore
 q $ze
]]></Implementation>
</Method>

<Method name="xxxDropTableDefinition">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>AllClassNames:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 s SQLCODE="",msg=""
 f i=1:1:$l(AllClassNames,"^") d:$p(AllClassNames,"^",i)'=""  q:msg'=""
 .s SQLCODE="",msg=""
 .s Classname=$p(AllClassNames,"^",i)
 .d DropTable^%apiSQL(Classname,0,.SQLCODE,.msg)
 .k ^mdd("rebuild",Classname)
 ;
 I msg="" q ""
 i msg'="" q SQLCODE_"^"_msg
 ;
]]></Implementation>
</Method>

<Method name="xxxExecuteGogen">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>FileName:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 d GIGEN^tkpatch(FileName)
 q

]]></Implementation>
</Method>

<Method name="xxxExecuteRomf">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>FileName:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 d RIMF^tkpatch(FileName)
 q


]]></Implementation>
</Method>

<Method name="xxxGetCSPPhysPaths">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>WebSourceNS:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 s (a,x)=""
 f  s x=$o(^%SYS("CSP","Applications",x)) q:x=""  d  ;
 .s d=^(x)
 .i $LI(d,9)=WebSourceNS s a=a_$LI(d,2)_"^"
 q a
]]></Implementation>
</Method>

<Method name="xxxGetMEDNSpaces">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>MedSourceNS:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 s ret=""
 s x=##class(websys.Configuration).%OpenId(1,0)
 ; Cannot verify MedSOurce Namespace ; i '$d(^[MedSourceNS]SS) s MedSourceNS=""
 s ret=x.DataNamespace_"^"_MedSourceNS_"^"_$p(x.LayoutManager,":",3)
 q ret
]]></Implementation>
</Method>

<Method name="xxxGetNSDirectories">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&MedData:%Library.String,&MedSource:%Library.String,&WebSource:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 s (dirMD,dirMS,dirWS)=""
 ;
 s CurrNS=$zu(5)
 s $zt="MS"
 zn MedData
 s dirMD=$zu(168)
 ;
MS s $zt="WS"
 zn MedSource
 s dirMS=$zu(168)
 ;
WS s $zt="quit"	
 zn WebSource
 s dirWS=$zu(168)
 ;
quit zn CurrNS
 q (dirMD_"^"_dirMS_"^"_dirWS)

]]></Implementation>
</Method>

<Method name="xxxGetNSMounted">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>MedData:%Library.String,MedSource:%Library.String,WebSource:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 s (dirMD,dirMS,dirWS)=0
 ;
 s $zt="MS1"
 zn MedData
 w $D(^ROUTINE)
 s dirMD=1
 ;
MS1 s $zt="WS1"
 zn MedSource
 w $D(^ROUTINE)
 s dirMS=1
 ;
WS1 s $zt="quit1"	
 zn WebSource
 w $D(^ROUTINE)
 s dirWS=1
 ;
quit1 q (dirMD_"^"_dirMS_"^"_dirWS)
]]></Implementation>
</Method>

<Method name="xxxGetValidNamespaceNames">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&WebSourceList:%Library.String,&MedSourceList:%Library.String]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 ; Get a list of valid 'websource' and 'medsource' type namespaces.
 ;
 ;
 ;NEW i,n,x,d,NS,CNS,list
 ;
 s CNS=$zu(5)
 s (a,b)=""
 ;
 ;
 f i=1:1:$zu(90,0) s list($zu(90,2,0,i))=""
 s n="" 
 f  s n=$o(list(n)) q:n=""  d  ;
 .i $zu(5,n)
 .s nds="^^"_$zu(12,"")
 .i nds'="^^" D  ;
 ..i $zu(5,nds)
 ..i $D(^SS) s b=b_n_"^"
 ..i $D(^websys.ConfigurationD) s a=a_n_"^"
 ;
 s WebSourceList=a
 S MedSourceList=b
 ;
 i $zu(5,CNS)
 ;
]]></Implementation>
</Method>

<Method name="xxxImportMDD">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>Filename:%Library.String,MEDNamespace:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 S $zt="IMDDErrQuit"
 s cns=$zu(5)
 zn MEDNamespace
 ;
 S IO=Filename
 i (IO'?.E1".MDD".E)&(IO'?.E1".mdd".E) S %gifmsg="Invalid file name.  Expected *.MDD file name",flag=0 g exit
 S IOPAR="(""UR"")"
 S IOSZ=""
 ;
 s glo="^mdd"
 k ^mtemp1("%GIF")
 s ^mtemp1("%GIF",glo)=0
 s external=1
 s endian=0,version=2
 ;
 ; Remove old ^mdd file
 k ^mdd
 ;
 s $ze=""
 Use 0 Write:'external !!,"Loading globals" Set time=$h Do INT^%DIR
 Kill ^%utility($j)
 ;
 New write,dev,gui,mask,confo,confr,glo,fmt,blkcnt,%UI
 Set fmt=7
 If IO?2N Use IO Write *-5 Close IO ;magtape
 Set write=$s(external=0:1,1:0),dev=IO_":"_IOPAR,gui=0,mask="*",confo=0,confr=0
 Set glo="",gcnt(0)=0,gcnt(1)=0,gcnt(2)=0
 For  Set glo=$o(^mtemp1("%GIF",glo)) Quit:glo=""  Do
 . Set gcnt(^mtemp1("%GIF",glo))=gcnt(^mtemp1("%GIF",glo))+1
 . Quit:(^mtemp1("%GIF",glo)=1)&($d(@glo))  Set ^%utility($j,$e(glo,2,999))=""
 ;
 Set time=$h
 Set flag=$$main^%Wgr(dev,fmt,mask,confo,confr,gui)
 ;
exit ;
 ; check if succesfully imported
 i '$d(^mdd) s flag=0,%gifmsg="Warning: ^mdd file removed but not succesfully restored."_$c(13,10)_"Please import manually."
 ;
 Set $zt="" Use 0 If $g(IO)'="",IO'=$i Close IO Kill IO
 Kill ^mtemp1("%GIF")
 Set $zt="" If $ze'="" Set %gifmsg=%gifmsg_$c(10,13)_$ze
 ;
 l -%GIQ Close 63
 ;
 zn cns
 ;
 Quit:'$g(flag) %gifmsg
 Quit:$g(flag) ""
 ;
IMDDErrQuit ;
 g exit
]]></Implementation>
</Method>

<Method name="xxxImportMEDRoutines">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>Filename:%Library.String,MEDNamespace:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 New IO,IOPAR,BACKUP,WANTCOM,WANTSYN,OVLAY,external,DSMRS,SETLANG,SETOK,OK,%READ,DAT
 New MWHENCE,EXTS,DESC,ROU
 ;
 s $ZT="IMRErrQuit"
 ;
 S IO=Filename
 s cns=$ZU(5)
 zn MEDNamespace
 ;
 s IOPAR="(""RS"")"
 S BACKUP=0
 S WANTCOM=1
 S WANTSYN=0
 S OVLAY=1
 S external=1
 s $ze=""
 ;
 s DSMRS=0,SETLANG=0
 S SETOK=""
 s OK=1,%R=0
 ;
 i (IO'?.E1".RO".E)&(IO'?.E1".ro".E) S $ze="Invalid file name.  Expected *.RO file name" g ENDFIL
 ;
 O IO
 U IO R HEAD,DAT
 S MWHENCE=$P(HEAD,"^"),EXTS=$P(HEAD,"^",2),DESC=$P($P(HEAD,"^",3,999),"^~Format=",1)
 ;
 F ii=0:0 D RNAM^%RI Q:ROU=""  I '$G(MCODE),ROU'="*" D SAVE^%RI,RDIR^%RI
 ;
 C IO
 ;
ENDFIL S R=0 U 0 W !!,%R_" routine"_$S(%R=1:"",1:"s")_" processed. "
 ;
IMRErrQuit ZN cns
 q $ze
]]></Implementation>
</Method>

<Method name="xxxImportMergeSS">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>Filename:%Library.String,MEDNamespace:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 new cNS
 s cNS=$zu(5)
 i $zu(5,MEDNamespace)
 ;
 i $zu(5)=MEDNamespace d  q ret  ;
 .s ret=$$int^SSGIF(Filename) 
 .i $zu(5,cNS)
 ;
 s ret="Unable to switch into namespace: "_MEDNamespace
 q ret
 ;
]]></Implementation>
</Method>

<Method name="xxxMDDTableNamesGet">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 s (x,tname,ret)=""
 f  s x=$O(^TMP("ClassNames",$j,x)) q:x=""  d  ;
 .s ret=ret_x_"^"
 ;
 i $l(ret)>0 s ret=$e(ret,1,$l(ret)-1)
 q ret
]]></Implementation>
</Method>

<Method name="xxxRebuildMDDTable">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>AllTableNames:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 f i=1:1:$l(AllTableNames,"^") d:$p(AllTableNames,"^",i)'=""  ;
 .n node s tablename=$p(AllTableNames,"^",i)
 .s node="" f  s node=$o(^mdd("rebuild",tablename,node)) q:node=""  d  ;
 ..x ^mdd("rebuild",tablename,node)

]]></Implementation>
</Method>

<Method name="xxxRestoreSource">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>MEDnamespace:%Library.String,WEBnamespace:%Library.String,CachePathToMBackup:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 S CNS=$ZU(5)
 S X=$ZU(5,"%SYS")
 ;
 S QUIETMODE=1
 S ALLOWUPD=0
 S INPDEV=CachePathToMBackup
 s DIRLIST=$zn_".txt"
 o DIRLIST:"WNS" u DIRLIST
 i $G(MEDnamespace)'="" W MEDnamespace_","_MEDnamespace_",N"
 i $G(WEBnamespace)'="" W !,WEBnamespace_","_WEBnamespace_",N"
 c DIRLIST
 u 0
 S JRNOPT=4
 S JRNFILE=""
 S JDIRGLO=""
 S JOB10=1
 ;
 s ANS=$$EXTSELCT^DBREST(QUIETMODE,ALLOWUPD,INPDEV,DIRLIST,JRNOPT,JRNFILE,JDIRGLO)
 S X=$ZU(5,CNS)
 q ANS
]]></Implementation>
</Method>

<Method name="xxxRestoreTKImport">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>CachePathToTKImport:%Library.String,WEBnamespace:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 new cns,x
 s cns=""
 i $zu(5)'=WEBnamespace s cns=$zu(5),x=$zu(5,WEBnamespace)
 ;
 ; Silent %RIMF restore
 ;
 s $zt="errRTKI"
 ;
 s DONE=""
 s IO=CachePathToTKImport
 s IOPAR="(""UR"")"
 s IOT="RMS"
 d HEAD^%RIMF
 S X2="S OK=1 U 0 W !,ROU"
 F NR=1:1 D ONEROU^%RIMF Q:DONE
 C IO
 U 0
 Q ""
 ;
errRTKI u 0
 q $ZE
]]></Implementation>
</Method>

<Method name="xxxRunTKImport">
<Description>
Execute tkImport in silent non-interactive mode.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>CachePathToPatches:%Library.String,CachePathToViews:%Library.String,OVRPathToScripts:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 ; Call tkImport non-interactively
 ;
 s xCD=$i
 s msg=$$int^tkimport(CachePathToPatches,CachePathToViews,OVRPathToScripts,"N")
 u xCV
 q msg
]]></Implementation>
</Method>
</Class>
</Export>
