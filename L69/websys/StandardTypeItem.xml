<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.StandardTypeItem">
<Description>
Standard Type Item</Description>
<Abstract>0</Abstract>
<ClassType>persistent</ClassType>
<CompileAfter>websys.StandardType</CompileAfter>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>SQLStorage</StorageStrategy>
<Super>%Library.Persistent,websys.Abstract,XML.Abstract</Super>
<TimeCreated>60218,47035.434913</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="BUILD">
<Internal/>
<Default>297</Default>
</Parameter>

<Parameter name="SQLDATEFROM">
<Internal/>
</Parameter>

<Parameter name="SQLDATETO">
<Internal/>
</Parameter>

<Parameter name="EXTENTSIZE">
<Default>562</Default>
</Parameter>

<Parameter name="SQLCODE">
<Default>Code</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Description>
This is set to StoredValue to allow GetIdFromCodeOrDescription to return StoredValue rather than id.</Description>
<Final>0</Final>
<Default>Description</Default>
</Parameter>

<Parameter name="SQLROWID">
<Final>0</Final>
<Default>StoredValue</Default>
</Parameter>

<Parameter name="xmlidentifiedby">
<Description>
Used in conjunction with XMLId method to unqiuely identify a record.
By default ..%Id() is used unless other properties are specified. A comma separated list may be provided and processed by overridding XMLId method</Description>
<Final>0</Final>
<Default>%Id()</Default>
</Parameter>

<Parameter name="xmltoclass">
<Description>
Mapping from XML to Class</Description>
<Final>0</Final>
<Default>standardtypeitem</Default>
</Parameter>

<Index name="RowIDBasedIDKeyIndex">
<Extent>0</Extent>
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ChildSub</Properties>
<Unique>1</Unique>
</Index>

<Property name="ChildSub">
<Description>
ChildSub</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>$i(^websys.StandardTypeD("STD",$s($d(p1):p1,1:%d(0)),"0"))</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<SqlComputed>0</SqlComputed>
<SqlFieldName>ChildSub</SqlFieldName>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="MAXLEN" value="30"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Code">
<Description>
Code</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<SqlComputed>0</SqlComputed>
<SqlFieldName>Code</SqlFieldName>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Upper"/>
<Parameter name="MAXLEN" value="30"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Description">
<Description>
Description</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlColumnNumber>5</SqlColumnNumber>
<SqlComputed>0</SqlComputed>
<SqlFieldName>Description</SqlFieldName>
<Transient>0</Transient>
<Parameter name="COLLATION" value="AlphaUp"/>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ExtraValue">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="IsDirty">
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>0</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ParRef">
<Description>
ParRef</Description>
<Type>StandardType</Type>
<Cardinality>parent</Cardinality>
<Collection/>
<Inverse>ChildStandardTypeItem</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<SqlFieldName>ParRef</SqlFieldName>
</Property>

<Property name="StoredValue">
<Description>
Stored StoredValue</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<SqlComputed>0</SqlComputed>
<SqlFieldName>StoredValue</SqlFieldName>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="MAXLEN" value="30"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="GetDescription">
<Description>
Get the description given the type and StoredValue.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>type:%Library.String,val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id
 s id=""
 &sql(SELECT Description INTO :id FROM websys.StandardTypeItem WHERE ParRef=:type AND StoredValue=:val)
 i $l(id) q id
 ;
 q ""
]]></Implementation>
</Method>

<Method name="GetDescriptionFromCode">
<Description>
Get the description given the type and Code.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>type:%Library.String,code:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;n now
 ;s now=""
 ;s now=##Class(websys.Conversions).TimeLogicalToHtml(+$p($h,",",2))
 ;s ^zarmc($zn,"Start","PAADMVisitStatus")=now
 ;
 n desc
 s desc=""
 &sql(SELECT Description INTO :desc FROM websys.StandardTypeItem WHERE ParRef=:type AND Code=:code)
 i 'SQLCODE q desc
 ;s now=##Class(websys.Conversions).TimeLogicalToHtml(+$p($h,",",2))
 ;s ^zarmc($zn,"End","PAADMVisitStatus")=now
 q ""
]]></Implementation>
</Method>

<Method name="GetDescriptionPlus">
<Description>
KM 13-Sept-2001:
Get the description and ExtraValue from the type and val</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>type:%Library.String="",val:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n desc,extrval
 &sql(SELECT Description,ExtraValue INTO :desc,:extrval FROM websys.StandardTypeItem WHERE ParRef=:type AND StoredValue=:val)
 i SQLCODE q ""
 q $lb(desc,extrval)
]]></Implementation>
</Method>

<Method name="GetExactDescription">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>type:%Library.String,val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;This method is written by Hun LY on 28/06/2002
 n id
 s id=""
 &sql(SELECT Description INTO :id FROM websys.StandardTypeItem WHERE ParRef=:type AND %EXACT(StoredValue)=:val)
 i $l(id) q id
 ;
 q ""
]]></Implementation>
</Method>

<Method name="GetIdFromCodeOrDescription">
<Description>
Get the StoredValue from code or description.
StoredValue is the stored database StoredValue.
Code or Description can be entered by users at prompts.
Description is the display StoredValue.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>type:%Library.String,val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id
 s id=""
 &sql(SELECT StoredValue INTO :id FROM websys.StandardTypeItem WHERE ParRef=:type AND Code=:val)
 i $l(id) q id
 ;
 &sql(SELECT StoredValue INTO :id FROM websys.StandardTypeItem WHERE ParRef=:type AND Description=:val)
 i $l(id) q id
 ;
 q ""
]]></Implementation>
</Method>

<Method name="LookUpBrokerByType">
<Description><![CDATA[
KM 11-Mar-2002: Edited as it was throwing and UNDEFINED error
n id,code,desc
;
s (id,code,desc)=""
;
; Try and find a matching code
&sql(SELECT StoredValue,Description,Code INTO :id,:desc,:code FROM websys.StandardTypeItem WHERE PARREF->Code=:type AND Code=:val)
;
; Try and find a matching description
i '$l(id) &sql(SELECT StoredValue,Description,Code INTO :id,:desc,:code FROM websys.StandardTypeItem WHERE PARREF->Code=:type AND Description=:val)
;
s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_$ZCVT(code,"O","JS")_"^"_id_"');"
&javascript<#(retval)#>
i id="" q 0
q 1]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itmjs:%Library.String,itmjsex:%Library.String="",type:%Library.String="",val:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //k ^zkath("websys.StandardTypeItem","LookUpBrokerbyType")

 n id,code,desc,retval
 s (id,code,desc,retval)=""
 s type=$g(type),val=$g(val)

 ; Try and find a matching code
 &sql(SELECT StoredValue,Description,Code INTO :id, :desc, :code 
 FROM websys.StandardTypeItem WHERE PARREF->Code=:type AND Code = :val)

 ; Try and find a matching description
 i '$l(id) &sql(SELECT StoredValue,Description,Code INTO :id, :desc, :code FROM websys.StandardTypeItem WHERE PARREF->Code=:type AND Description = :val)
 ;
 i id="" s desc=val
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_$ZCVT(code,"O","JS")_"^"_$ZCVT(id,"O","JS")_"');"
 &javascript<#(retval)#>
 i id="" q 0
 q 1
]]></Implementation>
</Method>

<Method name="LookUpBrokerByTypeButRestrict">
<Description>
Called by the web broker.
The main purpose is to convert from code to description dynamically.
itmjs - javascript function e.g. Location_lookupsel
itmjsex - extended javascript function</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itmjs:%Library.String,itmjsex:%Library.String,type:%Library.String="",val:%Library.String="",codelist:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id,code,desc
 s itmjsex=$g(itmjsex),val=$g(val),type=$g(type),codelist=$g(codelist)
 ;
 s (id,code,desc)=""
 ;
 ; Try and find a matching code
 &sql(SELECT StoredValue,Description,Code INTO :id,:desc,:code FROM websys.StandardTypeItem WHERE PARREF->Code=:type AND Code=:val AND ((:codelist [ (StoredValue) ) OR (:codelist IS NULL)))
 ;
 ; Try and find a matching description
 i '$l(id) &sql(SELECT StoredValue,Description,Code INTO :id,:desc,:code FROM websys.StandardTypeItem WHERE PARREF->Code=:type AND Description=:val AND ((:codelist [ (StoredValue) ) OR (:codelist IS NULL)))
 ;
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_$ZCVT(code,"O","JS")_"^"_id_"');"
 &javascript<#(retval)#>
 i id="" q 0
 ;
 q 1
]]></Implementation>
</Method>

<Method name="websysSave">
<Description><![CDATA[
Default save method used for updating the database for Components of type Edit.<br>
<br>
The compref is the  component reference which is the string from which we can deduce the instance of<BR>
websysComponent<BR>
websysComponentItem<BR>
id is the id for the instance of class we wish to update.]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%String,id:%String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n cnt,itm,save,trakoptionsenabled
 s cnt=1
 s trakoptionsenabled=$lg($g(^websys.ConfigurationD(1)),18)
 ;TN: if site has EnableTRAKOptions turned off in the configuration (so cannot save against SYSTEM) then
 ; mark IsDirty as true so patching will not override site's saved details
 while $d(%request.Data("IDz"_cnt)) {
 s itm=##Class(websys.StandardTypeItem).%OpenId(%request.Get("IDz"_cnt))
 if itm {
 s itm.StoredValue=%request.Get("Valuez"_cnt)
 s itm.Code=%request.Get("Codez"_cnt)
 s itm.Description=%request.Get("Descriptionz"_cnt)
 s itm.ExtraValue=%request.Get("ExtraValuez"_cnt)
 i 'trakoptionsenabled s itm.IsDirty=1
 i trakoptionsenabled s itm.IsDirty=0
 d itm.%Save(0)
 d itm.%Close()
 }
 s cnt=cnt+1
 }
 q $$$OK
]]></Implementation>
</Method>

<Query name="FindByType">
<Description>
Standard Type Items by Type</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>type,val</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT StoredValue,Description,Code
FROM websys.StandardTypeItem
WHERE ParRef=:type AND Description %STARTSWITH :val
</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="value,Description,Code"/>
</Query>

<Query name="LookUpByType">
<Description>
Standard Type Items by Type</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>type,val</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT Description, Code, StoredValue
FROM websys.StandardTypeItem
WHERE ParRef=:type 
AND Description %STARTSWITH :val
</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Description,Code,HIDDEN"/>
</Query>

<Query name="LookUpByTypeButRestrict">
<Description>
Standard Type Items by Type</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>type,val,codelist</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT Description, Code, StoredValue
FROM websys.StandardTypeItem
WHERE (ParRef=:type) 
AND (Description %STARTSWITH :val) 
AND ((:codelist [ (StoredValue) ) OR (:codelist IS NULL))
</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Description,Code,HIDDEN"/>
</Query>

<Query name="LookUpByTypeForListBox">
<Type>%Library.SQLQuery</Type>
<FormalSpec>type:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT Code, Description
FROM StandardTypeItem
WHERE (ParRef = :type)
ORDER BY Description
</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Code:%String,Description:%String"/>
</Query>

<Storage name="SQLStorage">
<Type>%CacheSQLStorage</Type>
<SqlRowIdName>RowID</SqlRowIdName>
<StreamLocation>^websys.StandardTypeItemS</StreamLocation>
<Property name="ChildSub"/>
<Property name="Code"/>
<Property name="Description"/>
<Property name="ExtraValue"/>
<Property name="IsDirty"/>
<Property name="ParRef"/>
<Property name="StoredValue"/>
<SQLMap name="DataMaster">
<Type>data</Type>
<Global>^websys.StandardTypeD</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"STD"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{StandardType.Code}</Expression>
</Subscript>
<Subscript name="3">
<Expression>"ITM"</Expression>
</Subscript>
<Subscript name="4">
<Expression>{ChildSub}</Expression>
<StartValue>1</StartValue>
</Subscript>
<RowIdSpec name="1">
<Expression>{L2}</Expression>
<Field>StandardType.Code</Field>
</RowIdSpec>
<RowIdSpec name="2">
<Expression>{L4}</Expression>
<Field>ChildSub</Field>
</RowIdSpec>
<Data name="Code">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="Description">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="ExtraValue">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="IsDirty">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="StoredValue">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
<SQLMap name="IndexCode">
<Type>index</Type>
<Global>^websys.StandardTypeD</Global>
<PopulationType>nonnull</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"STD"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{StandardType.Code}</Expression>
</Subscript>
<Subscript name="3">
<Expression>"ITM"</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Subscript name="5">
<Expression>"Code"</Expression>
</Subscript>
<Subscript name="6">
<Expression>$$UPPER({Code})</Expression>
</Subscript>
<Subscript name="7">
<Expression>{ChildSub}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>{L2}</Expression>
<Field>StandardType.Code</Field>
</RowIdSpec>
<RowIdSpec name="2">
<Expression>{L7}</Expression>
<Field>ChildSub</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="IndexDesc">
<Type>index</Type>
<Global>^websys.StandardTypeD</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"STD"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{StandardType.Code}</Expression>
</Subscript>
<Subscript name="3">
<Expression>"ITM"</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Subscript name="5">
<Expression>"Desc"</Expression>
</Subscript>
<Subscript name="6">
<Expression>$$ALPHAUP({Description})</Expression>
</Subscript>
<Subscript name="7">
<Expression>{ChildSub}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>{L2}</Expression>
<Field>StandardType.Code</Field>
</RowIdSpec>
<RowIdSpec name="2">
<Expression>{L7}</Expression>
<Field>ChildSub</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="IndexStoredValue">
<Type>index</Type>
<Global>^websys.StandardTypeD</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"STD"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{StandardType.Code}</Expression>
</Subscript>
<Subscript name="3">
<Expression>"ITM"</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Subscript name="5">
<Expression>"StoredValue"</Expression>
</Subscript>
<Subscript name="6">
<Expression>{StoredValue}</Expression>
</Subscript>
<Subscript name="7">
<Expression>{ChildSub}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>{L2}</Expression>
<Field>StandardType.Code</Field>
</RowIdSpec>
<RowIdSpec name="2">
<Expression>{L7}</Expression>
<Field>ChildSub</Field>
</RowIdSpec>
</SQLMap>
</Storage>
</Class>
</Export>
