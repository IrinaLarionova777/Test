<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.Conversions">
<Description>
Standard functions used for converting to and from Html / Database formats.
Other utilities are alos included here.</Description>
<Abstract>0</Abstract>
<ClassType/>
<CompileAfter>websys.Configuration</CompileAfter>
<IncludeCode>TRAK</IncludeCode>
<IncludeGenerator>TRAK</IncludeGenerator>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>60218,47035.05286</TimeCreated>

<Parameter name="Base64Seq">
<Final>0</Final>
<Default>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</Default>
</Parameter>

<Property name="expression">
<Type>websys.Expression</Type>
<Final>1</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Method name="Base64">
<Description>
Base64 encode a string</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>line:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n len3,remainder,i,out,b1,b2,b3,out4,len
 s Base64Seq="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
 ; process stream in groups of 1023 - number arbitrary but must be divisible by 3
 s out=""
 s len=$l(line)
 s remainder=len#3
 s len3=len-remainder
 ; d ..DBG("len3="_len3_" remainder="_remainder)
 ; process line in groups of 3
 f i=1:3:len3 d
 . s b1=$a(line,i)
 . s b2=$a(line,i+1)
 . s b3=$a(line,i+2)
 . s out4=..Base64Encode(b1,b2,b3) ; convert to 4 bytes
 . s out=out_out4
 ; we have processed line in group of 3 process rest
 i len3'<0,remainder=1 s out4=..Base64Encode($a(line,len3+1),0,0) s out=out_$e(out4,1,2)_"==" ;'
 i len3'<0,remainder=2 s out4=..Base64Encode($a(line,len3+1),$a(line,len3+2),0) s out=out_$e(out4,1,3)_"=" ;'
 ; we have processed remainder, anything left to go out?
 q out
]]></Implementation>
</Method>

<Method name="Base64Encode">
<Description>
[Previously private]</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>b1:%Library.String,b2:%Library.String,b3:%Library.String</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n b01to06,b07to08,b09to12,b13to16,b17to18,b19to24 ; bits
 n i1,i2,i3
 ; 4 is two bits
 ; 16 is four bits
 ; 64 is six bits
 s b01to06=b1\4
 s b07to08=b1#4
 s b09to12=b2\16
 s b13to16=b2#16
 s b17to18=b3\64
 s b19to24=b3#64
 s i1=b01to06
 s i2=b07to08*16+b09to12
 s i3=b13to16*4+b17to18
 s i4=b19to24
 q $e(..#Base64Seq,i1+1)_$e(..#Base64Seq,i2+1)_$e(..#Base64Seq,i3+1)_$e(..#Base64Seq,i4+1)
]]></Implementation>
</Method>

<Method name="BinHexS">
<Description>
A Simple BinHex converter</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>str:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n hi,lo,j,res
 s (hi,lo)=0,res=""
 f j=1:1:$l(str) {
 s hi=$a($e(str,j))\16
 s lo=$a($e(str,j))#16
 s res=res_$$Hex(hi)_$$Hex(lo)
 }
 q res
Hex(x)	q $s(x<10:$c(x+$a("0")),1:$c(x+$a("A")-10))
]]></Implementation>
</Method>

<Method name="BooleanHtmlToLogical">
<Description>
Convert the vaue of an HTML check box to boolean</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s(##Class(%Collation).Upper(x)="ON":1,1:0)
]]></Implementation>
</Method>

<Method name="BooleanLogicalToHtml">
<Description>
Convert a stored boolean value to HTML value for a checkbox</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s(x:"on",1:"")
]]></Implementation>
</Method>

<Method name="CalculateMinutesPassed">
<Description>
calculates the minutes passed since 'datefrom' and 'timefrom' till 'dateto' and 'timeto'
if 'datefrom' or 'timefrom' is blank, returns 0
if 'dateto' is blank, uses current date
if 'timeto' is blank, uses current time</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>datefrom:%Library.Date,timefrom:%Library.Time,dateto:%Library.String,timeto:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n mins,days,secs
 ;
 i 'datefrom q 0
 i 'timefrom q 0
 ;
 s (mins,days,secs)=0
 s dateto=$g(dateto),timeto=$g(timeto)
 i 'dateto s dateto=+$h
 i 'timeto s timeto=+$p($h,",",2)
 s days=dateto-datefrom
 s secs=timeto-timefrom
 s secs=days*86400+secs
 s mins=secs\60
 ;
 q mins
]]></Implementation>
</Method>

<Method name="CommonReload">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; use this flg in case this method is called more than once in a single server round trip
 i $d(^websys.MessageD(%session.SessionId)) {
 s msg=##Class(websys.Message).%OpenId(%session.SessionId)
 } else {
 s msg=##Class(websys.Message).%New(%session.SessionId)
 m msg.Data=%request.Data
 }

 i $G(GOTRELOAD) q
 ;
 S TRELOAD=$g(%request.Data("TRELOAD",1))
 S TRELOADID=$g(%request.Data("TRELOADID",1))
 s TRELOADPAGE=%request.PageName

 i $d(^websys.MessageD(%session.SessionId)) {
 ; a genuine error
 s TERROR="E"
 d ##Class(websys.Conversions).LoadReload(TRELOADID)
 s TRELOADNEW=TRELOADID
 } else {
 s TERROR=""
 i TRELOAD {
 ; a genuine refresh
 d ##Class(websys.Conversions).LoadReload(TRELOADID)
 s TRELOADNEW=TRELOADID
 } else {
 ; a new request - no nonsense
 S TRELOADNEW=##Class(websys.Conversions).SaveReload()
 }
 }
 ;
 s GOTRELOAD=1
 q
]]></Implementation>
</Method>

<Method name="CurrencyHtmlToLogical">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n Config,DecSymbol,GrpSymbol
 ;
 s Config=$g(^websys.ConfigurationD(1))
 s GrpSymbol=$s($lg(Config,62)=",":".",1:",")
 ;
 s x=$tr(x,GrpSymbol,"") 	; remove digit grouping symbol
 s x=$tr(x,",",".") 		; cache default decimal separator is "."
 s x=$in(x,"","ERR") 		; $INUMBER translation, invalid number returns "ERR"
 i x="ERR" q ""
 q x
]]></Implementation>
</Method>

<Method name="CurrencyLogicalToHtml">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n Config,DecPlaces,GrpSymbol
 ;
 s Config=$g(^websys.ConfigurationD(1))
 s DecPlaces=$s($lg(Config,61)'="":$lg(Config,61),1:2)
 s GrpSymbol=$s($lg(Config,62)=",":".",1:",")
 ;
 q $fn(x,GrpSymbol,DecPlaces)	;cache $FNUMBER translation
]]></Implementation>
</Method>

<Method name="DateGregorianToJulianDay">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>y:%Integer,m:%Integer,d:%Integer</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	n val,EPOCHGREGORIAN,isleap
	s EPOCHGREGORIAN=1721425.5
	s isleap=((y#4)=0)&('(((y#100)=0)&((y#400)'=0)))
	s val=(EPOCHGREGORIAN-1) + (365*(y-1)) + ((y-1)\4) + ((y-1)\-100) + ((y-1)\400) + (((((367*m)-362)/12)+$s((m<=2):0,isleap:-1,1:-2)+d)\1)
	q val
]]></Implementation>
</Method>

<Method name="DateHijraToJulianDay">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>y:%Integer,m:%Integer,d:%Integer</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	n val,EPOCHHIJRA,mceil
	s EPOCHHIJRA=1948439.5
	s mceil=29.5*(m-1) if mceil\1'=mceil s mceil=$s(mceil<0:mceil\1,1:(mceil\1)+1)
	s val=(d + mceil + ((y-1)*354) + ((3+(11*y))\30) + EPOCHHIJRA) - 1
	q val
]]></Implementation>
</Method>

<Method name="DateHijraToLogical">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>dt:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	n (dt)
 s delim=$lg($g(^websys.ConfigurationD(1)),4) s:delim="" delim="/"
	s y=$p(dt,"/",3),m=$p(dt,"/",2),d=$p(dt,"/",1)
	s EPOCHGREGORIAN=1721425.5
	s jd=..DateHijraToJulianDay(y,m,d)-0.5
 s wjd=((jd-0.5)\1)+0.5
 s depoch=wjd-EPOCHGREGORIAN
	s dqc=depoch#146097
	s cent=dqc\36524
	s dcent=dqc#36524
	s dquad=dcent#1461
 s yidx=dquad\365
	s y=((depoch\146097)*400)+(cent*100)+((dcent\1461)*4)+yidx
	if ('((cent=4)!(yidx=4))) s y=y+1
	s yearday=wjd-..DateGregorianToJulianDay(y,1,1)
	s isleap=((y#4)=0)&('(((y#100)=0)&((y#400)'=0)))
	s leapadj=$s((wjd<..DateGregorianToJulianDay(y,3,1)):0,isleap:1,1:2)
	s m=(((yearday+leapadj)*12)+373)\367
	s d=(wjd-..DateGregorianToJulianDay(y,m,1))+1
	s ymd=y_"-"_m_"-"_d
	s h=$zdh(ymd,3)
	q h
]]></Implementation>
</Method>

<Method name="DateHtmlToLogical">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>d:%String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //Simon - changed from generator... to be optimised...
 q:d="" ""
 q:'$l($tr(d," ","")) ""
 n f,s,r,i,mmm,months
 ;
 s r=$g(^websys.ConfigurationD(1))
 s s=$lg(r,4) s:s="" s="/"
 s f=$lg(r,10) s:f="" f="DMY"
 ;
 i f="MDY" q $zdateh($tr(d,s,"/"))
 i f="YMD" q $zdateh($tr(d,s,"-"),3)
 i f="THAI" d  q $zdateh($tr(d,s,"/"),4)
 . i $p(d,s,3)<100 s $p(d,s,3)=$p(d,s,3)+2000
 . s $p(d,s,3)=$p(d,s,3)-543
 i f="DMMMY" d  q $zdateh($tr(d," ","/"),4)
 . s months="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" s:$d(%session) months=$g(%session.Data("XMONTHSSHORT"),months)
 . s mmm=$p(d," ",2),mmm=$zcvt(mmm,"U")
 . f i=1:1:12 if mmm=$zcvt($p(months,",",i),"U") s $p(d," ",2)=i
 i f="HIJRA" s d=$p(d,"[",1) q $zdateh($tr(d,s,"/"),4)
 q $zdateh($tr(d,s,"/"),4)
 //s %code=0
 //#;
 //$$$GENERATE(" q:d="""" """"")
 //;$$$GENERATE(" q $zdateh(d,4)")
 //N config,separator,format
 //;
 //S config=##Class(websys.Configuration).%OpenId(1)
 //S separator=$s(config:config.DateSeparator,1:"/")
 //S format=$s(config:##Class(%Library.Collation).Upper(config.DateFormat),1:"")
 //d:config config.%Close()
 //;
 //;default format="DMY"
 //I format="THAI" D
 //. ; take off 543 years to get to gregorian calendar
 //. $$$GENERATE(" i $p(d,"""_separator_""",3)<100 s $p(d,"""_separator_""",3)=$p(d,"""_separator_""",3)+2000")
 //. $$$GENERATE(" s $p(d,"""_separator_""",3)=$p(d,"""_separator_""",3)-543")
 //. $$$GENERATE(" s res=$tr(d,"""_separator_""",""/"")")
 //. $$$GENERATE(" q $zdateh(res)")
 //I format="MDY" D
 //. $$$GENERATE(" s res=$tr(d,"""_separator_""",""/"")")
 //. $$$GENERATE(" q $zdateh(res)")
 //I format="YMD" D
 //. $$$GENERATE(" s res=$tr(d,"""_separator_""",""-"")")
 //. $$$GENERATE(" q $zdateh(res,3)")
 //$$$GENERATE(" s res=$tr(d,"""_separator_""",""/"")")
 //$$$GENERATE(" q $zdateh(res,4)")
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="DateLogicalToCrystal">
<Description>
Converted a cache $h format date to a crystal data format Date(yyyy,mm,dd)</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>h:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n ymd
 s ymd=$zd(h,8) ; yyyymmdd
 ; Date(yyyy,mm,dd)
 q "Date("_$e(ymd,1,4)_","_$e(ymd,5,6)_","_$e(ymd,7,8)_")"
]]></Implementation>
</Method>

<Method name="DateLogicalToHijra">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>h:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	n (h)
 s delim=$lg($g(^websys.ConfigurationD(1)),4) s:delim="" delim="/"
	s ymd=$zd(h,3)
	s d=+$p(ymd,"-",3),m=+$p(ymd,"-",2),y=+$p(ymd,"-",1)
	s EPOCHHIJRA=1948439.5
	s jd=..DateGregorianToJulianDay(y,m,d)+(43200/86400.0)
	s jd=(jd\1)+0.5
 s y=((30*(jd-EPOCHHIJRA))+10646)\10631
 s mceil=(jd-(29+..DateHijraToJulianDay(y,1,1)))/29.5
 if mceil\1'=mceil s mceil=$s(mceil<0:mceil\1,1:(mceil\1)+1)
	s m=$s(12<(mceil+1):12,1:mceil+1)
	s d=(jd-..DateHijraToJulianDay(y,m,1))+1
	s:d<10 d="0"_d s:m<10 m="0"_m
	q d_delim_m_delim_y
]]></Implementation>
</Method>

<Method name="DateLogicalToHtml">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>h:%String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //Simon - changed from generator... to be optimised...
 q:h="" ""
 n f,s,r,months,h1
 ;
 s r=$g(^websys.ConfigurationD(1))
 s s=$lg(r,4) s:s="" s="/"
 s f=$lg(r,10) s:f="" f="DMY"
 ;
 i f="MDY" d  q $tr(h,"/",s)
 . s h=$zdate(h)
 . i $p(h,"/",3)<100 s $p(h,"/",3)="19"_$p(h,"/",3)
 i f="YMD" d  q $tr(h,"-",s)
 . s h=$zdate(h,3)
 . i $p(h,"-",1)<100 s $p(h,"-",1)="19"_$p(h,"-",1)
 i f="THAI" d  q $tr(h,"/",s)
 . s h=$zdate(h,4)
 . i $p(h,"/",3)<100 s $p(h,"/",3)="19"_$p(h,"/",3)
 . s $p(h,s,3)=$p(h,s,3)+543
 i f="DMMMY" d  q $tr(h,"/"," ")
 . s months="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" s:$d(%session) months=$g(%session.Data("XMONTHSSHORT"),months)
 . s h=$zdate(h,4)
 . i $p(h,"/",3)<100 s $p(h,"/",3)="19"_$p(h,"/",3)
 . s $p(h,"/",2)=$p(months,",",$p(h,"/",2))
 i f="HIJRA" d  q h1_" ["_..DateLogicalToHijra(h)_"]"
 . s h1=$zdate(h,4) s:$p(h1,"/",3)<100 $p(h1,"/",3)="19"_$p(h1,"/",3)
 . s h1=$tr(h1,"/",s)
 s h=$zdate(h,4)
 i $p(h,"/",3)<100 s $p(h,"/",3)="19"_$p(h,"/",3)
 q $tr(h,"/",s)
 //#;
 //$$$GENERATE(" q:h="""" """"")
 //;$$$GENERATE(" q $zdate(h,4)")
 //n config,separator,format
 //;
 //S config=##Class(websys.Configuration).%OpenId(1)
 //S separator=$s(config:config.DateSeparator,1:"/")
 //S format=$s(config:##Class(%Collation).Upper(config.DateFormat),1:"")
 //d:config config.%Close()
 //;
 //;default format="DMY"
 //i format="THAI" D
 //. ; add 543 years to get to thai calendar
 //. $$$GENERATE(" s res=$zdate(h,4)")
 //. $$$GENERATE(" i +$p(res,""/"",3)<100 s $p(res,""/"",3)=""19""_$p(res,""/"",3) ")
 //. $$$GENERATE(" s $p(res,""/"",3)=$p(res,""/"",3)+543 ")
 //. $$$GENERATE(" q $tr(res,""/"","""_separator_""")")
 //I format="MDY" D
 //. $$$GENERATE(" s res=$zdate(h)")
 //. $$$GENERATE(" i +$p(res,""/"",3)<100 s $p(res,""/"",3)=""19""_$p(res,""/"",3) ")
 //. $$$GENERATE(" q $tr(res,""/"","""_separator_""")")
 //I format="YMD" D
 //. $$$GENERATE(" s res=$zdate(h,3)")
 //. $$$GENERATE(" i +$p(res,""/"",1)<100 s $p(res,""/"",1)=""19""_$p(res,""/"",3) ")
 //. $$$GENERATE(" q $tr(res,""-"","""_separator_""")")
 //$$$GENERATE(" s res=$zdate(h,4)")
 //$$$GENERATE(" i +$p(res,""/"",3)<100 s $p(res,""/"",3)=""19""_$p(res,""/"",3) ")
 //$$$GENERATE(" q $tr(res,""/"","""_separator_""")")
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="DelimitedStringToHtml">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>str:%Library.String,strdelim:%Library.String,htmldelim:%Library.String="",keepblanks:%Boolean=0</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n cnt,lst,htmlstr
 s htmlstr=""
 i htmldelim="" s htmldelim="<BR>"
 f cnt=1:1:$l(str,strdelim) {
 if ($p(str,strdelim,cnt)'="")!(keepblanks) s htmlstr=htmlstr_$s($l(htmlstr):htmldelim,1:"")_$p(str,strdelim,cnt)
 }
 q htmlstr
 /***
 f cnt=1:1:$l(str,strdelim) {
 s $li(lst,cnt)=$p(str,strdelim,cnt)
 }
 i htmldelim="" q ..ListLogicalToHtml(lst)

 q ..ListLogicalToHtml(lst,htmldelim)
}***/
]]></Implementation>
</Method>

<Method name="EscapeUrl">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>in:%String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 New i,c,out Set out=""
 For i=1:1:$Length(in) Do
 . Set c=$Extract(in,i)
 . If c'?1A,c'?1N,"*+-./@_"'[c Set out=out_"%"_$Zhex($Ascii(c)) Quit
 . Set out=out_c
 Quit out
]]></Implementation>
</Method>

<Method name="GetCacheVersion">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n cacheversion
 s cacheversion=$ZV,cacheversion=$P(cacheversion," (Build"),cacheversion=$P(cacheversion," ",$L(cacheversion," "))
 q cacheversion
]]></Implementation>
</Method>

<Method name="GetClassRowIDName">
<Description>
Return the SQl rowid name for the class (if it is explicitly specified)</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>classname:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //q $g(^oddDEF(classname,"storage","SQLStorage","sql","rowidname"))
 q $g($$$PARAMdefault($$$TRAKDEF,classname,"SQLROWID"))
]]></Implementation>
</Method>

<Method name="GetComputerName">
<Description>
Get the computer name from the ip address.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ip:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $p($zu(54,14,$zu(54,1,ip)),",",2)
]]></Implementation>
</Method>

<Method name="GetDirectoryPathSlash">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;check for unix or windows (see $$slash^tkimport)
	s isunix=$zcvt($p($zv," ",3,$l($p($zv," (")," ")),"U")["UNIX"
	q $s(isunix:"/",1:"\")
]]></Implementation>
</Method>

<Method name="GetPropertyParameter">
<Description>
This should be superceded by accescing the property definition but will do for now.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>classname:%Library.String,property:%Library.String,parameter:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //q $g($$$PARAMxxx($$$TRAKDEF,classname,property,parameter))
 //TN: 25-Feb-03... I think above line was meant to use prop param instead
 q $g($$$PROPPARAM($$$TRAKDEF,classname,property,parameter))
 //q $g(^oddDEF(classname,"property",property,"parameter",parameter))
]]></Implementation>
</Method>

<Method name="GetSQLTableName">
<Description>
Return the SQL table name given a class name</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>labclass:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $g($$$CLASSsqltablename($$$TRAKDEF,labclass),labclass)
]]></Implementation>
</Method>

<Method name="HexBinS">
<Description>
A simple HexBin Converter</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>str:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,res
 s res=""
 f j=1:2:$l(str) {
 s res=res_($c($$Bin($e(str,j))*16+$$Bin($e(str,j+1))))
 }
 q res
Bin(x)	q $s("0123456789"[x:+x,1:($a(x)-55))
]]></Implementation>
</Method>

<Method name="HtmlFriendly">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>str:%String,leavespace:%String=0</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n char,seq
 s str=$ZCVT(str,"O","HTML")
 ; space (for links we should convert to %20 !!)
 s char=" ",seq="&nbsp;"
 i 'leavespace f  q:$l(str,char)=1  s str=$p(str,char,1)_seq_$p(str,char,2,9999)
 q str
]]></Implementation>
</Method>

<Method name="IsValidClassName">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>classname:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //q:$d(^oddDEF(classname)) 1
 q:$d($$$CLASS($$$TRAKDEF,classname)) 1
 q 0
]]></Implementation>
</Method>

<Method name="IsValidMethodName">
<Description>
Check if query exists for a class</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>classname:%Library.String,methodname:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 q:$d($$$METH($$$TRAKDEF,classname,methodname)) 1
 q 0
]]></Implementation>
</Method>

<Method name="IsValidQueryName">
<Description>
Check if query exists for a class</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>classname:%Library.String,queryname:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //q:$d(^oddDEF(classname,"query",queryname)) 1
 q:$d($$$QUERY($$$TRAKDEF,classname,queryname)) 1
 q 0
]]></Implementation>
</Method>

<Method name="IsValidResultSet">
<Description>
Determine if result set is valid (a run time test!)</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>rs:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s $zt="skipisvalidresultset"
 q rs.QueryIsValid()
 //i rs.GetParamCount()
 q 1
skipisvalidresultset ;
 q 0
]]></Implementation>
</Method>

<Method name="ListLogicalToHtml">
<Description>
Convert a $LIST format string to Html data using the delimiter specified.
Useful for converting long text fields from result set queries for html display/update.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[list:%String,delim:%String="<BR>",keepblanks:%Integer=0]]></FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n str,j
 s str=""
 s $zt="err"
 ;
 q:'$ll(list) ""
 ;
 ; Currently this will strip out any blank items.
 ; Mainly this is for patient address, but may have unrequired results elsewhere !!
 ; Added extra optional parameter to keep blank items for Clinical Notes
 s str="" f j=1:1:$ll(list) i ($li(list,j)'="")!(keepblanks) s str=str_$li(list,j) i j<$ll(list) s str=str_delim
 ;s str="" f j=1:1:$ll(list) i $li(list,j)'="" s str=str_$li(list,j) i j<$ll(list) s str=str_delim
 ;
err
 q str
]]></Implementation>
</Method>

<Method name="LoadReload">
<Description>
Load Reload parameters from temp global</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>id:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 if id="" q
 ;
 k %request.Data
 m %request.Data=^TMP("reload",%session.SessionId,id)
 ;i $d(^TMP("reload",%session.SessionId,id,"RequestPageName")) s %response.ServerSideRedirect=$g(^TMP("reload",%session.SessionId,id,"RequestPageName"))
 ; single use ?? if so safe to kill it
 ; we need to keep this in case someone or something refreshes the reloaded page
 ;k ^TMP("reload",id)
 q
]]></Implementation>
</Method>

<Method name="LoadRequest">
<Description>
wrokaround for serverside redirect losing request data.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 m %request.Data=Zztmp
 q
]]></Implementation>
</Method>

<Method name="LongTextHtmlToLogical">
<Description>
convert from a string to long text field</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&prp:%Library.String,str:%Library.String,delim:%Library.String="<BR>"]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j
 ;
 d prp.Clear()
 ;
 f j=1:1:$l(str,delim) d prp.Insert($p(str,delim,j))
 ;
 ;
 q
]]></Implementation>
</Method>

<Method name="LongTextLogicalToHtml">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&longtext:%String,delim:%String="<BR>"]]></FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n str,j
 ;
 q:'longtext.Count() ""
 ;
 s str="" f j=1:1:longtext.Count() s:j>1 str=str_delim s str=str_longtext.GetAt(j)
 ;
 q str
]]></Implementation>
</Method>

<Method name="LookUpClassNameClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>LookUpClassNameFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 ;n user,work
 ;
 s QHandle=""
 ;
 Quit ""
]]></Implementation>
</Method>

<Method name="LookUpClassNameExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,classname:%String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,class
 ;
 ; make sure we get any exact match ! - go back one item.... ;')
 i classname="" s classname="User."
 s class=classname
 i $l(class) s class=$o($$$CLASS($$$TRAKDEF,classname),-1) i class="" s class="%z" //wierd stuff with subscript mapping - does not go back
 s user=$lb(classname)
 s work=$lb(class)
 ;
 s QHandle=$lb(0,user,work)
 ; 
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LookUpClassNameFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>LookUpClassNameExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 n user,work,class,classname,tblname
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2),classname=$li(user,1)
 s work=$li(QHandle,3),class=$li(work,1)
 ;
 s class=$o($$$CLASS($$$TRAKDEF,class))
 ;
 i class="" s AtEnd=1
 ; Startswith search string ?
 i $e(class,1,$l(classname))'=classname s AtEnd=1
 ;
 s Row=""
 i 'AtEnd {
 //s tblname=$g(^oddDEF(class,"spec","sqltablename"),class)
 s tblname=$g($$$CLASSsqltablename($$$TRAKDEF,class),class)
 s Row=$lb(class,tblname)
 }
 ;
 s work=$lb(class)
 s QHandle=$lb(AtEnd,user,work)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpMethodNameClose">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>LookUpPropertyNameFetch</PlaceAfter>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 ; Retrieve the current status
 ;n user,work
 ;
 s QHandle=""
 ;
 Quit ""
]]></Implementation>
</Method>

<Method name="LookUpMethodNameExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,tablename:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 n user,work,class
 ;
 s class=$tr(tablename,"_","")
 i class'["." s class="User."_class
 ;
 s user=$lb(tablename)
 s work=$lb(class,"")
 ;
 s QHandle=$lb(0,user,work)
 ; 
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LookUpMethodNameFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>LookUpPropertyNameExecute</PlaceAfter>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 ; Retrieve the current status
 n user,work,class,classname,tblname,colname,mth
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2),tablename=$li(user,1)
 s work=$li(QHandle,3),class=$li(work,1),mth=$li(work,2)
 ;
 ; this is used to get a list of brokers in layout editor, so only include class methods
 //s prp=$o(^oddDEF(class,"property",prp))
 s mth=$o(^oddCOM(class,"m",mth))
 ;
 i mth="" s AtEnd=1
 ;
 s Row=""
 i 'AtEnd {
 //s colname=$g($$$PROPsqlfieldname($$$TRAKDEF,class,prp))
 //s Row=$lb(prp,colname)
 s Row=$lb(mth,mth)
 }
 ;
 s work=$lb(class,mth)
 s QHandle=$lb(AtEnd,user,work)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpPropertyNameClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>LookUpPropertyNameFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 ;n user,work
 ;
 s QHandle=""
 ;
 Quit ""
]]></Implementation>
</Method>

<Method name="LookUpPropertyNameExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,tablename:%String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,class
 ;
 s class=$tr(tablename,"_","")
 i class'["." s class="User."_class
 ;
 s user=$lb(tablename)
 s work=$lb(class,"")
 ;
 s QHandle=$lb(0,user,work)
 ; 
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LookUpPropertyNameFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>LookUpPropertyNameExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 n user,work,class,classname,tblname,colname,prp
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2),tablename=$li(user,1)
 s work=$li(QHandle,3),class=$li(work,1),prp=$li(work,2)
 ;
 //s prp=$o(^oddDEF(class,"property",prp))
 s prp=$o($$$PROP($$$TRAKDEF,class,prp))
 ;
 i prp="" s AtEnd=1
 ;
 s Row=""
 i 'AtEnd {
 //s colname=$g(^oddDEF(class,"property",prp,"sqlfieldname"))
 s colname=$g($$$PROPsqlfieldname($$$TRAKDEF,class,prp))
 s Row=$lb(prp,colname)
 }
 ;
 s work=$lb(class,prp)
 s QHandle=$lb(AtEnd,user,work)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="QuotedCacheString">
<Description>
replaces a double quote for 2 double quotes
used in questionnaires and websys.Component JSBuild()</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>str:%Library.String=""</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
	n j,str2
	;;str may contain $c(1) if str = $lb(x,y,z)
	;f j=1:1:$l(str,"""")-1 s $p(str,"""",j)=$p(str,"""",j)_$c(1)
	;s str=$tr(str,$c(1),"""")
	;q str
	f j=1:1:$l(str,"""") s $p(str2,"""""",j)=$p(str,"""",j)
	q str2
]]></Implementation>
</Method>

<Method name="SaveReload">
<Description>
Save reload parameters and return unique id</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>optid:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id
 ;s id=$g(%request.Data("TRELOAD",1))
 ;i id'="" q id
 ;
 ; optionally can pass an id to 'refresh the data' !
 if (optid="") {
 s id=$i(^websys.Unique)
 k ^TMP("reload",%session.SessionId,id)
 } else {
 s id=optid
 }
 ;
 m ^TMP("reload",%session.SessionId,id)=%request.Data
 s ^TMP("reload",%session.SessionId,id,"RequestPageName")=%request.PageName
 ;
 q id
]]></Implementation>
</Method>

<Method name="SaveRequest">
<Description>
temporarily save request variables when jumping betweeen pages with ServerSideRedirect.
Should be fixed as a bug by Intersystems. (!!)</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Save %response info as it will disappear due to redirect
 ;k ^TMP("request",$j)
 ;m ^TMP("request",$j)=%request.Data
 k Zztmp
 m Zztmp=%request.Data
 q
]]></Implementation>
</Method>

<Method name="TimeHtmlToLogical">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>t:%String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //Simon - changed from generator... to be optimised...
 q:t="" ""
 q:'$l($tr(t," ","")) ""
 n s,r
 ;
 s r=$g(^websys.ConfigurationD(1))
 s s=$lg(r,9) s:s="" s=":"
 I s=":" q $ztimeh(t,2)
 q $ztimeh($tr(t,s,":"),2)
]]></Implementation>
</Method>

<Method name="TimeLogicalToHtml">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>h:%String</FormalSpec>
<Private>0</Private>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //Simon - changed from generator... to be optimised...
 //TN: 15-Sep-2003 do not round up minutes (log 38844)
 q:h="" ""
 n s,r
 ;
 s r=$g(^websys.ConfigurationD(1))
 s s=$lg(r,9) s:s="" s=":"
 i s=":" q $ztime(h\60*60,2)
 q $tr($ztimeh(h\60*60,2),":",s)
]]></Implementation>
</Method>

<Method name="Unique">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $I(^websys.Unique)
]]></Implementation>
</Method>

<Method name="WhiteSpace">
<Description>
Replace CR, LF, TAB etc with SPACE.
Mainly used with multipline fields and SQL queries</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>str:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $TR(str,$c(13,10,8),"   ")
]]></Implementation>
</Method>

<Method name="YesNoHtmlToLogical">
<Description>
Convert the value from an html check box to a Yes/No field value</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s(##Class(%Collation).Upper(x)="ON":"Y",1:"N")
]]></Implementation>
</Method>

<Method name="YesNoLogicalToHtml">
<Description>
Convert a yes/no vaue to HTML checkbox value</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ q $s(x="Y":"on",1:"")
]]></Implementation>
</Method>

<Query name="LookUpClassName">
<Description>
Get a list of classnames - faster than using the system classes</Description>
<Type>%Library.Query</Type>
<FormalSpec>classname:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ClassName:%String,TableName:%String"/>
</Query>

<Query name="LookUpMethodName">
<Description>
Get a list of methodnames - faster than using the system classes</Description>
<Type>%Library.Query</Type>
<FormalSpec>classname:%String</FormalSpec>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ClassName:%String,TableName:%String"/>
</Query>

<Query name="LookUpPropertyName">
<Description>
parameter is an unqualified table name (possibly) with underscores.
The classname will be deduced from this.</Description>
<Type>%Library.Query</Type>
<FormalSpec>tablename</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="property:%String,column:%String"/>
</Query>
</Class>
</Export>
