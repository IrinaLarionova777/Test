<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.ComponentXRef">
<Abstract>0</Abstract>
<ClassType>persistent</ClassType>
<IncludeCode>webgen</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.Persistent</Super>
<TimeCreated>60218,47034.951327</TimeCreated>

<Parameter name="RTNPREFIX">
<Final>0</Final>
<Default>GCOM</Default>
</Parameter>

<Index name="ComponentId">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>ComponentId</Properties>
<Unique>0</Unique>
</Index>

<Index name="Master">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>ComponentId,Context,LangId,App</Properties>
<Unique>0</Unique>
</Index>

<Property name="App">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ComponentId">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Context">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Dirty">
<Description>
Used to flag if the defining params have changed (.e.g the component), and the code need to be regenerated.
no longer used</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="LangId">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LastUpdateDate">
<Type>%Library.Date</Type>
<Collection/>
<Relationship>0</Relationship>
</Property>

<Property name="LastUpdateTime">
<Type>%Library.Time</Type>
<Collection/>
<Relationship>0</Relationship>
</Property>

<Method name="Gen">
<Description>
[Previously private]</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>cmpid:%Library.String,template:%Library.String,rtn:%Library.String,ActiveObject:%Library.String,ActiveReference:%Library.String,ActiveContext:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,k,labclassName,WebClassName,itms,itm,desc,tmp
 ;
 s (labclassName,WebClassName)=cmp.ClassName
 i $p(WebClassName,".",1)="User" s $p(WebClassName,".",1)="web"
 i $p(labclassName,".",1)="web" s $p(labclassName,".",1)="User"
 ;
 n cmp // this is goin  to move... ???
 s cmp=##Class(websys.Component).%OpenId(cmpid)
 // for now
 s template=cmp.Template
 // tranlations are required at compile time
 ;
 f j=1:1:cmp.Messages.Count() s m=cmp.Messages.GetAt(j) i m.Code'="" s t(m.Code)=$p(m.Description,"^")
 ;
 d ##Class(websys.Translation).Load("COMP",%session.Get("LOGON.LANGID"),cmpid)
 ;[W650]i cmpid=1906,ActiveContext'="" d ##Class(websys.Translation).Load("COMP",%session.Get("LOGON.LANGID"),cmpid_ActiveContext)
 d ##Class(websys.Translation).LoadContext(%session.Get("LOGON.LANGID"),cmpid,ActiveContext,ActiveObject,ActiveReference)
 ;
 ; Generate the specific js file here (on demand)
 
 n activeobjectx,fileext
 s fileext=ActiveContext //e.g W123
 s activeobjectx=$s(ActiveObject="User.SSUser":"U",ActiveObject="User.SSGroup":"G",1:"")
 i activeobjectx'="" s:fileext'="" fileext="_"_fileext s fileext=activeobjectx_ActiveReference_fileext //prefix e.g. U1_
 //no template - no point :-)
 if cmp.DisplayType'="K",template'="" {
	d cmp.JSOpen(fileext)
	d cmp.JSBuild(template)
	d cmp.JSClose()
 }
 ;
 $$$macinit(rtn)
 ;
 d ..Init()
 $$$macline("Show(name,hidemenus,hideheadings,disabled,style,shownextinnewwindow,app,context,nested,listrowsx) ;")
 ;added t to exclusive new so it can still refer to translated websys.SYSTEM msgs for locking
 $$$macline(" n (%request,%session,%response,msg,name,hidemenus,hideheadings,disabled,style,shownextinnewwindow,app,context,nested,TWKFL,TWKFLI,TRELOADNEW,listrowsx,t)")

 ; Identify the component and the  settings in use to help debug
 $$$macline(" w ""<!-- COMPONENT "",!")
 $$$macline(" w ""Routine                  "",$ZN,!") //run time
 $$$macline(" w ""Page Name                "",%request.PageName,!") //run time
 $$$macline(" w ""Component ID             "_cmp.%Id()_""",!") // gen
 $$$macline(" w ""Component Name           "_cmp.Name_""",!") // gen
 $$$macline(" w ""websys.Component Version "_cmp.GetCompiledVersion()_""",!") // gen
 $$$macline(" w ""Component Version        "_cmp.GetVersion()_""",!") // gen
 $$$macline(" w ""Layout for               "",app,"" "",context,!") //run time
 $$$macline(" w ""-->"",!")

 if cmp.DisplayType'="K" {
	 $$$macline(" s cls(""E"")=""clsInvalid"",cls(""W"")=""clsWarning"",cls(""I"")=""clsInfo""")
	 ;
	 $$$macline(" s msg=##Class(websys.Message).%OpenId(%session.SessionId),TERROR="""",TDIRTY=""""")
	 ; If there are errors, and they are from this component !
	 $$$macline(" i +$g(msg.Count)&($d(msg.Name("_cmp.%Id()_"))) {")
	 $$$macline(" if (+$g(msg.Count(""E""))) { s TERROR=""E"" }")
	 $$$macline(" elseif (+$g(msg.Count(""W""))) { s TERROR=""W"" }")
	 $$$macline(" elseif (+$g(msg.Count(""I""))) { s TERROR=""I"" }")
	 $$$macline(" elseif (+$g(msg.Count(""J""))) { s TERROR=""J"" }")
	 $$$macline(" s (msgitm,zdesc,zjdesc,zji)=""""")
	 $$$macline(" s zdesc=""""")
	 $$$macline(" f   s msgitm=$o(msg.Item(msgitm)) q:msgitm=""""  s:$lg(msg.Item(msgitm),1)'=""J"" zdesc=zdesc_$zcvt($lg(msg.Item(msgitm),2),""O"",""JS"")_"": ""_$zcvt($lg(msg.Item(msgitm),3),""O"",""JS"")_"" \n"" i $lg(msg.Item(msgitm),1)=""J"" s zji=zji+1,$li(zjdesc,zji)=$lb($lg(msg.Item(msgitm),2),$lg(msg.Item(msgitm),6))")
	 ;
	 i cmp.DisplayType="F" {
		 $$$macline(" } else {")
		 $$$macline(" 	i $g(%request.Data(""TWKFL"",1)),$g(%request.Data(""TWKFLI"",1)) {")
		 $$$macline(" 		k formdata")
		 $$$macline(" 		i $g(^TMP(""find"",%session.SessionId))=$g(%request.Data(""TWKFL"",1)) {")
		 $$$macline(" 			m formdata=^TMP(""find"",%session.SessionId,+$g(%request.Data(""TWKFLI"",1))+1)")
		 $$$macline("	 	}")
		 $$$macline(" 	}")
	 }
	 $$$macline(" }")
	 ;
	 ;
	 $$$macline(" s obj="""",tprint=$$$rget(""TPRINT""),warning="""" i style'="""" s style=""STYLE=""""""_style_""""""""")
	 ;
	 ;$$$macline(" w ""<DIV "",style,"" id=""""d"",$tr(name,""."",""_""),"""""" onkeydown=""""websys_help('websys.help.csp?XCOMPONENT="_cmp.%Id()_"&XCONTEXT="",context,""&XTWKFL="",$g(%request.Data(""TWKFL"",1)),""');"""">""")
	 $$$macline(" w ""<DIV "",style,"" id=""""d"",$tr(name,""."",""_""),"""""" onkeydown=""""websys_help('websys.help.csp?XCOMPONENT="_cmp.%Id()_"&XCONTEXT="",context,""&XTWKFL="",$g(%request.Data(""TWKFL"",1)),""',event);"""">""")
	 ;
	 i cmp.CodeTable {
	 	; Code table updates are disabled
	 	;$$$macline(" i '$lg($g(^websys.ConfigurationD(1)),28) s warning=$g(t(""XLOCKEDCT""),""CODE TABLE UPDATES DISABLED""),disabled=1 q")
	 	; User is not connected to the code table server.
	 	; i.e. does the request url contain the 'code table server' string ? 
	 	;$$$macline(" i %session,$p($g(^CF(""SM"",1)),""^"",22)'="""",$zcvt($g(%session.Data(""SERVER_NAME"")),""U"")'=$zcvt($p($g(^CF(""SM"",1)),""^"",22),""U"")  s warning=$g(t(""XNOTCT""),""YOU MUST CONNECT TO THE CODE TABLE SERVER TO UPDATE THIS COMPONENT""),disabled=1")
	 	
	 	;TN: don't quit after first line, but then check that it's not already disabled and overwrite disable reason
	 	$$$macline(" i '$lg($g(^websys.ConfigurationD(1)),28) s warning=$g(t(""XLOCKEDCT""),""CODE TABLE UPDATES DISABLED""),disabled=1")
	 	$$$macline(" i 'disabled,%session,$p($g(^CF(""SM"",1)),""^"",22)'="""",$zcvt($g(%session.Data(""SERVER_NAME"")),""U"")'=$zcvt($p($p($g(^CF(""SM"",1)),""^"",22),""|"",1),""U"")  s warning=$g(t(""XNOTCT""),""YOU MUST CONNECT TO THE CODE TABLE SERVER TO UPDATE THIS COMPONENT""),disabled=1")
	 }

	 ;If it is an edit, open the instance for the values, or a new instance for the defaults
	 ; watch out for troublesome children (child tables)
	 i cmp.DisplayType="E" {
		 $$$macline(" s id=$$$rget(""ID"")")
		 $$$macline(" i id'="""" d")
		 $$$macline(" . s obj=$$InvokeMethod^%apiOBJ("""_labclassName_""",,""%OpenId"",id)")
		 $$$macline(" . i 'disabled d")
		 $$$macline(" . . ; Use OID as it contains class and ID for locking")
		 $$$macline(" . . i obj,'##Class(websys.Lock).Lock(obj.%Oid(),%session.SessionId,$g(%session.Data(""LOGON.USERID"")),.warning) d")
		 $$$macline(" . . . s disabled=1")
		 $$$macline(" i 'disabled d")
		 #;. $$$macline(" . i 'obj s obj=$$InvokeMethod^%apiOBJ("""_labclassName_""",,""%OpenId"",id,0) s warning="""_$g(t("XLOCKEDMT"),"LOCKED BY MEDTRAK")_"""")
		 $$$macline(" . i 'obj s obj=$zobjclassmethod("""_labclassName_""",""%OpenId"",id,0) s warning="""_$g(t("XLOCKEDMT"),"LOCKED BY MEDTRAK")_"""")
		 $$$macline(" . i obj,warning="""_$g(t("XLOCKEDMT"),"LOCKED BY MEDTRAK")_""" s disabled=1")
		 $$$macline(" . i 'obj,warning="""_$g(t("XLOCKEDMT"),"LOCKED BY MEDTRAK")_""" s warning="""" ;reset warning because object doesn't exist, not because of locking")
		 i cmp.LockExtraClass'="",cmp.LockExtraId'="" {
			 $$$macline(" i '##Class(websys.Lock).Lock($lb("_cmp.LockExtraId_","""_cmp.LockExtraClass_"""),%session.SessionId,$g(%session.Data(""LOGON.USERID"")),.warning2) d")
			 ; XLOCKEXTRA must be defined on the component
			 ;$$$macline(" . s warning=warning_"" "_$g(t("XLOCKEXTRA"),cmp.LockExtraClass_" LOCKED")_"""")
			 $$$macline(" . s warning=warning_"" "_$g(t("XLOCKEXTRA"),cmp.LockExtraClass_" LOCKED")_"""_"" - ""_warning2")
			 $$$macline(" . s disabled=1")
		 }
		 ; Deduce if it is a child table (from the params we are sent)
		 $$$macline(" if id="""" d")
		 $$$macline(" . s parref=$$$rget(""PARREF"")")
		 #;. $$$macline(" . i parref="""" s obj=$$InvokeMethod^%apiOBJ("""_labclassName_""",,""%New"")")
		 #;. $$$macline(" . i parref'="""" s obj=$$InvokeMethod^%apiOBJ("""_labclassName_""",,""%New"",parref)")
		 $$$macline(" . i parref="""" s obj=$zobjclassmethod("""_labclassName_""",""%New"")")
		 $$$macline(" . i parref'="""" s obj=$zobjclassmethod("""_labclassName_""",""%New"",parref)")
		 $$$macline(" . i ##Class(websys.UserDefinedFunctions).Evaluate("""_$p(labclassName,".",2)_""",""OnNew"")")
	 }
	 ;
	 ; Show the menus
	 $$$macline(" i 'hidemenus d")
	 $$$macline(" . s title="""_cmp.Caption_""" i name'="""" s title=$s($d(t(name)):t(name),1:"""_cmp.Caption_""") i title="""" s title=name")
	 $$$macline(" . d ##Class(websys.Menu).ShowMenuMS("""_cmp.Menus_""",title,"_cmp.%Id()_",name)")
	 ;
	 ; message class
	 $$$macline(" i warning'="""" w ""<DIV><STRONG><FONT COLOR=RED>"",warning,""</FONT></STRONG></DIV>""")
	 ;
	 d ..GenForm()
 }
 ;
 ; Do the main  thang !!!
 d ..GenTemplate(template)
 ;
 i cmp.DisplayType'="K" {
	 ; Always wrap in a form ??
	 $$$macline(" i 'nested w ""</FORM>"",!")

	 ; Put this here rather than generated script so we don't have to re-oganise script generation... (due to accessing comp. properties which are stored in preferences)
	 ;If component size and position properties are specified
	 i cmp.UseFormSizeAndPosition {
	 	$$$macline(" w ""<SCRIPT language=javascript>"",!")
	 	i cmp.CenterForm {
	 		$$$macline(" w ""websys_move(eval(screen.width-"_+$p(cmp.FormSizeAndPosition,",",3)_")/2,eval(screen.height-"_+$p(cmp.FormSizeAndPosition,",",4)_")/2,"_+$p(cmp.FormSizeAndPosition,",",3)_","_+$p(cmp.FormSizeAndPosition,",",4)_");"",!")
	 	}
	 	i 'cmp.CenterForm {
	 		$$$macline(" w ""websys_move("_+$p(cmp.FormSizeAndPosition,",",1)_","_+$p(cmp.FormSizeAndPosition,",",2)_","_+$p(cmp.FormSizeAndPosition,",",3)_","_+$p(cmp.FormSizeAndPosition,",",4)_");"",!")
	 	}
	 	$$$macline(" w ""</SCRIPT>"",!")
	 }
 	;
 	$$$macline(" s tmp=""../scripts_gen/"_cmp.Name_".js""")
	 s tmp=""
	 ; If we are in a context, and there are some context specific settings
	 ; hey this is getting ugly...
	 ; 
	 ; 
		 /*
	 i "User.SSUser,User.SSGroup"[ActiveObject {
		 ;i ActiveContext'="",$d(^websys.TranslationD("CONTEXTPLUS",cmp.%Id()_ActiveContext,ActiveObject,ActiveReference)) s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_$e(ActiveObject,8)_ActiveReference_"_"_ActiveContext_".js"""
		 ;i tmp="",$d(^websys.TranslationD("CONTEXTPLUS",cmp.%Id(),ActiveObject,ActiveReference)) s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_$e(ActiveObject,8)_ActiveReference_".js"""
		 i ActiveContext'="" s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_$e(ActiveObject,7)_ActiveReference_"_"_ActiveContext_".js"""
		 i tmp="" s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_$e(ActiveObject,7)_ActiveReference_".js"""
	 }
		 */
	 if fileext'="" {
		 s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_fileext_".js"""
	 }
	 ;i tmp="",ActiveContext'="",$d(^websys.TranslationD("CONTEXT",cmp.%Id()_ActiveContext)) s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_ActiveContext_".js"""
	 i tmp="",ActiveContext'="" s tmp=" s tmp=""../scripts_gen/"_cmp.Name_"_"_ActiveContext_".js"""
	 i tmp'="" $$$macline(tmp)
	 ;
	 $$$macline(" w ""<SCRIPT SRC="""""",tmp,""""""></SCRIPT>"",!")
	 ;[W650]if $e(cmp.Name,1,14)="questionnaire." $$$macline(" w ""<SCRIPT SRC=""""../scripts_gen/"_cmp.Name_"_LU.js""""></SCRIPT>"",!")
	 if cmp.Script {
		 $$$macline(" w ""<SCRIPT SRC=""""../scripts/"_cmp.Name_".js""""></SCRIPT>"",!")
	 }
	 $$$macline(" w ""<SCRIPT SRC=""""../custom/""_$$$sget(""LOGON.SITECODE"")_""/scripts/"_cmp.Name_".js""""></SCRIPT>"",!")
	 ;custom context script for webcommon.Report.Custom, turn report code to uppercase and replace space with underscore
	 ;[W650]i cmp.%Id()=1906,ActiveContext'="" n repcode s repcode=$lg(##Class(websys.Report).GetCodeDescriptionFromId($e(ActiveContext,2,999)),3) if repcode'="" s repcode=$tr(repcode,"abcdefghijklmnopqrstuvwxyz ","ABCDEFGHIJKLMNOPQRSTUVWXYZ_") $$$macline(" w ""<SCRIPT SRC=""""../custom/""_$$$sget(""LOGON.SITECODE"")_""/scripts/"_cmp.Name_"_"_repcode_".js""""></SCRIPT>"",!")
	 i cmp.OtherScripts'="" {
		 f j=1:1:$l(cmp.OtherScripts,",") {
			 $$$macline(" w ""<SCRIPT SRC=""""../scripts/"_$p(cmp.OtherScripts,",",j)_"""""></SCRIPT>"",!")
		 }
	 }
 	;
	 ; Build a generic url for the lookup page (once per component)
	 $$$macline(" w ""<SCRIPT>"",!")
	 ; // Optimise this to include only items in the layout !!!
	 ; For now dump out all (could/should be optimised to include component specific list and remove duplicates.
	 ; Dump out all the translated captions and shortcutkeys
	 $$$macline(" w ""var tsc=new Array();"",!")
	 ;
	 s itms=cmp.Items
	 f j=1:1:itms.Count() {
		 s itm=itms.GetAt(j)
		 $$$macline(" w ""t['"_itm.Name_"']="_##Class(%CSP.Page).QuoteJS($tr(itm.Caption,"""","'"))_";"",!")
		 ; The shortcut key handlers have to come after the scripts, to make sure the function exists
		 i itm.ShortcutKey'="" {
			 s k=##Class(%Library.Collation).Upper($e(itm.ShortcutKey))
			 $$$macline(" w ""try {"",!")
			 $$$macline(" w ""tsc['"_itm.Name_"']='"_k_"';"",!")
			 $$$macline(" w ""websys_sckeys['"_k_"']="_itm.Name_"_click;"",!")
			 $$$macline(" w ""} catch(e) {};"",!")
		}
	 }
	 ; Dump out all the translated messages
	 ;
	 s itms=cmp.Messages
	 f j=1:1:itms.Count() {
	 	s itm=itms.GetAt(j)
	 	$$$macline(" w ""t['"_itm.Code_"']="_##Class(%CSP.Page).QuoteJS($tr(itm.Description,"""","'"))_";"",!")
	 }
	 ;
	 $$$macline(" w ""</SCRIPT>"",!")
	 ;
	 i cmp.DisplayType="E" {
	 	$$$macline(" i obj d obj.%Close()")
	 }
 }
 ;
 ;Show the Layout edit ICON (subject to security) (don't show it if we are printing)
 s mk=1
 $$$macline(" if '$g(tprint),$$$sget(""LOGON.ALLOWLAYOUTMANAGER"")=""Y"" d")
 $$$macline(" . w ""<A HREF=""""javascript:websys_layout('"_cmp.%Id()_"','"",$$$sget(""LOGON.LAYOUTMANAGER""),""','"",$$$rget(""CONTEXT""),""');"""" title="""""_cmp.Name_"""""><img SRC=""""../images/websys/component.gif""""  BORDER=""""0""""></A>"" d ##Class(websys.Component).ShowLayoutEditor()")

 i cmp.DisplayType'="K" {
	 ;
	;Identify the component end to help debug
	 $$$macline(" w ""</DIV><!-- COMPONENT END "_cmp.Name_" -->"",!")
	 ;$$$macline(" i 'nested,tprint w ""<SCRIPT LANGUAGE=javascript>"",!,""websys_printme();"",!,""</SCRIPT>"",!")
	 ;log 30479
	 $$$macline(" i 'nested,tprint,$g(%request.Data(""TPRINTID"",1))="_cmp.%Id()_" w ""<SCRIPT LANGUAGE=javascript>"",!,""websys_printme();"",!,""</SCRIPT>"",!")
	 $$$macline(" w ""<SCRIPT language=javascript>"",!")
	 $$$macline(" w ""function TK_Init() {"",!")
	 ;If there is a default expression, and a lookup then we need to run the broker (if there is one)
	 ;this needs to go after all other JS - so put it in the component...
	 	$$$macline(" w "" var tk_notready=0;"",!")
	 	;TN: if need to run broker from default expression, make sure all other frames are loaded first
	 n tkbroker s tkbroker=0
	 for j=1:1:cmp.Items.Count() {
		 s itm=cmp.Items.GetAt(j)
		 i itm.DefaultValueExpression'="" {
			i (itm.LookupBrokerMethod'="")!(itm.CustomLookupBrokerMethod'="") {
				if (tkbroker=0) {
	 				$$$macline(" w "" if ((window!=window.top)&&(window.name!='TRAK_main')) {"",!")
	 				$$$macline(" w ""  for (var i=0;i<parent.frames.length;i++) {"",!")
	 				$$$macline(" w ""   if ((parent.frames[i]!=window)&&(parent.frames[i].document.readyState!='complete')) { tk_notready=1;}"",!")
	 				$$$macline(" w ""  }"",!")
	 				$$$macline(" w "" }"",!")
	 				$$$macline(" w "" if (tk_notready) { window.setTimeout(TK_Init,200);}"",!")
	 				$$$macline(" w "" else {"",!")
	 			}
				$$$macline(" w ""  try { document.getElementById('"_itm.Name_"').onchange();}catch(e) {};"",!")
			 	s tkbroker=1
			}
		}
	}
	$$$macline(" if $g(TDIRTY)=2 w ""  try { document.f"_$tr(cmp.Name,".","_")_".TDIRTY.value=2;}catch(e) {}"",!")
	 $$$macline(" w ""  try { InitMe();}catch(e) {};"",!")
	 if (tkbroker) $$$macline(" w "" }"",!")
	 $$$macline(" w ""}TK_Init();"",!")
	 ;
	;TEVENTLIST is the itemname of the link clicked when in a list component
	 $$$macline(" n zjitm,zjmsg,zji")
	 s tmp=" if (TERROR=""E"") {"
	 s tmp=tmp_"   w ""alert('"",zdesc,""');"",!"
	 ;s tmp=tmp_"   w:$o(msg.Name("""_cmp.%Id()_""",""""))'="""" ""var obj=document.forms['f"_$tr(cmp.Name,".","_")_"'].elements['""_$o(msg.Name("""_cmp.%Id()_""",""""))_""'];if (obj) {obj.focus();obj.select();}"",!"
	 s tmp=tmp_"   w:$g(msg.Data(""TEVENTLIST"",1))="""" ""websys_firsterrorfocus();"",!"
	 s tmp=tmp_" }elseif (TERROR=""W"") {"
	 s tmp=tmp_"   w ""if (confirm('"",zdesc,""')) { var frm=document.f"_$tr(cmp.Name,".","_")_";frm.TOVERRIDE.value='1';frm.TEVENT.value='""_$g(msg.Data(""TEVENT"",1))_""';"""
	 ;s tmp=tmp_"   w ""frm.submit();"""
	 s tmp=tmp_"   i (zjdesc'="""") { f zji=1:1:$ll(zjdesc) {s zjitm=$lg(zjdesc,zji),zjmsg=$zcvt($lg(zjitm,1),""O"",""JS"") w:zjmsg'="""" ""if (confirm('"",$lg(zjitm,1),""')) "" w $lg(zjitm,2)_"";"" }}"
	 ;s tmp=tmp_"   w ""if (frm.TOVERRIDE.value=='1') {frm.submit();}}"""
	 s tmp=tmp_"   i $g(msg.Data(""TEVENTLIST"",1))="""" {w ""if (frm.TOVERRIDE.value=='1') {frm.submit();}}"" }"
	 s tmp=tmp_"   else { w ""if (frm.TOVERRIDE.value=='1') {var obj=document.getElementById('""_$g(msg.Data(""TEVENTLIST"",1))_""');if (obj) {obj.href+='&TOVERRIDE=1';obj.click();}}}"" }"
	 s tmp=tmp_" }elseif (TERROR=""I"") {"
	 s tmp=tmp_"   w ""alert('"",zdesc,""');"",!"
	 s tmp=tmp_"   w ""var frm=document.f"_$tr(cmp.Name,".","_")_";frm.TOVERRIDE.value='1';frm.TEVENT.value='""_$g(msg.Data(""TEVENT"",1))_""';"""
	 ;s tmp=tmp_"   w ""frm.submit();"""
	 s tmp=tmp_"   i (zjdesc'="""") { f zji=1:1:$ll(zjdesc) {s zjitm=$lg(zjdesc,zji),zjmsg=$zcvt($lg(zjitm,1),""O"",""JS"") w:zjmsg'="""" ""if (confirm('"",$lg(zjitm,1),""')) "" w $lg(zjitm,2)_"";"" }}"
	 ;s tmp=tmp_"   w ""if (frm.TOVERRIDE.value=='1') {frm.submit();}"""
	 s tmp=tmp_"   i $g(msg.Data(""TEVENTLIST"",1))="""" {w ""if (frm.TOVERRIDE.value=='1') {frm.submit();}"" }"
	 s tmp=tmp_"   else { w ""if (frm.TOVERRIDE.value=='1') {var obj=document.getElementById('""_$g(msg.Data(""TEVENTLIST"",1))_""');if (obj) {obj.href+='&TOVERRIDE=1';obj.click();}}"" }"
	 s tmp=tmp_" }elseif (TERROR=""J"") {"
	 s tmp=tmp_"   w ""var frm=document.f"_$tr(cmp.Name,".","_")_";frm.TEVENT.value='""_$g(msg.Data(""TEVENT"",1))_""';"""
	 s tmp=tmp_"   f zji=1:1:$ll(zjdesc) {s zjitm=$lg(zjdesc,zji),zjmsg=$zcvt($lg(zjitm,1),""O"",""JS"") w:zjmsg'="""" ""if (confirm('"",$lg(zjitm,1),""')) {frm.TOVERRIDE.value='1';"" w $lg(zjitm,2)_"";"" w:zjmsg'="""" ""}"" }"
	 ;s tmp=tmp_"   w ""if (frm.TOVERRIDE.value=='1') {frm.submit();}"""
	 s tmp=tmp_"   i $g(msg.Data(""TEVENTLIST"",1))="""" {w ""if (frm.TOVERRIDE.value=='1') {frm.submit();}"" }"
	 s tmp=tmp_"   else { w ""if (frm.TOVERRIDE.value=='1') {var obj=document.getElementById('""_$g(msg.Data(""TEVENTLIST"",1))_""');if (obj) {obj.href+='&TOVERRIDE=1';obj.click();}}"" }"
	 s tmp=tmp_" }"
	 $$$macline(tmp)
	 ;
	$$$macline(" w ""</SCRIPT>"",!")
	 //only kill it if it was our message
	 $$$macline(" i $d(^websys.MessageD(%session.SessionId,""Name"","_cmp.%Id()_")) d ##Class(websys.Message).%DeleteId(%session.SessionId)")

	 //$$$macline(" d ##Class(websys.Message).%DeleteId(%session.SessionId)")
	 ;
	}
	$$$macline(" q")
	 ;
	$$$maccomp
	 ;
	$$$macinit($p(rtn,".")_".L1")
 if cmp.DisplayType="K" {
	 d ..GenListLookup($p(rtn,".")_".L1")
	 $$$maccomp
 } else {
 d ..GenList($p(rtn,".")_".L1")
	 $$$maccomp
 }
 ;
 if cmp.DisplayType'="K" {
	 $$$macinit($p(rtn,".")_".S1")
	 d ..GenSave()
	 $$$maccomp
 }
	;
	d cmp.%Close()
 q
]]></Implementation>
</Method>

<Method name="GenComponentCaption">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>token:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //may need to handle quotes...
 //$$$macline(" w """_token_""",!")
 n tmp1,tmp2
 s tmp="",tmp2=""
 i token="M" s tmp=cmp.Caption
 i token="M1" s tmp=cmp.Caption1
 i token="M2" s tmp=cmp.Caption2
 i token="M3" s tmp=cmp.Caption3
 i token="M4" s tmp=cmp.Caption4
 i token="M5" s tmp=cmp.Caption5
 i token="M6" s tmp=cmp.Caption6
 i token="M7" s tmp=cmp.Caption7
 i token="M8" s tmp=cmp.Caption8
 i token="M9" s tmp=cmp.Caption9

 f j=1:1:$l(tmp) s tmp2=tmp2_$e(tmp,j) i $e(tmp,j)=$c(34) s tmp2=tmp2_$c(34)
 $$$macline(" w """_tmp2_""",!") q
 q
]]></Implementation>
</Method>

<Method name="GenForm">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Always wrap in a form ??
 //html form name with "." in it screww up javascript object references (i.e. document.forms...)
 //n name,mp,tpagid,action,rep
 //s name=$tr(..Name,".","_")
 $$$macline(" i 'nested {")
 $$$macline("	s action=""websys.csp""")
 // set FORM ACTION url for Crystal Report Preview
 $$$macline("	i $$$rget(""TREPORT"")'="""" {")
 $$$macline("		s rep=##Class(websys.Report).%OpenId($g(%request.Data(""TREPORT"",1)))")
 $$$macline("		s urltocrystal=$lg(^websys.ConfigurationD(1),65)")
 $$$macline("		i rep,rep.Type=""Crystal"" {")
 $$$macline("			i urltocrystal="""" {")
 $$$macline("				s action=""../custom/""_$$$sget(""LOGON.SITECODE"")_""/reports/""_rep.ReportUrl_"""" ")
 $$$macline("			} else {")
 $$$macline("				i $e(urltocrystal,$l(urltocrystal))'=""/"" s urltocrystal=urltocrystal_""/"" ")
 $$$macline("				s action=urltocrystal_rep.ReportUrl_"""" ")
 $$$macline("			}")
 $$$macline("		}")
 $$$macline("		i rep d rep.%Close()")
 $$$macline("	}")
 $$$macline("	w ""<FORM ACTION="""""",action,""""""""")
 i cmp.MultiPart $$$macline("	w "" enctype=""""multipart/form-data""""""")
 $$$macline("	w "" method=post name=""""f"",$tr(name,""."",""_""),"""""" id=""""f"",$tr(name,""."",""_""),"""""">"",!")
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TFORM"""" VALUE="""""",name,"""""">"",!")
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TPAGID"""" VALUE="""""",$$$tpagid,"""""">"",!")
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TEVENT"""" VALUE="""""""">"",!")
 ; for warnings save the value of TEVENT
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TOVERRIDE"""" VALUE="""""""">"",!")
 ;
 ;$$$macline("	w:'$g(msg.Count) ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TDIRTY"""" VALUE=""""1"""">"",!")
 ;$$$macline("	w:+$g(msg.Count) ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TDIRTY"""" VALUE=""""2"""">"",!")
 ; If not dirty, set it to the default start point of 1
 $$$macline("	w:'$d(msg.IsDirty) ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TDIRTY"""" VALUE=""""1"""">"",!")
 ; If dirty, set it to really dirty
 $$$macline("	w:$d(msg.IsDirty) ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TDIRTY"""" VALUE=""""2"""">"",!")
 ;
 ;
 $$$macline("	w:TERROR="""" ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TWKFL"""" VALUE="""""",$$$rget(""TWKFL""),"""""">"",!")
 $$$macline("	w:TERROR'="""" ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TWKFL"""" VALUE="""""",$g(msg.Data(""TWKFL"",1)),"""""">"",!")
 $$$macline("	w:TERROR="""" ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TWKFLI"""" VALUE="""""",$$$rget(""TWKFLI""),"""""">"",!")
 $$$macline("	w:TERROR'="""" ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TWKFLI"""" VALUE="""""",$g(msg.Data(""TWKFLI"",1)),"""""">"",!")
 ;TWKFLL is for cycling the workflow for every individual id passed in that string, stores type then string of ids delimited by ^, eg EpisodeID^1000^1003^1004
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TWKFLL"""" VALUE="""""",$$$rget(""TWKFLL""),"""""">"",!")
 ;TWKFLJ is for jumping to a particular page when the workflow is completed, stores page then TRELOADID delimited by ^, eg websys.csp^7100234
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TWKFLJ"""" VALUE="""""",$$$rget(""TWKFLJ""),"""""">"",!")
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TREPORT"""" VALUE="""""",$$$rget(""TREPORT""),"""""">"",!")
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TRELOADID"""" VALUE="""""",$g(TRELOADNEW),"""""">"",!")
 ;TFRAME is for jumping out of frames, value set by component
 $$$macline("	w ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TFRAME"""" VALUE="""""""">"",!")
 //the override context
 $$$macline("	w:$$$rget(""TCONTEXT"")'="""" ""<INPUT TYPE=""""HIDDEN"""" NAME=""""TCONTEXT"""" VALUE="""""",$$$rget(""TCONTEXT""),"""""">"",!")
 $$$macline(" }")
 //
 q
]]></Implementation>
</Method>

<Method name="GenItem">
<Description>
tblitmcnt - applies only to table items and is the GetAt(index)</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String,isinlist:%Library.String,tblitmcnt:%Library.String=""</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 n tmp,def
 s tmp=itm.ValueGet 
 ; remove any ";" comments !
 s tmp=$p(tmp,";",1)
 ; remove any "//" comments !
 s tmp=$p(tmp,"//",1)
 ;
 f  q:tmp'["%request.Get"  s tmp=$p(tmp,"%request.Get",1)_"$$$rget"_$p(tmp,"%request.Get",2,99)
 ;don't $$$EscapeHTML val for listboxes because it needs to compare with query for selected option values
 i (itm.DisplayType="TA"&itm.DisplayOnly)!(itm.DisplayType="L") s tmp=tmp_" s val=$g(val)" i 1
 e  s tmp=tmp_" s val=$$$EscapeHTML($g(val))"

 if cmp.DisplayType'="K" {
	 s mk=1 //start keep together
	 s mk=1 $$$macline(" i TERROR'=""""&($d(msg.Data("""_$p(itmid,"i",2,99)_""",1))!("_(itm.DisplayType="C")_")) {")
	 s mk=1 $$$macline(" 	s val=$g(msg.Data("""_$p(itmid,"i",2,99)_""",1)) s val=$$$EscapeHTML($g(val))")	; cjb 27/09/2005 54527 - added $$$EscapeHTML stuff
	 s mk=1 $$$macline(" } else {")
	 if isinlist {
		 s mk=1 $$$macline(" 	i tsrt'=2 s val="""" "_tmp)
		 i tblitmcnt s mk=1 $$$macline(" 	i tsrt=2 s val=$lg($lg(vals,"_tblitmcnt_"),1)"_$s(itm.DisplayType="A":" s lnkexpr=$lg($lg(vals,"_tblitmcnt_"),2),src=$lg($lg(vals,"_tblitmcnt_"),3)",itm.DisplayType="B":" s src=$lg($lg(vals,"_tblitmcnt_"),3)",itm.DisplayType="CX":" s cxcond=$lg($lg(vals,"_tblitmcnt_"),4)",1:""))
	 } else {
		 s mk=1 $$$macline(" 	s val="""" "_tmp)
	 }
	 s mk=1 $$$macline(" }")
	 s mk=0 //end keeptogether
	 ;
	 i 'isinlist,itm.DefaultValueExpression'="" {
		 s def=""
		 i $e(itm.DefaultValueExpression)="$" s def=itm.DefaultValueExpression
		 i $e(itm.DefaultValueExpression,1,2)="##" s def=itm.DefaultValueExpression
		 i def="" s def=""""_itm.DefaultValueExpression_""""
	 	i cmp.DisplayType="F"||(itm.DefaultValueAlways) {
	 		$$$macline(" i TERROR=""""&($g(val)="""") { s val=$$$EscapeHTML("_def_") s:'$d(%request.Data("""_itm.Name_""",1)) %request.Data("""_itm.Name_""",1)="_def_" s:val'="""" TDIRTY=2}")
	 		if ((itm.DisplayOnly)&(itm.DefaultValueAlways)) $$$macline(" i $g(val)="""" s val=$$$EscapeHTML("_def_") ")
	 	} else {
			//for workbench like screens where page is submitted to itself, don't refresh the default in case user has cleared this out
			$$$macline(" s:$g(%request.Data(""TPAGCNT"",1))'="""" resetdef=1  i $g(%request.Data(""TFORM"",1))=name,$g(val)="""" s resetdef=1")
			$$$macline(" i TERROR="""",($g(val)=""""),($g(%request.Data(""ID"",1))=""""),('$g(resetdef)) { s val=$$$EscapeHTML("_def_") s:'$d(%request.Data("""_itm.Name_""",1)) %request.Data("""_itm.Name_""",1)="_def_" }")
	 	}
	 }
 } else {
	  $$$macline(" "_tmp)
}

 ;
 d $case(itm.DisplayType,
 "T":    ..GenItemTextBox(itm,itmid),
 "C":    ..GenItemTextBox(itm,itmid),
 "TA":   ..GenItemTextArea(itm,itmid),
 "L":    ..GenItemListBox(itm,itmid),
 "A":    ..GenItemAnchor(itm,itmid,isinlist),
 "B":    ..GenItemButton(itm,itmid),
 "CX":   ..GenItemNestedStub(itm,itmid),
 "IP":   ..GenItemIconProfile(itm,itmid),
 "S":   ..GenItemCustom(itm,itmid),
 "R":   ..GenItemRTF(itm,itmid),
 "CT":    ..GenItemTextBox(itm,itmid)
 )
 q
]]></Implementation>
</Method>

<Method name="GenItemAnchor">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String,isinlist:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html,p,txt,url,url2,tpagid,caption
 ;
 i ($e(itm.Image)="$"!($e(itm.Image,1,2)="##")) {
	if (isinlist) {
 $$$macline(" s src=$s(tsrt=2:$g(src),1:"_itm.Image_") i src'="""" s src=""../images/""_src")
	} else {
 $$$macline(" s src="_itm.Image_" i src'="""" s src=""../images/""_src")
	}
 } elseif (itm.Image'="") {
 $$$macline(" s src=""../images/"_itm.Image_"""")
 } else {
 $$$macline(" s src=""""")
 }
 ;
 i ($e(itm.Tooltip)="$"!($e(itm.Tooltip,1,2)="##")) {
 $$$macline(" s tooltip="_itm.Tooltip_" s tooltip=$$$EscapeHTML($tr(tooltip,"""""""",""'""))")
 } elseif (itm.Tooltip'="") {
 $$$macline(" s tooltip="""_$tr(itm.Tooltip,"""","'")_""" s tooltip=$$$EscapeHTML(tooltip)")
 } else {
 $$$macline(" s tooltip=""""")
 }
 ;
 i itm.LinkUrl="NONE" d  $$$macline(" w """_html_""",!") q
 . s html="""_$s(src'="""":""<img SRC=""""""_src_"""""" BORDER=""""0"""" title=""""""_tooltip_"""""">"",1:"""")_"""
 ;
 ; ;$$$macline(" s TWKFL=$$$rget(""TWKFL""),TWKFLI=$$$rget(""TWKFLI""),TWKFLL=$$$rget(""TWKFLL""),TWKFLJ=$$$rget(""TWKFLJ""),tpagid=$$$tpagid")
 s (url,url2)="websys.csp"
 ;s url=url_"?TEVENT="_$p(itmid,"z",1)_"&TPAGID=""_tpagid_$s(TWKFL'="""":""&TWKFL=""_TWKFL,1:"""")_$s(TWKFLI'="""":""&TWKFLI=""_TWKFLI,1:"""")"_"_"
 if +itm.LinkWorkFlow {
 $$$macline(" s tpagid=$$$tpagid")
 s url=url_"?TEVENT="_$p(itmid,"z",1)_"&TPAGID=""_tpagid_""&TWKFL="_itm.LinkWorkFlow_"&TRELOADID=""_$g(TRELOADNEW)"_"_"
 } else {
 $$$macline(" s TWKFL=$$$rget(""TWKFL""),TWKFLI=$$$rget(""TWKFLI""),TWKFLL=$$$rget(""TWKFLL""),TWKFLJ=$$$rget(""TWKFLJ""),tpagid=$$$tpagid")
 s url=url_"?TEVENT="_$p(itmid,"z",1)_"&TPAGID=""_tpagid_$s(TWKFL'="""":""&TWKFL=""_TWKFL,1:"""")_$s(TWKFLI'="""":""&TWKFLI=""_TWKFLI,1:"""")_$s(TWKFLL'="""":""&TWKFLL=""_TWKFLL,1:"""")_$s(TWKFLJ'="""":""&TWKFLJ=""_TWKFLJ,1:"""")_""&TRELOADID=""_$g(TRELOADNEW)"_"_"
 }
 //s url=url_"?TEVENT="_$p(itmid,"z",1)_"&TPAGID=""_tpagid_$s(TWKFL'="""":""&TWKFL=""_TWKFL,1:"""")_$s(TWKFLI'="""":""&TWKFLI=""_TWKFLI,1:"""")_$s(TWKFLL'="""":""&TWKFLL=""_TWKFLL,1:"""")_$s(TWKFLJ'="""":""&TWKFLJ=""_TWKFLJ,1:"""")_""&TRELOADID=""_$g(TRELOADNEW)"_"_"
 ;If show in new window don't include workflow info...
 s url2=url2_"?TEVENT="_$p(itmid,"z",1)_"&TPAGID=""_tpagid_"
 i +itm.LinkWorkFlow {
	 s url2=url2_"""&TWKFL="_+itm.LinkWorkFlow_"""_"
 }
 i itm.LinkExpression'="" {
 if (isinlist) {
	 	s url=url_"$s(tsrt=2:$g(lnkexpr),1:"_itm.LinkExpression_")"_"_"
	 	s url2=url2_"$s(tsrt=2:$g(lnkexpr),1:"_itm.LinkExpression_")"_"_"
 } else {
	 	s url=url_itm.LinkExpression_"_"
	 	s url2=url2_itm.LinkExpression_"_"
 }
 }
 if (isinlist)&(itm.ClassMethod'="") {
	 s url=url_"""&TEVENTLIST="_$p(itmid,"i",2,99)_"""_"
	 s url2=url2_"""&TEVENTLIST="_$p(itmid,"i",2,99)_"""_"
 }
 s url=url_""""
 s url2=url2_""""
 ;
 s html="<A id="""""_$p(itmid,"i",2,99)_""""""
 s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 i itm.ShowInNewWindow'="" s html=html_" HREF=""""#"""" onClick=""""websys_lu('"_url2_"',false,'"_itm.ShowInNewWindow_"');return false;"""""
 i itm.ShowInNewWindow="" s html=html_" HREF="""""_url_""""""
 ;
 i itm.Style'="" s html=html_" style="""""_itm.Style_""""""
 i itm.TabSequence'="" s html=html_" tabIndex="""""_+itm.TabSequence_""""""
 ;
 i 'itm.Hidden,itm.Tooltip'="" s html=html_"""_$s(tooltip'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 s html=html_">"
 ;
 if (isinlist) {
 $$$macline(" if val_src'="""" w """_html_""" ")
 } else {
 $$$macline(" w """_html_""" ")
 }
 ;
 ; if src'=""
 ;s html="""_$s(src'="""":""<img SRC=""""""_src_"""""" BORDER=""""0"""">"",1:"""")_"""
 ;$$$macline(" w """_html_""" ")
 $$$macline(" w $s(src'="""":""<img SRC=""""""_src_"""""" BORDER=""""0"""">"",1:"""")")
 ;
 ; ?translation ())
 s caption=itm.Underline(itm.Caption,itm.ShortcutKey)
 i isinlist s caption=$s(caption="":"&nbsp;",1:caption)
 ;
 if (isinlist) {
 $$$macline(" if val_src'="""" w val,""</A>"" ")
 } else {
 $$$macline(" w """_$tr(caption,"""","'")_"</A>"",!")
 }
 q
]]></Implementation>
</Method>

<Method name="GenItemButton">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html,txt,caption
 ;
 i ($e(itm.Image)="$"!($e(itm.Image,1,2)="##")) {
 $$$macline(" s src="_itm.Image_" i src'="""" s src=""../images/""_src")
 } elseif (itm.Image'="") {
 $$$macline(" s src=""../images/"_itm.Image_"""")
 } else {
 $$$macline(" s src=""""")
 }
 ;
 i ($e(itm.Tooltip)="$"!($e(itm.Tooltip,1,2)="##")) {
 $$$macline(" s tooltip="_itm.Tooltip_" s tooltip=$$$EscapeHTML($tr(tooltip,"""""""",""'""))")
 } elseif (itm.Tooltip'="") {
 $$$macline(" s tooltip="""_$tr(itm.Tooltip,"""","'")_""" s tooltip=$$$EscapeHTML(tooltip)")
 } else {
 $$$macline(" s tooltip=""""")
 }

 ;
 s html="<a href=""""#"""" id="""""_$p(itmid,"i",2,99)_""""""
 s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 ;
 i itm.Style'="" s html=html_" style="""""_itm.Style_""""""
 i itm.TabSequence s html=html_" tabIndex="""""_+itm.TabSequence_""""""
 ;
 i 'itm.Hidden s html=html_"""_$s(tooltip'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 s html=html_">"
 ;
 ; if src'="" ??
 s html=html_"""_$s(src'="""":""<img SRC=""""""_src_"""""" BORDER=""""0"""">"",1:"""")_"""
 ;
 s caption=itm.Underline($tr(itm.Caption,"""","'"),itm.ShortcutKey)
 s caption=$s(caption="":"&nbsp;",1:caption)
 ;
 s html=html_caption
 s html=html_"</A>"
 $$$macline(" w """_html_""",!")
 ;
 q
]]></Implementation>
</Method>

<Method name="GenItemCaption">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,isinheader:%Library.Boolean,inlinequit:%Library.String=0</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html,caption,cls,sckey
 ;
 s html=""
 i 'isinheader,"B,A"[itm.DisplayType $$$macline(" w ""&nbsp;""") q
 i isinheader,"B"[itm.DisplayType,'inlinequit $$$macline(" w ""&nbsp;""") q
 i isinheader,"B"[itm.DisplayType,inlinequit $$$macline(" w ""&nbsp;"" q") q
 ;
 ; Show the translated caption else the default caption
 i 'itm.Hidden d
 . s caption=itm.Underline($tr(itm.Caption,"""","'"),itm.ShortcutKey)
 . s html=$tr($s(caption="":"&nbsp;",1:caption),$c(13,10),"")
 ;
 s cls="" i itm.Required s cls=" CLASS=""""clsRequired"""""
 i 'isinheader s html="<label id=""""c"_itm.Name_""""" "_cls_$s(itm.CaptionStyle'="":" Style="""""_itm.CaptionStyle_"""""",1:"")_">"_html_"</label>"
 i inlinequit $$$macline(" w """_html_""",! q") q
 $$$macline(" w """_html_""",!")
 q
]]></Implementation>
</Method>

<Method name="GenItemCustom">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 i itm.CustomExpression'="" {
 i itm.Style'="" $$$macline(" s style="""_itm.Style_"""")
 $$$macline(" "_itm.CustomExpression)
 }
 ;
 q
]]></Implementation>
</Method>

<Method name="GenItemDescription">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //may need to handle quotes...
 n tmp1,tmp2
 s tmp=itm.Description,tmp2=""
 f j=1:1:$l(tmp) s tmp2=tmp2_$e(tmp,j) i $e(tmp,j)=$c(34) s tmp2=tmp2_$c(34)
 $$$macline(" w """_tmp2_""",!")
 q
]]></Implementation>
</Method>

<Method name="GenItemIconProfile">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 $$$macline(" d ##Class(epr.CTIconProfile).Show("""_cmpid_""","""_itmid_""","""_itm.IconProfile_""",val) k ARY")
 ;
 q
]]></Implementation>
</Method>

<Method name="GenItemListBox">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n db,html,j
 s db=(itm.LookupClassName'="")&(itm.LookupQueryName'="")
 ; 
 ;
 //$$$macline(" n rs,code,desc,PX,params,style,value")
 $$$macline(" n rs,code,desc,PX,params,value")
 i db $$$macline(" s rs=##Class(%Library.ResultSet).%New("""_itm.LookupClassName_"."_itm.LookupQueryName_""")")
 ;
 i ($e(itm.Tooltip)="$"!($e(itm.Tooltip,1,2)="##")) {
 $$$macline(" s tooltip="_itm.Tooltip_" s tooltip=$$$EscapeHTML($tr(tooltip,"""""""",""'""))")
 } elseif (itm.Tooltip'="") {
 $$$macline(" s tooltip="""_$tr(itm.Tooltip,"""","'")_""" s tooltip=$$$EscapeHTML(tooltip)")
 } else {
 $$$macline(" s tooltip=""""")
 }
 ;
 $$$macline(" s value="",""_val_"",""")
 ;
 ; we could now get the param count at design time... but we won't know if the query changes
 ;
 i db d
 . s mk=1 $$$macline(" i (rs) {")
 . s mk=1 $$$macline(" s params=rs.GetParamCount()")
 . ;$$$macline(" f j=1:1:params s PX(j)="""" i $p("""_itm.LookupProperties_""","","",j)'="""" s PX(j)=##Class(websys.Conversions).expressionEvaluate($p("""_itm.LookupProperties_""","","",j))")
 . s mk=1 $$$macline(" f j=1:1:params s PX(j)=""""")
 . for j=1:1:$l(itm.LookupProperties,",") i $p(itm.LookupProperties,",",j)'="" s mk=1 $$$macline(" s PX("_j_")="_$p(itm.LookupProperties,",",j))
 . ; Is there another way ? Is There a better way
 . s mk=1 $$$macline(" d:params=0 rs.Execute()")
 . s mk=1 $$$macline(" d:params=1 rs.Execute(PX(1))")
 . s mk=1 $$$macline(" d:params=2 rs.Execute(PX(1),PX(2))")
 . s mk=1 $$$macline(" d:params=3 rs.Execute(PX(1),PX(2),PX(3))")
 . s mk=1 $$$macline(" d:params=4 rs.Execute(PX(1),PX(2),PX(3),PX(4))")
 . s mk=1 $$$macline(" d:params=5 rs.Execute(PX(1),PX(2),PX(3),PX(4),PX(5))")
 . s mk=1 $$$macline(" d:params=6 rs.Execute(PX(1),PX(2),PX(3),PX(4),PX(5),PX(6))")
 . s mk=1 $$$macline(" d:params=7 rs.Execute(PX(1),PX(2),PX(3),PX(4),PX(5),PX(6),PX(7))")
 . s mk=1 $$$macline(" d:params=8 rs.Execute(PX(1),PX(2),PX(3),PX(4),PX(5),PX(6),PX(7),PX(8))")
 . s mk=1 $$$macline(" s code=1,desc=2")
 . s mk=1 $$$macline(" i rs.GetColumnCount()<2 s desc=1")
 . ;
 . ; Column 1 of the query is used for Value, Column 2 for description (if there is more than one col)
 . ; 
 . s mk=1 $$$macline(" }")
 ;
 ; While this does have a title property it does seem to get ignored by IE5.5
 s html="<select """_"_$s(disabled:""disabled "",1:"""")_"""_"id="""""_$p(itmid,"i",2,99)_""""""
 ; if the item is marked as disabled then it is
 i (itm.Disabled)!(itm.DisplayOnly) s html="<select disabled id="""""_$p(itmid,"i",2,99)_""""""
 s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 s html=html_" multiple size=4"
 i itm.Style'="" s html=html_" style="""""_itm.Style_""""""
 i itm.TabSequence s html=html_" tabIndex="""""_+itm.TabSequence_""""""
 i itm.ShortcutKey'="" s html=html_" accesskey="""""_itm.ShortcutKey_""""""
 i 'itm.Hidden s html=html_"""_$s(tooltip'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 s html=html_">"
 $$$macline(" w """_html_""",!")
 ;
 i db d
 . $$$macline(" i rs f  q:'rs.Next()  w ""<option ""_$s(value[rs.GetData(code):""selected "",1:"""")_"" value=""""""_rs.GetData(code)_"""""">""_rs.GetData(desc)_""</option>""")
 ;
 s html="</select>"
 $$$macline(" w """_html_""",!")
 ;
 i db $$$macline(" i rs d rs.%Close()")
 q
]]></Implementation>
</Method>

<Method name="GenItemNestedStub">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html
 ;s html="<IMG onclick=""""websys_component(this,'r"_$e(itmid,2,999)_"');return false;"""" SRC=""""../images/websys/plus.gif"""" border=""""0"""">"
 s html="<IMG onclick=""""websys_component(this,'r""_ttpagid_""r""_"""_$e(itmid,2,999)_"');return false;"""" SRC=""""../images/websys/""_$s(+$g(listexpand):""minus"",1:""plus"")_"".gif"""" border=""""0"""">"
 $$$macline(" i tsrt'=2 s val=1 "_itm.NestedCondExpr)
 $$$macline(" i tsrt=2 s val=+$g(cxcond)")
 $$$macline(" i val s nc(+$g(nc),""hasChild"")="""" w """_html_""",!")
 ;
 q
]]></Implementation>
</Method>

<Method name="GenItemRTF">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html,style
 I itm.DisplayOnly d  $$$macline(" w "_html_",!") q
 . s html="$s(val'="""":val,1:""&nbsp;"")"
 ;
 i ($e(itm.Tooltip)="$"!($e(itm.Tooltip,1,2)="##")) {
 $$$macline(" s tooltip="_itm.Tooltip_" s tooltip=$$$EscapeHTML($tr(tooltip,"""""""",""'""))")
 } elseif (itm.Tooltip'="") {
 $$$macline(" s tooltip="""_$tr(itm.Tooltip,"""","'")_""" s tooltip=$$$EscapeHTML(tooltip)")
 } else {
 $$$macline(" s tooltip=""""")
 }
 ;
 s html="<OBJECT classid=""""CLSID:B5B5AF17-CE26-4B52-89F6-D7AFA885484C"""" VIEWASTEXT "
 s html=html_"CODEBASE=""""../addins/client/tkRichText.CAB#version=1,0,0,40"""""
 s html=html_" id="""""_$p(itmid,"i",2,99)_""""""
 s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 s style=itm.Style
 i style="" s style=style="WIDTH: 240px; HEIGHT: 80px"
 i style'="" s html=html_" style="""""_style_""""""
 s html=html_">"
 s html=html_"<PARAM NAME=""""TextRTF"""" VALUE=""""""_$$$EscapeHTML(val)_"""""">"
 s html=html_"<PARAM NAME=""""Title"""" VALUE=""""""_tooltip_"""""">"
 if +itm.TabSequence s html=html_"<PARAM NAME=""""TabSequence"""" VALUE="""""_+itm.TabSequence_""""">"
 s html=html_"""_$s(disabled:""<PARAM NAME=""""ReadOnly"""" VALUE=""""0"""">"""""",1:"""")_"""
 s html=html_"</OBJECT>"
 $$$macline(" w """_html_""",!")

 i 'itm.Disabled,itm.LookupClassName'="",itm.LookupBrokerMethod'="" d
 . ; encrypted method name uses the sessionid as part of the key - therefore do at runtime
 . I $ZV[") 4.1" $$$macline(" s encmeth=##Class(%CSP.Page).EscapeURL(##Class(%CSP.Page).Encrypt("""_itm.LookupClassName_"."_itm.LookupBrokerMethod_"""))")
 . I $ZV'[") 4.1" $$$macline(" s encmeth=##Class(%CSP.Page).Encrypt($lb("""_itm.LookupClassName_"."_itm.LookupBrokerMethod_"""))")
 . ;s html=html_"""_$s('disabled:"" onkeydown="""""_itm.Name_"_keydownhandler('""_encmeth_""');"""""",1:"""")_"""
 . s html="<SCRIPT LANGUAGE=javascript FOR="_itm.Name_" EVENT=onkeydown(keycode,shift)>"_$c(13,10)
 . ;s html=html_"alert('hello the key is'+keycode);"_$c(13,10)
 . s html=html_itm.Name_"_keydownhandler('""_encmeth_""',keycode);"_$c(13,10)
 . s html=html_"</SCRIPT>"_$c(13,10)
 . $$$macline(" w:'disabled """_html_""",!")
 q
]]></Implementation>
</Method>

<Method name="GenItemTextArea">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html
 i itm.DisplayOnly d  $$$macline(" w """_html_""",!") q
 . s html="<label id="""""_$p(itmid,"i",2,99)_""""" name="""""_$p(itmid,"i",2,99)_""""""
 . s html=html_"""_$s($g(tooltip)'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 . s html=html_$s(itm.Style'="":" Style="""""_itm.Style_"""""",1:"")_">"
 . s html=html_"""_$s(val'="""":val,1:""&nbsp;"")_"""
 . s html=html_"</label>"
 ;
 i ($e(itm.Tooltip)="$"!($e(itm.Tooltip,1,2)="##")) {
 $$$macline(" s tooltip="_itm.Tooltip_" s tooltip=$$$EscapeHTML($tr(tooltip,"""""""",""'""))")
 } elseif (itm.Tooltip'="") {
 $$$macline(" s tooltip="""_$tr(itm.Tooltip,"""","'")_""" s tooltip=$$$EscapeHTML(tooltip)")
 } else {
 $$$macline(" s tooltip=""""")
 }
 ;
 s html="<textarea """_"_$s(disabled:""disabled "",1:"""")_"""_"id="""""_$p(itmid,"i",2,99)_""""""
 i itm.Disabled s html="<textarea disabled id="""""_$p(itmid,"i",2,99)_""""""
 s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 i 'itm.Disabled,itm.LookupClassName'="",itm.LookupBrokerMethod'="" d
 . ; encrypted method name uses the sessionid as part of the key - therefore do at runtime
 . I $ZV[") 4.1" $$$macline(" s encmeth=##Class(%CSP.Page).EscapeURL(##Class(%CSP.Page).Encrypt("""_itm.LookupClassName_"."_itm.LookupBrokerMethod_"""))")
 . I $ZV'[") 4.1" $$$macline(" s encmeth=##Class(%CSP.Page).Encrypt($lb("""_itm.LookupClassName_"."_itm.LookupBrokerMethod_"""))")
 . s html=html_"""_$s('disabled:"" onkeydown="""""_itm.Name_"_keydownhandler('""_encmeth_""');"""""",1:"""")_"""
 i itm.Style'="" s html=html_" style="""""_itm.Style_""""""
 i itm.TabSequence s html=html_" tabIndex="""""_+itm.TabSequence_""""""
 i itm.ShortcutKey'="" s html=html_" accesskey="""""_itm.ShortcutKey_""""""
 i 'itm.Hidden s html=html_"""_$s(tooltip'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 s html=html_">""_val_""</textarea>"
 $$$macline(" w """_html_""",!")
 q
]]></Implementation>
</Method>

<Method name="GenItemTextBox">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itm:%Library.String,itmid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n html,encmeth,checkbox,lucls,luqry,luprp,lubrk
 ;
 i itm.DisplayType'="CT" {
	 s lucls=itm.LookupClassName
	 s luqry=itm.LookupQueryName
	 s luprp=itm.LookupProperties
	 s lubrk=itm.LookupBrokerMethod
 } else {
	 s lucls=itm.CustomLookupClassName
	 s luqry=itm.CustomLookupQueryName
	 s luprp=itm.CustomLookupProperties
	 s lubrk=itm.CustomLookupBrokerMethod
 }
 ;
 s checkbox=##Class(%Collation).Upper(itm.DataType)["BOOLEAN"!(itm.DisplayType="C")
 ;
 i 'itm.Hidden {
 i ($e(itm.Tooltip)="$"!($e(itm.Tooltip,1,2)="##")) {
 $$$macline(" s tooltip="_itm.Tooltip_" s tooltip=$$$EscapeHTML($tr(tooltip,"""""""",""'""))")
 } elseif (itm.Tooltip'="") {
 $$$macline(" s tooltip="""_$tr(itm.Tooltip,"""","'")_""" s tooltip=$$$EscapeHTML(tooltip)")
 } else {
 $$$macline(" s tooltip=""""")
 }
 }
 ;
 ; Only have a link for plain text ?
 I itm.DisplayOnly,'checkbox d  $$$macline(" w """_html_""" ") q
 . s cls="" i itm.Required s cls=" CLASS=""clsRequired"""
 . //quote removed for ("websys.WorkFlowItemDefinition.List") and then back in for Item2
 . s html="<label id="""""_$p(itmid,"i",2,99)_""""" name="""""_$p(itmid,"i",2,99)_"""""" 
 . i itm.%ClassName(1)="websys.ComponentItems" s html=html_" value=""""""_$g(val)_"""""""
 . i itm.Tooltip'="" s html=html_"""_$s($g(tooltip)'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 . s html=html_cls_$s(itm.Style'="":" Style="""""_itm.Style_"""""",1:"")_">"
 . s html=html_"""_$s(val'="""":val,1:""&nbsp;"")_"""
 . s html=html_"</label>"
 . i itm.LinkUrl="" q
 . n url
 . s url="websys.csp"
 . s url=url_"?&TEVENT="_$p(itmid,"i",2,99)_"&TWKFL="
 . s url=url_"""_%request.Data(""TWKFL"",1)_"""
 . s url=url_"""_%request.Data(""TWKFLI"",1)_"""
 . i $l(itm.LinkExpression) s url=url_itm.LinkExpression_"_"""
 . ;
 . ; There was some bug here for show in new window
 . ;i itm.ShowInNewWindow'="" s html="<A id="""_$p(itmid,"i",2,99)_""" name="_$p(itmid,"i",2,99)_" HREF=""#"" onClick=""websys_lu('"_url_"',false,'"_itm.ShowInNewWindow_"');"""_$s(tooltip'="":" title="""_tooltip_"""",1:"")_">"_html_"</A>"
 . ;i itm.ShowInNewWindow'="" s html="<A id="""""_$p(itmid,"i",2,99)_""""" name="_$p(itmid,"i",2,99)_" HREF=""#"" onClick=""websys_lu('"_url_"',false,'"_itm.ShowInNewWindow_"');""_$s(tooltip'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""_">"_html_"</A>"
 . i itm.ShowInNewWindow'="" d
 . . s html="<A id="""""_$p(itmid,"i",2,99)_""""" name="""""_$p(itmid,"i",2,99)_""""" HREF=""""#"""" onClick=""""websys_lu('"_url_"',false,'"_itm.ShowInNewWindow_"');"""">"_html_"</A>"
 . i itm.ShowInNewWindow="" d
 . . s html="<A id="""""_$p(itmid,"i",2,99)_""""" name="""""_$p(itmid,"i",2,99)_""""" HREF="""""_url_""""">"_html_"</A>"
 ;
 ;i ##Class(%Collation).Upper(itm.DataType)["BOOLEAN"!(itm.DisplayType="C") d  $$$macline(" w """_html_""",!") q
 i checkbox d  $$$macline(" w """_html_""",!") q
 . ; show display only as disabled
 . i itm.DisplayOnly s itm.Disabled=1
 . s html="<input """_"_$s(disabled:""disabled "",1:"""")_"""_"id="""""_$p(itmid,"i",2,99)_""""""
 . i itm.Disabled s html="<input disabled id="""""_$p(itmid,"i",2,99)_""""""
 . s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 . i itm.Hidden s html=html_" type=""""hidden"""""
 . //i itm.Required s html=html_" CLASS=""""clsRequired"""""
 . ; this can only be invalid as part of some cross reference
 . s html=html_"""_$s($g(msg.Name("""_cmp.%Id()_""","""_itm.Name_"""))'="""":"" class=""""""_cls(msg.Name("""_cmp.%Id()_""","""_itm.Name_"""))_"""""""",1:"""")_"""
 . s html=html_"""_$s(val=""1"":"" CHECKED"",val=""on"":"" CHECKED"",val=""Y"":"" CHECKED"",val=""YD"":"" CHECKED DISABLED"",val=""D"":"" DISABLED"",1:"""")_"""
 . i itm.Style'="" s html=html_" style="""""_itm.Style_""""""
 . i itm.Tooltip'="" s html=html_"""_$s($g(tooltip)'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 . i itm.TabSequence s html=html_" tabIndex="""""_+itm.TabSequence_""""""
 . i itm.ShortcutKey'="" s html=html_" accesskey="""""_itm.ShortcutKey_""""""
 . s html=html_" type=""""checkbox"""">"
 ;
 ;
 n putindiv
 s putindiv=0,html=""
 ; Bit of a hack - for absolute positioning and lookups, keep the icon and the text box together by putting them both in a div !
 //i itm.Style["absolute",itm.LookupClassName'="" s putindiv=1
 i itm.Style["absolute",lucls'="" s putindiv=1
 ;
 i putindiv s html="<div nowrap" s:itm.Style'="" html=html_" style="""""_itm.Style_"""""" s html=html_">"
 s html=html_"<input """_"_$s(disabled:""disabled "",1:"""")_"""_"id="""""_$p(itmid,"i",2,99)_""""""
 ;????i itm.Disabled s html=html_"<input disabled id="""""_$p(itmid,"i",2,99)_""""""
 i itm.Disabled s html=html_" disabled "
 s html=html_" name="""""_$p(itmid,"i",2,99)_""""""
 ; In theory we should only get one of these...
 i itm.Hidden s html=html_" type=""""hidden"""""
 i itm.Password s html=html_" type=""""password"""""
 i itm.AttachedFile s html=html_" type=""""file"""""
 ;i itm.Required s html=html_" CLASS=""""clsRequired"""""
 ; component id /item name
 s html=html_"""_$s($g(msg.Name("""_cmp.%Id()_""","""_itm.Name_"""))'="""":"" class=""""""_cls(msg.Name("""_cmp.%Id()_""","""_itm.Name_"""))_"""""""",1:"""")_"""

 ; Put the style in the div
 i 'putindiv i 'itm.Hidden,itm.Style'="" s html=html_" style="""""_itm.Style_""""""
 i 'itm.Hidden d
 . i itm.TabSequence s html=html_" tabIndex="""""_+itm.TabSequence_""""""
 . i itm.ShortcutKey'="" s html=html_" accesskey="""""_itm.ShortcutKey_""""""
 i 'itm.Disabled,lucls'="",lubrk'="" d
 . ; encrypted method name uses the sessionid as part of the key - therefore do at runtime
 . $$$macline(" s encmeth=##Class(%CSP.Page).Encrypt($lb("""_lucls_"."_lubrk_"""))")
 . s html=html_"""_$s(disabled:"""",1:"" onchange="""""_itm.Name_"_changehandler('""_encmeth_""');"""""")_"""
 i 'itm.Hidden,itm.Tooltip'="" s html=html_"""_$s($g(tooltip)'="""":"" title=""""""_tooltip_"""""""",1:"""")_"""
 i itm.SQLTable'="",itm.SQLColumn'="",+$g($$$PROPPARAM($$$sDEF,"User."_$tr(itm.SQLTable,"_",""),$tr(itm.SQLColumn,"_",""),"MAXLEN")) d
 . s html=html_" maxlength="_$g($$$PROPPARAM($$$sDEF,"User."_$tr(itm.SQLTable,"_",""),$tr(itm.SQLColumn,"_",""),"MAXLEN"))
 i itm.Password s html=html_$s(itm.PasswordKeepVal:" value=""""""_val_"""""">",1:" value="""""""">")
 i 'itm.Password s html=html_" value=""""""_val_"""""">"
 ; If its a query lookup up or a list lookup
 //i 'itm.Hidden,'itm.Disabled,itm.LookupClassName'="",itm.LookupQueryName'="" d
 i 'itm.Hidden,'itm.Disabled,lucls'="",luqry'="" d
 . s html=html_"""_$s(disabled:"""",1:""<IMG id=""""l"_itmid_""""" name=""""l"_itmid_""""" src=""""../images/websys/lookup.gif"""">"")_"""
 ;if it's a date field without own lookup add datelookup
 //i 'itm.Hidden,'itm.Disabled,itm.LookupClassName_itm.LookupQueryName="",##Class(%Collation).Upper(itm.DataType)["DATE",$e(itm.DataType)="%" s html=html_"""_$s(disabled:"""",1:""<IMG id=""""l"_itmid_""""" name=""""l"_itmid_""""" src=""""../images/websys/lookupdate.gif"""">"")_"""
 i 'itm.Hidden,'itm.Disabled,lucls_luqry="",##Class(%Collation).Upper(itm.DataType)["DATE",$e(itm.DataType)="%" s html=html_"""_$s(disabled:"""",1:""<IMG id=""""l"_itmid_""""" name=""""l"_itmid_""""" src=""""../images/websys/lookupdate.gif"""">"")_"""
 i putindiv s html=html_"</div>"
 $$$macline(" w """_html_""",!")
 q
]]></Implementation>
</Method>

<Method name="GenList">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>firstrtn:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n secondrtn,rtnL3,rtnL4,rtnL5
 s secondrtn=$p(firstrtn,".")_".L2"	;next paging, ListInit,ListEnd, Captions
 s rtnL3=$p(firstrtn,".")_".L3"		;ListValues for generic sorting
 s rtnL4=$p(firstrtn,".")_".L4"		;draws column of all hidden fields
 s rtnL5=$p(firstrtn,".")_".L5"		;draws each field, I1..In

 d ..Init()
 ;
 ; //SP// no query name, no sql - it's not a list....
 i cmp.QueryName="",cmp.QuerySQL="" $$$macline("ShowList(name,hidemenus,hideheadings,disabled,style,shownextinnewwindow,app,context,nested,listrowsx) ;") $$$macline(" q") q
 ;

 //Nested Body
 f j=1:1:cmp.TableItems.Count() {
 s itm=cmp.TableItems.GetAt(j)

 i itm.DisplayType="CX" {
 $$$macline("Nested"_j_"(ncid,expand) ;")
 $$$macline(" n cmp ;")
 i itm.NestedCondExpr'="" d
 . $$$macline(" n val i tsrt'=2 s val=1 "_itm.NestedCondExpr)
 . $$$macline(" i tsrt=2 s val=$lg($lg(vals,"_j_"),1) s val=+$lg($lg(vals,"_j_"),4)")
 . $$$macline(" if 'val q")
 $$$macline(" i cnt#2 &html<<TR class=""<%=""RowOdd""_nested%>"" id=<%=ncid%> style=""DISPLAY:<%=$s(+$g(expand):""display"",1:""none"")%>;"">>")
 $$$macline(" i '(cnt#2) &html<<TR class=""<%=""RowEven""_nested%>"" id=<%=ncid%> style=""DISPLAY:<%=$s(+$g(expand):""display"",1:""none"")%>;"">>")
 $$$macline(" w ""<TD>&nbsp;</TD><TD colspan="""""",$l(uSet,""|"")-1,"""""">""")

 ; Evaluate the nested component transition expression
 ;i itm.NestedTransExpr'="" $$$macline(" "_itm.NestedTransExpr)
 i itm.NestedTransExpr'="" d
 . s str=itm.NestedTransExpr
 . f  q:str'["rs.Data("  s str=$p(str,"rs.Data(",1)_"TCXVALS("_$p(str,"rs.Data(",2,99)
 . f  q:str'["rs.GetDataByName("  s str=$p(str,"rs.GetDataByName(",1)_"TCXVALS("_$p(str,"rs.GetDataByName(",2,99)
 . $$$macline(" i tsrt'=2 "_itm.NestedTransExpr)
 . $$$macline(" i tsrt=2 "_str)
 i itm.NestedComponent $$$macline(" s cmp=##Class(websys.Component).%OpenId("_itm.NestedComponent.%Id()_") i cmp d cmp.Show(nested+1),cmp.%Close()")
 ;TN:store details to then run the cmp.Show() only when the child is expanded
 ;i itm.NestedComponent d
 ;. $$$macline(" i +$g(expand)!($g(%request.Data(""TEXPAND"",1))'="""") {s cmp=##Class(websys.Component).%OpenId("_itm.NestedComponent.%Id()_") i cmp d cmp.Show(nested+1),cmp.%Close()}")
 ;. $$$macline(" else {")
 ;. $$$macline("  k ^TMP(""WEB"",%session.SessionId,""NC"",ncid) m ^TMP(""WEB"",%session.SessionId,""NC"",ncid)=%request.Data")
 ;. $$$macline("  s ^TMP(""WEB"",%session.SessionId,""NC"",ncid)=""s cmp=##class(websys.Component).%OpenId("_itm.NestedComponent.%Id()_") i cmp d cmp.Show(""_(nested+1)_""),cmp.%Close()""")
 ;. $$$macline(" }")
 $$$macline(" w ""</TD></TR>"" q")
 }

 }

 ;
 $$$macline("ShowList(name,hidemenus,hideheadings,disabled,style,shownextinnewwindow,app,context,nested,listrowsx) ;")

 $$$macline(" n rs,PageCnt,tprint,tsrt,tsrtitm,tsrtord,tname,labclassName,WebClassName,context,uSet,prefs,listrows,listprint,listwrap,listfixed,torderbyasc,torderbydesc,hidden,ttpagid,val,vali,maxsort,ensort,execstatus")
 $$$macline(" s ttpagid=$$$tpagid,execstatus=1")
 n tmp,asc,desc
 s hidden=","
 f j=1:1:cmp.TableItems.Count() {
 if cmp.TableItems.GetAt(j).Hidden s hidden=hidden_j_","
 }

 //whole section moved to GenListInit
 $$$macline(" d ListInit^"_secondrtn)

 ; Brute force approach to sorting
 ;;uSort2change;$$$macline(" i tsrt=2 {")
 $$$macline(" i (tsrt=2)!((tsrt=1)&(+$g(uSort2Col))) d ListValues^"_rtnL3)  ;allow secondary sorting
 ; if preference default sort order is ok
 $$$macline(" if +$g(uSortCol),'$g(ztsrtitm) {")
 ;;uSort2change;$$$macline("  if (tsrt=2&&(cnt<(maxsort+1)))||((tsrt'=2)&&execstatus) {")
 $$$macline("  if (tsrt=2&&(cnt<(maxsort+1)))||((tsrt'=2)&&(execstatus)&&('$g(uSort2Col)))||((tsrt=1)&&(+$g(uSort2Col))&&(cnt<(maxsort+1))) {")
	 	;ok, so keep variables
 $$$macline("   s %request.Data(""TSRTITM"",1)=tsrtitm,%request.Data(""TSRTORD"",1)=tsrtord")
 $$$macline("  } else {")
		;reset to system default
 $$$macline("   s tsrt=$g(ztsrt),tsrtitm=$g(ztsrtitm),tsrtord=$g(ztsrtord),uSort2Col=""""")
 $$$macline("   d rs.%Close(),setquery^"_secondrtn)  ;close the query and restart query again with system default
 $$$macline("  }")
 $$$macline(" }")

 ; Build up the requery string.
 ; prbably generate this in....
 $$$macline(" s requery=$$PageUrlSort^"_secondrtn_"(0)")
 ;

 ; JJH - Moved all the table stuff to L5
 $$$macline(" w ""<TABLE width=""""100%""""><TR><TD colSpan=2 valign=top><TABLE class=tblList id=""""t"",tname,"""""" Name=""""t"",tname,"""""" CELLSPACING=1 width=""""100%"""""",$s(listfixed:"" STYLE=""""TABLE-LAYOUT:FIXED;"""""",1:""""),"">"",!")
 ;
 ; Table Headings - Show in the order of user settings
 $$$macline(" s url=""websys.component.customiselayout.csp?ID="_cmp.%Id()_"&CONTEXT=""_context_$s(nested:""&TISNESTED=1"",1:"""")")
 ;
 $$$macline(" i 'hideheadings d")
 $$$macline(" . if $$$sget(""LOGON.ALLOWCOLUMNMANAGER"")=""Y"" &html<<THEAD ondblclick=""websys_lu('<%=url%>',false);""><TH style='display:none;'></TH>>")
 $$$macline(" . if $$$sget(""LOGON.ALLOWCOLUMNMANAGER"")'=""Y"" &html<<THEAD><TH style='display:none;'></TH>>")
 $$$macline(" . for j=1:1:$l(uSet,""|"") d")
 $$$macline(" . . s itmid=+$p(uSet,""|"",j)")
 $$$macline(" . . i """_hidden_"""[("",""_itmid_"","") q")
 $$$macline(" . . s width="""",wid=$p($p(uSet,""|"",j),"","",2),ensort=$p($p(uSet,""|"",j),"","",3) i +wid s width=""width=""_+wid_""px""")
 $$$macline(" . . i 'itmid q")
 $$$macline(" . . i itmid>"_cmp.TableItems.Count()_" q")

 $$$macline(" . . w ""<TH id="",itmid,"" "",width,$s(listwrap:"" NOWRAP"",1:""""),"">""")
 //SP//. . ; If can print (but not printing)- then show print icon in column 1. Print with current sort settings
 //TN: don't allow printing in nested component
 $$$macline(" . . i j=1,listprint,'tprint,'nested d")
 $$$macline(" . . . s requeryx=$$PageUrlSort^"_secondrtn_"(-1)_""&TPRINT=1&TPRINTID="_cmp.%Id()_"&TSRT=""_tsrt_""&TSRTITM_"_$tr(cmp.Name,".","_")_"=""_tsrtitm_""&TSRTORD_"_$tr(cmp.Name,".","_")_"=""_tsrtord")
 $$$macline(" . . . w ""<A HREF="""""",requeryx,"""""" target=""""TRAK_hidden""""><IMG SRC=""""../images/websys/print_small.gif"""" border=""""0""""></A>""")
 //SP//. . ;
 ///
 $$$macline(" . . d @(""C""_itmid_""^"_secondrtn_"(ensort)"")")
 $$$macline(" . . f  q:$p(delims,""^"",$p(uSet,""|"",j+1))=""""  q:j>"_cmp.TableItems.Count()_"  s j=j+1")
 $$$macline(" . . w ""</TH>"",!")
 $$$macline(" . w ""</THEAD>"",!")

 //secondary sorting
 $$$macline(" s glo1="""",glo2="""" s ord1=$s(tsrtord=""D"":-1,1:1),ord2=$s($g(uSort2Ord)=""D"":-1,1:1)")
 $$$macline(" i (tsrt=1)&(+$g(uSort2Col)) s tsrt=2")  ;if secondary sort, set as generic sorting to use TMP($zn) globals
			
 //if (auto sort and its within the limit) OR (its a custom sort)
 $$$macline(" if (tsrt=2&&(cnt<(maxsort+1)))||((tsrt'=2)&&execstatus) {")
 ; Brute force approach to pageing i.e. skip records prior to this page
 ;;uSort2change;$$$macline(" i tsrt'=2,'nested,'tprint,execstatus f cnt=1:1:PageCnt*listrows q:'rs.Next()")
 $$$macline("  i tsrt'=2,'nested,'tprint,execstatus,'$g(uSort2Col) f cnt=1:1:PageCnt*listrows q:'rs.Next()")
 ;$$$macline(" i tsrt=2,'nested,'tprint d")
 ;;uSort2change;$$$macline(" i (tsrt=2&&('nested))||((tsrt=2)&&(nested)&&($d(%request.Data(""TSRTITM_"_$tr(cmp.Name,".","_")_""")))) d")
 ;;uSort2change;$$$macline(" . i tsrtord=""D"" s glo=""^TMP(""""""_$zn_"""""",""_($j+1)_"")"",pre=""^TMP(""""""_$zn_"""""",""_$j_"","",ord=-1")
 ;;uSort2change;$$$macline(" . i tsrtord=""A"" s glo=""^TMP(""""""_$zn_"""""",""_$j_"")"",pre=""^TMP(""""""_$zn_"""""",""_$j_"","",ord=1")
 ;;uSort2change;$$$macline(" . i 'tprint f j=1:1:PageCnt*listrows s glo=$zo(@glo,ord) q:glo=""""  i $e(glo,1,$l(pre))'=pre s glo="""" q")
			$$$macline("  i (tsrt=2&('nested))||((tsrt=2)&(nested)&($d(%request.Data(""TSRTITM_"_$tr(cmp.Name,".","_")_""")))) {")
			$$$macline("   i 'tprint {")
			$$$macline("    f cnt=1:1:PageCnt*listrows {")
			$$$macline("     i glo2="""" s glo1=$o(^TMP("""_$p(firstrtn,".")_""",$j,glo1),ord1)")
			$$$macline("     q:glo1="""" ")
			$$$macline("     if +$g(uSort2Col) {")
			$$$macline("      i glo2="""" s glo2=""^TMP("""""_$p(firstrtn,".")_""""",""_$j_"",""""""_glo1_$s(ord2=-1:"""""",""""z"",1:"""")_"""""")"" ")
			$$$macline("      s pre=""^TMP("""""_$p(firstrtn,".")_""""",""_$j_"",""""""_glo1_"""""","" ")
			$$$macline("      s glo2=$query(@glo2,ord2)")
			$$$macline("      i $e(glo2,1,$l(pre))'=pre s glo2="""" ")
			$$$macline("      i glo2'="""" i $e($query(@glo2,ord2),1,$l(pre))'=pre s glo2="""" ")
			$$$macline("     }")
			$$$macline("     if +$g(uSort2Col)=0 {")
			$$$macline("      s glo2=$o(^TMP("""_$p(firstrtn,".")_""",$j,glo1,glo2),1)")
			$$$macline("      i glo2'="""" i $o(^TMP("""_$p(firstrtn,".")_""",$j,glo1,glo2),1)="""" s glo2="""" ")
			$$$macline("     }")
			$$$macline("    }")
			$$$macline("   }")
			$$$macline("  }")
 ;
 ; Table rows
 $$$macline(" n TCURRROW,jj,donehidden,ok")
 $$$macline(" s ok=1 f cnt=1:1:listrows s TCURRROW=cnt d  q:'ok")
 ;;uSort2change;$$$macline(" . i tsrt'=2,execstatus i 'rs.Next() s ok=0 q")
 ;;uSort2change;$$$macline(" . i (tsrt=2)&&(glo="""") s ok=0 q")
 ;;uSort2change;$$$macline(" . i tsrt=2 d  q:'ok")
 ;;uSort2change;$$$macline(" . . s glo=$zo(@glo,ord) i glo="""" s ok=0 q")
 ;;uSort2change;$$$macline(" . . i $e(glo,1,$l(pre))'=pre s glo="""",ok=0 q")
 ;;uSort2change;$$$macline(" . . s vals=@glo")
 ;;uSort2change;$$$macline(" . . k TCXVALS s cxglo=$p(glo,$zn,1)_$zn_""DATA""_$p(glo,$zn,2,999) m TCXVALS=@cxglo")
			$$$macline(" . i tsrt'=2,'$g(uSort2Col),execstatus i 'rs.Next() s ok=0 q")
			$$$macline(" . i tsrt=2 d  q:'ok")
			$$$macline(" . . i glo2="""" s glo1=$o(^TMP("""_$p(firstrtn,".")_""",$j,glo1),ord1)")
			$$$macline(" . . i glo1="""" s ok=0 q")
			$$$macline(" . . if +$g(uSort2Col) d")
			$$$macline(" . . . i glo2="""" s glo2=""^TMP("""""_$p(firstrtn,".")_""""",""_$j_"",""""""_glo1_$s(ord2=-1:"""""",""""z"",1:"""")_"""""")"" ")
			$$$macline(" . . . s pre=""^TMP("""""_$p(firstrtn,".")_""""",""_$j_"",""""""_glo1_"""""","" ")
			$$$macline(" . . . s glo2=$query(@glo2,ord2)")
			$$$macline(" . . . i $e(glo2,1,$l(pre))'=pre s glo2="""" ")
			$$$macline(" . . . i glo2="""" q")
			$$$macline(" . . . s vals=@glo2 k TCXVALS s cxglo=$p(glo2,"""_$p(firstrtn,".")_""",1)_"""_$p(firstrtn,".")_"DATA""_$p(glo2,"""_$p(firstrtn,".")_""",2,999) m TCXVALS=@cxglo")
			$$$macline(" . . . i $e($query(@glo2,ord2),1,$l(pre))'=pre s glo2="""" ")
			$$$macline(" . . if +$g(uSort2Col)=0 d")
			$$$macline(" . . . s glo2=$o(^TMP("""_$p(firstrtn,".")_""",$j,glo1,glo2),1)")
			$$$macline(" . . . i glo2="""" q")
			$$$macline(" . . . s vals=^(glo2) k TCXVALS m TCXVALS=^TMP("""_$p(firstrtn,".")_"DATA"",$j,glo1,glo2)")
			$$$macline(" . . . i $o(^TMP("""_$p(firstrtn,".")_""",$j,glo1,glo2),1)="""" s glo2="""" ")
			$$$macline(" . . s vals=$g(vals)")
 ; Get the object as well...
 ;$$$macline(" . k nc s (id,obj,nc)=""""")
 $$$macline(" . k nc s nc=""""")
 ;$$$macline(" . s donehidden=0")
 ;
 $$$macline(" . i cnt#2 w ""<TR class=""""RowOdd""_nested_"""""""",$s(listwrap:"" NOWRAP"",1:""""),"">""")
 $$$macline(" . i '(cnt#2) w ""<TR class=""""RowEven""_nested_"""""""",$s(listwrap:"" NOWRAP"",1:""""),"">""")
 $$$macline(" . s col=0")
 $$$macline(" . d Hidden^"_rtnL4)
 $$$macline(" . for jj=1:1:$l(uSet,""|"") d")
 $$$macline(" . . s selcol=$p(uSet,""|"",jj),skipTD=0 s itmid=+selcol")
 $$$macline(" . . i """_hidden_"""[("",""_itmid_"","") q")
 $$$macline(" . . i itmid,itmid'>"_cmp.TableItems.Count()_" d")
 //SP//$$$macline(" . . . i 'donehidden d Hidden^"_rtnL4_" s donehidden=1")
 ; If we didn't set the widths in the heading, then set the width in the first row
 $$$macline(" . . . s (align,width,style)="""" i hideheadings,cnt=1 d")
 $$$macline(" . . . . s wid=$p($p(uSet,""|"",jj),"","",2) i +wid s width=""width=""_+wid_""px""")
 $$$macline(" . . . d @(""I""_itmid_""^"_rtnL5_"(cnt)"")")
 ;for merged columns
 $$$macline(" . . . s skipTD=1 f  q:$p(delims,""^"",$p(uSet,""|"",jj+1))=""""  q:jj>"_cmp.TableItems.Count()_"  s jj=jj+1,itmid=+$p(uSet,""|"",jj) i """_hidden_"""'[("",""_itmid_"","") w $p(delims,""^"",itmid) s width="""" d @(""I""_itmid_""^"_rtnL5_"(cnt)"")")
 $$$macline(" . . . w ""</TD>"",! ")
 $$$macline(" . w ""</TR>"",!")
 ; now do the nested items
 ;$$$macline(" . for jj=1:1:nc d @(""Nested""_nc(jj)_""(""_""""""r""_$e(ncid(jj),2,999)_"""""",""_+$s('$d(nc(jj,""hasChild"")):0,1:$g(listexpand))_"")"")")
 $$$macline(" . for jj=1:1:nc d @(""Nested""_nc(jj)_""(""_""""""r""_ttpagid_""r""_$e(ncid(jj),2,999)_"""""",""_+$s('$d(nc(jj,""hasChild"")):0,1:$g(listexpand))_"")"")")

 $$$macline(" w ""</TABLE></TD></TR>"",!")
 ;
 $$$macline(" i tsrt'=2,execstatus s isnextpage=rs.Next()")
 ;;uSort2change;$$$macline(" i tsrt=2 d")
 ;;uSort2change;$$$macline(" . i glo="""" s isnextpage=0 q")
 ;;uSort2change;$$$macline(" . s glo=$zo(@glo,ord) s:$e(glo,1,$l(pre))'=pre glo="""" s isnextpage=(glo'="""")")
 $$$macline("  i tsrt=2 {")
			$$$macline("   s isnextpage=0")
			$$$macline("   i glo1'="""" {")
			$$$macline("    i glo2="""" s glo1=$o(^TMP("""_$p(firstrtn,".")_""",$j,glo1),ord1)")
			$$$macline("    i glo1'="""" {")
			$$$macline("     if +$g(uSort2Col) {")
			$$$macline("      i glo2="""" s glo2=""^TMP("""""_$p(firstrtn,".")_""""",""_$j_"",""""""_glo1_$s(ord2=-1:""z"",1:"""")_"""""")"" ")
			$$$macline("      s pre=""^TMP("""""_$p(firstrtn,".")_""""",""_$j_"","" ")
			$$$macline("      s glo2=$query(@glo2,ord2) i $e(glo2,1,$l(pre))'=pre s glo2="""" ")
			$$$macline("     }")
			$$$macline("     if +$g(uSort2Col)=0 s glo2=$o(^TMP("""_$p(firstrtn,".")_""",$j,glo1,glo2),1)")
			$$$macline("    }")
			$$$macline("   }")
			$$$macline("   s isnextpage=(glo2'="""")")
			$$$macline("  }")
 ;
 ; (cnt<x)
 $$$macline(" } else {")

 $$$macline(" s (PageCnt,isnextpage)=0")
 $$$macline(" w ""</TABLE></TD></TR>"",!")
 $$$macline(" w ""<TR><TD width=""""100%"""" align=center>""")
 $$$macline(" w ""<STRONG><FONT Color=red id='cMAXROWS'>"",$g(t(""XSORTMAXROWS""),""Rows retrieved for sorting exceeds maximum specified in system configuration. Sort terminated.""),""</FONT></STRONG></TD></TR>"",!")
 $$$macline(" }")
 ; Whole section moves to GenListEnd
 $$$macline(" d ListEnd^"_secondrtn_"(ttpagid)")
 $$$macline("   k ^TMP("""_$p(firstrtn,".")_""",$j)")
 $$$macline("   k ^TMP("""_$p(firstrtn,".")_"DATA"",$j)")
 $$$macline(" quit")
 ;
 $$$maccomp

 $$$macinit(secondrtn)
 d ..Init()
 d ..GenPageUrl()
 d ..GenPageUrlSort()
 d ..GenPageUrlX()
 d ..GenListInit()
 d ..GenListEnd()
 $$$maccomp

 $$$macinit(rtnL3)
 d ..Init()
 d ..GenListValues(rtnL3)
 $$$maccomp

 //SP
 $$$macinit(rtnL4)
 d ..Init()
 ; Generate the hidden fields all together
 $$$macline("Hidden ;")
 $$$macline(" w ""<TD style='display:none;'>""")
 f j=1:1:cmp.TableItems.Count() {
 if cmp.TableItems.GetAt(j).Hidden {
 s tmp="t"_cmp.%Id()_"i"_cmp.TableItems.GetAt(j).Name_"z"_"""_cnt_"""
 d ..GenItem(cmp.TableItems.GetAt(j),tmp,1,j) //SP - need expression...
 }
 }
 $$$macline(" w ""</TD>"",!")
 $$$macline(" q")
 $$$maccomp

 //JH
 $$$macinit(rtnL5)
 d ..Init()
 ; Generate each column separately so we can easy display only those required/as required.
 n j,itm,dir
 f j=1:1:cmp.TableItems.Count() {
 s itm=cmp.TableItems.GetAt(j)
 i 'itm.Hidden {
 $$$macline("I"_j_"(cnt) ;")
 ; Generate an expression for id
 s tmp="t"_cmp.%Id()_"i"_itm.Name_"z"_"""_cnt_"""

 s align="" i "LIBRARY.NUMERIC,LIBRARY.CURRENCY,LIBRARY.FLOAT,LIBRARY.INTEGER"[$tr(##Class(%Library.Collation).Upper(itm.DataType),"%","")  s align=" align=right"
 if itm.DisplayType="CX" {
 $$$macline(" s nc=nc+1,nc(nc)="_j_",ncid(nc)="""_tmp_"""")
 }
 s zstyle=""
 i $e(itm.ListCellStyle)="$"!($e(itm.ListCellStyle,1,2)="##") s zstyle=itm.ListCellStyle i 1
 e  i itm.ListCellStyle'="" s zstyle=""""_itm.ListCellStyle_"""" i 1
 //Simon 28 Mar 2003 - the caption style stuff has been put back in because it
 //enables end user to center and right justify columns.
 i $e(itm.CaptionStyle)="$"!($e(itm.CaptionStyle,1,2)="##") s zstyle=itm.CaptionStyle i 1
 e  i itm.CaptionStyle'="" s zstyle=""""_itm.CaptionStyle_""""
 //columns that are links only set the itm.Style not the CaptionStyle
 i zstyle="",($e(itm.Style)="$"!($e(itm.Style,1,2)="##")) s zstyle=itm.Style i 1
 e  i zstyle="",itm.Style'="" s zstyle=""""_itm.Style_""""
 s:zstyle'="" zstyle="STYLE=""""""_"_zstyle_"_"""""""
 //columns that are editable fields
 i itm.DisplayType="T",'itm.DisplayOnly s zstyle=""
 $$$macline(" i '$g(skipTD) w ""<TD"_align_" "",width,"" "_zstyle_">""")

 d ..GenItem(cmp.TableItems.GetAt(j),tmp,1,j)
 $$$macline(" q")
 }
 }
 $$$maccomp
 q $$$OK
]]></Implementation>
</Method>

<Method name="GenListEnd">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 $$$macline("ListEnd(ttpagid) ;")

 ; Only show this if there is any pageing at all
 ;
 ; this is now set in ListGen
 ;$$$macline(" n ttpagid s ttpagid=$$$tpagid")
 $$$macline(" i 'nested,'tprint,PageCnt!isnextpage d")
 $$$macline(" . &html<<TR><TD width=""50%"" align=left>>")
 $$$macline(" . i PageCnt d")
 $$$macline(" . . w ""<img SRC=""""../images/websys/pageprev.gif"""" BORDER=""""0"""" onclick=""""""_tname_ttpagid_""_PrevPage();"""">""")
 $$$macline(" . . i 1")
 $$$macline(" . e  w ""&nbsp;""")
 $$$macline(" . &html<&nbsp;<SMALL><%=(PageCnt+1)%></SMALL>&nbsp;> ;</TD><TD width=""50%"" align=right>>")
 $$$macline(" . i isnextpage d")
 $$$macline(" . . w ""<img SRC=""""../images/websys/pagenext.gif"""" BORDER=""""0"""" onclick=""""""_tname_ttpagid_""_NextPage();"""">""")
 $$$macline(" . . i 1")
 $$$macline(" . e  w ""&nbsp;""")
 $$$macline(" . w ""</TD></TR>"",!")
 $$$macline(" w ""</TABLE>"",!")
 ;
 $$$macline(" n ref1,ref2")
 $$$macline(" s ref1="""" i 'nested,PageCnt s ref1=""window.location.href=""""""_$$PageUrl^"_secondrtn_"(PageCnt-1)_"""""";""")
 $$$macline(" s ref2="""" i 'nested,isnextpage s ref2=""window.location.href=""""""_$$PageUrl^"_secondrtn_"(PageCnt+1)_"""""";""")
 ; If it's the first page and show in new window i.e. for list with no event source (i.e. from cmp.Show())
 ; This section has only been shown to work from EPR... and lists inside frames
 ;ignore for beginning of EPR start workflows
 $$$macline(" i $$$rget(""TEVENT"")="""",$$$rget(""TMENU"")="""",$$$rget(""TEPRSTART"")="""" d")
 ;
 $$$macline(" . i isnextpage,+PageCnt=0,shownextinnewwindow'="""" d  q")
 ;$$$macline(" . . s ref2=""websys_lu(""""""_$$PageUrlX^"_secondrtn_"(0)_"""""",false,'""_shownextinnewwindow_""');""")
 ;for eprcharts: if chart defined rows = layout rows, then display page 2 in new window
 $$$macline(" . . i +$g(listrowsLE) d ")
 $$$macline(" . . . i listrowsLE=$g(listrows) s ref2=""websys_lu(""""""_$$PageUrlX^"_secondrtn_"(1)_"""""",false,'""_shownextinnewwindow_""');"" i 1 ")
 $$$macline(" . . . e  s ref2=""websys_lu(""""""_$$PageUrlX^"_secondrtn_"(0)_"""""",false,'""_shownextinnewwindow_""');"" ")
 ;$$$macline(" . . i '$g(listrowsLE) s ref2=""websys_lu(""""""_$$PageUrlX^"_secondrtn_"(1)_"""""",false,'""_shownextinnewwindow_""');"" ")
 $$$macline(" . . i '$g(listrowsLE) d ")
 $$$macline(" . . . i listrows<$g(listrowsx) s ref2=""websys_lu(""""""_$$PageUrlX^"_secondrtn_"(0)_"""""",false,'""_shownextinnewwindow_""');"" i 1")
 $$$macline(" . . . e  s ref2=""websys_lu(""""""_$$PageUrlX^"_secondrtn_"(1)_""&TROWS=""_$g(listrowsx)_"""""",false,'""_shownextinnewwindow_""');"" ")
 ;
 $$$macline(" . i PageCnt s ref1=""window.location.href=""""""_$$PageUrlX^"_secondrtn_"(PageCnt-1)_"""""";""")
 $$$macline(" . i isnextpage s ref2=""window.location.href=""""""_$$PageUrlX^"_secondrtn_"(PageCnt+1)_"""""";""")
 ;
 $$$macline(" w ""<SCRIPT language=javascript>"",!")
 //sort
 $$$macline(" w ""function ""_tname_ttpagid_""_Sort(typ,itm,ord) {"",!")
 $$$macline(" w ""window.location.href="""""",requery,"""""" + '&TSRT=' + typ + '&TSRTITM_""_tname_""=' + itm + '&TSRTORD_""_tname_""=' + ord;"",!")
 $$$macline(" w ""}"",!")
 //prev
 $$$macline(" w ""function ""_tname_ttpagid_""_PrevPage() {"",!")
 $$$macline(" w ref1,!")
 $$$macline(" w ""}"",!")
 //next
 $$$macline(" w ""function ""_tname_ttpagid_""_NextPage() {"",!")
 $$$macline(" w ref2,!")
 $$$macline(" w ""}"",!")
 $$$macline(" w ""function Page() {"",!")
 $$$macline(" w ""var keycode;"",!")
 $$$macline(" w ""try {keycode=websys_getKey(e);} catch(e) {keycode=websys_getKey();}"",!")
 $$$macline(" w ""if (keycode==33) { ""_tname_ttpagid_""_PrevPage();}"",!")
 $$$macline(" w ""else if (keycode==34) { ""_tname_ttpagid_""_NextPage();}"",!")
 $$$macline(" w ""else {websys_sckey(e);}"",!")
 $$$macline(" w ""}"",!")
 $$$macline(" w ""document.onkeydown=Page;"",!")
 $$$macline(" w ""</SCRIPT>"",!")
 ;
 $$$macline(" d rs.%Close()")
 ;
 ;$$$macline(" i tsrt=2 k ^TMP($zn,$j)")
 ;
 ;
 $$$macline(" q")
 ;
 ; Generate the captions (this is much less overhead than generating items here).
 n j,itm,dir
 f j=1:1:cmp.TableItems.Count() {
 $$$macline("C"_j_"(ensort) i ensort,'tprint d")
 //If sorting is provided, only allow sort asc/desc if asc,desc provided
 //else allow any sort any way !	
 //$$$macline(" i 'tprint d")
 //ascending and descending explicitly supported
 i (cmp.TableItems.GetAt(j).OrderByAsc'="")&&(cmp.TableItems.GetAt(j).OrderByDesc'="") {
 ;$$$macline(" . if tsrtitm="_j_" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','""_tsrtord_""');"""">"",$s(tsrtord=""A"":zisa,1:zisd),""</A>"",! i 1")
 $$$macline(" . if tsrtitm="_j_" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','""_$s(tsrtord=""A"":""D"",1:""A"")_""');"""">"",$s(tsrtord=""A"":zisa,1:zisd),""</A>"",! i 1")
 ;$$$macline(" . if tsrtitm="_j_",tsrtord=""A"" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','""_tsrtord_""');"""">"",$s(tsrtord=""A"":zisa,1:zisd),""</A>"",! i 1")
 ;$$$macline(" . e  if tsrtitm="_j_",tsrtord=""D"" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','A');"""">"",zisd,""</A>"",! i 1")
 $$$macline(" . e  w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','A');"""">"",zcana,""</A>"",!")
 } elseif (cmp.TableItems.GetAt(j).OrderByAsc'="") { //ascending only EXplicitly supported
 $$$macline(" . if tsrtitm="_j_",tsrtord=""A"" w zisa,! i 1")
 $$$macline(" . e  w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','A');"""">"",zcana,""</A>"",!")
 } elseif (cmp.TableItems.GetAt(j).OrderByDesc'="") { //descending only EXplicitly supported
 $$$macline(" . if tsrtitm="_j_",tsrtord=""D"" w zisd,! i 1")
 $$$macline(" . e  w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(1,'"","_j_",""','D');"""">"",zcand,""</A>"",!")
 } else { //ascending and descending IMplicitly supported
 $$$macline(" . if tsrtitm="_j_" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(2,'"","_j_",""','""_$s(tsrtord=""A"":""D"",1:""A"")_""');"""">"",$s(tsrtord=""A"":zisa,1:zisd),""</A>"",! i 1")
 ;$$$macline(" . if tsrtitm="_j_",tsrtord=""A"" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(2,'"","_j_",""','D');"""">"",zisa,""</A>"",! i 1")
 ;$$$macline(" . e  if tsrtitm="_j_",tsrtord=""D"" w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(2,'"","_j_",""','A');"""">"",zisd,""</A>"",! i 1")
 $$$macline(" . e  w ""<A HREF=""""javascript:""_tname_ttpagid_""_Sort(2,'"","_j_",""','A');"""">"",zcana,""</A>"",!")
 }
 d ..GenItemCaption(cmp.TableItems.GetAt(j),1,1)
 }
 ;
 q $$$OK
]]></Implementation>
</Method>

<Method name="GenListInit">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n tmp,titem
 $$$macline("ListInit ;")

 $$$macline(" n xappid,xactivecontext")
 $$$macline(" s tname="""_$tr(cmp.Name,".","_")_"""")
 $$$macline(" s zisd=""<IMG SRC=""""../images/websys/issortdesc.gif"""" border=""""0"""">""")
 $$$macline(" s zisa=""<IMG SRC=""""../images/websys/issortasc.gif"""" border=""""0"""">""")
 $$$macline(" s zcand=""<IMG SRC=""""../images/websys/cansortdesc.gif"""" border=""""0"""">""")
 $$$macline(" s zcana=""<IMG SRC=""""../images/websys/cansortasc.gif"""" border=""""0"""">""")
 $$$macline(" s PageCnt=$$$rget(""TPAGCNT""),tprint=$$$rget(""TPRINT"")")
 $$$macline(" s tsrt=0,(tsrtitm,%request.Data(""TSRTITM"",1))=$$$rget(""TSRTITM_""_tname_""""),(tsrtord,%request.Data(""TSRTORD"",1))=$$$rget(""TSRTORD_""_tname_"""") i tsrtitm'="""" s tsrt=$$$rget(""TSRT"")")
 ;
 ;
 s tmp=cmp.ClassName s:$p(tmp,".")="lab" $p(tmp,".")="web" $$$macline(" s WebClassName="""_tmp_"""")
 s tmp=cmp.ClassName s:$p(tmp,".")="web" $p(tmp,".")="lab" $$$macline(" s labclassName="""_tmp_"""")
 ;
 ; the user store settings
 $$$macline(" s context=$$$rget(""CONTEXT""),app=""""")
 $$$macline(" s uSet=##Class(websys.Preferences).GetDataExLE($$$sget(""LOGON.USERID""),$$$sget(""LOGON.GROUPID""),$$$sget(""LOGON.HOSPID""),$$$sget(""LOGON.SITECODE""),context,""COLUMNS"",name,.app,.xappid,.xactivecontext,$$$sget(""LOGON.TRUSTID""))")
 $$$macline(" s prefs=##Class(websys.Preferences).GetDataExLE($$$sget(""LOGON.USERID""),$$$sget(""LOGON.GROUPID""),$$$sget(""LOGON.HOSPID""),$$$sget(""LOGON.SITECODE""),context,""ROWS"",name,.app,.xappid,.xactivecontext,$$$sget(""LOGON.TRUSTID""))")
 $$$macline(" s listrows=+$lg(prefs,1),listprint=$lg(prefs,2),listwrap='$lg(prefs,3),listfixed=$lg(prefs,4),listexpand=$lg(prefs,5),delims=$lg(prefs,6),uSortCol=$lg(prefs,7),uSortOrd=$lg(prefs,8),uSort2Col=$lg(prefs,9),uSort2Ord=$lg(prefs,10) ") ; fixed width columns (truncate)
 ;if there is a default sort column and no default sort order (A/D) default to A
 $$$macline(" i uSortCol,uSortOrd="""" s uSortOrd=""A""")
 ;
 $$$macline(" i uSet="""",'$l(xactivecontext) s uSet="""_cmp.TableSequence_""",delims="""_cmp.TableDelimiters_"""")
 ;
 $$$macline(" s listrowsLE=listrows") ;listrowsLE is used later in ListEnd to check for eprchart components
 ;$$$macline(" s:'listrows listrows="_$s(cmp.ListRows:cmp.ListRows,1:25))
 $$$macline(" s:'listrows listrows=$$$rget(""TROWS"") s:'listrows listrows="_$s(cmp.ShowNextInNewWindow=""&cmp.ListRows:cmp.ListRows,1:25))
 ; value passed in overrides anything else (e.g. epr settings)
 $$$macline(" s:listrowsx listrows=listrowsx")
 $$$macline(" s:listprint="""" listprint="""_cmp.ListPrint_"""")
 ;
 ; for nested components show all rows
 ; for printed components show all rows
 $$$macline(" s:nested listrows=99999 s:tprint listrows=999")
 ;TN:? if printing always expand nested lists?
 ;$$$macline(" i +$g(tprint),$g(%request.Data(""TPRINTID"",1))'="""" s listexpand=1")
 ;
 ; Default to all columns
 s tmp="",asc="",desc="",sorttype="" ;,name=""
 f j=1:1:cmp.TableItems.Count() {
 s titem=cmp.TableItems.GetAt(j)
 i 'titem.Hidden s tmp=tmp_j_"|"
 ;i titem.Name'="" s:$l(name) name=name_"," s name=name_"tnames("_j_")="""_titem.Name_""""
 i titem.OrderByAsc'="" s:$l(asc) asc=asc_"," s asc=asc_"torderbyasc("_j_")="""_titem.OrderByAsc_""""
 i titem.OrderByDesc'="" s:$l(desc) desc=desc_"," s desc=desc_"torderbydesc("_j_")="""_titem.OrderByDesc_""""
 s:$l(sorttype) sorttype=sorttype_"," s sorttype=sorttype_"tordertype("_j_")="""_$s(titem.OrderByAsc_titem.OrderByDesc'="":"1",1:"2")_""""
 }
 ;i name'="" $$$macline(" s "_name)
 i asc'="" $$$macline(" s "_asc)
 i desc'="" $$$macline(" s "_desc)
 i sorttype'="" $$$macline(" s "_sorttype)
 $$$macline(" i uSet="""" s app=""SYS"" s uSet="""_tmp_"""")
 ; if not already sorted, and there is a preference default sort, preset these details
 $$$macline(" s ztsrt=$g(tsrt),ztsrtitm=$g(tsrtitm),ztsrtord=$g(tsrtord)")
 $$$macline(" i +$g(uSortCol),'ztsrtitm s tsrtitm=$g(uSortCol),tsrtord=$g(uSortOrd) s tsrt=$g(tordertype(+$g(uSortCol)))")
 $$$macline(" i uSort2Col s:'tsrtitm uSort2Col="""" s:tsrtitm=uSort2Col uSort2Col="""" ") ;if no primary sort or primary=secondary, do not secondary sort
 ;
 ; Identify the settings in use to help debug
 $$$macline(" w ""<!-- COMPONENT "_cmp.Name_" COLUMNS for "",app,"" "",$g(xactivecontext),"" -->""")
 ;
 ;TN: don't kill TRST for screens with multiple list components on it, and sorting is don't on second or subsequent list
 ;$$$macline(" k %request.Data(""TSRT"",1),%request.Data(""TSRTITM"",1),%request.Data(""TSRTORD"",1)")
 $$$macline(" k %request.Data(""TSRTITM"",1),%request.Data(""TSRTORD"",1)")
 i cmp.QuerySQL="" {
 $$$macline(" i (tsrt=1)&&(tsrtitm'="""") d")
 $$$macline(" . i tsrtord=""D"" s %request.Data(""TSRTITM"",1)=$g(torderbydesc(+tsrtitm)) i 1")
 $$$macline(" . e  s %request.Data(""TSRTITM"",1)=$g(torderbyasc(+tsrtitm))")
 $$$macline(" . s %request.Data(""TSRTORD"",1)=$g(tsrtord)")
 $$$macline("setquery")
 $$$macline(" s rs=##Class(%ResultSet).%New(WebClassName_"":"_cmp.QueryName_""")")
 $$$macline(" s paramcnt=rs.GetParamCount()")
 } else {
 $$$macline("setquery")
 $$$macline(" s rs=##Class(%Library.ResultSet).%New(""%Library.DynamicQuery:SQL"")")
 $$$macline(" s paramcnt="_$ll(cmp.QuerySQLNames))
 $$$macline(" i (tsrt=1)&&(tsrtitm'="""") d")
 $$$macline(" . i (tsrtord=""D"") d rs.Prepare("_$$quote($p(cmp.QuerySQLParsed,"ORDER BY")_" ORDER BY ")_"_$g(torderbydesc(+tsrtitm))) i 1")
 $$$macline(" . e  d rs.Prepare("_$$quote($p(cmp.QuerySQLParsed,"ORDER BY")_" ORDER BY ")_"_$g(torderbyasc(+tsrtitm)))")
 $$$macline(" . i 1")
 $$$macline(" e  d rs.Prepare("_$$quote(cmp.QuerySQLParsed)_")")
 }

 $$$macline(" n x,ival")
 ; it would be nice to do this at compile time... but for now stick with run time...     
 ; we won't know if a object architect query has changes number of params
 ; Build up 'direct access; method to include the correct # of parameters
 ; in place of rs.Execute(?,?,?,?,?,?,?)
 ;$$$macline(" s x=""i $$InvokeMethod^%apiOBJ(""""%ResultSet"""",rs,""""Execute""""""")
 $$$macline(" s x=""s execstatus=$$InvokeMethod^%apiOBJ(""""%ResultSet"""",rs,""""Execute""""""")

 $$$macline(" f j=1:1:paramcnt {")
 ; Convert based on derived type - dangerous... yep - perhaps we should only do this for dynamic queries
 ; perhaps it would be nice if the query published the type
 i (cmp.QuerySQL="") {
 $$$macline(" s paramname=rs.GetParamName(j)")
 } else {
 s tmp="" f j=1:1:$ll(cmp.QuerySQLNames) s:$l(tmp) tmp=tmp_"_" s tmp=tmp_"$LB("""_$li(cmp.QuerySQLNames,j)_""")"
 i tmp="" s tmp="$lb("""")"
 $$$macline(" s paramname=$lg("_tmp_",j)")
 }
 $$$macline("    s val=$g(%request.Data(paramname,1))")
 $$$macline("    i $l(val,"""""""")>1 s val="""" f ival=1:1:$l($g(%request.Data(paramname,1)),"""""""") s $p(val,"""""""""""",ival)=$p(%request.Data(paramname,1),"""""""",ival)")

 ; If it's not blank and doesn't look like it's already converted to numeric ....   ;-{
 $$$macline("    i val'="""",val'?1n.n i ##Class(%Collation).Upper(paramname)[""DATE"" s val=##Class(websys.Conversions).DateHtmlToLogical(val)")
 $$$macline("    i val'="""",val'?1n.n i ##Class(%Collation).Upper(paramname)[""TIME"" s val=##Class(websys.Conversions).TimeHtmlToLogical(val)")
 $$$macline("    s x=x_"",""""""_val_""""""""")
 $$$macline(" }")
 $$$macline(" s x=x_"")""")

 ;$$$macline(" d ##Class(websys.Conversions).expressionExecute(x)")
 $$$macline(" x x")
 ;

 $$$macline(" q")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GenListLookup">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>firstrtn:%Library.String</FormalSpec>
<Implementation><![CDATA[
 n secondrtn
 s secondrtn=$p(firstrtn,".")_".L2"
 d ..Init()

 $$$macline("ShowListLookup(name,hidemenus,hideheadings)	;")
 $$$macline(" n rs,PageCnt,e,j,classquery,caption,uSet")
 $$$macline(" s classquery=$p($g(%request.Data(""CONTEXT"",1)),""K"",2,999)")
 $$$macline(" s lujs=$g(%request.Data(""TLUJSF"",1))")
 $$$macline(" s PageCnt=$g(%request.Data(""TPAGCNT"",1))")
 $$$macline(" s rs=##Class(%Library.ResultSet).%New(classquery)")
 $$$macline(" i 'rs.QueryIsValid() d  q")
 $$$macline(" . w !,""Class or lookup query not found: ""_classquery_"""" d %response.Flush()")
 ;
 ; we need to do this at run time, becuase the query may change,
 ; but this code is dependant on the component, not on the query
 $$$macline(" s x=""i $zobjmethod(rs,""""Execute""""""")
 ;don't $zcvt(,"I","URL") as we shouldn't need to, also because it converts + to space
 ;$$$macline(" f j=1:1:rs.GetParamCount() s x=x_"",""""""_$zcvt(%request.Get(""P""_j),""I"",""URL"")_""""""""")
 $$$macline(" f j=1:1:rs.GetParamCount() s x=x_"",""""""_##Class(websys.Conversions).QuotedCacheString($$$rget(""P""_j))_""""""""")
 $$$macline(" s x=x_"")""")
 $$$macline(" d ##Class(websys.Conversions).expressionExecute(x)")
 ;
 $$$macline(" i $d(e),e'="""" d")
 $$$macline(" . s e=##Class(%CSP.Page).EscapeHTML(e)")
 $$$macline(" . w ""<BR><BR><STRONG><FONT Color=red>""_e_""</FONT></STRONG>""")
 ;
 ; Column heading have been removed to avoid translation issues.
 ; Column content is assumed to be clear from the context of the lookup
 $$$macline(" w ""<TABLE WIDTH=""""100%"""" style=""""left: 0px; top: 0px"""" border=0 cellspacing=0>""")
 $$$macline(" w ""<TR>""")
 $$$macline(" w ""<TD colSpan=2 valign=top>""")
 ;
 $$$macline(" w ""<TABLE id=tblLookup Name=tblLookup  style=""""LEFT: 0px; TOP: 0px"""" border=0 cellspacing=0>""")
 ;
 $$$macline(" s uSet=##Class(websys.Preferences).GetDataExLE($g(%session.Data(""LOGON.USERID"")),$g(%session.Data(""LOGON.GROUPID"")),$g(%session.Data(""LOGON.HOSPID"")),$g(%session.Data(""LOGON.SITECODE"")),$g(%request.Data(""CONTEXT"",1)),""COLUMNS"",name,.app,.appid,.activecontext,$g(%session.Data(""LOGON.TRUSTID"")))")
 $$$macline(" i '$l(uSet) f j=1:1:rs.GetColumnCount() i $zcvt(rs.GetColumnHeader(j),""U"")'=""HIDDEN"" s:uSet'="""" uSet=uSet_""|"" s uSet=uSet_j")

 //if headings
 //hide ones normally marked as hidden 
 $$$macline(" if 'hideheadings {")
 $$$macline(" d ##Class(websys.Translation).LoadLookup($$$sget(""LOGON.LANGID""),$$$rget(""CONTEXT""))")
 $$$macline(" s url=""websys.component.customiselayout.csp?ID="_cmp.%Id()_"&CONTEXT=""_$$$rget(""CONTEXT"")")
 $$$macline($c(9)_"if $$$sget(""LOGON.ALLOWCOLUMNMANAGER"")=""Y"" {")
 $$$macline($c(9,9)_" w ""<THEAD ondblclick=""""websys_lu('""_url_""',false);"""">""")
 $$$macline($c(9)_"} else {")
 $$$macline($c(9,9)_"w ""<THEAD>""")
 $$$macline($c(9)_"}")
 //and don't forget about translation... tick tick
 $$$macline($c(9)_" f j=1:1:$l(uSet,""|"") {")
 $$$macline($c(9)_" 	s colx=+$p(uSet,""|"",j),caption=""""")
 //need to check that preference column is still within lookup's column as site can stupidly store preference as site without context
 $$$macline($c(9)_" 	s:colx'>rs.GetColumnCount() caption=rs.GetColumnHeader(colx) s:caption="""" caption=""&nbsp;""")
 //need to check that preference column is not a hidden column as site can stupidly store preference as site without context
 $$$macline($c(9)_" 	if (colx)&&(colx'>rs.GetColumnCount())&&($zcvt(rs.GetColumnHeader(colx),""U"")'=""HIDDEN"") {")
 $$$macline($c(9)_" 		w ""<TH WIDTH=""""100%"""">""_$g(t(colx),caption)_""</TH>""")
 $$$macline($c(9)_" 	}")
 $$$macline($c(9)_" }")
 $$$macline($c(9)_" w ""</THEAD>""")
 $$$macline(" }")
 //end if headings
 ; Table body
 ;
 ; Brute force approach to pageing i.e. skip records prior to this page
 $$$macline(" f j=1:1:PageCnt*18 q:'rs.Next()")

 //??//;s col1js="var col1=new Array("""","
 //??//;s colalljs="var colall=new Array("""","
 $$$macline(" s col1js=""var col1=new Array(""")
 $$$macline(" s colalljs=""var colall=new Array(""")

 $$$macline(" s rowcount=-1")

 $$$macline(" f xcnt=1:1 q:'rs.Next()  d  q:xcnt>18")
 $$$macline(" . s txt=rs.GetData(1)")
 $$$macline(" . s col1js=col1js_""""""""_$ZCVT(txt,""O"",""JS"")_""""""""_"",""")
 $$$macline(" . s txt=$ZCVT(txt,""O"",""HTML"")")
 $$$macline(" . s rowcount=rowcount+1,fulltext=""""")
 $$$macline(" . w ""<TR onclick=""""RowSel("",rowcount,"");"""" onmousedown=""""TR_OMD("",rowcount,"");"""">""")
 //loop through for display purposes - display in selected sequence
 $$$macline(" . f k=1:1:$l(uSet,""|"") d")
 $$$macline(" . . s colx=+$p(uSet,""|"",k)")
 $$$macline(" . . q:'colx")
 $$$macline(" . . q:colx>rs.GetColumnCount()")
 $$$macline(" . . q:($zcvt(rs.GetColumnHeader(colx),""U"")=""HIDDEN"")")
 $$$macline(" . . s coltxt=rs.GetData(colx)")
 $$$macline(" . . w ""<TD NOWRAP"" w:colx=1 "" WIDTH=""""100%"""""" w "">"",$ZCVT(rs.GetData(colx),""O"",""HTML""),""</TD>""")
 $$$macline(" . w ""</TR>"",!")
 //loop thru for js array puposes... - array in strict query column sequence
 $$$macline(" . f k=1:1:rs.GetColumnCount() d")
 $$$macline(" . . s coltxt=rs.GetData(k) s:$l(lujs) fulltext=fulltext_coltxt_""^""")
 $$$macline(" . i $l(lujs) s colalljs=colalljs_""""""""_$zcvt(fulltext,""O"",""JS"")_""""""""_"",""")
 //and fill in with blank lines so always same nubber of rows (a bit nicer on last page :-)
 $$$macline(" s colspan=$s($d(k):k,1:1) f xcnt=xcnt:1:18 w ""<TR><TD COLSPAN=""_colspan_"">&nbsp;<TD></TR>""")

 $$$macline(" w ""</TABLE>""")
 $$$macline(" i rowcount=-1 n t d ##Class(websys.Component).GetComponentMessages(.t,""websys.LookUp.List"") w ""<STRONG>""_$g(t(""NoMatches""),""No matches found"")_""</STRONG>""")
 $$$macline(" w ""</TD></TR>"",!")

 ;
 ; Build up the url from the parameters
 $$$macline(" w ""<TR><TD colspan=2><P>&nbsp;</P><TABLE><TR><TD width=""""20"""">""")
 $$$macline(" i PageCnt d")
 $$$macline(" . w ""<img SRC=""""../images/websys/pageprev.gif"""" BORDER=""""0"""" onclick=""""PrevPage();"""">""")
 $$$macline(" . i 1")
 $$$macline(" e  w ""&nbsp;""")
 $$$macline(" w ""</TD><TD width=""""20"""">""")
 $$$macline(" s isnextpage=rs.Next()")
 $$$macline(" i isnextpage d")
 $$$macline(" . w ""<img SRC=""""../images/websys/pagenext.gif"""" BORDER=""""0"""" onclick=""""NextPage();"""">""")
 $$$macline(" . i 1")
 $$$macline(" e  w ""&nbsp;""")
 $$$macline(" w ""</TD></TR></TABLE></TD></TR>"",!")

 $$$macline(" w ""</TABLE>""")
 ;
 $$$macline(" w ""<SCRIPT>"",!")
 ;.e.g.
 ;var col1=new Array("","one","two","three","sour","Five"); 
 ;var colall=new Array("","aone","atwo","athree","asour","aFive"); 
 ;
 $$$macline(" i $e(col1js,$l(col1js))="","" s col1js=$e(col1js,1,$l(col1js)-1)")
 $$$macline(" s col1js=col1js_"");""")
 $$$macline(" w col1js,!")
 $$$macline(" i $l(lujs)'="""" d")
 $$$macline(" . i $e(colalljs,$l(colalljs))="","" s colalljs=$e(colalljs,1,$l(colalljs)-1)")
 $$$macline(" . s colalljs=colalljs_"");""")
 $$$macline(" . w colalljs,!")
 ;
 $$$macline(" w ""var minrows=0;"",!")
 $$$macline(" w ""var maxrows=""_rowcount_"";"",!")
 $$$macline(" w ""var selectedrow=""_$s(rowcount=0:-1,1:""minrows"")_"";"",!")
 $$$macline(" w ""var isSelected=0;"",!")
 $$$macline(" i rowcount>-1 w ""RowHi(minrows);"",!")
 ;
 $$$macline(" w ""document.onkeydown=OnKeyDownHandler;"",!")
 ;
 $$$macline(" w ""function RowSel(row) {"",!")
 ;; 
 $$$macline(" w ""var par_win=window.opener;"",!")
 //component item name
 $$$macline(" w ""try {par_win.""_$p($g(%request.Data(""ID"",1)),""i"",2,999)_""_lookupsel(unescape(col1[row-minrows]));} catch (err) {}"",!")
 $$$macline(" w:$l(lujs) ""par_win.""_lujs_""(unescape(colall[row-minrows]));""")
 $$$macline(" w ""isSelected=1;"",!")
 $$$macline(" w ""window.close();"",!")
 $$$macline(" w ""}"",!")
 ;
 ; if there is a prev page include code, else just empty function i.e. do nothing (but have dummy function)
 $$$macline(" w ""function PrevPage() {"",!")
 $$$macline(" w ""isSelected=1;"",!")
 $$$macline(" w:PageCnt ""window.location.href=""""""_$$PageUrl(PageCnt-1)_"""""";"",!")
 $$$macline(" w ""}"",!")
 ;
 ; if there is a next page include code, else just empty function i.e. do nothing (but have dummy function)
 $$$macline(" w ""function NextPage() {"",!")
 $$$macline(" w ""isSelected=1;"",!")
 $$$macline(" w:isnextpage ""window.location.href=""""""_$$PageUrl(PageCnt+1)_"""""";"",!")
 $$$macline(" w ""}"",!")
 ;
 ;if close window without selecting item, put focus back on same item
 $$$macline(" w ""function RegainFocus() {"",!")
 $$$macline(" w ""	if (!isSelected) {"",!")
 $$$macline(" w ""		try {"",!")
 $$$macline(" w ""		var par_win=window.opener;"",!")
 //component item name
 $$$macline(" w ""		par_win.websys_setfocus('""_$p($g(%request.Data(""ID"",1)),""i"",2,999)_""');"",!")
 $$$macline(" w ""		} catch(e) {};"",!")
 $$$macline(" w ""}"",!")
 $$$macline(" w ""}"",!")
 $$$macline(" w ""document.body.onunload=RegainFocus;"",!")
 $$$macline(" w ""</SCRIPT>"",!")
 ;
 $$$macline(" d rs.%Close()")
 $$$macline(" q")


 $$$macline("PageUrl(PageCnt)	;")
 $$$macline(" n j,url")
 $$$macline(" s url=""websys.lookup.csp""")
 $$$macline(" s url=url_""?ID=""_$$$rget(""ID"")")
 $$$macline(" s url=url_""&CONTEXT=""_$$$rget(""CONTEXT"")")
 $$$macline(" s url=url_""&TPAGCNT=""_PageCnt")
 $$$macline(" s:$d(%request.Data(""TLUJSF"",1)) url=url_""&TLUJSF=""_$$$rget(""TLUJSF"")")
 $$$macline(" f j=1:1:16 s:$d(%request.Data(""P""_j,1)) url=url_""&P""_j_""=""_$zcvt($$$rget(""P""_j),""O"",""URL"")")
 $$$macline(" s:$d(%request.Data(""WEBSYS.TCOMPONENT"",1)) url=url_""&WEBSYS.TCOMPONENT=""_$$$rget(""WEBSYS.TCOMPONENT"")")
 $$$macline(" q url")

 q
]]></Implementation>
</Method>

<Method name="GenListValues">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>rtn:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,k,itm,tmp,tmpvalget,tmplnkexp,tmpimgexp,tmpCXcondexp
 s rtn=$p(rtn,".",1)
   ;allow secondary sorting
 $$$macline("ListValues  ;")
 $$$macline(" s maxsort=$lg($g(^websys.ConfigurationD(1)),60) s:'maxsort maxsort=500")
 $$$macline(" k ^TMP("""_rtn_""",$j)")
 $$$macline(" k ^TMP("""_rtn_"DATA"",$j)")
 $$$macline(" f cnt=1:1:maxsort+1 {")
 $$$macline("     i 'rs.Next() q")
 $$$macline("     s vals=$$ListRowVal(),val=$lg($lg(vals,+tsrtitm),1)")
 $$$macline("     s vali=$zcvt($zstrip(val,""*P"",,"",?""),""U"")")
 //secondary sorting
 $$$macline("     if +$g(uSort2Col) s val2=$lg($lg(vals,+uSort2Col),1),val2i=$zcvt($zstrip(val2,""*P"",,"",?""),""U"")")
 f j=1:1:cmp.TableItems.Count() {
 	s itm=cmp.TableItems.GetAt(j)
 	//watch out for estimated date of births (for now translate ? to 1)
 	i itm.DataType["Date" {
	 	$$$macline("     i tsrtitm="_j_" s vali=##Class(websys.Conversions).DateHtmlToLogical($tr(val,""?"",""1""))")
		$$$macline("     if +$g(uSort2Col),uSort2Col="_j_" s val2i=##Class(websys.Conversions).DateHtmlToLogical($tr(val2,""?"",""1""))")
 	}
 	i itm.DataType["Time" {
	 	$$$macline("     i tsrtitm="_j_" s vali=##Class(websys.Conversions).TimeHtmlToLogical(val)")
		$$$macline("     if +$g(uSort2Col),uSort2Col="_j_" s val2i=##Class(websys.Conversions).TimeHtmlToLogical(val2)")
 	}
 	i itm.DataType["Integer" {
	 	$$$macline("     i tsrtitm="_j_" s vali=$j(+val,10)")
		$$$macline("     if +$g(uSort2Col),uSort2Col="_j_" s val2i=$j(+val2,10)")
 	}
 }
 ;;uSort2change;$$$macline("     s:vali="""" vali=1E-14")
 ;;uSort2change;$$$macline("     s ^TMP($zn,$j,"" ""_vali,cnt)=vals")
 ;;uSort2change;$$$macline("     m ^TMP($zn_""DATA"",$j,"" ""_vali,cnt)=TCXVALS")
 //secondary sorting
			$$$macline("     if +$g(uSort2Col) {")
			$$$macline("      s:val2i="""" val2i=1E-14")
			$$$macline("      s vali=$e(vali,1,250),val2i=$e(val2i,1,250)")
			$$$macline("      s ^TMP("""_rtn_""",$j,"" ""_vali,"" ""_val2i,cnt)=vals")
			$$$macline("      m ^TMP("""_rtn_"DATA"",$j,"" ""_vali,"" ""_val2i,cnt)=TCXVALS")
			$$$macline("     } else {")
			$$$macline("      s vali=$e(vali,1,250)")
			$$$macline("      s ^TMP("""_rtn_""",$j,"" ""_vali,cnt)=vals")
			$$$macline("      m ^TMP("""_rtn_"DATA"",$j,"" ""_vali,cnt)=TCXVALS")
			$$$macline("     }")
 $$$macline(" }")
 $$$macline(" q")
 
 $$$macline("ListRowVal() ;")
 $$$macline(" n val,lnkexp,imgexp")
 $$$macline(" k TCXVALS")
 ;val(i)=$lb(ValueGet,LinkExpression,ImageExp,NextedCondExpr)
 s tmp=" q $lb("
 s k=cmp.TableItems.Count()
 f j=1:1:k {
 	//tidy up the value get expression
 	s tmpvalget=cmp.TableItems.GetAt(j).ValueGet
 	; remove any ";" comments !
 	s tmpvalget=$p(tmpvalget,";",1)
 	; remove any "//" comments !
 	s tmpvalget=$p(tmpvalget,"//",1)
 	f  q:tmpvalget'["%request.Get"  s tmpvalget=$p(tmpvalget,"%request.Get",1)_"$$$rget"_$p(tmpvalget,"%request.Get",2,99)
 	
 	s tmplnkexp=cmp.TableItems.GetAt(j).LinkExpression
 	f  q:tmplnkexp'["%request.Get"  s tmplnkexp=$p(tmplnkexp,"%request.Get",1)_"$$$rget"_$p(tmplnkexp,"%request.Get",2,99)
 	s tmpimgexp=cmp.TableItems.GetAt(j).Image
 	i ($e(tmpimgexp)="$"!($e(tmpimgexp,1,2)="##")) {
		f  q:tmpimgexp'["%request.Get"  s tmpimgexp=$p(tmpimgexp,"%request.Get",1)_"$$$rget"_$p(tmpimgexp,"%request.Get",2,99)
 	} elseif tmpimgexp'="" {
	 	s tmpimgexp=""""_tmpimgexp_""""
 	}
 	s tmpCXcondexp="" i cmp.TableItems.GetAt(j).DisplayType="CX" {
 		s tmpCXcondexp=cmp.TableItems.GetAt(j).NestedCondExpr
 		s tmpCXcondexp=$p(tmpCXcondexp,";",1),tmpCXcondexp=$p(tmpCXcondexp,"//",1)
 		f  q:tmpCXcondexp'["%request.Get"  s tmpCXcondexp=$p(tmpCXcondexp,"%request.Get",1)_"$$$rget"_$p(tmpCXcondexp,"%request.Get",2,99)
 		
 		s str=cmp.TableItems.GetAt(j).NestedTransExpr
 		s str=$p(str,";",1),str=$p(str,"//",1)
 		f  q:str'["rs.Data("  s fldname=$p(str,"rs.Data(""",2,99),str=fldname,fldname=$p(fldname,"""",1) $$$macline(" s TCXVALS("""_fldname_""")=$g(rs.Data("""_fldname_"""))")
 		f  q:str'["rs.GetDataByName("  s fldname=$p(str,"rs.GetDataByName(""",2,99),str=fldname,fldname=$p(fldname,"""",1) $$$macline(" s TCXVALS("""_fldname_""")=$g(rs.Data("""_fldname_"""))")
	}
 	;$$$macline(" s val="""",lnkexp="""",imgexp="""" "_tmpvalget_$s(tmplnkexp'="":" s lnkexp="_tmplnkexp,1:"")_$s(tmpimgexp'="":" s imgexp="_tmpimgexp,1:""))
 	$$$macline(" s lnkexp="""",imgexp="""" "_$s(tmplnkexp'="":" s lnkexp="_tmplnkexp,1:"")_$s(tmpimgexp'="":" s imgexp="_tmpimgexp,1:""))
 	$$$macline(" s val="""" "_tmpvalget)
 	$$$macline(" s val("_j_")=$lb(val,lnkexp,imgexp)")
 	$$$macline(" s val=1 "_tmpCXcondexp)
 	$$$macline(" s val("_j_")=val("_j_")_$lb(val)")
 	s:j>1 tmp=tmp_"," s tmp=tmp_"val("_j_")"
 }
 s tmp=tmp_")"
 $$$macline(tmp)
 $$$macline(" q")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GenPageUrl">
<Description>
Get (and create) Xref entry</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n tmp,param
 $$$macline("PageUrl(PageCnt)")
 $$$macline(" n j,url")
 $$$macline(" s url=""websys.csp?TEVENT=""_$$$rget(""TEVENT"")")
 //TN: for when first item in workflow loops thru multiple pages
 $$$macline(" i $$$rget(""TEVENT"")="""",$$$rget(""TMENU"") d")
 $$$macline(" . s url=url_""&TMENU=""_$$$rget(""TMENU"")")
 if cmp.QuerySQL="" {
	 //only include non blank params
 $$$macline(" f j=1:1:rs.GetParamCount() s:$g(%request.Data(rs.GetParamName(j),1))'="""" url=url_""&""_rs.GetParamName(j)_""=""_$ZCVT($g(%request.Data(rs.GetParamName(j),1)),""O"",""URL"")")
 } else {
 s tmp="" f j=1:1:$ll(cmp.QuerySQLNames) s tmp=tmp_"&"_$lg(cmp.QuerySQLNames,j)_"=""_$ZCVT($g(%request.Data("""_$lg(cmp.QuerySQLNames,j)_""",1)),""O"",""URL"")_"""
 i tmp'="" s tmp=""""_tmp_""""
 i tmp'="" $$$macline(" s url=url_"_tmp)           
 }
 $$$macline(" s:$g(%request.Data(""CONTEXT"",1))'="""" url=url_""&CONTEXT=""_$$$rget(""CONTEXT"") s:$g(%request.Data(""TWKFL"",1))'="""" url=url_""&TWKFL=""_$$$rget(""TWKFL"") s:$g(%request.Data(""TWKFLI"",1))'="""" url=url_""&TWKFLI=""_$$$rget(""TWKFLI"") s url=url_""&TPAGCNT=""_PageCnt")
 ;
 $$$macline(" i $g(tsrt)'="""" s url=url_""&TSRT=""_tsrt")
 $$$macline(" i $g(tsrtitm)'="""" s url=url_""&TSRTITM_"_$tr(cmp.Name,".","_")_"=""_tsrtitm")
 $$$macline(" i $g(tsrtord)'="""" s url=url_""&TSRTORD_"_$tr(cmp.Name,".","_")_"=""_tsrtord")
 ;
 $$$macline(" s:$d(%request.Data(""PatientBanner"",1)) url=url_""&PatientBanner=""_$$$rget(""PatientBanner"") s:$d(%request.Data(""TEPRSTART"",1)) url=url_""&TEPRSTART=""_$$$rget(""TEPRSTART"")")
 $$$macline(" s:$$$rget(""PatientID"")'="""" url=url_""&PatientID=""_$$$rget(""PatientID"") s:$$$rget(""EpisodeID"")'="""" url=url_""&EpisodeID=""_$$$rget(""EpisodeID"") s:$$$rget(""mradm"")'="""" url=url_""&mradm=""_$$$rget(""mradm"") s:$$$rget(""TCONTEXT"")'="""" url=url_""&TCONTEXT=""_$$$rget(""TCONTEXT"")")
 ;
 f j=1:1:$l(cmp.PassThruParameters,",") {
 s param=$p(cmp.PassThruParameters,",",j)
 i param'="" {
 $$$macline(" i $$$rget("""_param_""")'="""" s url=url_""&"_param_"=""_$ZCVT($$$rget("""_param_"""),""O"",""URL"")")
 }
 }
 ;
 $$$macline(" q url")
 ;
 q
]]></Implementation>
</Method>

<Method name="GenPageUrlSort">
<Description>
Get (and create) Xref entry</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Warning - this is the same a pPageUrl without the sorting params
 n tmp
 $$$macline("PageUrlSort(PageCnt)")
 $$$macline(" n j,url")
 $$$macline(" s url=""websys.csp?TEVENT=""_$$$rget(""TEVENT"")")
 //[TN: for when first item in menu/workflow loops thru multiple pages]
 $$$macline(" i $$$rget(""TEVENT"")="""" {")
 $$$macline("  i $$$rget(""TMENU"") {")
 $$$macline("   s url=url_""&TMENU=""_$$$rget(""TMENU"")")
 $$$macline("  } else {")
 $$$macline("   s url=%request.PageName_""?WEBSYS.TCOMPONENT=""_$g(%request.Data(""WEBSYS.TCOMPONENT"",1),"""_cmp.Name_""")")
 $$$macline("  }")
 $$$macline(" }")
 if cmp.QuerySQL="" {
 $$$macline(" f j=1:1:rs.GetParamCount() s:$g(%request.Data(rs.GetParamName(j),1))'="""" url=url_""&""_rs.GetParamName(j)_""=""_$ZCVT($g(%request.Data(rs.GetParamName(j),1)),""O"",""URL"")")
 } else {
 s tmp="" f j=1:1:$ll(cmp.QuerySQLNames) s tmp=tmp_"&"_$lg(cmp.QuerySQLNames,j)_"=""_$ZCVT($g(%request.Data("""_$lg(cmp.QuerySQLNames,j)_""",1)),""O"",""URL"")_"""
 i tmp'="" s tmp=""""_tmp_""""
 i tmp'="" $$$macline(" s url=url_"_tmp)           
 }
 $$$macline(" s:$g(%request.Data(""CONTEXT"",1))'="""" url=url_""&CONTEXT=""_$$$rget(""CONTEXT"") s:$g(%request.Data(""TWKFL"",1))'="""" url=url_""&TWKFL=""_$$$rget(""TWKFL"") s:$g(%request.Data(""TWKFLI"",1))'="""" url=url_""&TWKFLI=""_$$$rget(""TWKFLI"") s url=url_""&TPAGCNT=""_PageCnt")
 //$$$macline(" i $g(tsrtitm)'="""" s url=url_""&TSRTITM_"""_$tr(cmp.Name,".","_")_"""=""_tsrtitm")
 //$$$macline(" i $g(tsrtord)'="""" s url=url_""&TSRTORD_"""_$tr(cmp.Name,".","_")_"""=""_tsrtord")
 $$$macline(" s:$d(%request.Data(""PatientBanner"",1)) url=url_""&PatientBanner=""_$$$rget(""PatientBanner"")")

 $$$macline(" i $$$rget(""PatientID"")'="""" s url=url_""&PatientID=""_$$$rget(""PatientID"")")
 $$$macline(" i $$$rget(""EpisodeID"")'="""" s url=url_""&EpisodeID=""_$$$rget(""EpisodeID"")")
 $$$macline(" i $$$rget(""mradm"")'="""" s url=url_""&mradm=""_$$$rget(""mradm"")")
 $$$macline(" i $$$rget(""TCONTEXT"")'="""" s url=url_""&TCONTEXT=""_$$$rget(""TCONTEXT"")")
 $$$macline(" i $$$rget(""TROWS"")'="""" s url=url_""&TROWS=""_$$$rget(""TROWS"")")
 ;
 f j=1:1:$l(cmp.PassThruParameters,",") {
 s param=$p(cmp.PassThruParameters,",",j)
 i param'="" {
 $$$macline(" i $$$rget("""_param_""")'="""" s url=url_""&"_param_"=""_$ZCVT($$$rget("""_param_"""),""O"",""URL"")")
 }
 }
 ;
 $$$macline(" q url")
 ;
 q
]]></Implementation>
</Method>

<Method name="GenPageUrlX">
<Description>
Get (and create) Xref entry</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n tmp
 $$$macline("PageUrlX(PageCnt)")
 ;       
 $$$macline(" n j,url")
 $$$macline(" s url=""websys.default.csp?WEBSYS.TCOMPONENT="_cmp.Name_"""")
 $$$macline(" f j=1:1:rs.GetParamCount() d")
 $$$macline(" . s url=url_""&""_rs.GetParamName(j)_""=""_$ZCVT($$$rget(rs.GetParamName(j)),""O"",""URL"")")
 $$$macline(" s url=url_""&CONTEXT=""_$$$rget(""CONTEXT"")_""&TWKFL=""_$$$rget(""TWKFL"")_""&TWKFLI=""_$$$rget(""TWKFLI"")_""&TPAGCNT=""_PageCnt")
 ;
 $$$macline(" i $g(tsrt)'="""" s url=url_""&TSRT=""_tsrt")
 $$$macline(" i $g(tsrtitm)'="""" s url=url_""&TSRTITM_"_$tr(cmp.Name,".","_")_"=""_tsrtitm")
 $$$macline(" i $g(tsrtord)'="""" s url=url_""&TSRTORD_"_$tr(cmp.Name,".","_")_"=""_tsrtord")
 ;
 $$$macline(" i $d(%request.Data(""PatientBanner"",1)) s url=url_""&PatientBanner=""_$$$rget(""PatientBanner"")")
 $$$macline(" e  i $g(shownextinnewwindow)'="""" s url=url_""&PatientBanner=1""")
 $$$macline(" i $$$rget(""PatientID"")'="""" s url=url_""&PatientID=""_$$$rget(""PatientID"")")
 $$$macline(" i $$$rget(""EpisodeID"")'="""" s url=url_""&EpisodeID=""_$$$rget(""EpisodeID"")")
 $$$macline(" i $$$rget(""mradm"")'="""" s url=url_""&mradm=""_$$$rget(""mradm"")")
 $$$macline(" i $$$rget(""TCONTEXT"")'="""" s url=url_""&TCONTEXT=""_$$$rget(""TCONTEXT"")")
 $$$macline(" i $$$rget(""TROWS"")'="""" s url=url_""&TROWS=""_$$$rget(""TROWS"")")
 ;
 f j=1:1:$l(cmp.PassThruParameters,",") {
 s param=$p(cmp.PassThruParameters,",",j)
 i param'="" {
 $$$macline(" i $$$rget("""_param_""")'="""" s url=url_""&"_param_"=""_$ZCVT($$$rget("""_param_"""),""O"",""URL"")")
 }
 }
 ;
 $$$macline(" q url")
 q
]]></Implementation>
</Method>

<Method name="GenSave">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,item
 ; labclassName and WebClassName passed in
 d ..Init()
 ;
 $$$macline("save(compref,id)	;")
 i labclassName="" $$$macline(" q 1") q
 ; only provide save code for edit and custom
 i "FL"[cmp.DisplayType $$$macline(" q 1") q
 ; 
 $$$macline(" n compid,status,new,j,oktosave,save,value,parref,oldval")
 $$$macline(" s compid="_cmp.%Id()_",oktosave=1,save=0")
 ;
 ; try and lock
 $$$macline(" i id'="""",'##Class(websys.Lock).Lock($lb(id,"""_labclassName_"""),%session.SessionId,%session.Get(""LOGON.USERID""),.status) d  q 0")
 $$$macline(" . d msg.AddItem(""E"",""LOCKED"",status,compid) s oktosave=0")
 $$$macline(" i '##Class("_WebClassName_").websysBeforeSave(compref,.id) q 0")
 $$$macline(" s new=id=""""")
 ;
 ; Handle child tables - if PARREF is defined, and ID isn't - then assume it is a child
 $$$macline(" s:id'="""" obj=##Class("_labclassName_").%OpenId(id)")
 $$$macline(" if id="""" d")
 $$$macline(" . s parref=$g(%request.Data(""PARREF"",1))")
 $$$macline(" . i parref="""" s obj=##Class("_labclassName_").%New()")
 $$$macline(" . i parref'="""" s obj=##Class("_labclassName_").%New(parref)")
 ;
 ; For now include all properties - later we can make this so we have only include the properties displayed in the component
 for j=1:1:cmp.Items.Count() {
 s item=cmp.Items.GetAt(j)
 i item.ValueSet'="" {
 if (item.DisplayType="C") { //for checkboxes always do this - unchecked checkbox is not passed !
 $$$macline(" d")
 } else {
 $$$macline(" i $d(%request.Data("""_item.Name_""",1)) d")
 }
 $$$macline(" . s (val,oldval)=$g(%request.Data("""_item.Name_""",1)) "_item.ValueSet)
 // Assume if we had a value before conversion, and don't now that it was invalid !
 $$$macline(" . i oldval'="""",val="""" d msg.AddItem(""E"",$g(t("""_item.Name_"""),"""_item.Caption_"""),oldval_"" ""_$g(t(""XINVALID""),"" is invalid""),"_cmp.%Id()_","""_item.Name_""") s oktosave=0")
 }
 }
 ; If not ok to save, but we have no errors (i.e. warnings and info only) and we have an override then save anyway
 $$$macline(" i 'oktosave,'$g(msg.Count(""E"")),$g(%request.Data(""TOVERRIDE"",1)) s oktosave=1")
 $$$macline(" i oktosave d")
 $$$macline(" . s save=obj.%Save(0)")
 $$$macline(" . i $d(msg) d msg.Status(save,"_cmp.%Id()_")")
 $$$macline(" s:save id=obj.%Id()")
 $$$macline(" d obj.%Close()")
 $$$macline(" d:save ##Class("_WebClassName_").websysAfterSave(compref,id,new)")
 $$$macline(" i 'new d ##Class(websys.Lock).LockClear($lb(id,"""_labclassName_"""),%session.SessionId)")
 ;
 $$$macline(" q save")
 Q
]]></Implementation>
</Method>

<Method name="GenTemplate">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>template:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Build an index of names, and an array of items
 n j,icount,itm,itms,item,icount,tcount,token,tname,name
 n names,itmarray //!??
 s itms=cmp.Items
 s icount=itms.Count()
 f j=1:1:icount s itmarray(j)=itms.GetAt(j),tname=itmarray(j).Name i tname'="" s names(tname)=j
 ;
 ; Process all the hidden fields
 f j=1:1:icount s itm=itmarray(j) i itm.Hidden d ..GenItem(itm,"d"_cmp.%Id()_"i"_itm.Name,0)
 ;
 f  q:template=""  d
 . ; process the head
 . $$$macline(" w "_$$quote($tr($p(template,"{"),$c(13,10),""))_",!") //We probably need to quote this.
 . ; keep the body
 . s template=$p(template,"{",2,99999)
 . ;
 . ; Try and find a matching token
 . s token=$p(template,"}",1),template=$p(template,"}",2,99999)
 . q:token=""
 . ;
 . ; If it is something we can process then process it
 . ; There should never be hidden items on the layout - but just in case
 . i token?1"c"1n.n1"i"1e.e s name=$p(token,"i",2,99),item=$g(names(name)) i +item s itm=itmarray(item) i 'itm.Hidden d ..GenItemCaption(itm,0) q
 . i token?1"M"1n.n d ..GenComponentCaption(token) q
 . i token?1"R"1n.n1"i"1e.e s name=$p(token,"i",2,99),item=$g(names(name)) i +item s itm=itmarray(item) i 'itm.Hidden d ..GenItemDescription(itm) q
 . i token?1"d"1n.n1"i"1e.e s name=$p(token,"i",2,99),item=$g(names(name)) i +item s itm=itmarray(item) i 'itm.Hidden d ..GenItem(itm,"d"_cmp.%Id()_"i"_itm.Name,0) q
 . i token="table" d  q
 . . i cmp.DisplayType'="K" $$$macline(" d ShowList^"_$p(mn,".",1)_".L1(name,hidemenus,hideheadings,disabled,style,shownextinnewwindow,app,context,nested,listrowsx)") q
 . . i cmp.DisplayType="K" $$$macline(" d ShowListLookup^"_$p(mn,".",1)_".L1(name,hidemenus,hideheadings)") q
 . ; else its just some other html so write out we've got
 . $$$macline(" w "_$$quote($tr(token,$c(13,10),""))_",!") //We probably need to quote this.
]]></Implementation>
</Method>

<Method name="GetSave">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%Library.String,id:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n xrefid,rtn,compid
 n isgen,compdate,comptime,xrefdata,hcomp,hcompxref
 ;
 s compid=$e($p(compref,"i",1),2,999)
 s xrefid=$o(^websys.ComponentXRefI("ComponentId",compid,""))
 ;sometimes the first one has not been regenerated yet
 //06-APR-2004 dirty flag not used anymore, check against dates instead
 //while (xrefid'="")&($lg($g(^websys.ComponentXRefD(+xrefid)),5)) {
 //	s xrefid=$o(^websys.ComponentXRefI("ComponentId",compid,xrefid))
 //}
 s isgen=0
 s compdate=$lg($g(^websys.ComponentD(compid)),45),comptime=$lg($g(^websys.ComponentD(compid)),46)
 if (compdate'="")&(comptime'="") {
	 //LastUpdateDate*86400+LastUpdateTime = no of secs
	 s hcomp=compdate*86400+comptime
 }
 while (xrefid'="")&('isgen) {
	 s xrefdata=$g(^websys.ComponentXRefD(xrefid))
	 if (+$g(hcomp)) {
		 if ($lg(xrefdata,6)'="")&($lg(xrefdata,7)'="") {
			s hcompxref=$lg(xrefdata,6)*86400+$lg(xrefdata,7)
			//if the compiled code is older than the component
			i hcomp'>hcompxref s isgen=1
		 }
	 } else {
		 //backwards compatible
		 if ('$lg(xrefdata,5)) s isgen=1
	 }
	 i 'isgen s xrefid=$o(^websys.ComponentXRefI("ComponentId",compid,xrefid))
 }

 i xrefid="" q
 ;
 ;xrefid may not be the same routine as that used in GetXRef, but at least this xrefid has currently been generated
 ;
 s rtn="save^GCOM"_xrefid_".S1("""_compref_""","""_id_""")"
 d @rtn
 q
]]></Implementation>
</Method>

<Method name="GetXRef">
<Description>
Get (and create) Xref entry</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&cmp:%Library.String,ActiveContext:%Library.String,langid:%Library.String,ActiveObject:%Library.String,ActiveReference:%Library.String,isnested:%Library.String]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n zid,xref,gotlock,gen,rtn,app,context,cmpid
 s zid=0,gotlock=1,gen=0
 ;
 s cmpid=cmp.%Id()
 s app=ActiveObject
 i ActiveReference'="" s app=app_"."_ActiveReference
 ;
 s context=ActiveContext
 i context="" s context=-1E14
 i langid="" s langid=-1E14
 i app="" s app=-1E14
 ;
 s zid=$o(^websys.ComponentXRefI("Master",cmpid,context,langid,app,""))
 ;
 ; If there is no entry, then create one
 if ('zid) {
 s xref=##Class(websys.ComponentXRef).%New()
 s xref.ComponentId=cmpid
 s xref.Context=context
 s xref.LangId=langid
 s xref.App=app
 //Start as dirty, other process have to wait until generated and marked clean
 //s xref.Dirty=1
 d xref.%Save()
 //generate if we have just created a new one
 s zid=xref.%Id(),gen=1
 d xref.%Close()
 }

 //Now we have a zid ! (or something horrible has happened)
 //generate if dirty ??  //no longer used
 //i $lg($g(^websys.ComponentXRefD(zid)),5) s gen=1
 i $lg($g(^websys.ComponentXRefD(zid)),6)="" s gen=1
 i 'gen,$lg($g(^websys.ComponentXRefD(zid)),7)="" s gen=1
 i 'gen {
	 i $lg($g(^websys.ComponentD(cmpid)),45)'="" {
	 	i $lg($g(^websys.ComponentD(cmpid)),46)'="" {
		 	//LastUpdateDate*86400+LastUpdateTime = no of secs
			s hcompxref=$lg($g(^websys.ComponentXRefD(zid)),6)*86400+$lg($g(^websys.ComponentXRefD(zid)),7)
		 	//LastUpdateDate*86400+LastUpdateTime = no of secs
			s hcomp=$lg($g(^websys.ComponentD(cmpid)),45)*86400+$lg($g(^websys.ComponentD(cmpid)),46)
			//if the compiled code is older than the component, then regenerate
			i hcompxref<hcomp s gen=1
	 	}
	 }
 }

 if (gen) {
 l +^websys.ComponentXRefD(zid):1 e  s gotlock=0
 i gotlock {
 //H 5 //for testing contention
 d ##Class(websys.ComponentXRef).Gen(cmp.%Id(),cmp.Template,..#RTNPREFIX_zid_".1",ActiveObject,ActiveReference,ActiveContext)
 //H 5 //for testing contention
 ; reset dirty flag // no longer used
 //s $li(^websys.ComponentXRefD(zid),5)=0
 s h=$h,h1=+h,h2=$p(h,",",2)
 s $li(^websys.ComponentXRefD(zid),6)=h1
 s $li(^websys.ComponentXRefD(zid),7)=h2

 l -^websys.ComponentXRefD(zid)
 }
 }

 //if we needed to generate but couldn't grab the lock
 if (gen&('gotlock)) {
 //to be improved
 w "<br><A HREF=""#"" onclick=""window.location.reload();"">&nbsp;<IMG SRC=""../images/websys/refresh.gif"" BORDER=""0"">&nbsp;Class Compiling - click here to Refresh</A><br>",!
 } else { //show the component
 s rtn=..#RTNPREFIX_zid_".1"
 //w !,"about to run",rtn,"*"
 d @("Show^"_rtn_"(cmp.Name,cmp.HideMenus,cmp.HideHeadings,cmp.Disabled,cmp.Style,cmp.ShowNextInNewWindow,app,context,isnested,cmp.ListRows)")
 }
 q
]]></Implementation>
</Method>

<Method name="Init">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Stuff to make it easier to write
 $$$macline($p(mn,".")_" ;"_mn)
 $$$macline(" ; "_cmp.Name_" "_cmp.%Id()_" "_$zd($h,4)_" "_$zt($p($h,",",2)))
 $$$macline(" g start")
 $$$macline(" #include %cspInclude")
 ;$$$macline(" #include webutils")
 $$$macline(" #define tpagid                $i(^websys.Counters(""tpagid""))")
 $$$macline(" #define EscapeHTML(%string) $ZCVT(%string,""O"",""HTML"")")
 $$$macline(" #define EscapeURL(%string) $ZCVT(%string,""O"",""URL"")")
 $$$macline(" #define rget(%key) $g(%request.Data(%key,1))")
 $$$macline(" #define sget(%key) $g(%session.Data(%key))")
 $$$macline("start")
 q
]]></Implementation>
</Method>

<Method name="Kill">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s %code=0
 ;
 ; Is this a sneaky use of a generator ???
 ; Kill at compile time !
 k ^websys.ComponentXRefI,^websys.ComponentXRefD
 ;
 ; and provide the utility !
 $$$GENERATE(" k ^websys.ComponentXRefI,^websys.ComponentXRefD")
 $$$GENERATE(" q")

 q $$$OK
]]></Implementation>
</Method>

<Method name="MakeDirtyAll">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //&sql(UPDATE websys.ComponentXRef (Dirty) VALUES (1))
 n h
 s h=$h,h1=+h,h2=$p(h,",",2)
 &sql(UPDATE websys.Component (LastUpdateDate,LastUpdateTime) VALUES (:h1,:h2))
 q
]]></Implementation>
</Method>

<Method name="MakeDirtyComponent">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>componentid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //&sql(UPDATE websys.ComponentXRef (Dirty) VALUES (1) WHERE ComponentId=:componentid)
 n h
 s h=$h,h1=+h,h2=$p(h,",",2)
 &sql(UPDATE websys.Component (LastUpdateDate,LastUpdateTime) VALUES (:h1,:h2)  WHERE Id=:componentid)
 q
]]></Implementation>
</Method>

<Method name="MakeDirtyLanguage">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>langid:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 //&sql(UPDATE websys.ComponentXRef (Dirty) VALUES (1) WHERE LangId=:langid)
 d ..MakeDirtyAll()
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^websys.ComponentXRefD</DataLocation>
<DefaultData>ComponentXRefDefaultData</DefaultData>
<IdLocation>^websys.ComponentXRefD</IdLocation>
<IndexLocation>^websys.ComponentXRefI</IndexLocation>
<StreamLocation>^websys.ComponentXRefS</StreamLocation>
<Data name="ComponentXRefClassName">
<Attribute>%%CLASSNAME</Attribute>
<Structure>node</Structure>
<Subscript>0</Subscript>
</Data>
<Data name="ComponentXRefDefaultData">
<Structure>listnode</Structure>
<Value name="1">
<Value>App</Value>
</Value>
<Value name="2">
<Value>ComponentId</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>LangId</Value>
</Value>
<Value name="5">
<Value>Dirty</Value>
</Value>
<Value name="6">
<Value>LastUpdateDate</Value>
</Value>
<Value name="7">
<Value>LastUpdateTime</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
