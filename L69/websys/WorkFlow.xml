<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.WorkFlow">
<Description>
Definition of a sequenced set of WorkFlowItems</Description>
<Abstract>0</Abstract>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.Persistent,websys.Abstract,XML.Abstract</Super>
<TimeCreated>60218,47035.476334</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="BUILD">
<Internal/>
<Default>203</Default>
</Parameter>

<Parameter name="SQLDATEFROM">
<Internal/>
</Parameter>

<Parameter name="SQLDATETO">
<Internal/>
</Parameter>

<Parameter name="EXTENTSIZE">
<Default>295</Default>
</Parameter>

<Parameter name="SQLCODE">
<Final>0</Final>
<Default>Name</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Final>0</Final>
<Default>Name</Default>
</Parameter>

<Parameter name="SQLROWID">
<Final>0</Final>
<Default>ID</Default>
</Parameter>

<Parameter name="xmlidentifiedby">
<Description>
Used in conjunction with XMLId method to unqiuely identify a record.
By default ..%Id() is used unless other properties are specified. A comma separated list may be provided and processed by overridding XMLId method</Description>
<Final>0</Final>
<Default>%Id()</Default>
</Parameter>

<Parameter name="xmltoclass">
<Description>
Mapping from XML to Class</Description>
<Final>0</Final>
<Default>workflow</Default>
</Parameter>

<Parameter name="xmltypeWorkFlowItems">
<Final>0</Final>
<Default>workflowitems</Default>
</Parameter>

<Index name="UniqueNameIndex">
<Description>
Uniqueness index for property Name</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Property name="CycleSelection">
<Description>
Used for cycling a workflow for a set number of selected items.
ie. TKWFLL stores a collection of multiple ids.
If CycleSelection is ticked the workflow will flow for the first id, then the second id, and so on to the last id,
then it quits out.</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="JumpToList">
<Description>
Determines whether the workflow should return back to a particular screen after completion</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Loop">
<Description>
Determines whether the workflow should return back to the first item after completion</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Name">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UpdateDate">
<Type>%Library.Date</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="UpdateTime">
<Type>%Library.Time</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="UpdateUser">
<Type>User.SSUser</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="WorkFlowItems">
<Type>websys.WorkFlowItem</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection>list</Collection>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Method name="ConditionalExpressionsGet">
<Description>
Return delimited list of workflow item Conditional Expressions.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,lst
 s lst=""
 f j=1:1:..WorkFlowItems.Count() {
 s lst=lst_..WorkFlowItems.GetAt(j).ConditionalExpression_"|"
 }
 q lst
]]></Implementation>
</Method>

<Method name="FindByWKFLItemClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>FindByWKFLItemFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n work,rs
 ;
 s work=$li(QHandle,3)
 s rs=$li(work,1)
 //SYSTEMOREF i rs d rs.%Close()
 ;
 s QHandle=""
 k %trakobjects(+rs) //SYSTEMOREF
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindByWKFLItemExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,WKFLName:%Library.String,WKFLItemDesc:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,rs
 s work=""
 ;
 s user=$lb(WKFLName,WKFLItemDesc)
 ;
 s rs=##Class(%Library.ResultSet).%New("websys.WorkFlow:LookUp")
 s %trakobjects(+rs)=rs //SYSTEMOREF
 d rs.Execute(WKFLName)
 ;
 s work=$lb(rs)
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindByWKFLItemFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>FindByWKFLItemExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,rs,ID,name,j,WKFLName,WKFLItemDesc,obj,wf
 s (ID,name,WKFLItemName)=""	
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s WKFLName=$li(user,1)
 s WKFLItemDesc=$li(user,2)
 s rs=$li(work,1)
 s rs=$g(%trakobjects(+rs)) //SYSTEMOREF
 ;
 f  {
 i 'rs.Next() s AtEnd=1,Row="" q
 ;
 s ID=rs.GetData(2)
 s name=rs.GetData(1)
 ;
 i WKFLItemDesc'="" {
 s wf=0
 s obj=##Class(websys.WorkFlow).%OpenId(ID)
 i obj {
 f j=1:1:obj.WorkFlowItems.Count() {
 i obj.WorkFlowItems.GetAt(j).Item,obj.WorkFlowItems.GetAt(j).Item.Description=WKFLItemDesc s wf=1 q
 }
 d obj.%Close()
 }
 i wf q
 } else {
 q
 }
 }
 i 'AtEnd s Row=$lb(ID,name)
 s work=$lb(rs)
 s QHandle=$lb(AtEnd,user,work)
 ;
 Q $$$OK
]]></Implementation>
</Method>

<Method name="NamesGet">
<Description>
Return delimited list of workflow item names.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,lst,name,def
 s lst=""
 f j=1:1:..WorkFlowItems.Count() {
 i $l(lst) s lst=lst_"|"
 ;TN: had to add the if check as sometimes the WorkFlowItemDefinitions get deleted???
 i ..WorkFlowItems.GetAt(j).Item s lst=lst_..WorkFlowItems.GetAt(j).Item.Description
 }
 q lst
]]></Implementation>
</Method>

<Method name="TransitionExpressionsGet">
<Description>
Return delimited list of workflow item Transition Expressions.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,lst
 s lst=""
 f j=1:1:..WorkFlowItems.Count() {
 s lst=lst_..WorkFlowItems.GetAt(j).TransitionExpression_"|"
 }
 q lst
]]></Implementation>
</Method>

<Method name="VBFindLEClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>VBFindLEFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n work,rs
 ;
 s work=$li(QHandle,3)
 s rs=$li(work,1)
 //SYSTEMOREF i rs d rs.%Close()
 ;
 s QHandle=""
 k %trakobjects(+rs) //SYSTEMOREF
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="VBFindLEExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,desc:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,rs
 s work=""
 ;
 s user=$lb(desc)
 ;
 s rs=##Class(%Library.ResultSet).%New("websys.WorkFlow:VBFindLESimple")
 s %trakobjects(+rs)=rs //SYSTEMOREF
 d rs.Execute(desc)
 ;
 s work=$lb(rs)
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="VBFindLEFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>VBFindLEExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work,rs,desc,ID,Name,UpdateDate,UpdateTime
 s (desc,ID,Name,UpdateDate,UpdateTime)=""	
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s desc=$li(user,1)
 s rs=$li(work,1)
 s rs=$g(%trakobjects(+rs)) //SYSTEMOREF
 ;
 i 'rs.Next() s AtEnd=1,Row="" q $$$OK
 ;
 s ID=rs.Data("ID")
 s Name=rs.Data("Name")
 s UpdateDate=##class(websys.Conversions).DateLogicalToHtml(rs.Data("UpdateDate"))
 s UpdateTime=##class(websys.Conversions).TimeLogicalToHtml(rs.Data("UpdateTime"))
 s Row=$lb(ID,Name,UpdateDate,UpdateTime)
 s work=$lb(rs)
 s QHandle=$lb(AtEnd,user,work)
 ;
 q $$$OK
]]></Implementation>
</Method>

<Method name="WorkFlowItemsAdd">
<Description>
Rebuild workflow items from a set of delimited strings.</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>names:%Library.String,expressions:%Library.String,conditions:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n j,itm,def,defid
 d ..WorkFlowItems.Clear()
 f j=1:1:$l(names,"|") {
 if $p(names,"|",j)'="" {
 // We actually get the description here - so convert to the real name
 s defid=##Class(websys.WorkFlowItemDefinition).GetIdFromCodeOrDescription($p(names,"|",j))
 i defid {
 s itm=##Class(websys.WorkFlowItem).%New()
 d itm.ItemSetObjectId(defid)
 s itm.TransitionExpression=$p(expressions,"|",j)
 s itm.ConditionalExpression=$p(conditions,"|",j)
 ;
 ; Nasty workaround for a javascript bug
 i itm.TransitionExpression="undefined" s itm.TransitionExpression=""
 i itm.ConditionalExpression="undefined" s itm.ConditionalExpression=""
 ;
 d ..WorkFlowItems.Insert(itm)
 d itm.%Close()
 }
 }
 }
 q
]]></Implementation>
</Method>

<Method name="XMLExport">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s %code=0
 n class
 s class=%class
 ;
 #; if class is abstract, quit here, don't instantiate 
 ;;;;;;;;;;;;;;;;;;;;i $$$CLASSabstract($$$MGINFO,%class) $$$GENERATE(" QUIT") QUIT $$$OK
 #;
 n param,idby,j,expr
 s param=$g($$$PARAMdefault($$$TRAKDEF,class,"xmltoclass"))
 s idby=$g($$$PARAMdefault($$$TRAKDEF,class,"xmlidentifiedby"),"%Id()")
 ;
 ; If no parameter CLASSTOXML then we 'dont know how to export'
 i param="" $$$GENERATE(" QUIT") QUIT $$$OK
 ;
 ; Persistent classes only...???
 ;
 ; EXTRA STUFF - IN METHOD OVERRIDE
 $$$GENERATE(" f j=1:1:..WorkFlowItems.Count() d")
 $$$GENERATE(" . d ..WorkFlowItems.GetAt(j).Item.XMLExport()")
 ;
 ;
 ; If no parameter XMLTOCLASS then we 'wont know how to import' so don't bother to export
 $$$GENERATE(" w ""<"_param_" xmltoclass="""""_class_"""""""")
 ;$$$GENERATE(" w "" xmlid=""""""_..%Id()_""""""""")
 s expr="" f j=1:1:$l(idby,",") s:$l(expr) expr=expr_"_"",""_" s expr=expr_".."_$p(idby,",",j)
 s expr="""_"_expr_"_"""
 $$$GENERATE(" w "" xmlid="""""_expr_"""""""")
 ;
 n prp,tmp,tparam
 Set rs=##Class(%ResultSet).%New("%CompiledProperty:PropertyInfo")
 d rs.Execute(class)
 While rs.Next() {
 s type=rs.Data("Type"),prp=rs.Data("Name")
 i '$g($$$PROPprivate($$$sDEF,class,prp)) {
 ; Ignore  properties with an xml type that required further processing
 ; A bit convoluted as we can't do this per property unless we declare a new string type
 s tparam=$g($$$PARAMdefault($$$sDEF,class,"xmltype"_prp))
 i tparam="" {
 ;if it is a reference then put the id instead of the value
 if ($e(type)="%"!(type="websys.Expression")) {
 $$$GENERATE(" w:.."_prp_"'="""" "" "_prp_"=""""""_$ZCVT(.."_prp_",""O"",""HTML"")_""""""""") 
 } else {
 $$$GENERATE(" w:.."_prp_" "" "_prp_"=""""""_$ZCVT(.."_prp_".%Id(),""O"",""HTML"")_""""""""") 
 }
 }
 }

 }
 d rs.%Close()
 ;
 $$$GENERATE(" w "">""")
 ;
 ; loop thru all properties (AGAIN) for this class
 s prp="" f  s prp=$o($$$PROP($$$TRAKDEF,class,prp)) q:prp=""   d
 . i $g($$$PROPprivate($$$sDEF,class,prp)) q
 . ; Ignore  properties with an xml type that required further processing
 . ; A bit convoluted as we can't do this per property unless we declare a new string type
 . s tparam=$g($$$PARAMdefault($$$sDEF,class,"xmltype"_prp))

 . i tparam="IGNORE" d  q
 . i tparam="CDATA" d  q
 . . ; CDATA
 . . $$$GENERATE(" i .."_prp_"'="""" d ") 
 . . $$$GENERATE(" . w !,""<"_prp_"><![CDATA[""")
 . . $$$GENERATE(" . w .."_prp)
 . . $$$GENERATE(" . w ""]]]]><![CDATA[></"_prp_">""")
 . . ;$$$GENERATE(" . w !,""]]]]><![CDATA[></"_prp_">""")
 . ; Currently a child table (include the tags to explicitly indicate there are no children)
 . i tparam'="" d
 . . $$$GENERATE(" w !,""<"_tparam_">""")
 . . $$$GENERATE(" n j")
 . . $$$GENERATE(" f j=1:1:.."_prp_".Count() d")
 . . $$$GENERATE(" . d .."_prp_".GetAt(j).XMLExport()")
 . . $$$GENERATE(" w !,""</"_tparam_">""")
 ;
 $$$GENERATE(" w ""</"_param_">""")
 ;
 $$$GENERATE(" q")
 Q $$$OK
]]></Implementation>
</Method>

<Method name="XMLId">
<Description>
Get the ID from the identified by string.
By default the generated version of this returns the value passed.
In general this method will be overridden to provide the required behaviour.
For example - Component name is passed - this will return ..%Id()</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>val:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;q ..GetIdFromCodeOrDescription(val)
 i '$d(^websys.WorkFlowD(val)) s ^websys.WorkFlowD(val)=$lb("WorkFlow"_val)
 q val
]]></Implementation>
</Method>

<Method name="XMLPreference">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n itm,j
 ;
 ; Exports self
 d ..XMLExport()
 ;
 ; Export all workflow items
 f j=1:1:..WorkFlowItems.Count() d
 . s itm=..WorkFlowItems.GetAt(j)
 . d itm.XMLExport()
 . i itm.Item,itm.Item.Component d itm.Item.Component.XMLExport()
 q
]]></Implementation>
</Method>

<Query name="FindByWKFLItem">
<Type>%Library.Query</Type>
<FormalSpec>WKFLName:%Library.String,WKFLItemDesc:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Name"/>
</Query>

<Query name="LookUp">
<Description>
Basic query returning description from a partial description, ordered by description.
Compiled will attempt to derive the 'description' property from available properties unless it is explicity
set in the SQLDESCRIPTION parameter.
SQLROWID may be used to specify the field name to be used as rowid.</Description>
<Type>%Library.Query</Type>
<FormalSpec>desc:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Query name="VBFind">
<Description>
Find called from VB Patching OCX</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>name</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT Name
FROM Workflow
WHERE Name %STARTSWITH :name
ORDER BY Name</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Name:%String"/>
</Query>

<Query name="VBFindLE">
<Type>%Library.Query</Type>
<FormalSpec>desc:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Name:%Library.String,UpdateDate:%String,UpdateTime:%String"/>
</Query>

<Query name="VBFindLESimple">
<Description>
Used in:
Layout Editor XML Export</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>name:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery><![CDATA[SELECT ID, Name,UpdateDate,UpdateTime
FROM WorkFlow
WHERE (Name %STARTSWITH :name) AND (ID>49999)
ORDER BY Name]]></SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Name:%Library.String,UpdateDate:%Date,UpdateTime:%Time"/>
</Query>

<Query name="VBFindLETrak">
<Description>
Used in:
Layout Editor Component Item LinkWorkFlow
Only choose from Trak distributed workflows</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>name:%Library.String</FormalSpec>
<SqlQuery><![CDATA[SELECT ID, Name,UpdateDate,UpdateTime
FROM WorkFlow
WHERE (Name %STARTSWITH :name) and (ID<50000)
ORDER BY Name]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Name:%Library.String,UpdateDate:%Date,UpdateTime:%Time"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^websys.WorkFlowD</DataLocation>
<DefaultData>WorkFlowDefaultData</DefaultData>
<IdLocation>^websys.WorkFlowD</IdLocation>
<IndexLocation>^websys.WorkFlowI</IndexLocation>
<StreamLocation>^websys.WorkFlowS</StreamLocation>
<Data name="WorkFlowClassName">
<Attribute>%%CLASSNAME</Attribute>
<Structure>node</Structure>
<Subscript>0</Subscript>
</Data>
<Data name="WorkFlowDefaultData">
<Structure>listnode</Structure>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>WorkFlowItems</Value>
</Value>
<Value name="3">
<Value>Loop</Value>
</Value>
<Value name="4">
<Value>CycleSelection</Value>
</Value>
<Value name="5">
<Value>JumpToList</Value>
</Value>
<Value name="6">
<Value>UpdateDate</Value>
</Value>
<Value name="7">
<Value>UpdateTime</Value>
</Value>
<Value name="8">
<Value>UpdateUser</Value>
</Value>
</Data>
<Property name="CycleSelection"/>
<Property name="JumpToList"/>
<Property name="Loop"/>
<Property name="Name"/>
<Property name="UpdateDate"/>
<Property name="UpdateTime"/>
<Property name="UpdateUser"/>
<Property name="WorkFlowItems"/>
</Storage>
</Class>
</Export>
