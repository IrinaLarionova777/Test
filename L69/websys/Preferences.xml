<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.Preferences">
<Description>
Generic holder for user, group, site preferences.
Examples include:
Sequences for table columns
Component Layout
Order Profiles
and many more

In general data can be stored directly: 
d ##Class(websys.Preferences).SetData("MYAPP","SETTINGS","SSGroup","SuperUser",mydata)
and retrieved directly: 
s mydata=##Class(websys.Preferences).GetData("MYAPP","SETTINGS","SSGroup","SuperUser")</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.Persistent,websys.Abstract</Super>
<TimeCreated>60218,47035.234985</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="BUILD">
<Internal/>
<Default>457</Default>
</Parameter>

<Parameter name="SQLDATEFROM">
<Internal/>
</Parameter>

<Parameter name="SQLDATETO">
<Internal/>
</Parameter>

<Parameter name="EXTENTSIZE">
<Default>288</Default>
</Parameter>

<Parameter name="SQLCODE">
<Default>ID</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Default>ID</Default>
</Parameter>

<Parameter name="SQLROWID">
<Default>ID</Default>
</Parameter>

<Index name="AppKey">
<Description>
index by APPKEY, APPSUBKEY - used to get a list of preferences for a specific component</Description>
<Properties>AppSubKey,AppKey</Properties>
</Index>

<Index name="Index">
<Description>
Inverse index by all key items</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>ObjectType,ObjectReference,AppKey,AppSubKey</Properties>
<Unique>1</Unique>
</Index>

<Property name="AppKey">
<Description>
String detemining a module or major part of application functionality.
Actual string depends on the context.

For example
For Columns in a table the AppKey is "COLUMNS" plus the context
For Layout of a component the AppKey is "LAYOUT" plus the context</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>1</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="MAXLEN" value="99999"/>
<Parameter name="TRUNCATE"/>
</Property>

<Property name="AppSubKey">
<Description>
String detemining sub component of a module or major part of application functionality.
Actual string depends on the context.

For example
For Columns in a table the AppSubKey is the Component Name
For Layout of a component the AppSubKey is the Component Id.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>1</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="MAXLEN" value="99999"/>
<Parameter name="TRUNCATE"/>
</Property>

<Property name="Data">
<Description>
Preference Data.
The structure of the data is user defined depending on the context of the preference.
In general data should be structured as nested lists.
The actual structure should be clearly documeted in the code where the data is stored.
Storage of data within any particular context should be maintained from single method.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN" value="99999"/>
<Parameter name="TRUNCATE" value="0"/>
</Property>

<Property name="ObjectReference">
<Description>
This is the ID of the referenced object.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>1</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="TRUNCATE"/>
</Property>

<Property name="ObjectType">
<Description>
ObjectType.
This is used to determine the type of the object reference.

Historically we have used cryptic shorthand:
U for User.SSUser
G for User.SSGroup etc.

it would be better to use the object name
User.SSUser
User.SSGroup etc.

Where the is no specific correspondence to an object definition,
e.g. Site then some meaningful text should be used.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>1</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="COLLATION" value="Exact"/>
<Parameter name="TRUNCATE"/>
</Property>

<Method name="DeleteLinkedData">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>id:%Library.String=""</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 q:id=""
 n AppKey,AppSubKey,ObjectType,ObjectReference,compid,context,langid
 &SQL(SELECT AppKey,AppSubKey,ObjectType,ObjectReference INTO :AppKey,:AppSubKey,:ObjectType,:ObjectReference FROM websys.Preferences WHERE ID=:id)
 i SQLCODE q
 ;
 i ($e(AppKey,1,6)="LAYOUT") d
 . s context=$p(AppKey,"LAYOUT",2)
 . ;delete associated data stored from websys.Translation
 . ;if ",User.SSUser,User.SSGroup,"[(","_ObjectType_",") d
 . ;. k ^websys.TranslationD("CONTEXTPLUS",AppSubKey_context,ObjectType,ObjectReference)
 . ;. s langid=0 f  s langid=$o(^SS("LAN",langid))  q:langid=""  k ^websys.TranslationD("CONTEXTPLUS"_langid,AppSubKey_context,ObjectType,ObjectReference)
 . ;if "SITE"=ObjectType d
 . ;. k ^websys.TranslationD("CONTEXT",AppSubKey_context)
 . ;. s langid=0 f  s langid=$o(^SS("LAN",langid))  q:langid=""  k ^websys.TranslationD("CONTEXT"_langid,AppSubKey_context)
 . d ##Class(websys.Translation).KillData(AppSubKey,context,"",ObjectType,ObjectReference)
 . s langid=0 f  s langid=$o(^SS("LAN",langid))  q:langid=""  d ##Class(websys.Translation).KillData(AppSubKey,context,langid,ObjectType,ObjectReference)
 ; 
 i ($e(AppKey,1,7)="COLUMNS") d
 . s context=$p(AppKey,"COLUMNS",2)
 . d ##Class(websys.Preferences).KillData(ObjectType,ObjectReference,"ROWS"_context,AppSubKey)
 i ($e(AppKey,1,4)="ROWS") d
 . s context=$p(AppKey,"ROWS",2)
 . d ##Class(websys.Preferences).KillData(ObjectType,ObjectReference,"COLUMNS"_context,AppSubKey)
 ;	
 q
]]></Implementation>
</Method>

<Method name="FindPreferenceClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>FindPreferenceFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n rs,user,work,byall
 ;
 s work=$li(QHandle,3)
 s user=$li(QHandle,2)
 s byall=$li(user,9)
 ;
 s rs=$li(work,1)
 //SYSTEMOREF ;i rs d rs.%Close()
 if byall &sql(CLOSE ByAll)
 if 'byall &sql(CLOSE ByRef)
 k PREFTYPEtrans
 s QHandle=""
 k %trakobjects(+rs) //SYSTEMOREF
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindPreferenceExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,UserID:%Library.String="",GroupID:%Library.String="",SiteDesc:%Library.String="",ComponentName:%Library.String="",Location:%Library.String="",CTHospital:%Library.String="",PACTrust:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; 'user' search values, current 'work' values, 
 n user,work
 n rs,ref,CompID,tmp,byall
 s rs=0
 ;
 ; do not new PREFTYPEtrans as we need it globally for the fetch
 i $d(%session) d ##Class(websys.Component).GetComponentMessages(.PREFTYPEtrans,"websys.Preferences.Find")
 s PREFTYPEtrans("UserID")=$g(PREFTYPEtrans("UserID"),"User")
 s PREFTYPEtrans("GroupID")=$g(PREFTYPEtrans("GroupID"),"Group")
 s PREFTYPEtrans("SiteDesc")=$g(PREFTYPEtrans("SiteDesc"),"Site")
 ;
 ;query used from component websys.Preference.Find/List
 ;UserID,Locatio,nGroupID,CTHospital,PACTrust are descriptions, not ids
 ;LAYOUTS store compid whilst COLUMNS store component.name
 s CompID=##Class(websys.Component).GetIdFromCodeOrDescription(ComponentName)

 &sql(DECLARE ByAll CURSOR FOR 
 SELECT	ID,AppKey,AppSubKey,ObjectType,ObjectReference
 FROM	websys.Preferences
 )
 //ORDER	BY AppSubKey

 &sql(DECLARE ByRef CURSOR FOR 
 SELECT	ID,AppKey,AppSubKey,ObjectType,ObjectReference
 FROM	websys.Preferences
 WHERE	(ObjectType = 'User.SSUser' AND :UserID [ (','_(ObjectReference)_',') )
 OR (ObjectType = 'User.SSGroup' AND :GroupID = ObjectReference )
 OR (ObjectType = 'SITE' AND %ALPHAUP ObjectReference = %ALPHAUP :SiteDesc)
 OR (%UPPER AppSubKey = %UPPER :ComponentName) OR (AppSubKey = :CompID)
 )
 //ORDER	BY AppSubKey

 s byall=((UserID_GroupID_SiteDesc_ComponentName)="") 
 i byall d
 . &SQL(OPEN ByAll)
 i 'byall d
 . s ref=##Class(web.SSGroup).GetIdFromCodeOrDescription(GroupID) s GroupID=ref
 . ;find all with matching name and code, not just the first one
 . s ref="," i $l(UserID) d
 . . i $d(^SSU("SSUSR",1,UserID)) s ref=ref_UserID_","
 . . s UserID=##Class(%Library.Collation).AlphaUp(UserID)
 . . s tmp="" f  s tmp=$o(^SSU("SSUSR","Name",UserID,tmp))  q:tmp=""  d
 . . . i ref'[(","_tmp_",") s ref=ref_tmp_","
 . . s UserID=ref
 . &SQL(OPEN ByRef)
 ;
 s user=$lb(UserID,GroupID,SiteDesc,ComponentName,Location,CTHospital,PACTrust,CompID,byall)
 s work=$lb(rs)
 ;
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindPreferenceFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>FindPreferenceExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 n user,work,UserID,GroupID,SiteDesc,ComponentName,Location,CTHospital,PACTrust,CompID,byall,rs
 n AppKey,Component,ComponentName,ID,wf,WorkflowID,WorkflowDesc,ObjectType,ObjectReference,savedbytype,savedbyref,savedbydesc,ComponentID,context,edittype
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s UserID=$li(user,1)
 s GroupID=$li(user,2)
 s SiteDesc=$li(user,3)
 s ComponentName=$li(user,4)
 s Location=$li(user,5)
 s CTHospital=$li(user,6)
 s PACTrust=$li(user,7)
 s CompID=$li(user,8)
 s byall=$li(user,9)
 s rs=$li(work,1)
 s rs=$g(%trakobjects(+rs)) //SYSTEMOREF
 ;
 ;i 'rs.Next() s AtEnd=1,Row="" Q $$$OK
 s WorkflowDesc="",ComponentID="",context="",edittype="",savedbydesc="",savedbyref=""
 ;get row value
 i byall &SQL(FETCH ByAll INTO :ID,:AppKey,:Component,:ObjectType,:ObjectReference)
 i 'byall &SQL(FETCH ByRef INTO :ID,:AppKey,:Component,:ObjectType,:ObjectReference)
 i SQLCODE s AtEnd=1,Row="" Q $$$OK
 ;
 ;layout's store as componentid, columns store as componentname
 i ($e(AppKey,1,6)="LAYOUT") d
 . s WorkflowID=$p(AppKey,"W",2)
 . s ComponentID=Component
 . s Component=$lg(##Class(websys.Component).GetCodeDescriptionFromId(ComponentID),3)
 . s context=$p(AppKey,"LAYOUT",2)
 . s AppKey="LAYOUT",edittype="LAYOUT"
 i ($e(AppKey,1,7)="COLUMNS") d
 . s WorkflowID=$p(AppKey,"W",2)
 . s ComponentID=##Class(websys.Component).GetIdFromCodeOrDescription(Component)
 . s context=$p(AppKey,"COLUMNS",2)
 . s AppKey="COLUMNS",edittype="COLUMNS"
 i ($e(AppKey,1,4)="ROWS") d
 . s WorkflowID=$p(AppKey,"ROWSW",2)
 . s ComponentID=##Class(websys.Component).GetIdFromCodeOrDescription(Component)
 . s context=$p(AppKey,"ROWS",2)
 . s AppKey="ROWS",edittype="COLUMNS"
 i $g(WorkflowID) d
 . s wf=##Class(websys.WorkFlow).%OpenId(+WorkflowID,0)
 . i wf s WorkflowDesc=wf.Name d wf.%Close()
 ;
 if ObjectType="User.SSUser" s savedbydesc=$g(PREFTYPEtrans("UserID")),savedbyref=##Class(web.SSUser).GetCodeDescriptionFromId(ObjectReference),savedbyref=$lg(savedbyref,1)_" ("_$lg(savedbyref,3)_")"
 if ObjectType="User.SSGroup" s savedbydesc=$g(PREFTYPEtrans("GroupID")),savedbyref=$lg(##Class(web.SSGroup).GetCodeDescriptionFromId(ObjectReference),1)
 if ObjectType="SITE" s savedbydesc=$g(PREFTYPEtrans("SiteDesc")),savedbyref=ObjectReference
 ;
 s Row=$lb(ID,AppKey,Component,WorkflowDesc,ObjectType,ObjectReference,ComponentID,context,edittype,savedbydesc,savedbyref)
 s work=$lb(rs)
 ;
 s QHandle=$lb(AtEnd,user,work)
 ;
 Q $$$OK
]]></Implementation>
</Method>

<Method name="GetData">
<Description>
Directly return preference data</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>objectType:%Library.String,objectReference:%Library.String,appKey:%Library.String,appSubKey:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id,data
 s id="",data=""
 ;
 ; Try to find an existing setting
 if (objectType="SYS") {
 &sql(SELECT	ID
 INTO :id
 FROM	websys.SysPreferences
 WHERE	(ObjectType = :objectType) AND (ObjectReference=:objectReference) AND (AppKey = :appKey) AND (AppSubKey = :appSubKey))

 ; Fast'n nasty
 i 'SQLCODE,$l(id) s data=$li(^websys.SysPreferencesD(id),3)
 } else {
 &sql(SELECT	ID
 INTO :id
 FROM	websys.Preferences
 WHERE	(ObjectType = :objectType) AND (ObjectReference=:objectReference) AND (AppKey = :appKey) AND (AppSubKey = :appSubKey))

 ; Fast'n nasty
 i 'SQLCODE,$l(id) s data=$li(^websys.PreferencesD(id),3)
 }
 ;
 q data
]]></Implementation>
</Method>

<Method name="GetDataEx">
<Description>
Extended GetData.
This is intended to ensure that disparate preferences are retrieved consistently for the typical hierachy of preefrences:
User, Group, Site, System
Each of which may by a preference within a context - such as a workflow, order profile etc.

The return value is the stored data.
Parameter 'app' is returned to indicate where in the hierarchy the preference was found.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[UserID:%Library.String,GroupID:%Library.String,SiteCODE:%Library.String,context:%Library.String,&app:%Library.String,key:%Library.String,subkey:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n uSet
 s uSet="",app=""
 i UserID'="" s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key_context,subkey) s app="User.SSUser"
 i GroupID'="",uSet="" s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key_context,subkey) s app="User.SSGroup"
 ; Site + context1
 i SiteCODE'="",uSet="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key_$p(context,",",1),subkey) s app="SITE"
 ; Site + context2
 i SiteCODE'="",uSet="",$p(context,",",2)'="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key_$p(context,",",2),subkey) s app="SITE"
 ; Site only
 i SiteCODE'="",uSet="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key,subkey) s app="SITE"
 i uSet="" s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key_context,subkey) s app="SYS"
 q uSet
]]></Implementation>
</Method>

<Method name="GetDataExLE">
<Description>
Extended GetData.
This is intended to ensure that disparate preferences are retrieved consistently for the typical hierachy of preefrences:
User, Group, Hospital, Trust, Site, System
Each of which may by a preference within a context - such as a workflow, order profile etc.

The return value is the stored data.
Parameter 'app' is returned to indicate where in the hierarchy the preference was found.

Used from the Layout Editor...
Returns active settings</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[UserID:%Library.String,GroupID:%Library.String,HospID:%Library.String,SiteCODE:%Library.String,context:%Library.String,key:%Library.String,subkey:%Library.String,&ActiveObject:%String,&ActiveReference:%String,&ActiveContext:%String,TrustID:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n uSet,c1,c2,c3
 ;
 s c1=$p(context,",",1)
 s c2=$p(context,",",2)
 s c3=$p(context,",",3)
 ;
 s uSet="",ActiveObject="",ActiveReference="",ActiveContext=""
 i UserID'="" d  i uSet'="" q uSet
 . i c3'="" s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key_c3,subkey) i uSet'="" s ActiveObject="User.SSUser",ActiveReference=UserID,ActiveContext=c3 q
 . i c2'="" s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key_c2,subkey) i uSet'="" s ActiveObject="User.SSUser",ActiveReference=UserID,ActiveContext=c2 q
 . i c1'="" s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key_c1,subkey) i uSet'="" s ActiveObject="User.SSUser",ActiveReference=UserID,ActiveContext=c1 q
 . s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key,subkey) i uSet'="" s ActiveObject="User.SSUser",ActiveReference=UserID,ActiveContext=""
 ;
 i GroupID'="" d  i uSet'="" q uSet
 . i c3'="" s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key_c3,subkey) i uSet'="" s ActiveObject="User.SSGroup",ActiveReference=GroupID,ActiveContext=c3 q
 . i c2'="" s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key_c2,subkey) i uSet'="" s ActiveObject="User.SSGroup",ActiveReference=GroupID,ActiveContext=c2 q
 . i c1'="" s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key_c1,subkey) i uSet'="" s ActiveObject="User.SSGroup",ActiveReference=GroupID,ActiveContext=c1 q
 . s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key,subkey) i uSet'="" s ActiveObject="User.SSGroup",ActiveReference=GroupID,ActiveContext=""
 ;
 i SiteCODE'="" d  i uSet'="" q uSet
 . i c3'="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key_c3,subkey) i uSet'="" s ActiveObject="SITE",ActiveReference=SiteCODE,ActiveContext=c3 q
 . i c2'="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key_c2,subkey) i uSet'="" s ActiveObject="SITE",ActiveReference=SiteCODE,ActiveContext=c2 q
 . i c1'="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key_c1,subkey) i uSet'="" s ActiveObject="SITE",ActiveReference=SiteCODE,ActiveContext=c1 q
 . s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key,subkey) i uSet'="" s ActiveObject="SITE",ActiveReference=SiteCODE,ActiveContext=""
 ;
 i c3'="" s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key_c3,subkey) i uSet'="" s ActiveObject="SYS",ActiveReference="SYS",ActiveContext=c3 q uSet
 i c2'="" s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key_c2,subkey) i uSet'="" s ActiveObject="SYS",ActiveReference="SYS",ActiveContext=c2 q uSet
 i c1'="" s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key_c1,subkey) i uSet'="" s ActiveObject="SYS",ActiveReference="SYS",ActiveContext=c1 q uSet
 s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key,subkey) s ActiveObject="SYS",ActiveReference="SYS",ActiveContext=""
 ;
 q uSet
]]></Implementation>
</Method>

<Method name="GetDataExPlus">
<Description>
Similar to GetDataExLE.
Added retrieval by Location, removed retrieval by Trust. Context is as is, not split in 2.

This is intended to ensure that disparate preferences are retrieved consistently for the typical hierachy of preefrences:
User, Location, Group, Site, System
Each of which may by a preference within a context - such as a workflow, order profile etc.

The return value is the stored data.
Parameter 'app' is returned to indicate where in the hierarchy the preference was found.
Parameter 'activecontext' is returned to indicate which context was stored with preference.

Used by all non-system things such as orderfavourites.
24-Oct-05: added by HospitalID</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[UserID:%Library.String,GroupID:%Library.String,SiteCODE:%Library.String,LocID:%Library.String,context:%Library.String,&app:%Library.String,key:%Library.String,subkey:%Library.String,&activecontext:%Library.String="",HospID:%String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s app="",activecontext="" ;variables returned by reference
 n uSet
 s uSet=""
 i UserID'="" d  i uSet'="" q uSet
 . i context'="" s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key_context,subkey) i uSet'="" s app="User.SSUser",activecontext=context q
 . s uSet=##Class(websys.Preferences).GetData("User.SSUser",UserID,key,subkey) s app="User.SSUser",activecontext=""
 i GroupID'="" d  i uSet'="" q uSet
 . i context'="" s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key_context,subkey) i uSet'="" s app="User.SSGroup",activecontext=context q
 . s uSet=##Class(websys.Preferences).GetData("User.SSGroup",GroupID,key,subkey) s app="User.SSGroup",activecontext=""
 i SiteCODE'="" d  i uSet'="" q uSet
 . i context'="" s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key_context,subkey) i uSet'="" s app="SITE",activecontext=context q
 . s uSet=##Class(websys.Preferences).GetData("SITE",SiteCODE,key,subkey) s app="SITE",activecontext=""
 ; Default System
 i context'="" s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key_context,subkey) i uSet'="" s app="SYS",activecontext=context q uSet
 s uSet=##Class(websys.Preferences).GetData("SYS","SYS",key,subkey) s app="SYS",activecontext=""
 q uSet
]]></Implementation>
</Method>

<Method name="KillData">
<Description>
Directly delete preference data</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>objectType:%Library.String,objectReference:%Library.String,appKey:%Library.String,appSubKey:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id,obj
 s id=""
 ;
 ; Try to find an existing setting
 if (objectType="SYS") {
 &sql(SELECT	ID
 INTO :id
 FROM	websys.SysPreferences
 WHERE	(ObjectType = :objectType) AND (ObjectReference=:objectReference) AND (AppKey = :appKey) AND (AppSubKey = :appSubKey))
 ;
 ; nothing to delete
 i 'SQLCODE,+id d ##Class(websys.SysPreferences).%DeleteId(id)
 } else {
 &sql(SELECT	ID
 INTO :id
 FROM	websys.Preferences
 WHERE	(ObjectType = :objectType) AND (ObjectReference=:objectReference) AND (AppKey = :appKey) AND (AppSubKey = :appSubKey))
 ;
 ; nothing to delete
 i 'SQLCODE,+id d ##Class(websys.Preferences).%DeleteId(id)
 }
 q
]]></Implementation>
</Method>

<Method name="LookUpAppSubKeyClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>LookUpAppSubKeyFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;
 k ^TMP("WEB",$J)
 s QHandle=""
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpAppSubKeyExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,AppSubKey:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; 'user' search values, current 'work' values, 
 n user,work
 n appsubkeyfetch,idx,sqlerr
 ;
 &SQL(DECLARE ByAppSubKey CURSOR FOR 
 SELECT DISTINCT BY (AppSubKey) AppSubKey
 FROM websys.Preferences
 )
 k ^TMP("WEB",$J)
 &SQL(OPEN ByAppSubKey)
 s sqlerr=SQLCODE
 while ('sqlerr) {
 &SQL(FETCH ByAppSubKey INTO :appsubkeyfetch)
 s sqlerr=SQLCODE
 if ('sqlerr) { ;cannot use SQLCODE directly as below lines can override SQLCODE
 if (+appsubkeyfetch) s appsubkeyfetch=$lg(##Class(websys.Component).GetCodeDescriptionFromId(appsubkeyfetch),3)
 s idx=##Class(%Library.Collation).AlphaUp(appsubkeyfetch)
 i idx'="" {
 if AppSubKey'="",$zcvt(AppSubKey,"U")=$e($zcvt(appsubkeyfetch,"U"),1,$l(AppSubKey)) s ^TMP("WEB",$J,idx)=$lb(appsubkeyfetch)
 if AppSubKey="" s ^TMP("WEB",$J,idx)=$lb(appsubkeyfetch)
 }
 }
 }
 &SQL(CLOSE ByAppSubKey)
 ;
 s user=$lb(AppSubKey)
 s work=$lb("")
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpAppSubKeyFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>LookUpAppSubKeyExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 n user,work
 n idx
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 s idx=$li(work,1)
 ;
 s Row=""
 s idx=$o(^TMP("WEB",$J,idx))
 i idx="" s AtEnd=1
 i idx'="" s Row=$g(^TMP("WEB",$J,idx))
 ;
 s work=$lb(idx)
 s QHandle=$lb(AtEnd,user,work)
 ;
 Q $$$OK
]]></Implementation>
</Method>

<Method name="LookUpCodeTableClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>LookUpCodeTableFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 n rs
 ;
 s work=$li(QHandle,3)
 ;
 S rs=$li(work,1)
 //SYSTEMOREF i rs d rs.%Close()
 s QHandle=""
 k %trakobjects(+rs) //SYSTEMOREF
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpCodeTableExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,ObjectType:%Library.String="",ObjectReference:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; 'user' search values, current 'work' values, 
 n user,work
 n rs
 ;
 s rs=##Class(%Library.ResultSet).%New("websys.Preferences:LookUpByObjectType")
 s %trakobjects(+rs)=rs //SYSTEMOREF
 d rs.Execute(ObjectType)
 ;
 s user=$lb(ObjectType,ObjectReference)
 s work=$lb(rs)
 s QHandle=$lb(0,user,work)
 ;
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpCodeTableFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>LookUpCodeTableExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Retrieve the current status
 n user,work
 n rs,ObjectType,ObjectReference,desc
 n ObjectReferenceID,obj,match
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s rs=$li(work,1)
 s rs=$g(%trakobjects(+rs)) //SYSTEMOREF
 s ObjectType=$li(user,1)
 s ObjectReference=$li(user,2)
 ;
 s match=0
 do {
 s desc=""
 i 'rs.Next() s AtEnd=1 q
 ;
 ;get row value
 s ObjectReferenceID=rs.Data("ObjectReference")
 if (ObjectType="User.SSUser") s desc=$lg(##Class(web.SSUser).GetCodeDescriptionFromId(ObjectReferenceID),1)
 if (ObjectType="User.SSGroup") s desc=$lg(##Class(web.SSGroup).GetCodeDescriptionFromId(ObjectReferenceID),1)
 i ##Class(%Library.Collation).Upper($e(desc,1,$l(ObjectReference)))=##Class(%Library.Collation).Upper(ObjectReference) s match=1
 } while 'match
 ;
 i AtEnd s Row=""
 i 'AtEnd s Row=$lb(desc)
 s work=$lb(rs)
 ;
 s QHandle=$lb(AtEnd,user,work)
 ;
 Q $$$OK
]]></Implementation>
</Method>

<Method name="SetData">
<Description>
Directly set preference data</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>objectType:%Library.String,objectReference:%Library.String,appKey:%Library.String,appSubKey:%Library.String,Data:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n id,obj
 s id=""
 ;
 ; Try to find an existing setting
 if (objectType="SYS") {
 &sql(SELECT	ID
 INTO :id
 FROM	websys.SysPreferences
 WHERE	(ObjectType = :objectType) AND (ObjectReference=:objectReference) AND (AppKey = :appKey) AND (AppSubKey = :appSubKey))
 ;
 ; Open Existing
 s:'SQLCODE obj=##Class(websys.SysPreferences).%OpenId(id)
 ; Create new
 s:SQLCODE obj=##Class(websys.SysPreferences).%New()
 } else {
 &sql(SELECT	ID
 INTO :id
 FROM	websys.Preferences
 WHERE	(ObjectType = :objectType) AND (ObjectReference=:objectReference) AND (AppKey = :appKey) AND (AppSubKey = :appSubKey))
 ;
 ; Open Existing
 s:'SQLCODE obj=##Class(websys.Preferences).%OpenId(id)
 ; Create new
 s:SQLCODE obj=##Class(websys.Preferences).%New()
 }
 ;
 ; Set the properties
 i obj d
 . s obj.ObjectType=objectType
 . s obj.ObjectReference=objectReference
 . s obj.AppKey=appKey
 . s obj.AppSubKey=appSubKey
 . s obj.Data=Data
 . s bollox=obj.%Save(0)
 . d obj.%Close()
 q
]]></Implementation>
</Method>

<Method name="websysDelete">
<Description>
Delete an instance - this is provided as a wrapper for %DeleteId functionality.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>id:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 i id="" q
 n status
 i id'="",'##Class(websys.Lock).Lock($lb(id,"websys.Preferences"),%session.SessionId,%session.Get("LOGON.USERID"),.status) d  q
 . d msg.AddItem("E","LOCKED",status)
 d ..DeleteLinkedData(id)
 d ##Class(websys.Preferences).%DeleteId(id)
 i ##Class(websys.UserDefinedFunctions).Evaluate("websys.Preferences","OnDelete")
 d ##Class(websys.Lock).LockClear($lb(id,"websys.Preferences"),%session.SessionId)
 q
]]></Implementation>
</Method>

<Method name="websysDeleteAll">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%Library.String=""</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n compid,override
 n rs,ref,SearchCompName,SearchCompID,SSUser,SSGroup,SITE,CTLoc,CTHospital,PACTrust
 ;
 s compid=$e($p(compref,"i",1),2,999)
 s override=$g(%request.Data("TOVERRIDE",1)) ; set to 1 when ok selected in warning message
 d ##Class(websys.Component).GetComponentMessages(.t,"websys.Preferences.List")
 s (UserID,Location,GroupID,Hospital,Trust)=""
 s SearchCompName=$g(%request.Data("COMPNAME",1)),SearchCompID=##Class(websys.Component).GetIdFromCodeOrDescription(SearchCompName)
 s ref=##Class(web.SSUser).GetIdFromCodeOrDescription(%request.Get("SSUser")) s SSUser=ref
 s ref=##Class(web.SSGroup).GetIdFromCodeOrDescription(%request.Get("SSGroup")) s SSGroup=ref
 s SITE=$g(%request.Data("SITE",1))
 s CTLoc="",CTHospital="",PACTrust=""
 ;
 i SSUser_SSGroup_SITE_SearchCompName="" {
 d:msg msg.AddItem("E","",$g(t("DELETEALL_MSG")),compid,"")
 } else {
 s rs=##Class(%ResultSet).%New("websys.Preferences.FindPreferenceAppKey")
 d rs.Execute(SSUser,SSGroup,SITE,SearchCompName,CTLoc,SearchCompID,CTHospital,PACTrust)
 while (rs.Next()) {
 ;d ##Class(websys.Preferences).%DeleteId(rs.Data("ID"))
 d ##Class(websys.Preferences).websysDelete(rs.Data("ID"))
 }
 d rs.%Close()
 }
 ;
 q
]]></Implementation>
</Method>

<Query name="DeleteAll">
<Type>%Library.Query</Type>
<FormalSpec>UserID:%String,GroupID:%String,SiteDesc:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>Select ID
From Preferences
Where (ObjectType = 'User.SSUser' AND ObjectReference = :UserID)
 OR (ObjectType = 'User.SSGroup' AND ObjectReference = :GroupID)
 OR (ObjectType = 'SITE' AND ObjectReference = :SiteDesc)</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%String"/>
</Query>

<Query name="FindByAppSubKey">
<Description>
Used to find layout preferences for a specific component</Description>
<Type>%SQLQuery</Type>
<FormalSpec>AppSubKey:%String</FormalSpec>
<SqlQuery>SELECT ID,AppKey,AppSubKey,Data,ObjectReference,ObjectType FROM Preferences
 WHERE (AppSubKey = :AppSubKey AND AppKey %STARTSWITH 'LAYOUT')</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="FindPreference">
<Type>%Library.Query</Type>
<FormalSpec>UserID:%String,GroupID:%String,SiteDesc:%String,ComponentName:%String,Location:%String,CTHospital:%String,PACTrust:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%String,AppKey:%String,Component:%String,WorkflowID:%String,ObjectType:%String,ObjectReference:%String,ComponentID:%String,context:%String,edittype:%String,savedbydesc:%String,savedbyref:%String"/>
</Query>

<Query name="FindPreferenceAll">
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT ID,AppKey,AppSubKey,ObjectType,ObjectReference
FROM websys.Preferences
ORDER BY AppSubKey</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%String,AppKey:%String,AppSubKey:%String,ObjectType:%String,ObjectReference:%String"/>
</Query>

<Query name="FindPreferenceAppKey">
<Description>
against LAYOUTS AppSubKey stores the component.id
against COLUMNS AppSubKey stores the component.name</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>UserID:%String,GroupID:%String,SiteDesc:%String,ComponentName:%String,Location:%String,CompID:%String="",CTHospital:%String="",PACTrust:%String=""</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT ID,AppKey,AppSubKey,ObjectType,ObjectReference
FROM websys.Preferences
WHERE (ObjectType = 'User.SSUser' AND ObjectReference = :UserID)
 OR (ObjectType = 'User.SSGroup' AND ObjectReference = :GroupID)
 OR (ObjectType = 'SITE' AND %ALPHAUP ObjectReference = %ALPHAUP :SiteDesc)
 OR (%UPPER AppSubKey = %UPPER :ComponentName) OR (AppSubKey = :CompID)
ORDER BY AppSubKey</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%String,AppKey:%String,AppSubKey:%String,ObjectType:%String,ObjectReference:%String"/>
</Query>

<Query name="LookUpAppSubKey">
<Type>%Library.Query</Type>
<FormalSpec>SubAppKey:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Desc:%Library.String"/>
</Query>

<Query name="LookUpByObjectType">
<Type>%Library.SQLQuery</Type>
<FormalSpec>ObjectType:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT DISTINCT BY (ObjectReference) ObjectReference
FROM websys.Preferences
WHERE (ObjectType = :ObjectType)</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ObjectReference:%String"/>
</Query>

<Query name="LookUpCodeTable">
<Type>%Library.Query</Type>
<FormalSpec>ObjectType:%Library.String,ObjectReference:%Library.String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Desc:%Library.String"/>
</Query>

<Query name="LookUpSite">
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT ObjectReference
FROM websys.Preferences
WHERE (ObjectType = 'SITE')</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ObjectType:%Library.String"/>
</Query>

<Query name="LookUpVBGroup">
<Description>
Used in Layout Editor XML functions</Description>
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT SSGRP_DESC, SSGRP_ROWID
FROM SQLUser.SS_GROUP
WHERE SSGRP_ROWID IN
 (
 SELECT	ObjectReference
 FROM	websys.Preferences
 WHERE	(ObjectType = 'User.SSGroup')
 )
ORDER BY SSGRP_DESC</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="Description,HIDDEN"/>
</Query>

<Query name="LookUpVBSite">
<Description>
Used from Layout Editor XML options</Description>
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT DISTINCT BY (ObjectReference) ObjectReference
FROM websys.Preferences
WHERE (ObjectType = 'SITE')</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ObjectReference:%String"/>
</Query>

<Query name="LookUpVBUser">
<Description>
Used from Layout Editor XML options</Description>
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT SSUSR_INITIALS, SSUSR_ROWID, SSUSR_NAME
FROM SQLUser.SS_USER
WHERE SSUSR_ROWID IN
 (
 SELECT	ObjectReference
 FROM	websys.Preferences
 WHERE	(ObjectType = 'User.SSUser')
 )
ORDER BY SSUSR_Initials</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID"/>
<Parameter name="ROWSPEC" value="Code,HIDDEN,Description"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^websys.PreferencesD</DataLocation>
<DefaultData>PreferencesDefaultData</DefaultData>
<IdLocation>^websys.PreferencesD</IdLocation>
<IndexLocation>^websys.PreferencesI</IndexLocation>
<StreamLocation>^websys.PreferencesS</StreamLocation>
<Data name="PreferencesClassName">
<Attribute>%%CLASSNAME</Attribute>
<Structure>node</Structure>
<Subscript>0</Subscript>
</Data>
<Data name="PreferencesDefaultData">
<Structure>listnode</Structure>
<Value name="1">
<Value>AppKey</Value>
</Value>
<Value name="2">
<Value>AppSubKey</Value>
</Value>
<Value name="3">
<Value>Data</Value>
</Value>
<Value name="4">
<Value>ObjectReference</Value>
</Value>
<Value name="5">
<Value>ObjectType</Value>
</Value>
</Data>
<Property name="AppKey"/>
<Property name="AppSubKey"/>
<Property name="Data"/>
<Property name="ObjectReference"/>
<Property name="ObjectType"/>
</Storage>
</Class>
</Export>
