<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.PrintHistory">
<Description>
History of print jobs (and repints)</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.Persistent,websys.Abstract</Super>
<TimeCreated>60218,47035.273537</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="BUILD">
<Internal/>
<Default>616</Default>
</Parameter>

<Parameter name="SQLDATEFROM">
<Internal/>
</Parameter>

<Parameter name="SQLDATETO">
<Internal/>
</Parameter>

<Parameter name="EXTENTSIZE">
<Default>1000000</Default>
</Parameter>

<Parameter name="SQLCODE">
<Default>ID</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Default>ID</Default>
</Parameter>

<Parameter name="SQLROWID">
<Default>ID</Default>
</Parameter>

<Index name="BatchID">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>BatchID</Properties>
<Unique>0</Unique>
</Index>

<Index name="ComputerIndex">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>Computer</Properties>
<Unique>0</Unique>
</Index>

<Index name="DSNIndex">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>DSN</Properties>
<Unique>0</Unique>
</Index>

<Index name="DescriptionIndex">
<Description>
Index for property Description</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>Description</Properties>
<Unique>0</Unique>
</Index>

<Index name="HospitalDRIndex">
<Description>
Index for property HospitalDR</Description>
<Properties>HospitalDR</Properties>
</Index>

<Index name="LocationDRIndex">
<Description>
Index for property LocationDR</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>LocationDR</Properties>
<Unique>0</Unique>
</Index>

<Index name="PrintDateIndex">
<Description>
Index for property PrintDate</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>PrintDate,PrintTime</Properties>
<Unique>0</Unique>
</Index>

<Index name="PrinterDRIndex">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>PrinterDR</Properties>
<Unique>0</Unique>
</Index>

<Index name="ReportDRIndex">
<Description>
Index for property ReportDR</Description>
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>ReportDR</Properties>
<Unique>0</Unique>
</Index>

<Index name="ReportDRP1Index">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>ReportDR,P1</Properties>
<Unique>0</Unique>
</Index>

<Index name="RequestedReportHistoryDRIndex">
<Properties>RequestedReportHistoryDR</Properties>
</Index>

<Index name="StatusIndex">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>Status</Properties>
<Unique>0</Unique>
</Index>

<Index name="UserDRIndex">
<Extent>0</Extent>
<IdKey>0</IdKey>
<PrimaryKey>0</PrimaryKey>
<Properties>UserDR</Properties>
<Unique>0</Unique>
</Index>

<Property name="BatchID">
<Description>
BatchID is only set for members of a Batch Print.
See also BatchSeq</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BatchSeq">
<Description>
Sequence of an Item in a Batch. </Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ChildKeywords">
<Type>websys.PrintHistoryKeywords</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Cardinality>children</Cardinality>
<Collection/>
<Inverse>ParRef</Inverse>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>1</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Computer">
<Description>
Requesting Computer</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DSN">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Description">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ErrorDescription">
<Description>
Description of the error in the event that the print failed.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Filename">
<Description>
User can request the the Report be printed to a file in stead of a Printer. This is the name of the file.
Typically used for Email and faxing</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HospitalDR">
<Description>
(type was User.CTHospital)</Description>
<Type>%String</Type>
<Collection/>
<Relationship>0</Relationship>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LocationDR">
<Description>
Login Location of User calling print
(type was User.CTLoc)</Description>
<Type>%String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailCC">
<Description>
For Email and Faxing</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailFrom">
<Description>
For Email and Faxing</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailMessage">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailSubject">
<Description>
For Email and Faxing</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailTo">
<Description>
For Email and Faxing</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MethodType">
<Type>%Library.String</Type>
<Collection/>
<Relationship>0</Relationship>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="NoofCopies">
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="P1">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P2">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P3">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P4">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P5">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P6">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P7">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P8">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="P9">
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PrintDate">
<Description>
DateTime that the report was Processes(attempted to print)</Description>
<Type>%Library.Date</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="PrintDuration">
<Description>
Print Duration (in seconds)</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PrintTime">
<Description>
DateTime that the report was Processes(attempted to print)</Description>
<Type>%Library.Time</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="PrinterDR">
<Type>websys.Printer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Recipient">
<Type>%Library.String</Type>
<Collection/>
<Relationship>0</Relationship>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReportDR">
<Type>websys.Report</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="Reprint">
<Description>
Log 51153 - AI - 13-07-2005 : Is this entry a reprint ?</Description>
<Type>%Library.Boolean</Type>
<Collection/>
<InitialExpression>0</InitialExpression>
<Relationship>0</Relationship>
</Property>

<Property name="RequestedDate">
<Type>%Library.Date</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>+$h</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="RequestedReportHistoryDR">
<Type>websys.RequestedReportHistory</Type>
<Collection/>
<Relationship>0</Relationship>
</Property>

<Property name="RequestedTime">
<Type>%Library.Time</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<InitialExpression>$p($h,",",2)</InitialExpression>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="SaveOnly">
<Description>
Log 51153 - AI - 13-07-2005 : Should this entry only save to database ?
TPS still processes this entry, but only saves the report to the database. It does not email, fax or print.</Description>
<Type>%Library.Boolean</Type>
<Collection/>
<InitialExpression>0</InitialExpression>
<Relationship>0</Relationship>
</Property>

<Property name="ServiceID">
<Description>
MachineId of the Service that processed the Request</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Status">
<Description>
W - Waiting to Print.
I - Printing in progress,
P - Print processing complete
E - Error - Error description in ErrorDescription
A - Aborted
D - Deferred
B - Printed Batch</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="DISPLAYLIST" value=",Waiting,InProgress,Printed,Error,Aborted,Deferred,Printed Batch"/>
<Parameter name="MAXLEN" value="2"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",W,I,P,E,A,D,B"/>
</Property>

<Property name="UserDR">
<Type>User.SSUser</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Method name="%OnAfterSave">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>insert:%Library.Boolean</FormalSpec>
<Private>0</Private>
<ReturnType>%Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 i 'insert d ##Class(websys.PrintHistoryKeywords).KeywordsDelete(..%Id())
 d ##Class(websys.PrintHistoryKeywords).KeywordsInsert(..%Id(),..Description)
 ; Log 51153 - AI - 23-06-2005 : Call the SQLTrigger if defined.
 i ##Class(websys.UserDefinedFunctions).Evaluate("websys.PrintHistory","OnSQLTrigger")
 ;
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description>
Log 51153 - AI - 28-06-2005 : Create the %old array before saving.</Description>
<CodeMode>code</CodeMode>
<FormalSpec>insert:%Library.Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 k %old
 i 'insert {
 s zrowid=..%Id()
 &SQL(SELECT * INTO :%old() FROM websys.PrintHistory WHERE ID=:zrowid)
 }
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>oid:%Library.ObjectIdentity</FormalSpec>
<Private>0</Private>
<ReturnType>%Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 d ##Class(websys.PrintHistoryKeywords).KeywordsDelete($lg(oid))
 q $$$OK
]]></Implementation>
</Method>

<Method name="AbortJob">
<Description>
If the Print job is currently In Progress this method aborts the job by flagging it to "A"
if the TPS is currently active or if the TPS is not running the job is flagged to "E" with
an appropriate message.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ID:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new PrintJob,ServiceID,ChangeStatus
 set PrintJob=##Class(websys.PrintHistory).%OpenId(ID)
 If PrintJob {
 If PrintJob.Status = "I" {
 Set ServiceID = PrintJob.ServiceID
 If ServiceID = "" {
 set ChangeStatus = "E"
 }
 else {
 If ##Class(websys.PrintService).IsActive(ServiceID){
 set ChangeStatus = "A"
 }
 else {
 set ChangeStatus = "E"
 }
 }
 set PrintJob.Status = ChangeStatus
 set PrintJob.ErrorDescription = "Print job aborted by user."
 d PrintJob.%Save(0)
 d PrintJob.%Close()
 }
 }
]]></Implementation>
</Method>

<Method name="AddItem">
<Description>
Log 51153 - AI - 13-07-2005 : Add the two new fields as parameters 29 and 30 - Reprint and SaveOnly.
NOTE: Parameters 29 and 30 may not be in most calls to AddItem - They are currently only set from the calls that set them to 1.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>userID:%Library.String="",reportID:%Library.String="",printerID:%Library.String="",filename:%Library.String="",P1:%Library.String="",P2:%Library.String="",P3:%Library.String="",P4:%Library.String="",P5:%Library.String="",P6:%Library.String="",P7:%Library.String="",P8:%Library.String="",P9:%Library.String="",printdesc:%Library.String="",status:%Library.String="",MailFrom:%Library.String="",MailTo:%Library.String="",MailCC:%Library.String="",MailSubject:%Library.String="",MailMessage:%Library.String="",Comment:%Library.String="",BatchID:%Library.String="",LocationID:%Library.String="",NoofCopies:%Library.String="",ip:%Library.String="",ReportHistoryID:%Library.String="",MethodType:%String="",Recipient:%String="",Reprint:%Boolean=0,SaveOnly:%Boolean=0</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n obj,save,prtobj
 k ^zwebsysPrintHistory
 s ^zwebsysPrintHistory("AddItem","Testing") = "here"
 s userID=$g(userID)
 s obj=##Class(websys.PrintHistory).%New()
 i obj {
 d obj.UserDRSetObjectId(userID)
 d obj.ReportDRSetObjectId(reportID)
 d obj.LocationDRSetObjectId(LocationID)
 ; BC 11-9-2003 Request Report History
 i ReportHistoryID'="" d obj.RequestedReportHistoryDRSetObjectId(ReportHistoryID)
 ;ADJ 8/10/2002 have changed this so that the Printer ID not the Printer Devicce Name is passed
 ;as an argument into this routine.
 d obj.PrinterDRSetObjectId(printerID)
 ;if printerDevice '="" {
 ;//just in case printer somehow got appended with "|PRN|" at the start
 ;;i $e(printerDevice)="|" s printerDevice=$p(printerDevice,"|",$l(printerDevice,"|"))
 ;
 ;i $e(printerDevice,1,5)="|PRN|" s printerDevice=$e(printerDevice,6,999)
 ;d obj.PrinterDRSetObjectId(##Class(websys.Printer).GetIdFromCodeOrDescription(printerDevice))
 ;New method to get the device. Parameters changed in websys.Printer
 ;d obj.PrinterDRSetObjectId(##Class(websys.Printer).GetIdfromCodeOrDevice(printerDevice))
 ;}
 //TN:26/3/02:field Computer now stores the computer name, not the IP address anymore
 //s obj.Computer=$zu(67,15,$j)
 ;s obj.Computer=##Class(websys.Conversions).GetComputerName($zu(67,15,$j))
 ;KK 18/Jun/2003 Log 36554
 ;s obj.Computer=##Class(websys.Conversions).GetComputerName(ip)
 i '$d(%session) s obj.Computer=##Class(websys.Conversions).GetComputerName(ip)
 i $d(%session) s obj.Computer=%session.Data("COMPUTER_NAME")
 s ^zwebsysReport("Print","ip")=ip_"^printerID"_$g(printerID)_"^dev="_$g(dev)_"P5="_$g(P5)
 s obj.Filename=filename
 s obj.Description=printdesc
 s obj.PrintDate=+$h
 s obj.PrintTime=+$p($h,",",2)
 s obj.RequestedDate=+$h
 s obj.RequestedTime=+$p($h,",",2)
 s obj.P1=P1
 s obj.P2=P2
 s obj.P3=P3
 s obj.P4=P4
 s obj.P5=P5
 s obj.P6=P6
 s obj.P7=P7
 s obj.P8=P8
 s obj.P9=P9
 s obj.Status=status
 s obj.MailFrom=MailFrom
 s obj.MailTo=MailTo
 s obj.MailCC=MailCC
 s obj.MailSubject=MailSubject
 s obj.MailMessage=MailMessage
 s obj.ErrorDescription=Comment
 s obj.MethodType=MethodType
 s obj.Recipient=Recipient
 s obj.BatchID=BatchID
 s obj.NoofCopies=NoofCopies
 ; Log 51153 - AI - 13-07-2005 : Save the two new fields, Reprint and SaveOnly.
 s obj.Reprint=Reprint
 s obj.SaveOnly=SaveOnly
 s status=obj.%Save(0)
 i $d(msg),msg d msg.Status(status)
 d obj.%Close()
 }
 q
]]></Implementation>
</Method>

<Method name="CompleteReport">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ServerName:%Library.String,Status:%Library.String,ErrorMessage:%Library.String,DSN:%Library.String="",Duration:%Library.Integer=0</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;Print Job is complete
 ;Update the status of the Print Job
 ;decrement the ProcessesInUse for the Service

 new ID,Service,ReportType

 set ..Status=Status
 set ..ErrorDescription=ErrorMessage
 set ..DSN = DSN
 set ..PrintDuration=Duration
 do ..%Save(0)

 set ReportType = ..ReportDR.Type


 Set ID = ##Class(websys.PrintService).GetIdFromCodeOrDescription(ServerName)
 If ID {
 Set Service = ##Class(websys.PrintService).%OpenId(ID)
 if (ReportType = "Crystal")!(ReportType = "Cache+Crystal") {
 if (Service.ProcessesInUse > 0){
 set Service.ProcessesInUse = Service.ProcessesInUse - 1
 }
 }
 if ReportType = "Word" {
 if (Service.WordProcessesInUse > 0){
 set Service.WordProcessesInUse = Service.WordProcessesInUse - 1
 }
 }
 if (ReportType = "Cache")!(ReportType = "Other") {
 if (Service.CacheProcessesInUse > 0){
 set Service.CacheProcessesInUse = Service.CacheProcessesInUse - 1
 }
 }
 set Service.UpdateDate=+$h
 Set Service.UpdateTime=+$p($h,",",2)
 do Service.%Save(0)
 do Service.%Close()
 }
 quit
]]></Implementation>
</Method>

<Method name="CreateBatch">
<Description>
The BatchItems argument is a ^ delimited list of PrintHistory IDs that are to be 
processed as a Batch.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;Create Batch
 ;The BatchItems argument is a ^ delmited list of Print History IDs
 ;which need to be included in the Batch
 n i,ID,prtobj,BatchID,BatchItems,compid

 k ^zwebsysPrintHist
 s BatchItems = %request.Get("PrintRowIDs")
 s compid=$e($p(compref,"i",1),2,999)
 s BatchID = ""
 s BatchID = ..GetNewBatchID()	;returned from PrintBatch User Defined counter
 if BatchID = "" {
 d:msg msg.AddItem("E","","User Defined Counter: PRINTBATCH not found ... Batch not created.",compid,"")
 q
 }
 f i=1:1:$L(BatchItems,"^") {
 s ID = $p(BatchItems,"^",i)
 s prtobj = ##Class(websys.PrintHistory).%OpenId(ID)
 if prtobj {
 s prtobj.BatchID = BatchID
 s prtobj.BatchSeq = i
 s prtobj.Status = "W"
 d prtobj.%Save(0)
 d prtobj.%Close()
 }
 }
 ;Now copy the details of the first BatchItem, to create a Batch summary record
 n Batchobj
 s ID = $p(BatchItems,"^",1) 
 s prtobj = ##Class(websys.PrintHistory).%OpenId(ID)
 if prtobj{
 s Batchobj = ##Class(websys.PrintHistory).%New()
 s Batchobj.ReportDR = prtobj.ReportDR
 s Batchobj.UserDR = prtobj.UserDR
 s Batchobj.PrinterDR=prtobj.PrinterDR
 s Batchobj.BatchID = BatchID
 s Batchobj.BatchSeq = 0		;indicates that it's a summary item
 s Batchobj.Computer=prtobj.Computer
 s Batchobj.Filename=""
 s Batchobj.Description="Batch"
 s Batchobj.PrintDate=+$h
 s Batchobj.PrintTime=+$p($h,",",2)
 s Batchobj.RequestedDate=+$h
 s Batchobj.RequestedTime=+$p($h,",",2)
 s Batchobj.Status="W"
 s Batchobj.MailFrom=prtobj.MailFrom
 s Batchobj.MailTo=prtobj.MailTo
 s Batchobj.MailCC=prtobj.MailCC
 s Batchobj.MailSubject=prtobj.MailSubject
 s Batchobj.MailMessage=prtobj.MailMessage
 s Batchobj.ErrorDescription=""
 ;
 d Batchobj.%Save(0)
 d Batchobj.%Close()

 d prtobj.%Close()
 }
 q
]]></Implementation>
</Method>

<Method name="FindClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>FindFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 &SQL(CLOSE PrintHistoryFind)
 s QHandle=""
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindExecute">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%String="",SearchDesc:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 ;
 s SearchDesc=##Class(%Library.Collation).AlphaUp(SearchDesc)
 ;
 &SQL(
 DECLARE PrintHistoryFind CURSOR FOR
 SELECT ID, ReportDR->Description, PrinterDR->Description, PrintDate, PrintTime, UserDR->SSUSR_Initials, Computer, Description
 FROM websys.PrintHistory
 WHERE ((PrintDate >= :DateFrom) OR (:DateFrom IS NULL)) AND ((%ALPHAUP Description [ :SearchDesc) OR (:SearchDesc IS NULL))

 )
 //ORDER BY PrintDate DESC, PrintTime DESC	
 &SQL(OPEN PrintHistoryFind)
 ;
 s user=$lb(DateFrom,SearchString)
 s work=$lb()
 s QHandle=$lb(0,user,work)
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="FindFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>FindExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 n ID,ReportDesc,PrinterDesc,PrintDate,PrintTime,SSUSRInitials,Computer,Description
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 &SQL(FETCH PrintHistoryFind INTO :ID,:ReportDesc,:PrinterDesc,:PrintDate,:PrintTime,:SSUSRInitials,:Computer,:Description)
 i SQLCODE s AtEnd=1
 s Row=""
 i 'AtEnd s Row=$lb(ID,ReportDesc,PrinterDesc,PrintDate,PrintTime,SSUSRInitials,Computer,Description)
 ;
 s QHandle=$lb(AtEnd,user,work)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindForRReportHistoryClose">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>FindForRReportHistoryFetch</PlaceAfter>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 s QHandle=""
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindForRReportHistoryExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,RequestReportHistory:%String=""]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 n user,work
 ;
 s user=$lb(RequestReportHistory)
 s work=$lb()
 s QHandle=$lb(0,user,work)
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="FindForRReportHistoryFetch">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>FindForRReportHistoryExecute</PlaceAfter>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 n user,work
 n ID,ReportID,ReportName,PrintDate,PrintTime,Computer,Filename,User,Location,Status,Printer,NoCopies,Error, MailTo, MailSubject, MethodType, Recipient
 s (ID,ReportID,ReportName,PrintDate,PrintTime,Computer,Filename,User,Location,Status,Printer,NoCopies,Error, MailTo, MailSubject, MethodType, Recipient)=""
 ;
 s AtEnd=$li(QHandle,1)
 s user=$li(QHandle,2)
 s work=$li(QHandle,3)
 ;
 s Row=""
 i 'AtEnd s Row=$lb(ID,ReportID,ReportName,PrintDate,PrintTime,Computer,Filename,User,Location,Status,Printer,NoCopies,Error, MailTo, MailSubject, MethodType, Recipient)
 ;
 s QHandle=$lb(AtEnd,user,work)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindWithStatusClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<PlaceAfter>FindWithStatusFetch</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s QHandle=""
 i $$close^CPrintHistory()
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindWithStatusExecute">
<Description><![CDATA[
Query search precedence order for indexing is: 
=1. User 
=1. Location 
3. BatchOnly flag 
4. Date Printed (date from -> date to) 
5. Status 
=6. Computer 
=6. Printer 
=6. Report 
9. UserDR 
10. Description 
11. DSN ]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%String="",SearchDesc:%Library.String="",Status:%Library.String="",BatchOnly:%Library.Boolean=0,DateTo:%Library.Date="",Computer:%Library.String="",Printer:%Library.String="",User:%Library.String="",Report:%Library.String="",DSN:%Library.String="",Location:%Library.String="",Hospital:%Library.String=""]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n user,work
 s user=$lb(UserID,LocationID,BatchOnlyYN,DateFrom,DateTo,StatusCode,Computer,PrinterID,ReportID,SearchDesc,DSN,HospitalID)
 s work=""
 s QHandle=$lb(0,user,work)
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="FindWithStatusFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<PlaceAfter>FindWithStatusExecute</PlaceAfter>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 s Row=$lb(ID,ReportDesc,PrinterDesc,PrintDate,PrintTime,SSUSRInitials,Computer,Description,Type,ErrorDescr,RequestDate,RequestTime,ServiceID,Status,BatchID,DSN,Location,PrintDuration,Hospital)
 ;
 s QHandle=$lb(AtEnd,user,work)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetLastSeqNo">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>PrintBatchID:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n seqno
 s seqno=""
 ;
 q:PrintBatchID=""
 ;
 &sql(
 SELECT 	BatchSeq
 INTO 	:seqno
 FROM	websys.PrintHistory
 WHERE	BatchID=:PrintBatchID
 ORDER BY ID desc
 )
 ;s ^zrger($zn,"seqno")=seqno
 q seqno
]]></Implementation>
</Method>

<Method name="GetNewBatchID">
<Description>
get a new BatchId fron the User Defined counter "PRINTBATCH"</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;get next PRINTBATCH number
 n row
 s row=$o(^COUNT("CNTTYPE",0,"Desc","PRINTBATCH",""))
 q:'row ""
 q $$counter(row)

counter(cnttype)
 n s1,pref,suf,len,cnt
 q:'cnttype ""
 L +^COUNT("CNTTYPE",cnttype)
 s s1=$g(^COUNT("CNTTYPE",cnttype)),pref=$p(s1,"^",2),suf=$p(s1,"^",3)
 s len=$p(s1,"^",4),cnt=$p(s1,"^",5)
 s cnt=cnt+1
 S $P(^COUNT("CNTTYPE",cnttype),"^",5)=cnt
 L -^COUNT("CNTTYPE",cnttype)
 Q pref_$$LPAD1(cnt,"0",len)_suf

LPAD1(STRING,SUB,LENGTH)	;
 N RES S STRING=$G(STRING),LENGTH=$G(LENGTH)
 S:'$G(LENGTH) LENGTH=8
 S $P(RES,SUB,LENGTH)=SUB
 Q $E(RES,1,LENGTH-$L(STRING))_$E(STRING,1,LENGTH)
]]></Implementation>
</Method>

<Method name="GetNextReport">
<Description>
KM 27-Nov-2001</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ServerName:%Library.String,Type:%Library.String="",BatchID:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new ReportID,RS,PrintJob,PrintRequestAccepted,Locked
 ;
 set ReportID = ""
 set Locked= 0
 ;k ^zGetNextReport
 ;s ^zGetNextReport(0) = Type


 //Get list of printers in use AR 25/10/2005
 n PrinterCount,PRINTER,PrinterArray,reportprinter,PrinterInUse,x
 s (PrinterCount,PRINTER,PrinterArray,reportprinter,PrinterInUse,x)=""

 &sql(
 DECLARE PRINTERINIUSE CURSOR FOR
 select distinct printerdr
 from websys.printhistory
 where status='I'
 )

 &sql(OPEN PRINTERINIUSE)
 s PrinterCount=0
 WHILE 'SQLCODE {
	 &sql(FETCH PRINTERINIUSE INTO :PRINTER)
	 i 'SQLCODE {
	 	s PrinterCount=PrinterCount+1
 s PrinterArray(PrinterCount)=PRINTER
	 }
 }
 &sql(CLOSE PRINTERINIUSE)
 //End new code


 ;Select the right query to use
 if BatchID '= "" {
 ;This will be the case when a Batch summary (Defined as BatchID IS NOT NULL and BatchSeq = )
 ;asks for it's sub items.
 ;s ^zGetNextReport(1) = "In Batch sub items"
	 set RS=##Class(%Library.ResultSet).%New("websys.PrintHistory:FindBatchItems")
 if RS {
 ;s ^zGetNextReport(2) = "In BatchSub items - executing"
 do RS.Execute(BatchID,"W")
 } else {
 quit ReportID
 }	
 } elseif (Type = "Cache")!(Type = "Other") {
 ;s ^zGetNextReport(1) = "In Cache/Other"
 set RS=##Class(%Library.ResultSet).%New("websys.PrintHistory:FindByStatusCacheOther")
 if RS {
 ;s ^zGetNextReport(2) = "In Cache/Other- executing"
 do RS.Execute("W")
 } else {
 quit ReportID
 }
 } elseif (Type = "Crystal") {
 ;s ^zGetNextReport(1) = "In Crystal"
 set RS=##Class(%Library.ResultSet).%New("websys.PrintHistory:FindByStatusCrystal")
 if RS {
 ;s ^zGetNextReport(2) = "In Crystal - executing"
 do RS.Execute("W")
 //check to see if report is going to a printer that is already in use

 } else {
 quit ReportID
 }
 } elseif (Type = "Word"){
 ;s ^zGetNextReport(1) = "In Crystal/Word"
 set RS=##Class(%Library.ResultSet).%New("websys.PrintHistory:FindByStatus")
 If RS { 
 ;s ^zGetNextReport(2) = "In Crystal/Word- executing"
 do RS.Execute("W",Type)
 } else {
 quit ReportID
 }
 }
 while RS.Next() {
 set ReportID=RS.Data("ID")
 set PrintJob=##Class(websys.PrintHistory).%OpenId(ReportID)
 if PrintJob{
 ; We have a Priont job ... now to see if we get a lock for it.
 ;If we can claim it ... If we can't try the next record
 set Locked = ##Class(websys.PrintHistory).LockRecord(ReportID)
 if (Locked) {
 ;There is a Print Job to do ...  now see if Licensing or Processing limits
 ;will allow it
 if BatchID '= "" {
 ;don't bother to check for Licensing and or processing limits, because
 ;the Batch summary record that made this request has requested a process
 ;slot on behalf of it's sub item records. When all sub items have been 
 ;processed, the Batch sumarry records will complete and release it's process slot
 set PrintRequestAccepted = 1
 } else {

	 			//check to see if report is going to a printer that is already in use AR 25/10/05
	 			s PrinterInUse=0
	 			
		 		&sql(select printerdr
				into :reportprinter
				from websys.printhistory
				where id=:ReportID)
				
				s ^zGetNextReport("reportprinter",ReportID)=reportprinter
				s ^zGetNextReport("PrinterCount",ReportID)=PrinterCount
				f x=1:1:PrinterCount {
					i PrinterArray(x)=reportprinter s PrinterInUse=1
					s ^zGetNextReport("PrinterArray",ReportID)=PrinterArray(x)
				}
 }

 i PrinterInUse=1 {
	 			Set PrintRequestAccepted = ""
 }else{
	 			//END OF NEW CODE

 ;Used By Non batched items and Batch summary records
 set PrintRequestAccepted=##Class(websys.PrintService).RequestNewProcess(ServerName,PrintJob.ReportDR.Type)
 }
 s ^zGetNextReport("PrintRequestAccepted",ReportID)=PrintRequestAccepted
 if PrintRequestAccepted {
 ;Request Granted
 ;update the status of the Requested Item to show that it 
 ;has been consumed by the Service. The Service is now
 ;been allocated this print job.
 set PrintJob.PrintDate=$h
 Set PrintJob.PrintTime=$p($h,",",2)
 set PrintJob.Status="I"
 set PrintJob.ServiceID=ServerName
 do PrintJob.%Save(0)
 }else {
 ;Request to print has been rejected because there 
 ;were no licenses available.
 Set ReportID = ""
 }
 ;unl ock
 lock -^websys.PrintHistoryD(ReportID)
 }
 do PrintJob.%Close()
 If (ReportID){
 ;If were able to lock do not try another record
 ;quit *Commented out AR 25/10/2005* ...we want to loop through records
 q
 }
 }
 }
 do RS.Close()	;closes the query
 do RS.%Close()	;close the object
 quit ReportID
]]></Implementation>
</Method>

<Method name="HasPrinted">
<Description>
SA 23.7.02 - log 26835: Leon has added a new index to this class - ReportDRP1Index.
This line of the query:
AND ((P1 = :P1) OR ((P1 IS NULL) AND (:P1 IS NULL)))
has been replaced by: 
AND (P1 = :P1)
to utilise the new index on P1.

This assumes all calls to here utilise P1. If at a later stage we find that this is not the case, Leon
has suggested a mask method be used that determines the number of blank params, and set number
of passing params for the report.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>report:%Library.String,P1:%Library.String="",P2:%Library.String="",P3:%Library.String="",P4:%Library.String="",P5:%Library.String="",P6:%Library.String="",P7:%Library.String="",P8:%Library.String="",P9:%Library.String=""</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n got,repID
 s got=0
 s repID=##Class(websys.Report).GetIdFromCodeOrDescription(report)
 ;
 ; LOG 36301 RC 26/06/03 Had to rewrite this query for a cache report because this query required you to pass in ALL the 
 ; variables that you were using to do the check, including the device data, which at this point in time was simply 
 ; unattainable without any major hacking.
 ;
 ;&sql( SELECT ID FROM websys.PrintHistory
 ;WHERE ReportDR = :repID 
 ;AND (P1 = :P1)
 ;AND ((P2 = :P2) OR ((P2 IS NULL) AND (:P2 IS NULL)))
 ;AND ((P3 = :P3) OR ((P3 IS NULL) AND (:P3 IS NULL)))
 ;AND ((P4 = :P4) OR ((P4 IS NULL) AND (:P4 IS NULL)))
 ;AND ((P5 = :P5) OR ((P5 IS NULL) AND (:P5 IS NULL)))
 ;AND ((P6 = :P6) OR ((P6 IS NULL) AND (:P6 IS NULL)))
 ;AND ((P7 = :P7) OR ((P7 IS NULL) AND (:P7 IS NULL)))
 ;AND ((P8 = :P8) OR ((P8 IS NULL) AND (:P8 IS NULL)))
 ;AND ((P9 = :P9) OR ((P9 IS NULL) AND (:P9 IS NULL)))
 ;)
 &sql( SELECT ID FROM websys.PrintHistory
 WHERE ReportDR = :repID 
 AND (P1 = :P1)
 AND ((P2 = :P2) OR (:P2 IS NULL))
 AND ((P3 = :P3) OR (:P3 IS NULL))
 AND ((P4 = :P4) OR (:P4 IS NULL))
 AND ((P5 = :P5) OR (:P5 IS NULL))
 AND ((P6 = :P6) OR (:P6 IS NULL))
 AND ((P7 = :P7) OR (:P7 IS NULL))
 AND ((P8 = :P8) OR (:P8 IS NULL))
 AND ((P9 = :P9) OR (:P9 IS NULL))
 )
 i (SQLCODE = 100) s got = 0
 if (SQLCODE = 0) s got = 1
 q got
]]></Implementation>
</Method>

<Method name="LockRecord">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ID:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new Flag

 set Flag = 1
 lock +^websys.PrintHistoryD(ID):1 else  set Flag = 0
 quit Flag
]]></Implementation>
</Method>

<Method name="MailOrFaxFile">
<Description>
Mails or faxes the FileName using MailFrom,MailTo</Description>
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&Message:%Library.String]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 d ##Class(websys.Mail).JobItem(..MailFrom,..MailTo,..MailCC,..MailSubject,..MailMessage,..Filename)
 s Message="Mail/Fax Attatchment = "_..Filename
 q 1
]]></Implementation>
</Method>

<Method name="MailOrFaxPDF">
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&Message:%Library.String,filepath]]></FormalSpec>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
 d ##Class(websys.Mail).JobItem(..MailFrom,..MailTo,..MailCC,..MailSubject,..MailMessage,filepath)
 s Message="Mail/Fax Attatchment = "_filepath
 q 1
]]></Implementation>
</Method>

<Method name="Reprint">
<Description>
Log 53052 - AI - 03-08-2005 : Add the 6th parameter, "NoCopies", for the number of copies of this reprint.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>id:%Library.String,printer:%Library.String,userid:%Library.String="",nrrhid:%Library.String="",Recipient:%String="",NoCopies:%Integer=1</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;This reprint always creates a new entry in PrintHistory
 n (msg,%request,%session,id,printer,userid,nrrhid,Recipient,NoCopies)
 s obj=##Class(websys.PrintHistory).%OpenId(id,0)
 i obj d
 . n p1,p2,p3,p4,p5,p6,p7,p8,p9,filename,dev,rptid,printdesc,userid,queueStatus,locationid,rptobj
 . s p1=obj.P1,p2=obj.P2,p3=obj.P3,p4=obj.P4,p5=obj.P5,p6=obj.P6,p7=obj.P7,p8=obj.P8,p9=obj.P9
 . s rptid=obj.ReportDR.%Id()
 . i nrrhid="" s nrrhid=obj.RequestedReportHistoryDR.%Id()
 . s filename=obj.Filename
 . s printdesc=obj.Description
 . d obj.%Close()
 . ;
 . s (userid,locationid)=""
 . if $d(%session) d
 . . s userid=%session.Get("LOGON.USERID")
 . . s locationid=%session.Get("LOGON.CTLOCID")
 . s queueStatus="W"
 . ; if it's a printer
 . s (dev,prid,MailFrom,MailTo,MailCC,MailSubject,MailMessage,MethodType,refdets)=""
 . ;s ^zTRAK("karthi","Reprint","2")="printer="_$g(printer)_"^dev="_$g(dev)
 . i printer'="" d
 . . s prid=##Class(websys.Printer).GetIdFromCodeOrDescription(printer)
 . . ;s ^zTRAK("karthi","Reprint","3")="prid="_$g(prid)_"^dev="_$g(dev)
 . . if prid'="" d
 . . . s priobj=##Class(websys.Printer).%OpenId(prid)
 . . . i priobj d
 . . . . s dev=priobj.Device
 . . . . s MethodType="P"
 . . . . d priobj.%Close()
 . . . . ;s ^zTRAK("karthi","Reprint","4")="prid="_$g(prid)_"^dev="_$g(dev)
 . . . ;TP log 51272: unable to take reprint to another printer
 . . . ;because we know for Cache reports that the 'dev' variable is a standard parameter we can override it with the new printer
 . . . s rptobj=##class(websys.Report).%OpenId(rptid)
 . . . i rptobj,rptobj.Type="Cache" d
 . . . . i rptobj.P1["(dev)" s p1=dev
 . . . . i rptobj.P2["(dev)" s p2=dev
 . . . . i rptobj.P3["(dev)" s p3=dev
 . . . . i rptobj.P4["(dev)" s p4=dev
 . . . . i rptobj.P5["(dev)" s p5=dev
 . . . . i rptobj.P6["(dev)" s p6=dev
 . . . . i rptobj.P7["(dev)" s p7=dev
 . . . . i rptobj.P8["(dev)" s p8=dev
 . . . . i rptobj.P9["(dev)" s p9=dev
 . . . . ;s ^zTRAK("karthi","Reprint","5","Report")=rptobj.Code_"^"_rptobj.Description
 . . . d rptobj.%Close()
 . . ; Log 53052 - AI - 04-08-2005 : Get the Recipient.
 . . s refdets=Recipient
 . . s obj.Recipient=Recipient
 . . ; end Log 53052
 . e  d
 . . ; else it's an email..
 . . s doc=$p(Recipient,"^")
 . . s clin=$p(Recipient,"^",2)
 . . d ##class(web.PAAdmDischargeSummary).GetFaxMailDets(doc, clin, .meth, .To, .From, .subject, .refdets)
 . . s MailFrom=From
 . . s MailTo=To
 . . s MailCC=""
 . . s MailSubject=subject
 . . s MailMessage=obj.MailMessage
 . . i MailMessage = "" s MailMessage = "Discharge Summary"
 . . s MethodType=meth
 . . s obj.Recipient=refdets
 . ;
 . i (MailTo_dev)="" d
 . . //i $d(msg),msg d msg.AddItem("E",t("Printer"),printer_t("XINVALID"))
 . . i $d(msg),msg d msg.AddItem("E","Printer or email",printer_" is invalid")
 . e  d
 . . // TP Log 32386: Replace retired method PrintReport
 . . //d ##Class(websys.Report).PrintReport(rptid,prid,userid,filename,p1,p2,p3,p4,p5,p6,p7,p8,p9,printdesc)
 . . ;s ^zTRAK("karthi","Reprint","10")="prid="_prid_"^printdesc="_$g(printdesc)_"^userid="_$g(userid)_"^nrrhid="_$g(nrrhid)_"^Recipient="_$g(Recipient)_"^NoCopies="_$g(NoCopies)
 . . ; Log 51153 - AI - 13-07-2005 : Add the two new fields as parameters 29 and 30 - Reprint and SaveOnly.
 . . ; Log 53052 - AI - 03-08-2005 : Send the new 6th input parameter "NoCopies" through to the PrintHistory.AddItem as parameter 24, so the user receives the required number of copies.
 . . ; ClassMethod AddItem(userID,reportID,printerID,filename,P1,P2,P3,P4,P5,P6,P7,P8,P9,printdesc,status,MailFrom,MailTo,MailCC,MailSubject,MailMessage,Comment,BatchID,LocationID,NoofCopies,ip,ReportHistoryID,MethodType,Recipient,Reprint,SaveOnly)
 . . d ##Class(websys.PrintHistory).AddItem(userid,rptid,prid,filename,p1,p2,p3,p4,p5,p6,p7,p8,p9,printdesc,queueStatus,MailFrom,MailTo,MailCC,MailSubject,MailMessage,"","",locationid,NoCopies,"",nrrhid,MethodType,refdets,1,0)
 ; TP 29/01/03: removed the below line of code - why was it here???
 //s %request.Data("DateFrom",1)=##Class(websys.Conversions).DateLogicalToHtml(+$h)
 q
]]></Implementation>
</Method>

<Method name="ReprintBatch">
<Description>
*********************************************

METHOD NO LONGER USED - SEE ReprintSelected.

This method may be resurrected if a site wants to reprint an entire Batch as a Batch.

*********************************************

Log 56363 - AI - 20-10-2005 : Modify method to be run by the TPS. 13 Batchobj properties fixed. Old code commented next to new code.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;RePrint Selected Batch
 ;The BatchItems argument is a ^ delmited list of Print History IDs
 n i,ID,prtobj,BatchID,BatchItems,compid,Batchobj,seqno,userid,locid,ip,repcode,prtstr,prt
 s (userid,locid,ip,repcode)=""
 i $d(%session) {
 s userid=%session.Get("LOGON.USERID")
 s locid=%session.Get("LOGON.CTLOCID")
 s ip=%session.Get("REMOTE_ADDR")
 }
 s seqno=0
 s BatchItems = %request.Get("RowIDs")
 ;s ^zrger($zn,"BatchItems")=BatchItems
 q:BatchItems=""
 s compid=$e($p(compref,"i",1),2,999)
 s BatchID = %request.Get("BatchID")
 i BatchID = "" {
 d:msg msg.AddItem("E","","BATCHID not found ... Batch not created.",compid,"")
 q
 }
 ;s ^zrger($zn,"BatchID")=BatchID
 ; Get the last batch sequence no
 s seqno=..GetLastSeqNo(BatchID)
 ;
 f i=1:1:$L(BatchItems,"^") {
 s ID = $p(BatchItems,"^",i)
 s prtobj = ##Class(websys.PrintHistory).%OpenId(ID)
 if prtobj {
 s seqno=seqno+1
 s Batchobj = ##Class(websys.PrintHistory).%New()
 if Batchobj {
 s Batchobj.BatchID=""  ;BatchID
 s Batchobj.BatchSeq=""  ;seqno
 s Batchobj.Computer=##Class(websys.Conversions).GetComputerName(ip)  ;prtobj.Computer
 s Batchobj.DSN=""  ;prtobj.DSN
 s Batchobj.Description=prtobj.Description
	 		s Batchobj.ErrorDescription=""  ;prtobj.ErrorDescription
	 		s Batchobj.Filename=prtobj.Filename
	 		d Batchobj.LocationDRSetObjectId(locid)  ;s Batchobj.LocationDR=prtobj.LocationDR
	 		s Batchobj.MailCC=prtobj.MailCC
	 		s Batchobj.MailFrom=prtobj.MailFrom
	 		s Batchobj.MailMessage=prtobj.MailMessage
	 		s Batchobj.MailSubject=prtobj.MailSubject
	 		s Batchobj.MailTo=prtobj.MailTo
	 		s Batchobj.NoofCopies=prtobj.NoofCopies
	 		s Batchobj.P1=prtobj.P1
	 		s Batchobj.P2=prtobj.P2
	 		s Batchobj.P3=prtobj.P3
	 		s Batchobj.P4=prtobj.P4
	 		s Batchobj.P5=prtobj.P5
	 		s Batchobj.P6=prtobj.P6
	 		s Batchobj.P7=prtobj.P7
	 		s Batchobj.P8=prtobj.P8
	 		s Batchobj.P9=prtobj.P9
	 		s Batchobj.PrintDate=""  ;+$h
	 		s Batchobj.PrintDuration=""  ;prtobj.PrintDuration
	 		s Batchobj.PrintTime=""  ;+$p($h,",",2)
	 		s repcode=""
	 		;i prtobj.ReportDR {
		 	;	s repcode=prtobj.ReportDR.Code
	 		;}
	 		;s prtstr=##Class(websys.Print).GetPrinter(repcode,locid,ip,"")
	 		;s prt=$li($g(^websys.PrintD($p(prtstr,"^",2))),3)
	 		;d Batchobj.PrinterDRSetObjectId(prt)  ;s Batchobj.PrinterDR=prtobj.PrinterDR
	 		s Batchobj.PrinterDR=prtobj.PrinterDR
	 		s Batchobj.ReportDR=prtobj.ReportDR
	 		s Batchobj.RequestedDate=+$h
	 		s Batchobj.RequestedTime=+$p($h,",",2)
	 		s Batchobj.ServiceID=""  ;prtobj.ServiceID
	 		s Batchobj.Status="W"  ;prtobj.Status
	 		d Batchobj.UserDRSetObjectId(userid)  ;s Batchobj.UserDR=prtobj.UserDR
	 		;
	 		d Batchobj.%Save(0)
	 		d Batchobj.%Close()
 }
 d prtobj.%Close()
 }
 }
 ;
 q
]]></Implementation>
</Method>

<Method name="ReprintSelected">
<Description>
Log 56363 - AI - 20-10-2005 : New method similar to PrintBatch. Resubmits only the selected jobs as individuals (ad-hoc).
Modify method to be run by the TPS. 13 Batchobj properties fixed. Old code commented next to new code.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%Library.String</FormalSpec>
<Implementation><![CDATA[
 ;RePrint Selected items from a batch
 ;The BatchItems argument is a ^ delmited list of Print History IDs
 n i,ID,prtobj,BatchID,BatchItems,compid,Batchobj,seqno,userid,locid,ip,repcode,prtstr,prt
 s (userid,locid,ip)=""
 i $d(%session) {
 s userid=%session.Get("LOGON.USERID")
 s locid=%session.Get("LOGON.CTLOCID")
 s ip=%session.Get("REMOTE_ADDR")
 }
 s seqno=0
 s BatchItems = %request.Get("RowIDs")
 q:BatchItems=""
 s compid=$e($p(compref,"i",1),2,999)
 s BatchID = %request.Get("BatchID")
 i BatchID = "" {
 d:msg msg.AddItem("E","","BATCHID not found ... Batch not created.",compid,"")
 q
 }
 ; Get the last batch sequence no
 s seqno=..GetLastSeqNo(BatchID)
 ;
 f i=1:1:$L(BatchItems,"^") {
 s ID = $p(BatchItems,"^",i)
 s prtobj = ##Class(websys.PrintHistory).%OpenId(ID)
 if prtobj {
 s seqno=seqno+1
 s Batchobj = ##Class(websys.PrintHistory).%New()
 if Batchobj {
 s Batchobj.BatchID=""  ;BatchID
 s Batchobj.BatchSeq=""  ;seqno
 s Batchobj.Computer=##Class(websys.Conversions).GetComputerName(ip)  ;prtobj.Computer
 s Batchobj.DSN=""  ;prtobj.DSN
 s Batchobj.Description=prtobj.Description
	 		s Batchobj.ErrorDescription=""  ;prtobj.ErrorDescription
	 		s Batchobj.Filename=prtobj.Filename
	 		d Batchobj.LocationDRSetObjectId(locid)  ;s Batchobj.LocationDR=prtobj.LocationDR
	 		s Batchobj.MailCC=prtobj.MailCC
	 		s Batchobj.MailFrom=prtobj.MailFrom
	 		s Batchobj.MailMessage=prtobj.MailMessage
	 		s Batchobj.MailSubject=prtobj.MailSubject
	 		s Batchobj.MailTo=prtobj.MailTo
	 		s Batchobj.NoofCopies=prtobj.NoofCopies
	 		s Batchobj.P1=prtobj.P1
	 		s Batchobj.P2=prtobj.P2
	 		s Batchobj.P3=prtobj.P3
	 		s Batchobj.P4=prtobj.P4
	 		s Batchobj.P5=prtobj.P5
	 		s Batchobj.P6=prtobj.P6
	 		s Batchobj.P7=prtobj.P7
	 		s Batchobj.P8=prtobj.P8
	 		s Batchobj.P9=prtobj.P9
	 		s Batchobj.PrintDate=""  ;+$h
	 		s Batchobj.PrintDuration=""  ;prtobj.PrintDuration
	 		s Batchobj.PrintTime=""  ;+$p($h,",",2)
	 		s repcode=""
	 		;i prtobj.ReportDR {
		 	;	s repcode=prtobj.ReportDR.Code
	 		;}
	 		;s prtstr=##Class(websys.Print).GetPrinter(repcode,locid,ip,"")
	 		;s prt=$li($g(^websys.PrintD($p(prtstr,"^",2))),3)
	 		;d Batchobj.PrinterDRSetObjectId(prt)  ;s Batchobj.PrinterDR=prtobj.PrinterDR
	 		s Batchobj.PrinterDR=prtobj.PrinterDR
	 		s Batchobj.ReportDR=prtobj.ReportDR
	 		s Batchobj.RequestedDate=+$h
	 		s Batchobj.RequestedTime=+$p($h,",",2)
	 		s Batchobj.ServiceID=""  ;prtobj.ServiceID
	 		s Batchobj.Status="W"  ;prtobj.Status
	 		d Batchobj.UserDRSetObjectId(userid)  ;s Batchobj.UserDR=prtobj.UserDR
	 		;
	 		d Batchobj.%Save(0)
	 		d Batchobj.%Close()
 }
 d prtobj.%Close()
 }
 }
 ;
 q
]]></Implementation>
</Method>

<Method name="ResetToWaiting">
<Description>
Reads all PrintRequests with a Status of I = In Progress
For each Print Request that has been stamped by ServerName, return the Status to Waiting.
These Print request Items have been left hanging by some sort of a crash ... the ain is to
recover them ... but can only do this for Print Request belonging to the Calling Server</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ServerName:%Library.String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new ReportID,RS,PrintJob,PrintRequestAccepted,Locked,ServiceID
 ; log 25610	jobs now set to "E" to prevent recycling of problem jobs
 set ReportID = ""
 set Locked= 0
 set RS=##Class(%Library.ResultSet).%New("websys.PrintHistory:FindByStatus")
 if RS {
 do RS.Execute("I","") 
 while RS.Next() {
 set ServiceID = RS.Data("ServiceID")
 if ServiceID = ServerName {
 set PrintJob =##Class(websys.PrintHistory).%OpenId(RS.Data("ID"))
 set ReportID=RS.Data("ID")
 set PrintJob=##Class(websys.PrintHistory).%OpenId(ReportID)
 set PrintJob.Status = "E"
 set PrintJob.ErrorDescription = "TPS terminated unexpectely while job was in Progress."
 do PrintJob.%Save(0)
 do PrintJob.%Close()
 }
 }
 do RS.Close()
 }
 quit
]]></Implementation>
</Method>

<Query name="Find">
<Description>
Standard Type Items by Type</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,SearchDesc:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,ReportDesc,PrinterDesc,PrintDate:%Date,PrintTime:%Time,SSUSRInitials,Computer,Description"/>
</Query>

<Query name="FindBatchItems">
<Type>%Library.SQLQuery</Type>
<FormalSpec>BatchID,Status</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery><![CDATA[select ID, ReportDR->Type, ServiceID
From websys.PrintHistory
where (Status=:Status)
and (BatchID=:BatchID)]]></SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Type,ServiceID"/>
</Query>

<Query name="FindBatchItemsAll">
<Type>%Library.SQLQuery</Type>
<FormalSpec>BatchID</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery><![CDATA[Select ID,ReportDR->Description, PrinterDR->Description, PrintDate, PrintTime, UserDR->SSUSR_Initials, Computer, Description, ReportDR->Type, ErrorDescription, RequestedDate, RequestedTime, ServiceID, Status, BatchID
from websys.PrintHistory
where BatchID=:BatchID and BatchSeq > 0
Order BY BatchSeq]]></SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,ReportDesc,PrinterDesc,PrintDate:%Date,PrintTime:%Time,SSUSRInitials,Computer,Description,Type,ErrorDescr,RequestDate:%Date,RequestTime:%Time,ServiceID,Status,BatchID"/>
</Query>

<Query name="FindByStatus">
<Type>%Library.SQLQuery</Type>
<FormalSpec>status,type</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery><![CDATA[select ID, ReportDR->Type, ServiceID
From websys.PrintHistory
where (Status=:status)
AND ID IN (
 SELECT ID 
 FROM websys.PrintHistory
	 where ((ReportDR->Type=:type) or (:type is NULL))
	 and (BatchSeq=0 OR BatchID IS NULL))
order by ReportDR->PrintPriority desc, RequestedDate, RequestedTime]]></SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Type,ServiceID"/>
</Query>

<Query name="FindByStatusCacheOther">
<Description>
Used by GetNextProcess for retreiving Cache or Other Reports in one go. 
Otherwise it's too inefficent.</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>status</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery><![CDATA[select ID, ReportDR->Type, ServiceID
From websys.PrintHistory
where (Status=:status)
AND ID IN (
 SELECT ID 
 FROM websys.PrintHistory
 where (ReportDR->Type IN ('Cache','Other'))
	 and (BatchSeq=0 OR BatchID IS NULL)) 
order by ReportDR->PrintPriority desc, RequestedDate, RequestedTime]]></SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Type,ServiceID"/>
</Query>

<Query name="FindByStatusCrystal">
<Description>
The select statement returns 
Print History items of ReportType Crystal or Cache+Crystal</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>status</FormalSpec>
<SqlProc>0</SqlProc>
<SqlQuery><![CDATA[select ID, ReportDR->Type, ServiceID
From websys.PrintHistory
where (Status=:status)
AND ID IN (
 SELECT ID 
 FROM websys.PrintHistory
 where (ReportDR->Type IN ('Crystal','Cache+Crystal'))
	 and (BatchSeq=0 OR BatchID IS NULL)) 
order by ReportDR->PrintPriority desc, RequestedDate, RequestedTime]]></SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Type,ServiceID"/>
</Query>

<Query name="FindForRReportHistory">
<Type>%Query</Type>
<FormalSpec>RequestReportHistory:%String=""</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%String,ReportID:%String,ReportName:%String,PrintDate:%Date,PrintTime:%String,Computer:%String,Filename:%String,User:%String,Location:%String,Status:%String,Printer:%String,NoCopies:%String,Error:%String,MailTo,MailSubject,MethodType,Recipient"/>
</Query>

<Query name="FindWithStatus">
<Description>
Standard Type Items by Type</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,SearchDesc:%String,Status:%String,BatchOnly:%Boolean,DateTo:%Date,Computer:%String,Printer:%String,User:%String,Report:%String,DSN:%String,Location:%String,Hospital:%String</FormalSpec>
<SqlProc>0</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,ReportDesc,PrinterDesc,PrintDate:%Date,PrintTime:%Time,SSUSRInitials,Computer,Description,Type,ErrorDescr,RequestDate:%Date,RequestTime:%Time,ServiceID,Status,BatchID,DSN,Location,PrintDuration:%Integer,Hospital"/>
</Query>

<Trigger name="OnAfterInsert">
<Code> d ##Class(websys.PrintHistoryKeywords).KeywordsInsert({ID},{Description})</Code>
<Event>INSERT</Event>
<Order>1</Order>
<Time>AFTER</Time>
</Trigger>

<Trigger name="OnAfterUpdate">
<Code> d ##Class(websys.PrintHistoryKeywords).KeywordsDelete({ID})
 d ##Class(websys.PrintHistoryKeywords).KeywordsInsert({ID},{Description})</Code>
<Event>UPDATE</Event>
<Order>2</Order>
<Time>AFTER</Time>
</Trigger>

<Trigger name="OnBeforeDelete">
<Code> d ##Class(websys.PrintHistoryKeywords).KeywordsDelete({ID})</Code>
<Event>DELETE</Event>
<Order>3</Order>
</Trigger>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^websys.PrintHistoryD</DataLocation>
<DefaultData>PrintHistoryDefaultData</DefaultData>
<IdLocation>^websys.PrintHistoryD</IdLocation>
<IndexLocation>^websys.PrintHistoryI</IndexLocation>
<StreamLocation>^websys.PrintHistoryS</StreamLocation>
<Data name="PrintHistoryClassName">
<Attribute>%%CLASSNAME</Attribute>
<Structure>node</Structure>
<Subscript>0</Subscript>
</Data>
<Data name="PrintHistoryDefaultData">
<Structure>listnode</Structure>
<Value name="1">
<Value>Computer</Value>
</Value>
<Value name="2">
<Value>Description</Value>
</Value>
<Value name="3">
<Value>P1</Value>
</Value>
<Value name="4">
<Value>P2</Value>
</Value>
<Value name="5">
<Value>P3</Value>
</Value>
<Value name="6">
<Value>P4</Value>
</Value>
<Value name="7">
<Value>P5</Value>
</Value>
<Value name="8">
<Value>P6</Value>
</Value>
<Value name="9">
<Value>P7</Value>
</Value>
<Value name="10">
<Value>P8</Value>
</Value>
<Value name="11">
<Value>P9</Value>
</Value>
<Value name="12">
<Value>PrintDate</Value>
</Value>
<Value name="13">
<Value>PrintTime</Value>
</Value>
<Value name="14">
<Value>PrinterDR</Value>
</Value>
<Value name="15">
<Value>RePrints</Value>
</Value>
<Value name="16">
<Value>ReportDR</Value>
</Value>
<Value name="17">
<Value>UserDR</Value>
</Value>
<Value name="18">
<Value>Filename</Value>
</Value>
<Value name="19">
<Value>Status</Value>
</Value>
<Value name="20">
<Value>ErrorDescription</Value>
</Value>
<Value name="21">
<Value>RequestedDate</Value>
</Value>
<Value name="22">
<Value>RequestedTime</Value>
</Value>
<Value name="23">
<Value>ServiceID</Value>
</Value>
<Value name="24">
<Value>MailCC</Value>
</Value>
<Value name="25">
<Value>MailFrom</Value>
</Value>
<Value name="26">
<Value>MailMessage</Value>
</Value>
<Value name="27">
<Value>MailSubject</Value>
</Value>
<Value name="28">
<Value>MailTo</Value>
</Value>
<Value name="32">
<Value>BatchID</Value>
</Value>
<Value name="33">
<Value>BatchSeq</Value>
</Value>
<Value name="34">
<Value>DSN</Value>
</Value>
<Value name="35">
<Value>PrintDuration</Value>
</Value>
<Value name="36">
<Value>LocationDR</Value>
</Value>
<Value name="37">
<Value>NoofCopies</Value>
</Value>
<Value name="38">
<Value>RequestedReportHistoryDR</Value>
</Value>
<Value name="39">
<Value>MethodType</Value>
</Value>
<Value name="40">
<Value>Recipient</Value>
</Value>
<Value name="41">
<Value>Reprint</Value>
</Value>
<Value name="42">
<Value>SaveOnly</Value>
</Value>
<Value name="43">
<Value>HospitalDR</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
