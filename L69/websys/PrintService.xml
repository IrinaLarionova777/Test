<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.PrintService">
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.Persistent,websys.Abstract</Super>
<TimeCreated>60218,47035.318419</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="BUILD">
<Internal/>
<Default>183</Default>
</Parameter>

<Parameter name="SQLDATEFROM">
<Internal/>
</Parameter>

<Parameter name="SQLDATETO">
<Internal/>
</Parameter>

<Parameter name="EXTENTSIZE">
<Default>9</Default>
</Parameter>

<Parameter name="SQLCODE">
<Description><![CDATA[
Used to control sql fields to be used in generated queries.<br>
Applies to LookupExecute,Fetch,Close.<br>
Applies to GetIdFromCodeOrDescription.<br>]]></Description>
<Final>0</Final>
<Default>ServerName</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Final>0</Final>
<Default>ServerName</Default>
</Parameter>

<Parameter name="SQLROWID">
<Default>ID</Default>
</Parameter>

<Property name="Active">
<Description>
Set true when the service is started
and Registers with the database.</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="CacheProcessesAllowed">
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="CacheProcessesInUse">
<Description>
Current number of Cache Processes</Description>
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="CurrentConfig">
<Description>
Receives a string from the Print Service when it is started, 
that can be used for diagnostics. It will detail the Printers 
that the service can access and the Path to the Crystal reports directory.</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="GlobalCrystalLicenses">
<Description>
Is a copy of websys.Configuration.CrystalRptLicences.
This property property created to save processing time.
See it's use in RequestNewProcess</Description>
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="GroupLimited">
<Description>
Set True if the Service participates in the Total License 
limit for the organisation. e.g. The number of print processes
that can run at any one time = 25
There may be 3 machines each with a limit of 10 per machine.
If they participate in the group limit of 25, this will take precedence 
over the sum of individual limits = 30</Description>
<Type>%Library.Boolean</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ProcessesAllowed">
<Description>
Max number of allowed (licensed) concurrent print processes 
for this server.
-1 for unlimited</Description>
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ProcessesInUse">
<Description>
The curernt number of processes in use for this server.</Description>
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="ServerName">
<Description>
Host Name of the server running the print service</Description>
<Type>%Library.String</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UpdateDate">
<Description>
DateTime of last contact with service. Sett notes in Udate Time</Description>
<Type>%Library.Date</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="UpdateTime">
<Description><![CDATA[
DateTime of Last contact with service.
Use the dateTime combination to determine if a Service is Active.
A service should be making contact with in seconds.
If the time since the last contact runs to 1 minute and the number of
processes in use = 0 assume that the service has been stopped/paused.
If the time since the last update > 10 minutes and the number 
of processes in use > 0 then THERE IS A PROBLEM.]]></Description>
<Type>%Library.Time</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="WordProcessesAllowed">
<Description>
Limits the number of Word processes that can run on an individual TPS</Description>
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Property name="WordProcessesInUse">
<Description>
Current Word Processes running</Description>
<Type>%Library.Integer</Type>
<Final>0</Final>
<Calculated>0</Calculated>
<Collection/>
<MultiDimensional>0</MultiDimensional>
<Private>0</Private>
<Relationship>0</Relationship>
<Required>0</Required>
<SqlComputed>0</SqlComputed>
<Transient>0</Transient>
</Property>

<Method name="CloseObjects">
<Description>
same as $System.OBJ.CLoseObjects()</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[$$KillAllObjects^%apiOBJ()
]]></Implementation>
</Method>

<Method name="CreateNewService">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new Service

 set Service=##Class(websys.PrintService).%New()
 set Service.ServerName=%request.Get("ServerName")
 do Service.%Save(0)
 do Service.%Close()
 quit


]]></Implementation>
</Method>

<Method name="IsActive">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ID:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;test to see if the service is Active by Attempting to lock
 ;the PrintService record. if this succeeds the the Service is 
 ;not active.
 n Locked
 ;
 s Locked = 1
 lock +^websys.PrintServiceD(ID):0 else  s Locked = 0
 if Locked {
 ;having gained the lock we now know the service is Active
 ;Now we need to release the lock just gained.
 lock -^websys.PrintServiceD(ID)
 ;Service is not active
 quit 0
 } else  {
 quit 1
 }
]]></Implementation>
</Method>

<Method name="Register">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>Config:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;The Service Starting on ServerName wants to Register.
 ;Returns true if the ServerName has an entry in this table.
 ;i.e an Administrator must add an entry for every Server that
 ;can run the service.
 new ID,flag,True,False,Licenses
 set True=1
 set False=0
 set flag=False
 ; Assume it's not locked by another process !!
 set ID = ..%Id()
 ;aj I commented the following line out as TPS was unable to
 ;reconnect to Database as the previous process still had a lock
 ;lock +^websys.PrintServiceD(ID):0 else  quit 0
 ;

 ;Service is regigistering ... must have zero existing services
 Set ..UpdateTime=+$p($h,",",2)
 Set ..UpdateDate=+$h
 Set ..Active=True
 Set ..ProcessesInUse=0
 Set ..WordProcessesInUse=0
 Set ..CacheProcessesInUse=0
 Set ..CurrentConfig=Config
 ;Make a copy of websys.configuration.CrystalRptLicences to save time later
 &sql(Select CrystalRptLicenses into :Licenses from websys.Configuration where ID=1)
 set ..GlobalCrystalLicenses=Licenses
 do ..%Save(0)
 ;recover an Print Requests that this service may have left behind from a 
 ;previous crash
 do ##Class(websys.PrintHistory).ResetToWaiting(..ServerName)
 quit True
 ;


]]></Implementation>
</Method>

<Method name="RequestNewProcess">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ServerName:%Library.String,JobType:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;Step 1 See if Service has Licenses available
 ;Step 2 See if Configuration has a global License limit
 ;
 New ID,Config,LicenseMax,TotalUsed,Service, UpdateService
 New True,False
 ;
 set True = 1
 Set False = 0
 Set UpdateService = False
 ;
 Set ID=##Class(websys.PrintService).GetIdFromCodeOrDescription(ServerName)
 if ID {
 Set Service=##Class(websys.PrintService).%OpenId(ID)
 if (JobType = "Crystal")!(JobType = "Cache+Crystal") {
 if (Service.ProcessesAllowed < 0) {
 ;This Service is not processing crystal reports
 Do Service.%Close()
 quit False
 }
 if (Service.ProcessesAllowed > 0) {
 if (Service.ProcessesInUse = Service.ProcessesAllowed){
 ;Service has already exceeded it's own maximum
 Do Service.%Close()
 quit False
 }
 }
 if (Service.GroupLimited ){
 ;Service participates in Group Limit
 ;ADJ 17/09/2002 changed the way the Global Licence limit is read. 
 ;This method will saves having to read the Configuration record 
 ;for every Crystal reports job.
 ;
 ;Set Config=##Class(websys.Configuration).%OpenId(1)
 ;set LicenseMax = Config.CrystalRptLicenses
 Set LicenseMax = Service.GlobalCrystalLicenses
 if (LicenseMax > 0) {
 set TotalUsed = ##Class(websys.PrintService).TotalInUse(True,ID)
 if (TotalUsed < LicenseMax ) {
 ;The global Limit has not been reached either
 Set UpdateService = True
 }
 }
 else {
 ;There is no global maximum so proceed
 Set UpdateService = True
 }
 }
 else {
 ;Service does not participate in the Group Limit so Proceeed
 Set UpdateService = True
 }
 if UpdateService {
 Set Service.Active=True
 Set Service.ProcessesInUse = Service.ProcessesInUse + 1
 Set Service.UpdateDate=+$h
 Set Service.UpdateTime=+$p($h,",",2)
 Do Service.%Save(0)
 Do Service.%Close()
 quit True
 }
 else {
 ;request has been rejected
 Do Service.%Close()
 quit False
 }
 }
 if JobType = "Word" {
 if (Service.WordProcessesAllowed > 0) {
 If (Service.WordProcessesInUse < Service.WordProcessesAllowed){
 Set UpdateService = True
 }
 }
 if (Service.WordProcessesAllowed = 0) {
 ;Service has no process limits for Word (Not advisable)
 set UpdateService = true
 }
 if (Service.WordProcessesAllowed < 0) {
 ;This service does not process Word reports
 Set UpdateService = false
 }
 if UpdateService {
 Set Service.Active=True
 Set Service.WordProcessesInUse = Service.WordProcessesInUse + 1
 Set Service.UpdateDate=+$h
 Set Service.UpdateTime=+$p($h,",",2)
 Do Service.%Save(0)
 Do Service.%Close()
 quit True
 }
 else {
 ;request has been rejected
 Do Service.%Close()
 quit False
 }
 }
 if (JobType = "Cache")!(JobType = "Other") {
 if (Service.CacheProcessesAllowed > 0) {
 If (Service.CacheProcessesInUse < Service.CacheProcessesAllowed){
 Set UpdateService = True
 }
 }
 if (Service.CacheProcessesAllowed = 0) {
 ;Service has no process limits for Word (Not advisable)
 set UpdateService = true
 }
 if (Service.CacheProcessesAllowed < 0) {
 ;This service does not process Word reports
 Set UpdateService = false
 }
 if UpdateService {
 Set Service.Active=True
 Set Service.CacheProcessesInUse = Service.CacheProcessesInUse + 1
 Set Service.UpdateDate=+$h
 Set Service.UpdateTime=+$p($h,",",2)
 Do Service.%Save(0)
 Do Service.%Close()
 quit True
 }
 else {
 ;request has been rejected
 Do Service.%Close()
 quit False
 }
 }
 else {
 Do Service.%Close()
 quit False
 }
 }
 else { 
 ;Service was not found !!!
 quit False 
 }



]]></Implementation>
</Method>

<Method name="TotalInUse">
<Description>
Calculates the number of concurrent Print Processes running at this moment over the whole Organisation.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>GroupOnly:%Library.Boolean,SelfID:%Library.String</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Integer</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;If GroupOnly = true
 ;	Totals the number of Print Processes running now, on Services flagped as 
 ;	participating in ther Group Limit
 ;If GroupOnly = false
 ;	Total all Print Processes
 ;
 ;Uses locking technique to determine if a Service is active:
 ;	When the service is started it is registers via the Register method of this class.
 ;	The register method will place the lock for the service.
 ;	The advantage of using locking is that it will be automatically be dropped
 ;	if the service is terminated abnormally.
 ;Needs to know the ID of the calling Service because the calling service will 
 ;always gain the lock because it has the same process ID as current lock for
 ;this service.
 new RS,Total,ID,ActiveService
 ;
 Set Total = 0
 set RS=##Class(%Library.ResultSet).%New("websys.PrintService:FindAllServices")
 if RS {
 do RS.Execute() 
 while RS.Next(){
 s ActiveService = 0
 s ID = RS.Data("ID")
 if (ID = SelfID ) {
 ;This service is active because it's making the call.
 s ActiveService = 1
 }else {
 ;if the lock request fails, this means the service has
 ;the lock which means that it is active.
 s ActiveService = ##Class(websys.PrintService).IsActive(ID)
 }
 If ActiveService {
 If (GroupOnly ){
 If (RS.Data("GroupLimited")) {
 Set Total = Total + RS.Data("ProcessesInUse")
 }
 }else {
 Set Total = Total + RS.Data("ProcessesInUse")
 }	
 }
 }
 do RS.Close()
 do RS.%Close()
 }
 q Total	
]]></Implementation>
</Method>

<Method name="UnRegister">
<Final>0</Final>
<ClassMethod>0</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ;The Service runing on ServerName is closing down
 new ID,flag,Service,True,False
 set True=1
 set False=0
 set flag=False
 ;Record for this Server has been found
 Set ..Active=False
 ;Service is regigistering ... must have zero existing services
 Set ..ProcessesInUse=0
 Set ..UpdateTime=+$p($h,",",2)
 Set ..UpdateDate=+$h
 Set ..CurrentConfig="Closed"
 do ..%Save(0)
 ;
 Set ID = ..%Id()
 ;aj No longer locking
 ;lock -^websys.PrintServiceD(ID)

 q True	



]]></Implementation>
</Method>

<Query name="FindAllPrinters">
<Description>
Used by the TPS to test the configuration</Description>
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>Select ID,Code,Description,Device from websys.Printer
</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID,Code,Description,Device"/>
</Query>

<Query name="FindAllServices">
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT ID, Active, CurrentConfig, GroupLimited, ProcessesAllowed, ProcessesInUse, ServerName, UpdateDate, UpdateTime, WordProcessesAllowed, WordProcessesInUse, CacheProcessesAllowed, CacheProcessesInUse 
FROM PrintService

</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Active:%Library.Boolean,CurrentConfig:%Library.String,GroupLimited:%Library.Boolean,ProcessesAllowed:%Library.Integer,ProcessesInUse:%Library.Integer,ServerName:%Library.String,UpdateDate:%Library.Date,UpdateTime:%Library.Time,WordProcessesAllowed:%Library.Integer,WordProcessesInUse:%Library.Integer,CacheProcessesAllowed:%Library.Integer,CacheProcessesInUse:%Library.Integer"/>
</Query>

<Query name="FindReportDSNS">
<Description>
Some reports specify and overriding DSN. This query returns all distinct values.</Description>
<Type>%Library.SQLQuery</Type>
<SqlProc>0</SqlProc>
<SqlQuery>SELECT DISTINCT DSN	
from websys.Report 
where (DSN IS NOT NULL)
</SqlQuery>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="DSN"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^websys.PrintServiceD</DataLocation>
<DefaultData>PrintServiceDefaultData</DefaultData>
<IdLocation>^websys.PrintServiceD</IdLocation>
<IndexLocation>^websys.PrintServiceI</IndexLocation>
<StreamLocation>^websys.PrintServiceS</StreamLocation>
<Data name="PrintServiceClassName">
<Attribute>%%CLASSNAME</Attribute>
<Structure>node</Structure>
<Subscript>0</Subscript>
</Data>
<Data name="PrintServiceDefaultData">
<Structure>listnode</Structure>
<Value name="1">
<Value>ProcessesAllowed</Value>
</Value>
<Value name="2">
<Value>ProcessesInUse</Value>
</Value>
<Value name="3">
<Value>ServerName</Value>
</Value>
<Value name="4">
<Value>Active</Value>
</Value>
<Value name="5">
<Value>CurrentConfig</Value>
</Value>
<Value name="6">
<Value>GroupLimited</Value>
</Value>
<Value name="7">
<Value>UpdateDate</Value>
</Value>
<Value name="8">
<Value>UpdateTime</Value>
</Value>
<Value name="9">
<Value>CacheProcessesAllowed</Value>
</Value>
<Value name="10">
<Value>CacheProcessesInUse</Value>
</Value>
<Value name="11">
<Value>WordProcessAllowed</Value>
</Value>
<Value name="12">
<Value>WordProcessesInUse</Value>
</Value>
<Value name="13">
<Value>WordProcessedAllowed</Value>
</Value>
<Value name="14">
<Value>WordProcessesAllowed</Value>
</Value>
<Value name="15">
<Value>GlobalCrystalLicences</Value>
</Value>
<Value name="16">
<Value>GlobalCrystalLicenses</Value>
</Value>
</Data>
<Property name="Active"/>
<Property name="CacheProcessesAllowed"/>
<Property name="CacheProcessesInUse"/>
<Property name="CurrentConfig"/>
<Property name="GlobalCrystalLicenses"/>
<Property name="GroupLimited"/>
<Property name="ProcessesAllowed"/>
<Property name="ProcessesInUse"/>
<Property name="ServerName"/>
<Property name="UpdateDate"/>
<Property name="UpdateTime"/>
<Property name="WordProcessesAllowed"/>
<Property name="WordProcessesInUse"/>
</Storage>
</Class>
</Export>
