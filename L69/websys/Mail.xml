<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.Mail">
<Description>
wrapper for mail</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>60218,47035.149439</TimeCreated>

<Parameter name="SQLCODE">
<Default>ID</Default>
</Parameter>

<Parameter name="SQLDESCRIPTION">
<Default>ID</Default>
</Parameter>

<Parameter name="SQLROWID">
<Default>ID</Default>
</Parameter>

<Method name="AddItem">
<Description><![CDATA[
Single line method of sending simple mail plus attachments.<br>
From<br>
To - multiple addressees may be separated with ;<br>
CC - multiple CC's may be separated with;<br>
Subject - required !<br>
Message - single string or array.<br>
Attachments - zero or more files names mat be separated with ;.<br> Filename is relative to the cache server processing the mail request.
<br>
Mail server information is taken from the configuration.]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[From:%Library.String,To:%Library.String,CC:%Library.String,Subject:%Library.String,&Message:%Library.String,Attachment:%Library.String]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 #include %occOptions
 #include %occStatus
 ;
 n length,msgpart,cdev
 ;
 ; Capture current device
 s cdev=$i
 ;
 n s,m,config,j,status,file,dir,att,delim
 ;
 s config=##Class(websys.Configuration).%OpenId(1,0)
 i config {
 i config.SMTPServer'="" {
 set s=##class(%Net.SMTP).%New()
 set s.smtpserver=config.SMTPServer
 set s.timezone="+1100" ; Good for sydney summer
 set s.AllowHeaderEncoding=0
 set m=##class(%Net.MailMessage).%New()
 set m.From=From
 ; Add multiple recipients
 for j=1:1:$l(To,";") { if $p(To,";",j)'="" do m.To.Insert($p(To,";",j)) }
 ; Add multiple Cc
 for j=1:1:$l(CC,";") { if $p(CC,";",j)'="" do m.Cc.Insert($p(CC,";",j)) }
 ;
 set m.Subject=Subject
 ;
 ; Single line message
 i $d(Message)#10=1 do m.TextData.Write(Message)
 i $d(Message)>1 {
 s j="" f  s j=$o(Message(j)) q:j=""  d m.TextData.Write(Message(j))
 }
 ;
 ; any attachment
 for j=1:1:$l(Attachment,";") { 
 if $p(Attachment,";",j)'="" {
				s att=$p(Attachment,";",j)
 ; find directory/file delimiter
 s delim="\" i $p(att,"/",2)'="" s delim="/"
 //break up into dir and file (just so attach file can put it back together!)
 w !,$p(att,delim,1,$l(att,delim)-1)_delim
 w !,$p(att,delim,$l(att,delim))
 d m.AttachFile($p(att,delim,1,$l(att,delim)-1)_delim,$p(att,delim,$l(att,delim)))
 }
 }
 ;
 do m.TextData.Write($char(13,10))
 set status=s.Send(m)
 if $$$ISERR(status) {
 do DecomposeStatus^%occSystem(status,.err)
 ; NEED TO DO SOMETHING WITH ERRORS
 zw err
 ;s j="" f  s j=$o(err(j)) q:j=""  i $d(msg) d msg.AddItem("E",j,err(j))
 }
 do m.%Close() do s.%Close()
 } else {
 ; NEED TO DO SOMETHING WITH ERRORS
 w !,"SMTPServer not specified in configuration"
 d:$d(msg) msg.AddItem("E","CONFIG","SMTPServer not specified in configuration")
 }
 d config.%Close()
 }
 ;
 ; reset current device
 u cdev
 ;
 Q $$$OK
]]></Implementation>
</Method>

<Method name="JobAddItem">
<Description>
Invokes AddItem as a background job.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[From:%Library.String,To:%Library.String,CC:%Library.String,Subject:%Library.String,&Message:%Library.String,Attachment:%Library.String]]></FormalSpec>
<Implementation><![CDATA[
 ; Warning this works as a side effect of AddItem and Job item being compiled to the same routine
 d ..AddItem(From,To,CC,Subject,Message,Attachment)
 q
]]></Implementation>
</Method>

<Method name="JobItem">
<Description>
Invokes AddItem as a background job.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[From:%Library.String,To:%Library.String,CC:%Library.String,Subject:%Library.String,&Message:%Library.String,Attachment:%Library.String]]></FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 ; Warning this works as a side effect of AddItem and Job item being compiled to the same routine
 j zJobAddItem(From,To,CC,Subject,Message,Attachment)
 q
]]></Implementation>
</Method>

<Method name="websysSave">
<Description><![CDATA[
Default save method used for updating the database for Components of type Edit.<br>
<br>
The compref is the  component reference which is the string from which we can deduce the instance of<BR>
websysComponent<BR>
websysComponentItem<BR>
id is the id for the instance of class we wish to update.]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>compref:%String,id:%String</FormalSpec>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 #include %occOptions
 #include %occStatus
 ;
 n From,To,CC,Subject,Message,data,length,msgpart
 ;
 s From="MEDTRAK@TRAK.COM.AU"
 s To=%request.Get("To")
 s CC=%request.Get("CC")
 s Subject=%request.Get("Subject")
 s Message=%request.Get("Message")
 ;
 n s,m,config,j,status
 ;
 s config=##Class(websys.Configuration).%OpenId(1)
 i config {
 i config.SMTPServer'="" {
 set s=##class(%Net.SMTP).%New()
 set s.smtpserver=config.SMTPServer
 set s.timezone="+1100" ; Good for sydney summer
 set m=##class(%Net.MailMessage).%New()
 set m.From=From
 ; Add multiple recipients
 for j=1:1:$l(To,";") { if $p(To,";",j)'="" do m.To.Insert($p(To,";",j)) }
 ; Add multiple Cc
 for j=1:1:$l(CC,";") { if $p(CC,";",j)'="" do m.Cc.Insert($p(CC,";",j)) }
 ;
 set m.Subject=Subject
 ;
 do m.TextData.Write(Message)
 ;
 ; any attachment
 i %request.IsDefinedMimeData("Attachment"),%request.GetMimeData("Attachment").Size {
 s msgpart=##class(%Net.MailMessagePart).%New()
 ;
 ; All files are handled as binary.
 s msgpart.IsBase64=1,stream=msgpart.BinaryData,msgpart.IsBinary=1
 ;
 ; Read the MIME data and Write to the message part
 s length=%request.GetMimeData("Attachment").Size
 do {
 s data=%request.GetMimeData("Attachment").Read(16384)
 d stream.Write(data)
 } while %request.GetMimeData("Attachment").AtEnd=0
 ;
 s count=m.Parts.Count()+1
 s msgpart.FileName=%request.GetMimeData("Attachment").FileName
 d m.Parts.SetAt(msgpart,count)
 s m.IsMultiPart=1
 d msgpart.%Close()
 }
 ;
 do m.TextData.Write($char(13,10))
 set status=s.Send(m)
 if $$$ISERR(status) {
 do DecomposeStatus^%occSystem(status,.err)
 s j="" f  s j=$o(err(j)) q:j=""  i $d(msg) d msg.AddItem("E",j,err(j))
 }
 do m.%Close() do s.%Close()
 } else {
 d:$d(msg) msg.AddItem("E","CONFIG","SMTPServer not specified in configuration")
 }
 d config.%Close()
 }
 Q $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
