<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="websys.SessionEvents">
<Description>
Session Managment</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.SessionEvents</Super>
<TimeCreated>60218,47035.428613</TimeCreated>

<Method name="OnEndSession">
<Description><![CDATA[
Called when the session is about to be deleted, either because of a timeout (in which case
<method>OnTimeout</method> is called first) or because the application
has explicitly closed this session. Use the %session object to examine this session. If you wish to
abort this deletion then:
<example>
Set %session.EndSession=0
</example>]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 k ^TMP("find",%session.SessionId)
 k ^TMP("reload",%session.SessionId)
 k ^TMP("donemethod",%session.SessionId)
 k ^websys.MessageD(%session.SessionId)
 d ##Class(websys.Lock).LockClearSession(%session.SessionId)
 k ^TMP("WEB",%session.SessionId)
 k ^TMP("WEB2",%session.SessionId)
 k ^TMP("WEB",$j)  //this $j might not be the same process no. as when the global was created even within the same session
 k ^TMP("WEB2",$j)  //this $j might not be the same process no. as when the global was created even within the same session

 Quit
]]></Implementation>
</Method>

<Method name="OnStartSession">
<Description>
Called when a new session is created and its values are initialised.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ Quit
]]></Implementation>
</Method>

<Method name="OnTimeout">
<Description><![CDATA[
Called when the CSP Daemon times out out this session before calling <method>EndSession</method>.
Use the %session object to examine this session. If you wish to
abort this deletion then:
<example>
Set %session.EndSession=0
</example>]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[ Quit
]]></Implementation>
</Method>

<Method name="SessionExpired">
<Description>
Wrapper to determine if there is a valid session</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<Private>0</Private>
<ReturnType>%Library.Boolean</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 n expired
 s expired=$l(%session.Get("LOGON.USERID"))=0
 i 'expired {
	 //save the session to refresh the timeout
 	//d %session.%Save()
 	;d ##Class(websys.License).License()
 } else {
 	s %response.ServerSideRedirect="logonexpired.csp"
 	;
 	; Save %response info as it will disappear due to redirect
 	d ##Class(websys.Conversions).SaveRequest()
 	;d ##Class(websys.License).UnLicense()
 }
 q expired
]]></Implementation>
</Method>

<Method name="websysMenuChange">
<Description>
called from websys.csp to clear/set any locked data when changing menus (not completing workflows)</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>newMenuId:%Library.String=""</FormalSpec>
<Implementation><![CDATA[]]></Implementation>
</Method>
</Class>
</Export>
