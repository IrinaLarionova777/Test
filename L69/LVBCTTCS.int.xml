<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBCTTCS" type="INT" languagemode="0" generated="1"><![CDATA[
LVBCTTCS ; IG 1/5/98 ; LVB Control data access for CTTCS CT_TestCodeTestSet
 ;
 ; supported calls:
 ;
 ; $$insert^LVBCTTCS(par)
 ; $$delete^LVBCTTCS(ROWID)
 ; $$update^LVBCTTCS(ROWID)
 ; $$select^LVBCTTCS(ROWID,skip)
 ; $$open^LVBCTTCS(par,skip)
 ; $$fetch^LVBCTTCS(par,skip)
 ; $$close^LVBCTTCS()
 ;
 ;
  ;---&sql(DECLARE CTTCS CURSOR FOR SELECT * FROM CT_TestCodeTestSet
   ;---         WHERE CTTCS_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 ;
open(par,skip) s par=$g(par),skip=$g(skip)
  ;---&SQL(OPEN CTTCS)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTTCS0o
 q 0
 ;
fetch(par,skip) k PLIST s par=$g(par),skip=$g(skip)
  ;---&SQL(FETCH CTTCS INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Do
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ;
close()  ;---&SQL(CLOSE CTTCS)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTTCS0c
 q 0
 ;
select(RowID,skip) s RowID=$g(RowID),skip=$g(skip) k PLIST
  ;---&sql( SELECT * INTO :PLIST() FROM CT_TestCodeTestSet WHERE CTTCS_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Fo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ;
insert(par) d pre("N") s PLIST(0)=$g(par) K PLIST(1),PLIST(2)
  ;---&sql(INSERT INTO CT_TestCodeTestSet VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Ho
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
update(RowID) d pre("Y") s RowID=$g(RowID)
  ;---&sql(UPDATE CT_TestCodeTestSet VALUES :PLIST() WHERE CTTCS_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Jo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
delete(RowID) s RowID=$g(RowID)
  ;---&sql(DELETE FROM CT_TestCodeTestSet WHERE CTTCS_RowID = :RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0Lo
 q SQLCODE
 ;
 ; Adjust certain fields
pre(xUpdate) d PreSQL^SSUTIL4()
 q
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 i $g(skip)="Y" q
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$selskip^LVBCTTS(plist(2))
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 ;
 q
 ;
 q
%CTTCS0o s $zt="%CTTCS0E" s SQLCODE=$s($g(%CTTCS0c):-101,1:0) q:SQLCODE'=0  s %CTTCS0d(9)=0 s %CTTCS0d(10)=0,%CTTCS0d(11)=""
 s %CTTCS0d(6)=$g(par)
 s %CTTCS0c=1 q
%CTTCS0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %CTTCS0c,%CTTCS0d,%CTTCS0E,%CTTCS0l,%CTTCS0n,%CTTCS0R,%CTTCS0Z q
%0Afirst 
 ; asl MOD# 2
 s %CTTCS0d(1)=%CTTCS0d(6)
 i %CTTCS0d(1)="" g %0ABdun
 s %CTTCS0d(3)=""
%0ABk1 s %CTTCS0d(3)=$o(^TTAB("TC",%CTTCS0d(1),1,%CTTCS0d(3)))
 i %CTTCS0d(3)="" g %0ABdun
 s %CTTCS0d(19)=$g(^TTAB("TC",%CTTCS0d(1),1,%CTTCS0d(3)))
 s %CTTCS0d(4)=$p(%CTTCS0d(19),"\",1) s %CTTCS0d(5)=$p(%CTTCS0d(19),"\",2)
 s %CTTCS0d(2)=(%CTTCS0d(1))_"||"_(%CTTCS0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTAB("TC",$p(%CTTCS0d(2),"||",1),1,$p(%CTTCS0d(2),"||",2))#"S":$zu(115,4) i $t { s %CTTCS0d(10)=1,%CTTCS0d(11)=$name(^TTAB("TC",$p(%CTTCS0d(2),"||",1),1,$p(%CTTCS0d(2),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_TestCodeTestSet for RowID value: "_%CTTCS0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %CTTCS0d(8)=$p(%CTTCS0d(2),"||"),%CTTCS0d(3)=$p(%CTTCS0d(2),"||",2)
 i %CTTCS0d(8)'="",%CTTCS0d(3)'="",$d(^TTAB("TC",%CTTCS0d(8),1,%CTTCS0d(3)))
 e  g %0ACdun
 s %CTTCS0d(27)=$g(^TTAB("TC",%CTTCS0d(8),1,%CTTCS0d(3)))
 s %CTTCS0d(4)=$p(%CTTCS0d(27),"\",1) s %CTTCS0d(5)=$p(%CTTCS0d(27),"\",2)
 s %CTTCS0d(1)=$p(%CTTCS0d(2),"||")
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %CTTCS0d(9)=%CTTCS0d(9)+1,%ROWCOUNT=%CTTCS0d(9),%ROWID=%CTTCS0d(2),%CTTCS0c=10 q
%CTTCS0f i '$g(%CTTCS0c) { s SQLCODE=-102 q  } i %CTTCS0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%CTTCS0d(9))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%CTTCS0d(9),%CTTCS0c=100 q  } g %0Afirst:%CTTCS0c=1
%0ACdun i $zu(115,2)=1,$g(%CTTCS0d(10))=1 { l -@%CTTCS0d(11) s %CTTCS0d(10)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%CTTCS0d(9),SQLCODE=100,%CTTCS0c=100 q
%CTTCS0c i '$g(%CTTCS0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%CTTCS0d(9)),1:0)
 i $zu(115,2)=1,$g(%CTTCS0d(10))=1 { l -@%CTTCS0d(11) } k %CTTCS0c,%CTTCS0d,%CTTCS0E,%CTTCS0l,%CTTCS0n,%CTTCS0R,%CTTCS0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %CTTCS0c=100 q
%0Do d %CTTCS0f q:SQLCODE'=0
 s PLIST(0)=%CTTCS0d(1),PLIST(1)=%CTTCS0d(2),PLIST(2)=%CTTCS0d(3),PLIST(3)=%CTTCS0d(4),PLIST(4)=%CTTCS0d(5)
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Ferr" s %mmmsqld(10)=0,%mmmsqld(11)=""
 s %mmmsqld(7)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(7)
 s %mmmsqld(9)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(9)'="",PLIST(2)'="",$d(^TTAB("TC",%mmmsqld(9),1,PLIST(2)))
 e  g %0FBdun
 s %mmmsqld(19)=$g(^TTAB("TC",%mmmsqld(9),1,PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(19),"\",1) s PLIST(4)=$p(%mmmsqld(19),"\",2)
 s PLIST(0)=$p(PLIST(1),"||")
 g:$zu(115,2)=0 %0FBuncommitted i $zu(115,2)=1 l +^TTAB("TC",$p(PLIST(1),"||",1),1,$p(PLIST(1),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(10)=1,%mmmsqld(11)=$name(^TTAB("TC",$p(PLIST(1),"||",1),1,$p(PLIST(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_TestCodeTestSet for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(9)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(9)'="",PLIST(2)'="",$d(^TTAB("TC",%mmmsqld(9),1,PLIST(2)))
 e  g %0FCdun
 s %mmmsqld(27)=$g(^TTAB("TC",%mmmsqld(9),1,PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(27),"\",1) s PLIST(4)=$p(%mmmsqld(27),"\",2)
 s PLIST(0)=$p(PLIST(1),"||")
%0FBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FCdun i $zu(115,2)=1,$g(%mmmsqld(10))=1 { l -@%mmmsqld(11) s %mmmsqld(10)=0 }
%0FBdun 
%0FAdun 
%0Fc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(10))=1 { l -@%mmmsqld(11) } q
%0Ferr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Fc
%0Ho n %i,icol,ir
 f icol=0:1:4 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.CTTestCodeTestSet.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Ho
%0Jo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Jerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(3)=$g(RowID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TTAB("TC",%mmmsqld(4),1,%mmmsqld(5)))
 e  g %0JBdun
 s %mmmsqld(15)=$$%getlock^User.CTTestCodeTestSet.T1(%mmmsqld(2)) i '%mmmsqld(15) s SQLCODE=-110 g %0Jc
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TTAB("TC",%mmmsqld(4),1,%mmmsqld(5)))
 e  g %0JCdun
 k %data
 f icol=0:1:4 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.CTTestCodeTestSet.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(15)=1 %ReleaseLock^User.CTTestCodeTestSet.T1(%mmmsqld(2)) g %0Jc
%0JCdun 
 d:%mmmsqld(15)=1 %ReleaseLock^User.CTTestCodeTestSet.T1(%mmmsqld(2)) g:SQLCODE<0 %0Jc
%0JBdun 
%0JAdun 
%0Jc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(15))=1 %ReleaseLock^User.CTTestCodeTestSet.T1(%mmmsqld(2)) g %0Jc
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(5)=0 s %mmmsqld(6)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TTAB("TC",%mmmsqld(3),1,%mmmsqld(4)))
 e  g %0LBdun
 s %mmmsqld(14)=$$%getlock^User.CTTestCodeTestSet.T1(%mmmsqld(1)) i '%mmmsqld(14) s SQLCODE=-110 g %0Lc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TTAB("TC",%mmmsqld(3),1,%mmmsqld(4)))
 e  g %0LCdun
 d %delete^User.CTTestCodeTestSet.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(5))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(14)=1 %ReleaseLock^User.CTTestCodeTestSet.T1(%mmmsqld(1)) g %0Lc
%0LCdun 
 d:%mmmsqld(14)=1 %ReleaseLock^User.CTTestCodeTestSet.T1(%mmmsqld(1)) g:SQLCODE<0 %0Lc
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(5)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(14))=1 %ReleaseLock^User.CTTestCodeTestSet.T1(%mmmsqld(1)) g %0Lc
]]></Routine>
</Export>
