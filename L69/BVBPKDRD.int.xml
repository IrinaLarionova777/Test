<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="BVBPKDRD" type="INT" languagemode="0"><![CDATA[
BVBPKDRD        ; MVB Control data access for BB_PackProdDetailsReceiptDate   ; Compiled May 22, 2000 13:24:32 for Cache for Windows
 ; SP 9/11/95 
 ; 
 ; supported calls: 
 ; 
 ; $$open^BVBPKDRD(parentID) 
 ; $$fetch^BVBPKDRD(parentID) 
 ; $$close^BVBPKDRD() 
 ; 
 ; $$select^BVBPKDRD(RowID) 
 ; $$insert^BVBPKDRD(parentID) 
 ; $$update^BVBPKDRD(RowID) 
 ; $$delete^BVBPKDRD(RowID) 
 ; 
declare  
 q 0 
 ; 
open(parentID)        d %PKDRD0o 
 q 0 
 ; 
fetch(parentID)       n j 
 K PLIST 
 d %0Do 
 s PLIST=$o(PLIST(""),-1) 
 ; 
 ; Adjust fields 
 i 'SQLCODE d adjust 
 ; 
 q SQLCODE 
 ; 
close() d %PKDRD0c 
 q 0 
 ; 
select(RowID)   ; 
 k PLIST 
 d %0Fo 
 s PLIST=$o(PLIST(""),-1) 
 i 'SQLCODE d adjust 
 q SQLCODE 
 ; 
insert(parentID)        ; 
 S PLIST(0)=parentID 
 S PLIST(1)="" 
 ; Remove Childsub as a new one will be created 
 K PLIST(2) 
 d %0Go 
 ; 
 ; Now retrieve everything back to return to client 
 ; %ROWID is returned from INSERT 
 I 'SQLCODE q $$select(%ROWID) 
 ; 
 q SQLCODE 
 ; 
 ; 
update(RowID)   ; 
 i $d(addr) k PLIST(10) m PLIST(10)=addr  
 d %0Ho 
 q SQLCODE 
 ; 
 ; 
delete(RowID)   ; 
 d %0Io 
 q SQLCODE 
 ; 
 ; Adjust certain fields 
adjust n desref 
 q
 ; Get/Put multi line fields  
 ; getAddr called after select or fetch  
getdesc()      k PLIST  
 m PLIST=addr  
 k addr  
 q 0  
 ; setAddr called before insert or update  
putdesc()      k addr  
 m addr=PLIST  
 k PLIST  
 q 0  
 ;  
 q
%0ABs1 i %val'=+%val s %val=""
 e  s %val=$fn(%val,"")
 q
%0ABs2 s %val=+$g(%val) s:%val<1 %val="" q:%val=""  s %val=$ZDATE(%val,4,-1,2) q
%PKDRD0o s SQLCODE=$s($g(%PKDRD0c):-101,1:0) q:SQLCODE'=0
 s %PKDRD0c=1 k %PKDRD0m
 s %PKDRD0E=$zt,%PKDRD0f=0,%PKDRD0e=0,%PKDRD0L=""
 s %PKDRD0d(2)=$P(parentID,$C(1))
 s:%PKDRD0d(2)="" %PKDRD0d(2)=$E(parentID,2,999)
 q
%0Afirst   ;  init
 ; asl MOD# 2
 s %PKDRD0d(1)=$g(%PKDRD0d(2))
 s %PKDRD0d(7)=$p($g(%PKDRD0d(1)),"||",1,1),%PKDRD0d(8)=$p($g(%PKDRD0d(1)),"||",2,2)
 i %PKDRD0d(7)="" g %0ABdun
 i %PKDRD0d(8)="" g %0ABdun
 s $P(%PKDRD0d(5),$C(1))=""
%0ABk1 s $P(%PKDRD0d(5),$C(1))=$o(^BB("PK",%PKDRD0d(7),"PROD",%PKDRD0d(8),"RECD",$P(%PKDRD0d(5),$C(1))))
 i $P(%PKDRD0d(5),$C(1))="" g %0ABdun
 i 1>$P(%PKDRD0d(5),$C(1)),$P(%PKDRD0d(5),$C(1))=+$P(%PKDRD0d(5),$C(1)) g %0ABk1
 i $P(%PKDRD0d(5),$C(1))'=+$P(%PKDRD0d(5),$C(1)) g %0ABdun
 s %PKDRD0n=$g(^BB("PK",%PKDRD0d(7),"PROD",%PKDRD0d(8),"RECD",$P(%PKDRD0d(5),$C(1))))
 s %PKDRD0d(6)=$p(%PKDRD0n,"^",1)
 s %PKDRD0d(4)=(%PKDRD0d(7))_"||"_(%PKDRD0d(8))_"||"_($P(%PKDRD0d(5),$C(1)))
 s %val=$P(%PKDRD0d(5),$C(1)) d %0ABs1:%val'="" s $P(%PKDRD0d(5),$C(1),2)=%val
 s %val=$P(%PKDRD0d(6),$C(1)) d %0ABs2:%val'="" s $P(%PKDRD0d(6),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %PKDRD0f=%PKDRD0f+1 s %PKDRD0c=10 q
%PKDRD0f i '$g(%PKDRD0c) s SQLCODE=-102 q
 i %PKDRD0c=100 s SQLCODE=100 q
 s $zt="%0Aerr^"_$zn s $ze="" n %val g %0Afirst:%PKDRD0c=1
 g %0ABk1
%0ABdun 
%0AAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %PKDRD0c=100 q
%PKDRD0c i '$g(%PKDRD0c) s SQLCODE=-102 q
 k %PKDRD0c,%PKDRD0d,%PKDRD0e,%PKDRD0E,%PKDRD0f,%PKDRD0l,%PKDRD0L,%PKDRD0n,%PKDRD0r,%PKDRD0R s SQLCODE=0 q
%0Aerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%PKDRD0E),SQLCODE=-20603,%msg=$ze s $ze="" g %0AAdun
%0Do d %PKDRD0f q:SQLCODE'=0
 s PLIST(0)=%PKDRD0d(1),PLIST(1)=%PKDRD0d(4),PLIST(2)=%PKDRD0d(5),PLIST(3)=%PKDRD0d(6)
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(RowID,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$E(RowID,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(8)=$p($g(%mmmsqld(3)),"||",1,1),%mmmsqld(9)=$p($g(%mmmsqld(3)),"||",2,2),$P(PLIST(2),$C(1))=$p($g(%mmmsqld(3)),"||",3,3)
 s PLIST(1)=$g(%mmmsqld(3))
 i %mmmsqld(8)'="",%mmmsqld(9)'="",$P(PLIST(2),$C(1))'="",$d(^BB("PK",%mmmsqld(8),"PROD",%mmmsqld(9),"RECD",$P(PLIST(2),$C(1))))
 i '$t
 e  i 1>$P(PLIST(2),$C(1)),$P(PLIST(2),$C(1))=+$P(PLIST(2),$C(1))
 i  g %0FBdun
 s %mmmsqln=$g(^BB("PK",%mmmsqld(8),"PROD",%mmmsqld(9),"RECD",$P(PLIST(2),$C(1))))
 s PLIST(3)=$p(%mmmsqln,"^",1)
 s PLIST(0)=$p(PLIST(1),"||",1,2)
 s %val=$P(PLIST(2),$C(1)) d %0ABs1:%val'="" s $P(PLIST(2),$C(1),2)=%val
 s %val=$P(PLIST(3),$C(1)) d %0ABs2:%val'="" s $P(PLIST(3),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Fc
%0FBdun 
%0FAdun 
%0Fc q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
%0Go n %insert,icol,ir
 f icol=0:1:3 i $D(PLIST(icol)) s %insert(icol)=PLIST(icol) i $D(PLIST(icol,1)) f ir=1:1:PLIST(icol) s %insert(icol,ir)=PLIST(icol,ir)
 d insert^mt1251("1")
 q
%0Ho n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Herr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(RowID,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$E(RowID,2,999)
 n %data,%edit,icol,ir
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(4)=$p($g(%mmmsqld(3)),"||",1,1),%mmmsqld(5)=$p($g(%mmmsqld(3)),"||",2,2),$P(%mmmsqld(6),$C(1))=$p($g(%mmmsqld(3)),"||",3,3)
 s %mmmsqld(2)=$g(%mmmsqld(3))
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$P(%mmmsqld(6),$C(1))'="",$d(^BB("PK",%mmmsqld(4),"PROD",%mmmsqld(5),"RECD",$P(%mmmsqld(6),$C(1))))
 i '$t
 e  i 1>$P(%mmmsqld(6),$C(1)),$P(%mmmsqld(6),$C(1))=+$P(%mmmsqld(6),$C(1))
 i  g %0HBdun
 k %data,%edit
 f icol=0:1:3 i $D(PLIST(icol)) s %data(icol)=PLIST(icol) i $D(PLIST(icol,1)) f ir=1:1:PLIST(icol) s %data(icol,ir)=PLIST(icol,ir)
 d update^mt1251(%mmmsqld(2),"1",1)
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
%0HBdun 
%0HAdun 
 q
%0Herr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0HAdun
%0Io n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ierr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(RowID,$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$E(RowID,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(3)=$p($g(%mmmsqld(2)),"||",1,1),%mmmsqld(4)=$p($g(%mmmsqld(2)),"||",2,2),$P(%mmmsqld(5),$C(1))=$p($g(%mmmsqld(2)),"||",3,3)
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$P(%mmmsqld(5),$C(1))'="",$d(^BB("PK",%mmmsqld(3),"PROD",%mmmsqld(4),"RECD",$P(%mmmsqld(5),$C(1))))
 i '$t
 e  i 1>$P(%mmmsqld(5),$C(1)),$P(%mmmsqld(5),$C(1))=+$P(%mmmsqld(5),$C(1))
 i  g %0IBdun
 d delete^mt1251(%mmmsqld(1),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
%0IBdun 
%0IAdun 
 q
%0Ierr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0IAdun
]]></Routine>
</Export>
