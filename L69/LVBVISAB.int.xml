<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBVISAB" type="INT" languagemode="0" generated="1"><![CDATA[
LVBVISAB ; IG 5/5/98 ; LVB Control data access for VISAB EP_VisitAdditionalBilling
 ;
 ; supported calls:
 ;
 ; $$save^LVBVISAB(par,app,group)
 ; $$insert^LVBVISAB(par,app,group)
 ; $$update^LVBVISAB(ROWID,app,group)
 ; $$delete^LVBVISAB(ROWID,app,group)
 ; $$select^LVBVISAB(ROWID)
 ; $$open^LVBVISAB(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBVISAB(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBVISAB(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBVISAB(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBVISAB()
 ; $$getall^LVBVISAB(par,skip)
 ; $$amount^LVBVISAB(init,pc,date)
 ;
  ;---&sql(DECLARE VISAB CURSOR FOR SELECT * FROM EP_VisitAdditionalBilling
   ;---         WHERE VISAB_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 ; Return codes :
 ; 0_$c(1)_amount
 ; 100 - No amount is defined
 ; 101 - No initiation item before the date
 ; 102 - Invalid Initiation item
amount(init,pc,date) n (init,pc,date) s init=$g(init),pc=$g(pc),date=$g(date),return=""
 i $l(init) d
 .s date1=$o(^TTAB("IC",init,date),-1) i '$l(date1) s return=101 q
 .s item=$p($g(^TTAB("IC",init,date1)),"\",1) i '$l(item) s return=102 q
 .s %routine=$p($g(^TTAB("REPORT-GENERIC","PRICING")),"\",1),amt=""
 .i $l(%routine) s LineRoutine="amount^"_%routine i $l($t(@LineRoutine)) x "s amt=$$amount^"_%routine_"("""_item_""","""_pc_""","""_date_""")"
 .i amt s return=0_$c(1)_$p(amt,"\")
 .e  s return=100
 q return
save(epis,app,group) s epis=$g(epis) k ^TMP($zn,$j)
 i $l($p($g(^CF("SM",1)),"^",28)),$l($t(@("save^"_$zn_$p(^CF("SM",1),"^",28)))) k %quit d @("save^"_$zn_$p(^CF("SM",1),"^",28)) q:$d(%quit) %quit
 s EpisList=epis i $d(^TMP("SaveEPVIS",$j,epis)) s EpisList=EpisList_","_^TMP("SaveEPVIS",$j,epis)
 m ^TMP($zn,$j,"PLIST")=PLIST
 f count=1:1:$l(EpisList,",") d
 .s epis=$p(EpisList,",",count) k PLIST m PLIST=^TMP($zn,$j,"PLIST")
 .s j="" f  s j=$o(PLIST(j)) q:j=""  s x=$p(PLIST(j),$c(28),2) d
 ..i $l(x) s ^TMP($zn,$j,"NEW",x)=PLIST(j) k PLIST(j) q
 ..f x=500:1 i '$d(^TMP($zn,$j,"NEW",x)) s ^TMP($zn,$j,"NEW",x)=PLIST(j) k PLIST(j) q
 .i '$$getall(epis,"Y") f j=1:1:PLIST s x=$p($p(PLIST(j),$c(2),4),$c(28),2),^TMP($zn,$j,"OLD",x)=$p(PLIST(j),$c(2),4)
 .s x1="" f  s x1=$o(^TMP($zn,$j,"NEW",x1)) q:x1=""  s xx1=^(x1) d
 ..s ok=0 f j=1:1:$l(xx1,$c(28)) i $l($p(xx1,$c(28),j)) s ok=1 q
 ..i 'ok k ^TMP($zn,$j,"NEW",x1)
 .s x1="" f  s x1=$o(^TMP($zn,$j,"NEW",x1)) q:x1=""  s xx1=^(x1) d
 ..s (stop,x2)="" f  s x2=$o(^TMP($zn,$j,"OLD",x2)) q:x2=""  s xx2=^(x2) d  q:stop
 ...i $p(xx1,$c(28),2,6)=$p(xx2,$c(28),2,6) s stop=1 k ^TMP($zn,$j,"NEW",x1),^TMP($zn,$j,"OLD",x2)
 . ; delete
 .s x="" f  s x=$o(^TMP($zn,$j,"OLD",x)) q:x=""  s xx=^(x) i '$d(^TMP($zn,$j,"NEW",x)) d
 ..s rid=$p(xx,$c(28),1),$p(rid,"||",1)=epis
 ..i '$$delete(rid,app,group) k ^TMP($zn,$j,"OLD",x)
 . ; update
 .s x="" f  s x=$o(^TMP($zn,$j,"OLD",x)) q:x=""  s xx=^(x) i $d(^TMP($zn,$j,"NEW",x)) s xx=^(x) d
 ..s rid=$p(xx,$c(28),1),$p(rid,"||",1)=epis
 ..k PLIST f j=1:1:$l(xx,$c(28)) s PLIST(j)=$p(xx,$c(28),j)
 ..s PLIST=$o(PLIST(""),-1) i '$$update(rid) k ^TMP($zn,$j,"OLD",x),^TMP($zn,$j,"NEW",x)
 . ; insert
 .s x="" f  s x=$o(^TMP($zn,$j,"NEW",x)) q:x=""  s xx=^(x) d
 ..k PLIST f j=1:1:$l(xx,$c(28)) s PLIST(j)=$p(xx,$c(28),j)
 ..s PLIST=$o(PLIST(""),-1) i $$insert(epis)
 .
 .k %d m %d=^TEPI(epis,"AB")
 .d SetAll^LVBCOM50(epis,651_"S",.%d)
 k ^TMP($zn,$j)
 q 0
 ;
open(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),skip=$g(skip)
  ;---&SQL(OPEN VISAB)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %VISAB0o
 q 0
 ;
fetch(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),skip=$g(skip) k PLIST
  ;---&SQL(FETCH VISAB INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Do
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; Fetch all data
fetchbuffer(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) k ^TMP($zn,$j) s par=$g(par),skip=$g(skip)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par,skip) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) n (par,skip,PLIST) K ^TMP($zn,$j) s par=$g(par),skip=$g(skip)
 i $$open(par,skip)
 f cnt=1:1 Q:$$fetch(par,skip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
close()  ;---&SQL(CLOSE VISAB)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %VISAB0c
 q 0
 ;
select(RowID,skip) S RowID=$G(RowID) k PLIST
  ;---&sql( SELECT * INTO :PLIST() FROM EP_VisitAdditionalBilling WHERE VISAB_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Fo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
insert(par,app,group) d pre("N") s PLIST(0)=$g(par),app=$g(app),group=$g(group) k PLIST(1)
 i '$l($g(PLIST(2))) s PLIST(2)=$o(^TEPI(PLIST(0),"AB",""),-1)+1
 s ^TMP("FUNCTION",$j)=app_$c(1)_group
  ;---&sql(INSERT INTO EP_VisitAdditionalBilling VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Ho
 k ^TMP("FUNCTION",$j)
 i 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$c(1)_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
update(RowID,app,group) d pre("Y") s RowID=$g(RowID),app=$g(app),group=$g(group)
 s ^TMP("FUNCTION",$j)=app_$c(1)_group
  ;---&sql(UPDATE EP_VisitAdditionalBilling VALUES :PLIST() WHERE VISAB_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Jo
 k ^TMP("FUNCTION",$j)
 i 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
delete(RowID,app,group) s RowID=$g(RowID),app=$g(app),group=$g(group)
 s ^TMP("FUNCTION",$j)=app_$c(1)_group
  ;---&sql(DELETE FROM EP_VisitAdditionalBilling WHERE VISAB_RowID = :RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0Lo
 k ^TMP("FUNCTION",$j)
 q SQLCODE
 ; Adjust certain fields
pre(xUpdate) d PreSQL^SSUTIL4()
 q
adjust d PostSQL^SSUTIL4("")
 n plist,I,J,j,SQLCODE,X f J=2:1:PLIST i $d(PLIST(J)) s PLIST(J)=$p(PLIST(J),$c(1),1)
 i $g(skip)="Y" q
 f J=3 i $g(PLIST(J))'="" d
 .k plist m plist=PLIST k PLIST
 .s SQLCODE=$$select^LVBCTIC(plist(J),"Y")
 .s X="" i 'SQLCODE s X=PLIST(2)_$c(1)_PLIST(3)
 .k PLIST m PLIST=plist s PLIST(J)=X k plist
 f J=6 i $g(PLIST(J))'="" d
 .k plist m plist=PLIST k PLIST
 .s SQLCODE=$$select^LVBCTPC(plist(J),"Y")
 .s X="" i 'SQLCODE s X=PLIST(2)_$c(1)_PLIST(3)
 .k PLIST m PLIST=plist s PLIST(J)=X k plist
 q
getall(par,skip) n (par,skip,PLIST) k ^TMP($zn,$j,"getall") s par=$g(par),skip=$g(skip)
 i $$open(par,skip)
 f cnt=1:1 q:$$fetch(par,skip)  d
 .s str="" f j=1:1:$g(PLIST) s $p(str,$c(28),j)=$g(PLIST(j))
 .s ^TMP($zn,$j,"getall",cnt)=$p(PLIST(1),$c(1))_$c(2)_$p(PLIST(3),$c(1))_$c(2)_$p(PLIST(2),$c(1))_$c(2)_str
 k PLIST m PLIST=^TMP($zn,$j,"getall")
 s PLIST=$o(PLIST(""),-1)
 i $$close()
 k ^TMP($zn,$j,"getall")
 q 0
 ;
 q
%VISAB0o s $zt="%VISAB0E" s SQLCODE=$s($g(%VISAB0c):-101,1:0) q:SQLCODE'=0  s %VISAB0d(13)=0 s %VISAB0d(14)=0,%VISAB0d(15)=""
 s %VISAB0d(10)=$g(par)
 s %VISAB0c=1 q
%VISAB0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %VISAB0c,%VISAB0d,%VISAB0E,%VISAB0l,%VISAB0n,%VISAB0R,%VISAB0Z q
%0Afirst 
 ; asl MOD# 2
 s %VISAB0d(1)=%VISAB0d(10)
 i %VISAB0d(1)="" g %0ABdun
 s %VISAB0d(3)=""
%0ABk1 s %VISAB0d(3)=$o(^TEPI(%VISAB0d(1),"AB",%VISAB0d(3)))
 i %VISAB0d(3)="" g %0ABdun
 s %VISAB0d(21)=$g(^TEPI(%VISAB0d(1),"AB",%VISAB0d(3)))
 s %VISAB0d(4)=$p(%VISAB0d(21),"\",1) s %VISAB0d(5)=$p(%VISAB0d(21),"\",2) s %VISAB0d(6)=$p(%VISAB0d(21),"\",3) s %VISAB0d(7)=$p(%VISAB0d(21),"\",4) s %VISAB0d(8)=$p(%VISAB0d(21),"\",5) s %VISAB0d(9)=$p(%VISAB0d(21),"\",6)
 s %VISAB0d(2)=(%VISAB0d(1))_"||"_(%VISAB0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TEPI($p(%VISAB0d(2),"||",1),"AB",$p(%VISAB0d(2),"||",2))#"S":$zu(115,4) i $t { s %VISAB0d(14)=1,%VISAB0d(15)=$name(^TEPI($p(%VISAB0d(2),"||",1),"AB",$p(%VISAB0d(2),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.EP_VisitAdditionalBilling for RowID value: "_%VISAB0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %VISAB0d(12)=$p(%VISAB0d(2),"||"),%VISAB0d(3)=$p(%VISAB0d(2),"||",2)
 i %VISAB0d(12)'="",%VISAB0d(3)'="",$d(^TEPI(%VISAB0d(12),"AB",%VISAB0d(3)))
 e  g %0ACdun
 s %VISAB0d(27)=$g(^TEPI(%VISAB0d(12),"AB",%VISAB0d(3)))
 s %VISAB0d(4)=$p(%VISAB0d(27),"\",1) s %VISAB0d(5)=$p(%VISAB0d(27),"\",2) s %VISAB0d(6)=$p(%VISAB0d(27),"\",3) s %VISAB0d(7)=$p(%VISAB0d(27),"\",4) s %VISAB0d(8)=$p(%VISAB0d(27),"\",5) s %VISAB0d(9)=$p(%VISAB0d(27),"\",6)
 s %VISAB0d(1)=$p(%VISAB0d(2),"||")
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %VISAB0d(13)=%VISAB0d(13)+1,%ROWCOUNT=%VISAB0d(13),%ROWID=%VISAB0d(2),%VISAB0c=10 q
%VISAB0f i '$g(%VISAB0c) { s SQLCODE=-102 q  } i %VISAB0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%VISAB0d(13))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%VISAB0d(13),%VISAB0c=100 q  } g %0Afirst:%VISAB0c=1
%0ACdun i $zu(115,2)=1,$g(%VISAB0d(14))=1 { l -@%VISAB0d(15) s %VISAB0d(14)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%VISAB0d(13),SQLCODE=100,%VISAB0c=100 q
%VISAB0c i '$g(%VISAB0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%VISAB0d(13)),1:0)
 i $zu(115,2)=1,$g(%VISAB0d(14))=1 { l -@%VISAB0d(15) } k %VISAB0c,%VISAB0d,%VISAB0E,%VISAB0l,%VISAB0n,%VISAB0R,%VISAB0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %VISAB0c=100 q
%0Do d %VISAB0f q:SQLCODE'=0
 s PLIST(0)=%VISAB0d(1),PLIST(1)=%VISAB0d(2),PLIST(2)=%VISAB0d(3),PLIST(3)=%VISAB0d(4),PLIST(4)=%VISAB0d(5),PLIST(5)=%VISAB0d(6),PLIST(6)=%VISAB0d(7),PLIST(7)=%VISAB0d(8),PLIST(8)=%VISAB0d(9)
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Ferr" s %mmmsqld(14)=0,%mmmsqld(15)=""
 s %mmmsqld(11)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(11)
 s %mmmsqld(13)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(13)'="",PLIST(2)'="",$d(^TEPI(%mmmsqld(13),"AB",PLIST(2)))
 e  g %0FBdun
 s %mmmsqld(21)=$g(^TEPI(%mmmsqld(13),"AB",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(21),"\",1) s PLIST(4)=$p(%mmmsqld(21),"\",2) s PLIST(5)=$p(%mmmsqld(21),"\",3) s PLIST(6)=$p(%mmmsqld(21),"\",4) s PLIST(7)=$p(%mmmsqld(21),"\",5) s PLIST(8)=$p(%mmmsqld(21),"\",6)
 s PLIST(0)=$p(PLIST(1),"||")
 g:$zu(115,2)=0 %0FBuncommitted i $zu(115,2)=1 l +^TEPI($p(PLIST(1),"||",1),"AB",$p(PLIST(1),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(14)=1,%mmmsqld(15)=$name(^TEPI($p(PLIST(1),"||",1),"AB",$p(PLIST(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.EP_VisitAdditionalBilling for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(13)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(13)'="",PLIST(2)'="",$d(^TEPI(%mmmsqld(13),"AB",PLIST(2)))
 e  g %0FCdun
 s %mmmsqld(27)=$g(^TEPI(%mmmsqld(13),"AB",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(27),"\",1) s PLIST(4)=$p(%mmmsqld(27),"\",2) s PLIST(5)=$p(%mmmsqld(27),"\",3) s PLIST(6)=$p(%mmmsqld(27),"\",4) s PLIST(7)=$p(%mmmsqld(27),"\",5) s PLIST(8)=$p(%mmmsqld(27),"\",6)
 s PLIST(0)=$p(PLIST(1),"||")
%0FBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FCdun i $zu(115,2)=1,$g(%mmmsqld(14))=1 { l -@%mmmsqld(15) s %mmmsqld(14)=0 }
%0FBdun 
%0FAdun 
%0Fc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(14))=1 { l -@%mmmsqld(15) } q
%0Ferr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Fc
%0Ho n %i,icol,ir
 f icol=0:1:8 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.EPVisitAdditionalBilling.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Ho
%0Jo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Jerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(3)=$g(RowID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TEPI(%mmmsqld(4),"AB",%mmmsqld(5)))
 e  g %0JBdun
 s %mmmsqld(13)=$$%getlock^User.EPVisitAdditionalBilling.T1(%mmmsqld(2)) i '%mmmsqld(13) s SQLCODE=-110 g %0Jc
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TEPI(%mmmsqld(4),"AB",%mmmsqld(5)))
 e  g %0JCdun
 k %data
 f icol=0:1:8 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.EPVisitAdditionalBilling.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(13)=1 %ReleaseLock^User.EPVisitAdditionalBilling.T1(%mmmsqld(2)) g %0Jc
%0JCdun 
 d:%mmmsqld(13)=1 %ReleaseLock^User.EPVisitAdditionalBilling.T1(%mmmsqld(2)) g:SQLCODE<0 %0Jc
%0JBdun 
%0JAdun 
%0Jc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(13))=1 %ReleaseLock^User.EPVisitAdditionalBilling.T1(%mmmsqld(2)) g %0Jc
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(5)=0 s %mmmsqld(6)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TEPI(%mmmsqld(3),"AB",%mmmsqld(4)))
 e  g %0LBdun
 s %mmmsqld(12)=$$%getlock^User.EPVisitAdditionalBilling.T1(%mmmsqld(1)) i '%mmmsqld(12) s SQLCODE=-110 g %0Lc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TEPI(%mmmsqld(3),"AB",%mmmsqld(4)))
 e  g %0LCdun
 d %delete^User.EPVisitAdditionalBilling.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(5))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(12)=1 %ReleaseLock^User.EPVisitAdditionalBilling.T1(%mmmsqld(1)) g %0Lc
%0LCdun 
 d:%mmmsqld(12)=1 %ReleaseLock^User.EPVisitAdditionalBilling.T1(%mmmsqld(1)) g:SQLCODE<0 %0Lc
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(5)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(12))=1 %ReleaseLock^User.EPVisitAdditionalBilling.T1(%mmmsqld(1)) g %0Lc
]]></Routine>
</Export>
