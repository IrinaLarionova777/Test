<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBRCPT" type="INT" languagemode="0" generated="1"><![CDATA[
LVBRCPT ; IG 29/4/98 ; MVB Control code access for RC_Receipt
 ;
 ; supported calls:
 ;
 ; $$select^LVBRCPT(ROWID)
 ; $$open^LVBRCPT()
 ; $$fetch^LVBRCPT()
 ; $$close^LVBRCPT()
 ; $$insert^LVBRCPT()
 ; $$update^LVBRCPT(ROWID)
 ; $$delete^LVBRCPT(ROWID)
 ; $$getall^LVBRCPT()
 ;
  ;---&SQL(DECLARE RCPT CURSOR FOR SELECT * FROM RC_Receipt
   ;---         WHERE RCPT_PrintedDate IS NULL)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 ;
 ; Insert the data
insert() K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO RC_Receipt VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) s ROWID=$g(ROWID) d pre("Y") 
  ;---&SQL(UPDATE RC_Receipt VALUES :PLIST() WHERE RCPT_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Delete the data
delete(ROWID) s ROWID=$g(ROWID)
  ;---&SQL(DELETE FROM RC_Receipt WHERE RCPT_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 Q SQLCODE
 ;
 ; Open the cursor
open()  ;---&SQL(OPEN RCPT)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %RCPT0o
 Q 0
 ;
 ; Fetch the data
fetch()  ;---K PLIST &SQL(FETCH RCPT INTO :PLIST())
  ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 K PLIST Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ;
 ; Close the cursor 
close()  ;---&SQL(CLOSE RCPT) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %RCPT0c 
 q 0
 ;
 ; select data by code
select(ROWID) K PLIST s ROWID=$g(ROWID)
  ;---&SQL(SELECT * INTO :PLIST() FROM RC_Receipt WHERE RCPT_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("","")
 S (PLIST(1),PLIST(2))=$$ALPHAUP^SSUTIL4(PLIST(2))
 q
 ;
 ; Post-filing adjustments
adjust d PostSQL^SSUTIL4("")
 Q
 ;
getall() N (PLIST) K ^TMP($ZN,$J)
 I $$open()
 F cnt=1:1 Q:$$fetch()  S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
 ;
 q
%RCPT0o s $zt="%RCPT0E" s SQLCODE=$s($g(%RCPT0c):-101,1:0) q:SQLCODE'=0  s %RCPT0d(11)=0 s %RCPT0d(12)=0,%RCPT0d(13)=""
 s %RCPT0c=1 q
%RCPT0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %RCPT0c,%RCPT0d,%RCPT0E,%RCPT0l,%RCPT0n,%RCPT0R,%RCPT0Z q
%0Afirst 
 ; asl MOD# 2
 s %RCPT0d(1)=""
%0ABk1 s %RCPT0d(1)=$o(^TRCT(%RCPT0d(1)))
 i %RCPT0d(1)="" g %0ABdun
 s %RCPT0d(16)=$g(^TRCT(%RCPT0d(1)))
 s %RCPT0d(2)=$p(%RCPT0d(16),"\",1)
 g:'(%RCPT0d(2)="") %0ABk1
 s %RCPT0d(3)=$p(%RCPT0d(16),"\",4) s %RCPT0d(4)=$p(%RCPT0d(16),"\",2) s %RCPT0d(5)=$p(%RCPT0d(16),"\",3) s %RCPT0d(6)=$p(%RCPT0d(16),"\",5) s %RCPT0d(7)=$p(%RCPT0d(16),"\",6)
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TRCT($p(%RCPT0d(1),"||",1))#"S":$zu(115,4) i $t { s %RCPT0d(12)=1,%RCPT0d(13)=$name(^TRCT($p(%RCPT0d(1),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.RC_Receipt for RowID value: "_%RCPT0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %RCPT0d(9)=$lb(""_%RCPT0d(2))
 i %RCPT0d(1)'="",$d(^TRCT(%RCPT0d(1)))
 e  g %0ACdun
 s %RCPT0d(19)=$g(^TRCT(%RCPT0d(1)))
 s %RCPT0d(2)=$p(%RCPT0d(19),"\",1) s %RCPT0d(3)=$p(%RCPT0d(19),"\",4) s %RCPT0d(4)=$p(%RCPT0d(19),"\",2) s %RCPT0d(5)=$p(%RCPT0d(19),"\",3) s %RCPT0d(6)=$p(%RCPT0d(19),"\",5) s %RCPT0d(7)=$p(%RCPT0d(19),"\",6)
 s %RCPT0d(10)=$lb(""_%RCPT0d(2))
 g:%RCPT0d(9)'=%RCPT0d(10) %0ACdun
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %RCPT0d(11)=%RCPT0d(11)+1,%ROWCOUNT=%RCPT0d(11),%ROWID=%RCPT0d(1),%RCPT0c=10 q
%RCPT0f i '$g(%RCPT0c) { s SQLCODE=-102 q  } i %RCPT0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%RCPT0d(11))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%RCPT0d(11),%RCPT0c=100 q  } g %0Afirst:%RCPT0c=1
%0ACdun i $zu(115,2)=1,$g(%RCPT0d(12))=1 { l -@%RCPT0d(13) s %RCPT0d(12)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%RCPT0d(11),SQLCODE=100,%RCPT0c=100 q
%RCPT0c i '$g(%RCPT0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%RCPT0d(11)),1:0)
 i $zu(115,2)=1,$g(%RCPT0d(12))=1 { l -@%RCPT0d(13) } k %RCPT0c,%RCPT0d,%RCPT0E,%RCPT0l,%RCPT0n,%RCPT0R,%RCPT0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %RCPT0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:8 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.RCReceipt.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(4)=0 s %mmmsqld(5)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 i %mmmsqld(2)'="",$d(^TRCT(%mmmsqld(2)))
 e  g %0EBdun
 s %mmmsqld(8)=$$%getlock^User.RCReceipt.T1(%mmmsqld(2)) i '%mmmsqld(8) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 i %mmmsqld(2)'="",$d(^TRCT(%mmmsqld(2)))
 e  g %0ECdun
 k %data
 f icol=0:1:8 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.RCReceipt.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(4))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(8)=1 %ReleaseLock^User.RCReceipt.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(8)=1 %ReleaseLock^User.RCReceipt.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(4)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(8))=1 %ReleaseLock^User.RCReceipt.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(3)=0 s %mmmsqld(4)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 i %mmmsqld(1)'="",$d(^TRCT(%mmmsqld(1)))
 e  g %0GBdun
 s %mmmsqld(7)=$$%getlock^User.RCReceipt.T1(%mmmsqld(1)) i '%mmmsqld(7) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 i %mmmsqld(1)'="",$d(^TRCT(%mmmsqld(1)))
 e  g %0GCdun
 d %delete^User.RCReceipt.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(3))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(7)=1 %ReleaseLock^User.RCReceipt.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(7)=1 %ReleaseLock^User.RCReceipt.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(3)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(7))=1 %ReleaseLock^User.RCReceipt.T1(%mmmsqld(1)) g %0Gc
%0Jo d %RCPT0f q:SQLCODE'=0
 s PLIST(1)=%RCPT0d(1),PLIST(2)=%RCPT0d(1),PLIST(3)=%RCPT0d(2),PLIST(4)=%RCPT0d(3),PLIST(5)=%RCPT0d(4),PLIST(6)=%RCPT0d(5),PLIST(7)=%RCPT0d(6),PLIST(8)=%RCPT0d(7)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(11)=0,%mmmsqld(12)=""
 s %mmmsqld(9)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(2)=%mmmsqld(9)
 i PLIST(2)'="",$d(^TRCT(PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(15)=$g(^TRCT(PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(15),"\",1) s PLIST(4)=$p(%mmmsqld(15),"\",4) s PLIST(5)=$p(%mmmsqld(15),"\",2) s PLIST(6)=$p(%mmmsqld(15),"\",3) s PLIST(7)=$p(%mmmsqld(15),"\",5) s PLIST(8)=$p(%mmmsqld(15),"\",6)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TRCT($p(PLIST(2),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(11)=1,%mmmsqld(12)=$name(^TRCT($p(PLIST(2),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.RC_Receipt for RowID value: "_PLIST(2) ztrap "LOCK"  }
 ; asl MOD# 3
 i PLIST(2)'="",$d(^TRCT(PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(18)=$g(^TRCT(PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(18),"\",1) s PLIST(4)=$p(%mmmsqld(18),"\",4) s PLIST(5)=$p(%mmmsqld(18),"\",2) s PLIST(6)=$p(%mmmsqld(18),"\",3) s PLIST(7)=$p(%mmmsqld(18),"\",5) s PLIST(8)=$p(%mmmsqld(18),"\",6)
%0LBuncommitted ;
 s PLIST(1)=PLIST(2)
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(11))=1 { l -@%mmmsqld(12) s %mmmsqld(11)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(11))=1 { l -@%mmmsqld(12) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
