<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBMITC" type="INT" languagemode="0" generated="1"><![CDATA[
LVBMITC ; IG 6/5/98 ; LVB Control data access for MITC MIF_MachineTestCodes
 ;
 ; supported calls:
 ;
 ; $$insert^LVBMITC(par)
 ; $$update^LVBMITC(ROWID)
 ; $$select^LVBMITC(ROWID)
 ; $$delete^LVBMITC(ROWID,Comments)
 ; $$open^LVBMITC(par,user,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBMITC(par,user,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBMITC(par,user,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBMITC(par,user,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBMITC()
 ; $$create^LVBMITC(mi)
 ; $$getall^LVBMITC(par,user)
 ;
  ;---&sql(DECLARE MITC CURSOR FOR SELECT * FROM MIF_MachineTestCodes
   ;---         WHERE MITC_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
FIX s mi="" f  s mi=$o(^TMIF(mi)) q:mi=""  d
 .s tc="" f  s tc=$o(^TMIF(mi,2,tc)) q:tc=""  d
 ..q:$$select^LVBMITC(mi_"||"_tc)
 ..i " Y N "'[(" "_$p(PLIST(5),$c(1))_" ") s PLIST(5)=""
 ..i $p(PLIST(5),$c(1))="",$p(PLIST(3),$c(1))'="" s PLIST(5)="Y"
 ..i $p(PLIST(5),$c(1))="",$p(PLIST(3),$c(1))="" s PLIST(5)="N"
 ..i 'PLIST(4) s PLIST(4)=""
 ..s err=$$update(mi_"||"_tc) i err w mi," - ",tc," ",err
 d ##class(User.MIFMachineTestCodes).%BuildIndices()
 q
 ; open the cursor
open(par,user,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),user=$g(user)
  ;---&SQL(OPEN MITC)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %MITC0o
 q 0
 ; fetch the data
fetch(par,user,p2,p3,p4,p5,p6,p7,p8,p9) k PLIST s par=$g(par),user=$g(user)
  ;---f  &SQL(FETCH MITC INTO :PLIST()) q:SQLCODE  q:'$$ValUser^LVBCTTC(user,$p(PLIST(2),$c(1)))
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 f  Do %0Do q:SQLCODE  q:'$$ValUser^LVBCTTC(user,$p(PLIST(2),$c(1)))
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE s vis="" d  g:'vis fetch+1 d adjust
 .s tc=$p(PLIST(2),$c(1))
 .s x="" f  s x=$o(^TMIF(par,"TG",x)) q:x=""  i $p($g(^TMIF(par,"TG",x,"TC",tc)),"\",1)="Y" s vis=1 q
 q SQLCODE
 ; fetch all data
fetchbuffer(par,user,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),user=$g(user) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par,user) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,user,p2,p3,p4,p5,p6,p7,p8,p9) n (par,user,PLIST) s par=$g(par),user=$g(user) k ^TMP($zn,$j)
 i $$open(par,user)
 f cnt=1:1 q:$$fetch(par,user)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ; close the cursor
close()  ;---&SQL(CLOSE MITC)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %MITC0c
 q 0
 ; select data by code
select(RowID) k PLIST s RowID=$g(RowID)
  ;---&sql( SELECT * INTO :PLIST() FROM MIF_MachineTestCodes WHERE MITC_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Fo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; insert the data
insert(par) d pre("N") s PLIST(0)=$g(par) K PLIST(1)
  ;---&sql(INSERT INTO MIF_MachineTestCodes VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Ho
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; update the data
update(RowID) d pre("Y") s RowID=$g(RowID)
  ;---&sql(UPDATE MIF_MachineTestCodes VALUES :PLIST() WHERE MITC_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Jo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; delete the data
delete(RowID,Comments) s RowID=$g(RowID),^TMP("Comments",$j)=$g(Comments)
  ;---&sql(DELETE FROM MIF_MachineTestCodes WHERE MITC_RowID = :RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0Lo
 k ^TMP("Comments",$j)
 q SQLCODE
 ; add test items to machine
create(mi) n (mi) s mi=$g(mi) k ^TMP($zn,$j)
 i $l(mi) d
 .l +^TMIF(mi):0 e  s ok=100 q
 .m ^TMP($zn,$j,2)=^TMIF(mi,2) k ^TMIF(mi,2),^TMIF(mi,3)
 .k ^TMP($zn,$j,0) i '$$getall^LVBMITS(mi) m ^TMP($zn,$j,0)=PLIST
 .s cnt1="" f  s cnt1=$o(^TMP($zn,$j,0,cnt1)) q:cnt1=""  d
 ..s ts=$p(^(cnt1),$c(2),3) q:'$l(ts)
 ..k ^TMP($zn,$j,1) i '$$getall1^LVBCTTC(ts) m ^TMP($zn,$j,1)=PLIST
 ..s cnt2="" f  s cnt2=$o(^TMP($zn,$j,1,cnt2)) q:cnt2=""  d
 ...s tc=$p(^(cnt2),$c(2),1),mand=$p($p(^(cnt2),$c(2),5),$c(28),8),mand=$s($e(mand)="M":"Y",1:"N")
 ...k PLIST s PLIST(2)=tc
 ...s PLIST(3)=$p($g(^TMP($zn,$j,2,tc)),"\",1),PLIST(4)=$p($g(^TMP($zn,$j,2,tc)),"\",2)
 ...s PLIST(5)=$p($g(^TMP($zn,$j,2,tc)),"\",3),PLIST(6)=$p($g(^TMP($zn,$j,2,tc)),"\",4)
 ...s PLIST=$o(PLIST(""),-1)
 ...i $$insert(mi)
 ...s ^TMIF(mi,2,tc,0,ts)=mand
 ...m ^TMIF(mi,2,tc,1)=^TMP($zn,$j,2,tc,1)
 .l -^TMIF(mi)
 k ^TMP($zn,$j)
 q 0
 ; pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("","")
 i $l($g(PLIST(3))) d
 .i $e($$ONLYALPHA^SSUTIL4(PLIST(3)),1,5)="SPACE" s PLIST(3)=" "_$e(PLIST(3),6,99)
 .i $e($$ONLYALPHA^SSUTIL4(PLIST(3)),1,5)="QUEST" s PLIST(3)="?"_$e(PLIST(3),6,99)
 i $g(PLIST(4)) s PLIST(4)=+PLIST(4)
 q
 ; adjust certain fields
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 ;
 i $l(PLIST(3)) d
 .i $e(PLIST(3))=" " s PLIST(3)="SPACE"_$e(PLIST(3),2,99)
 .i $e(PLIST(3))="?" s PLIST(3)="QUEST"_$e(PLIST(3),2,99)
 i $g(PLIST(2))'="" d
 .k plist m plist=PLIST k PLIST
 .s SQLCODE=$$selskip^LVBCTTC(plist(2))
 .s X="" i 'SQLCODE s X=PLIST(2)_$c(1)_PLIST(3)
 .k PLIST m PLIST=plist s PLIST(2)=X k plist
 ;
 q
getall(par,user) n (par,user,PLIST) k ^TMP($zn,$j) s par=$g(par),user=$g(user)
 i $$open(par,user)
 f cnt=1:1 q:$$fetch(par,user)  d
 .s str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .s ^TMP($zn,$j,cnt)=$p(PLIST(1),$c(1))_$c(2)_$p(PLIST(2),$c(1),2)_$c(2)_$p(PLIST(2),$c(1))_$c(2)_str
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
%MITC0o s $zt="%MITC0E" s SQLCODE=$s($g(%MITC0c):-101,1:0) q:SQLCODE'=0  s %MITC0d(12)=0 s %MITC0d(13)=0,%MITC0d(14)=""
 s %MITC0d(9)=$g(par)
 s %MITC0c=1 q
%MITC0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %MITC0c,%MITC0d,%MITC0E,%MITC0l,%MITC0n,%MITC0R,%MITC0Z q
%0Afirst 
 ; asl MOD# 2
 s %MITC0d(1)=%MITC0d(9)
 i %MITC0d(1)="" g %0ABdun
 s %MITC0d(3)=""
%0ABk1 s %MITC0d(3)=$o(^TMIF(%MITC0d(1),2,%MITC0d(3)))
 i %MITC0d(3)="" g %0ABdun
 s %MITC0d(20)=$g(^TMIF(%MITC0d(1),2,%MITC0d(3)))
 s %MITC0d(4)=$p(%MITC0d(20),"\",1) s %MITC0d(5)=$p(%MITC0d(20),"\",2) s %MITC0d(6)=$p(%MITC0d(20),"\",3) s %MITC0d(7)=$p(%MITC0d(20),"\",4) s %MITC0d(8)=$p(%MITC0d(20),"\",5)
 s %MITC0d(2)=(%MITC0d(1))_"||"_(%MITC0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TMIF($p(%MITC0d(2),"||",1),2,$p(%MITC0d(2),"||",2))#"S":$zu(115,4) i $t { s %MITC0d(13)=1,%MITC0d(14)=$name(^TMIF($p(%MITC0d(2),"||",1),2,$p(%MITC0d(2),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.MIF_MachineTestCodes for RowID value: "_%MITC0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %MITC0d(11)=$p(%MITC0d(2),"||"),%MITC0d(3)=$p(%MITC0d(2),"||",2)
 i %MITC0d(11)'="",%MITC0d(3)'="",$d(^TMIF(%MITC0d(11),2,%MITC0d(3)))
 e  g %0ACdun
 s %MITC0d(26)=$g(^TMIF(%MITC0d(11),2,%MITC0d(3)))
 s %MITC0d(4)=$p(%MITC0d(26),"\",1) s %MITC0d(5)=$p(%MITC0d(26),"\",2) s %MITC0d(6)=$p(%MITC0d(26),"\",3) s %MITC0d(7)=$p(%MITC0d(26),"\",4) s %MITC0d(8)=$p(%MITC0d(26),"\",5)
 s %MITC0d(1)=$p(%MITC0d(2),"||")
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %MITC0d(12)=%MITC0d(12)+1,%ROWCOUNT=%MITC0d(12),%ROWID=%MITC0d(2),%MITC0c=10 q
%MITC0f i '$g(%MITC0c) { s SQLCODE=-102 q  } i %MITC0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%MITC0d(12))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%MITC0d(12),%MITC0c=100 q  } g %0Afirst:%MITC0c=1
%0ACdun i $zu(115,2)=1,$g(%MITC0d(13))=1 { l -@%MITC0d(14) s %MITC0d(13)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%MITC0d(12),SQLCODE=100,%MITC0c=100 q
%MITC0c i '$g(%MITC0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%MITC0d(12)),1:0)
 i $zu(115,2)=1,$g(%MITC0d(13))=1 { l -@%MITC0d(14) } k %MITC0c,%MITC0d,%MITC0E,%MITC0l,%MITC0n,%MITC0R,%MITC0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %MITC0c=100 q
%0Do d %MITC0f q:SQLCODE'=0
 s PLIST(0)=%MITC0d(1),PLIST(1)=%MITC0d(2),PLIST(2)=%MITC0d(3),PLIST(3)=%MITC0d(4),PLIST(4)=%MITC0d(5),PLIST(5)=%MITC0d(6),PLIST(6)=%MITC0d(7),PLIST(7)=%MITC0d(8)
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Ferr" s %mmmsqld(13)=0,%mmmsqld(14)=""
 s %mmmsqld(10)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(10)
 s %mmmsqld(12)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(12)'="",PLIST(2)'="",$d(^TMIF(%mmmsqld(12),2,PLIST(2)))
 e  g %0FBdun
 s %mmmsqld(20)=$g(^TMIF(%mmmsqld(12),2,PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(20),"\",1) s PLIST(4)=$p(%mmmsqld(20),"\",2) s PLIST(5)=$p(%mmmsqld(20),"\",3) s PLIST(6)=$p(%mmmsqld(20),"\",4) s PLIST(7)=$p(%mmmsqld(20),"\",5)
 s PLIST(0)=$p(PLIST(1),"||")
 g:$zu(115,2)=0 %0FBuncommitted i $zu(115,2)=1 l +^TMIF($p(PLIST(1),"||",1),2,$p(PLIST(1),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(13)=1,%mmmsqld(14)=$name(^TMIF($p(PLIST(1),"||",1),2,$p(PLIST(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.MIF_MachineTestCodes for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(12)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(12)'="",PLIST(2)'="",$d(^TMIF(%mmmsqld(12),2,PLIST(2)))
 e  g %0FCdun
 s %mmmsqld(26)=$g(^TMIF(%mmmsqld(12),2,PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(26),"\",1) s PLIST(4)=$p(%mmmsqld(26),"\",2) s PLIST(5)=$p(%mmmsqld(26),"\",3) s PLIST(6)=$p(%mmmsqld(26),"\",4) s PLIST(7)=$p(%mmmsqld(26),"\",5)
 s PLIST(0)=$p(PLIST(1),"||")
%0FBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FCdun i $zu(115,2)=1,$g(%mmmsqld(13))=1 { l -@%mmmsqld(14) s %mmmsqld(13)=0 }
%0FBdun 
%0FAdun 
%0Fc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(13))=1 { l -@%mmmsqld(14) } q
%0Ferr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Fc
%0Ho n %i,icol,ir
 f icol=0:1:7 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.MIFMachineTestCodes.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Ho
%0Jo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Jerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(3)=$g(RowID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMIF(%mmmsqld(4),2,%mmmsqld(5)))
 e  g %0JBdun
 s %mmmsqld(13)=$$%getlock^User.MIFMachineTestCodes.T1(%mmmsqld(2)) i '%mmmsqld(13) s SQLCODE=-110 g %0Jc
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMIF(%mmmsqld(4),2,%mmmsqld(5)))
 e  g %0JCdun
 k %data
 f icol=0:1:7 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.MIFMachineTestCodes.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(13)=1 %ReleaseLock^User.MIFMachineTestCodes.T1(%mmmsqld(2)) g %0Jc
%0JCdun 
 d:%mmmsqld(13)=1 %ReleaseLock^User.MIFMachineTestCodes.T1(%mmmsqld(2)) g:SQLCODE<0 %0Jc
%0JBdun 
%0JAdun 
%0Jc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(13))=1 %ReleaseLock^User.MIFMachineTestCodes.T1(%mmmsqld(2)) g %0Jc
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(5)=0 s %mmmsqld(6)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TMIF(%mmmsqld(3),2,%mmmsqld(4)))
 e  g %0LBdun
 s %mmmsqld(12)=$$%getlock^User.MIFMachineTestCodes.T1(%mmmsqld(1)) i '%mmmsqld(12) s SQLCODE=-110 g %0Lc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TMIF(%mmmsqld(3),2,%mmmsqld(4)))
 e  g %0LCdun
 d %delete^User.MIFMachineTestCodes.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(5))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(12)=1 %ReleaseLock^User.MIFMachineTestCodes.T1(%mmmsqld(1)) g %0Lc
%0LCdun 
 d:%mmmsqld(12)=1 %ReleaseLock^User.MIFMachineTestCodes.T1(%mmmsqld(1)) g:SQLCODE<0 %0Lc
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(5)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(12))=1 %ReleaseLock^User.MIFMachineTestCodes.T1(%mmmsqld(1)) g %0Lc
]]></Routine>
</Export>
