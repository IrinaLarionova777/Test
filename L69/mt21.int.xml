<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="mt21" type="INT" languagemode="0"><![CDATA[
mt21  ; Compiled December 23, 1999 09:56:59 for Cache for Windows  ; Compiled June 25, 2008 10:27:47 for Cache for Windows
delete(%rowid,%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%data(1)=%rowid,tupkill=1
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt21(.%edit) i SQLCODE s SQLCODE=-106 g gunlock
 i +%check d valid33 i '%ok d vdiag("DELETE",-107_$c(1)_"tbl"_$c(1)_"val"_$c(1)_"SS_Device"_$C(1,1)) s SQLCODE=-107 g gunlock
 d file
 g gunlock
insert(%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%edit=1
 d insertnw^mt21(+%check=1) i '%ok s SQLCODE=-104 q
winsert s %ROWID=%data(1)
 d:%check'["nolock" glock q:SQLCODE
 d:%check uniqfile(-104) i '%ok s SQLCODE=-104 g gunlock
 i +%check d required^mt21 i '%ok s SQLCODE=-108 g gunlock
 i +%check d valid35 i '%ok d vdiag("INSERT",-107_$c(1)_"tbl"_$c(1)_"val"_$c(1)_"SS_Device"_$C(1,1)) s SQLCODE=-107 g gunlock
 d file
 g gunlock
update(%rowid,%check,%copyedi) n icol,ir,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1
 i '%copyedi f icol=0:1:5 k:'$d(%edit(icol)) %data(icol)
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt21(.%edit) i SQLCODE s SQLCODE=-109 g gunlock
 f icol=0:1:5 i '$d(%data(icol)),$d(%edit(icol)) s %data(icol)=%edit(icol) d:$d(%edit(icol,1))  k %edit(icol)
 . f ir=1:1:%edit(icol) s %data(icol,ir)=%edit(icol,ir)
 d uniqfile(-105) i '%ok s SQLCODE=-105 g gunlock
 d updatenw^mt21(%check) i '%ok s SQLCODE=-105 g gunlock
 i +%check d required^mt21 i '%ok s SQLCODE=-108 g gunlock
 i +%check d valid36 i '%ok d vdiag("UPDATE",-107_$c(1)_"tbl"_$c(1)_"val"_$c(1)_"SS_Device"_$C(1,1)) s SQLCODE=-107 g gunlock
 d file
 g gunlock
vdiag(oper,info) i $g(%mdiag)'<10 s $p(%mdiag,$c(1),2)="YES" q
 s %mdiag=$g(%mdiag)+1_$c(1)_"NO"_$c(1)_oper,%mdiag(+%mdiag)=info_$c(1)_$g(%msg) q
lock(%ROWID)   ;  user entry
glock q:$c(1)[%ROWID
 l +^%IS(%ROWID):5 e  s SQLCODE=-110
 q
unlock(%ROWID)   ;  user entry
gunlock q:%check["nolock"
 q:$c(1)[%ROWID
 l -^%IS(%ROWID)
 q
file n subs,tempn,irep,x,node,sn s %file=1,sn=0
 i $g(tupkill) k ^%IS(%edit(1))
 g:$g(tupkill) maps
 s:$g(%edit) tempn=""
 i $d(%edit(2)) s:'($d(tempn(1))#2)&'$g(%edit) tempn(1)=$g(^%IS(%data(1),1)) s $p(tempn(1),"^",1)=$g(%data(2))
 i $d(%edit(3)) s:'($d(tempn(1))#2)&'$g(%edit) tempn(1)=$g(^%IS(%data(1),1)) s $p(tempn(1),"^",3)=$g(%data(3))
 i $d(%edit(4)) s:'($d(tempn(1))#2)&'$g(%edit) tempn(1)=$g(^%IS(%data(1),1)) s $p(tempn(1),"^",2)=$g(%data(4))
 f node=1 s:$d(tempn(node))#2 ^%IS(%data(1),node)=tempn(node)
 i 'sn,$d(tempn)=1 s ^%IS(%data(1))=""
maps q
 d %0Ao
getold(%dataold) g %0Ao
lookupB d %RSBcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(1)_$j("",30),1,30)_"  "_$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupB
 
lookupC d %RSCcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(1)_$j("",30),1,30)_"  "_$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupC
 
lookupD d %RSDcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(1)_$j("",30),1,30)_"  "_$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupD
 
selitmD  ; entry point to select the Row Selection Item
 i $c(1)'[$g(%data(1)) s item=2 q
 i $c(1)'[$g(%data(5)) s item=3 q
 s item=0 f  s item=$o(%data(item)) q:item=""  i $c(1)'[%data(item) s item=1 q
 s item=$s(item=1:"",1:1) q
 s item="" q
code5 ; compute code of field SSDEV_SystemName
 s %data(5)=""
 s %data(5)=$g(%data(1))
 q
comp5 ; entry point to do computed field SSDEV_SystemName
 n %oldval q:(","_$g(trak)_",")[(",5,")
 s %oldval=$g(%data(5)) d code5 s %ok=1 i $g(%data(5))=%oldval q
 i '%ok s %msg=$$setmsgp^%qarzst2("fvcode",$p($g(%msql),$c(1),5),"") d %mdiag(%oper,-104,"Fld Oprs","Valid","SSDEV_SystemName","",%msg) q
 i $g(%data(5))="",%oldval="" q
 s:'$d(%edit(5)) %edit(5)=%oldval k:$g(%data(5))=$g(%edit(5)) %edit(5)
 q
%mdiag(oper,sqlcode,class,subclass,field,cursor,%msg) ; diagnostics for sql operations
 i '$d(%mdiag) s $p(%mdiag,$c(1),2,3)="NO"_$c(1)_oper
 i ($p(%mdiag,$c(1))+1)>10 s $p(%mdiag,$c(1),2)="YES" q
 s $p(%mdiag,$c(1))=$p(%mdiag,$c(1))+1,%mdiag($p(%mdiag,$c(1)))=$g(sqlcode)_$c(1)_$g(class)_$c(1)_$g(subclass)_$c(1)_"SS_Device"_$c(1)_$g(field)_$c(1)_$g(cursor)_$c(1)_$g(%msg) q
 ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
required ; Entry point to check the required fields
 n %lang,%oper k %mdiag s %msg="",%ok=1,%oper=$s($g(%edit):"INSERT",1:"UPDATE"),%lang=$p($g(%msql),$c(1),5) s:'%lang %lang=1
 i $c(1,1)[$g(%data(1)) s %ok="Device Name" d %mdiag(%oper,-106,"Fld Int","Req","SSDEV_RowID","",%ok) s %msg=%ok,%ok=0
 q
valid33 ; DELETE: Row Validation
 n SQLCODE
 d VALDEL^atgen
 q
valid35 ; INSERT: Row Validation
 n SQLCODE
 d VALINS^atgen
 q
valid36 ; UPDATE: Row Validation
 n SQLCODE
 d VALUPD^atgen
 q
rowiderr s %ok=0 q
insertnw(%check,iform,recheck) ; insert tuple for table SS_Device
 n %based,%call,%done,%i,%icol,%irep,%irepi,%oper,%val,db,rowerr
 s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),recheck=$g(recheck),%oper="INSERT",rowerr=0 k %mdiag
 i recheck s %val=$g(%data(1)) g inrwid
 i iform s redrawit=0,idexist=2
 i '$d(rptform) n rptform s rptform=0
 s %val=""
 i $c(1)'[$g(%data(1)),$p(%data(1),$c(1))="" s %val=$p(%data(1),$c(1),2) g inrwide
 i $c(1)'[$g(%data(1)) s %val=$p(%data(1),$c(1)) g inrwid
 i $c(1)'[$g(%insert(1)),$p(%insert(1),$c(1))="" s %val=$p(%insert(1),$c(1),2) g inrwide
 i $c(1)'[$g(%insert(1)) s %val=$p(%insert(1),$c(1)) g inrwid
 s %val=$i(^mdata(2)) g inrwide
 g rowiderr
inrwide ; external to internal conversion for rowid
inrwid ; rowid in internal
 i 'rowerr d fdv1^mt21 i '%ok s rowerr=1 g rowiderr
 s %data(1)=%val
 i $c(1)[%data(1) g:'iform rowiderr s rowerr=1
 s:'$g(rowerr) %edit(1)=""
 g insarr
insarr q:$g(recheck)  ; entry point to spin through the %insert array
 s %icol=""
insloop s %icol=$o(%insert(%icol)) g insdef:%icol="",insloop:$d(%data(%icol))
 i ",1,"[(","_%icol_",") g insloop
 s %data(%icol)=%insert(%icol) s:+%check %edit(%icol)=""
 i $d(%insert(%icol))>9 g insrep
 g insloop
insrep ; entry point to work on repeating fields in the %insert array
 s %irep=0
insreplp s %irep=%irep+1 g:%irep>%insert(%icol) insloop
 s %data(%icol,%irep)=%insert(%icol,%irep) g insreplp
insdef ; entry point to compile all of the defaults
 d extint g:'%ok rowiderr:'iform i +%check=1 d validate g:'%ok rowiderr:'iform
 d intext^mt21
 g:+%check inscomp
insedit s %icol=""
insedlop s %icol=$o(%insert(%icol)) g inscomp:%icol="",insedlop:$d(%edit(%icol))!(",1,"[(","_%icol_",")) s %edit(%icol)="" g insedlop
inscomp ; entry point to calculate all computed fields
 d comp5^mt21
 s %data=%data(1) s:$g(iform) %ok=1 q
etiok i '%ok,'$d(%edit(%icol)) k %data(%icol) s %ok=1 q
 i '%ok s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
 s $p(%data(%icol),$c(1))=%val q
etiokrp i '%ok k %data(%icol,%irep) s %ok=1 q
 s $p(%data(%icol,%irep),$c(1))=%val q
etivalen s %irepi=0 f %irep=1:1:$g(%data(%icol)) i $d(%data(%icol,%irep)) s %irepi=%irepi+1,%data(%icol,%irepi)=%data(%icol,%irep)
 i '$g(%data(%icol))!%irepi s %data(%icol)=%irepi q
 k %data(%icol) q:'$d(%edit(%icol))
 f %irep=1:1:%edit(%icol) s %data(%icol,%irep)=%edit(%icol,%irep)
 s %data(%icol)=%edit(%icol) k %edit(%icol) q
fde4 ; external to internal conversion code
 n %DIR,%dir,ifn,iform,irn s ifn="14",irn=2,iform=0 s %DIR=$zu(5) s %dir=%DIR
 s %ok=1 i $g(SQLCODE)="form" n %DIR,%dir s %DIR=$zu(5) s %dir=%DIR d mu^%qcfrow1 d:%ok  q
 . s %newext=$g(^[%dir]mdd(1,2,2,14,36,"get",%val))
 q
extint s %ok=1 ; entry point to do all external to internal conversion code
 i $d(%data(2)),$p(%data(2),$c(1))="",$p(%data(2),$c(1),2)'="" s %val=$p(%data(2),$c(1),2) s %data(2)=%val
 i $d(%data(5)),$p(%data(5),$c(1))="",$p(%data(5),$c(1),2)'="" s %val=$p(%data(5),$c(1),2) s %data(5)=%val
 i $d(%data(3)),$p(%data(3),$c(1))="",$p(%data(3),$c(1),2)'="" s %val=$p(%data(3),$c(1),2) s %data(3)=%val
 i $d(%data(4)),$p(%data(4),$c(1))="",$p(%data(4),$c(1),2)'="" s %val=$p(%data(4),$c(1),2) d  g:'%ok rowiderr:'iform s %icol=4 d etiok
 . s %msg="" d fde4 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Ext->Int","SSDEV_Type","",$g(%msg))
 i $d(%data(1)),$p(%data(1),$c(1))="",$p(%data(1),$c(1),2)'="" s %val=$p(%data(1),$c(1),2) s %data(1)=%val
 q
fdv1 ; DO field validation (ALL of it)
 s %ok=1 s:'$$uniq1($g(%data(1)),%val) %ok=0,%msg=$$setmsg^%qarzst("UniqueQ") q
fdv4 ; DO validation and additional validation code
 i %val="|~~|NULL|~~|" s %ok=0 q
 q
uniq1(%rowid,%unique) n SQLCODE,%val d %0Fo q SQLCODE=100
uniqfile(%sqcode) k %mdiag
 i %sqcode=-104,%ok,$c(1)'[$g(%data(1)),'$$uniq1($g(%data(1)),$g(%data(1))) s %ok="SSDEV_RowID"_": "_$$setmsg^%qarzst("UniqueQ") d %mdiag("",%sqcode,"","","SSDEV_RowID","",%ok)
 q
valok i %ok s $p(%data(%icol),$c(1))=%val q
 s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
valokrp i %ok s $p(%data(%icol,%irep),$c(1))=%val q
 k %data(%icol,%irep) s %ok=1 q
validate s %ok=1 ; entry point to do all validation code
 i $d(%edit(4)),%data(4)'=%edit(4) s %icol=4 s %val=$p(%data(4),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv4 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSDEV_Type","",$g(%msg))
 i $d(%edit(1)),%data(1)'=%edit(1) s %icol=1 s %val=$p(%data(1),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSDEV_RowID","",$g(%msg))
 q
intext ; entry point to do all internal to external conversion code
 i $d(%data(2)),%data(2)[$c(1) s %data(2)=$s($p(%data(2),$c(1))'="":$p(%data(2),$c(1)),1:$p(%data(2),$c(1),2))
 i $d(%data(5)),%data(5)[$c(1) s %data(5)=$s($p(%data(5),$c(1))'="":$p(%data(5),$c(1)),1:$p(%data(5),$c(1),2))
 i $d(%data(3)),%data(3)[$c(1) s %data(3)=$s($p(%data(3),$c(1))'="":$p(%data(3),$c(1)),1:$p(%data(3),$c(1),2))
 i $d(%data(4)),%data(4)[$c(1) s %data(4)=$s($p(%data(4),$c(1))'="":$p(%data(4),$c(1)),1:$p(%data(4),$c(1),2))
 i $d(%data(1)),%data(1)[$c(1) s %data(1)=$s($p(%data(1),$c(1))'="":$p(%data(1),$c(1)),1:$p(%data(1),$c(1),2))
 q
updatenw(%check,iform) n %i,%icol,%irep,%irepi,%oldval,%oper,%val,db s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),%oper="UPDATE" k %mdiag
 d:%check'=2 extint g:'%ok rowiderr:'iform i %check=1 d validate g:'%ok rowiderr:'iform
 d:%check'=2 intext^mt21 q:'%ok
 d comp5^mt21
 q
 g ^mt22
UPPER(val) d:'$d(%trans) %trans^%qarztrm q $tr(val,%trans(3),%trans(4))
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
 q
%0ABr1 s %dataold(5)=$g(%dataold(1)) q
%0Ao n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Aerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%rowid,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$e(%rowid,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %dataold(1)=%mmmsqld(3)
 i %dataold(1)'="",$d(^%IS(%dataold(1)))
 e  g %0ABdun
 s %mmmsqln=$g(^%IS(%dataold(1),1))
 s %dataold(2)=$p(%mmmsqln,"^",1) s %dataold(3)=$p(%mmmsqln,"^",3) s %dataold(4)=$p(%mmmsqln,"^",2)
 d %0ABr1
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ac
%0ABdun 
%0AAdun 
%0Ac q
%0Aerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0AAdun
%RSBcuro s SQLCODE=$s($g(%RSBcurc):-101,1:0) q:SQLCODE'=0
 s %RSBcurc=1 k %RSBcurm
 s %RSBcurE=$zt,%RSBcurf=0,%RSBcure=0,%RSBcurL=""
 l +^mtemp s %RSBcurt(1)=$zp(^mtemp(" "))+1,^(%RSBcurt(1))="" l -^mtemp
 q
%0Bfirst   ;  init
 k ^mtemp(%RSBcurt(1),0)
 ; asl MOD# 3
 d %0BBMod
 s %RSBcurs(1)=""
%0BCk1 s %RSBcurs(1)=$o(^mtemp(%RSBcurt(1),0,%RSBcurs(1)))
 i %RSBcurs(1)="" g %0BCdun
 s %datars(1)=$s(%RSBcurs(1)=" ":"",1:%RSBcurs(1))
 i %datars(1)'="",$d(^%IS(%datars(1)))
 e  g %0BCk1
 s %RSBcurn=$g(^%IS(%datars(1),1))
 s %datars(2)=$p(%RSBcurn,"^",1)
 s SQLCODE=0 s:SQLCODE=0 %RSBcurf=%RSBcurf+1 s %RSBcurc=10 q
%RSBcurf i '$g(%RSBcurc) s SQLCODE=-102 q
 i %RSBcurc=100 s SQLCODE=100 q
 s $zt="%0Berr^"_$zn s $ze="" n %val g %0Bfirst:%RSBcurc=1
 g %0BCk1
%0BCdun 
%0BAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSBcurc=100 q
%RSBcurc i '$g(%RSBcurc) s SQLCODE=-102 q
 f %RSBcurt=1:1:1 k ^mtemp(%RSBcurt(%RSBcurt))
 k %RSBcurc,%RSBcurd,%RSBcure,%RSBcurE,%RSBcurf,%RSBcurl,%RSBcurL,%RSBcurn,%RSBcurr,%RSBcurR,%RSBcurs,%RSBcurt s SQLCODE=0 q
%0Berr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSBcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0BAdun
%0BBMod ; asl MOD# 2
 n %RSBcurn  ; Nested NEWing for Subquery...
 s %RSBcurd(6)=""
%0BBk1 s %RSBcurd(6)=$o(^%IS(%RSBcurd(6)))
 i %RSBcurd(6)="" g %0BBdun
 s %RSBcurn=$g(^%IS(%RSBcurd(6),1))
 s %datars(2)=$p(%RSBcurn,"^",1)
 s %datars(1)=(%RSBcurd(6))
 s %RSBcurs(1)=$s(%datars(1)'="":%datars(1),1:" "),^mtemp(%RSBcurt(1),0,%RSBcurs(1))=""
 g %0BBk1
%0BBdun 
 q
%RSCcuro s SQLCODE=$s($g(%RSCcurc):-101,1:0) q:SQLCODE'=0
 s %RSCcurc=1 k %RSCcurm
 s %RSCcurE=$zt,%RSCcurf=0,%RSCcure=0,%RSCcurL=""
 s %RSCcurd(5)=$P(%data(1),$C(1))
 s:%RSCcurd(5)="" %RSCcurd(5)=$e(%data(1),2,99999)
 l +^mtemp s %RSCcurt(1)=$zp(^mtemp(" "))+1,^(%RSCcurt(1))="" l -^mtemp
 q
%0Cfirst   ;  init
 k ^mtemp(%RSCcurt(1),0)
 ; asl MOD# 3
 d %0CBMod
 s %RSCcurs(1)=""
%0CCk1 s %RSCcurs(1)=$o(^mtemp(%RSCcurt(1),0,%RSCcurs(1)))
 i %RSCcurs(1)="" g %0CCdun
 s %datars(1)=$s(%RSCcurs(1)=" ":"",1:%RSCcurs(1))
 s %datars(2)=$g(^mtemp(%RSCcurt(1),0,%RSCcurs(1)))
 g:'((%datars(1))=(%RSCcurd(5))) %0CCk1
 s SQLCODE=0 s:SQLCODE=0 %RSCcurf=%RSCcurf+1 s %RSCcurc=10 q
%RSCcurf i '$g(%RSCcurc) s SQLCODE=-102 q
 i %RSCcurc=100 s SQLCODE=100 q
 s $zt="%0Cerr^"_$zn s $ze="" n %val g %0Cfirst:%RSCcurc=1
 g %0CCk1
%0CCdun 
%0CAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSCcurc=100 q
%RSCcurc i '$g(%RSCcurc) s SQLCODE=-102 q
 f %RSCcurt=1:1:1 k ^mtemp(%RSCcurt(%RSCcurt))
 k %RSCcurc,%RSCcurd,%RSCcure,%RSCcurE,%RSCcurf,%RSCcurl,%RSCcurL,%RSCcurn,%RSCcurr,%RSCcurR,%RSCcurs,%RSCcurt s SQLCODE=0 q
%0Cerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSCcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0CAdun
%0CBMod ; asl MOD# 2
 n %RSCcurn  ; Nested NEWing for Subquery...
 s %RSCcurd(7)=""
%0CBk1 s %RSCcurd(7)=$o(^%IS(%RSCcurd(7)))
 i %RSCcurd(7)="" g %0CBdun
 s %RSCcurn=$g(^%IS(%RSCcurd(7),1))
 s %datars(2)=$p(%RSCcurn,"^",1)
 s %datars(1)=(%RSCcurd(7))
 s %RSCcurs(1)=$s(%datars(1)'="":%datars(1),1:" "),^mtemp(%RSCcurt(1),0,%RSCcurs(1))=%datars(2)
 g %0CBk1
%0CBdun 
 q
%0DBr1 s %datars(3)=$g(%datars(1)) q
%RSDcuro s SQLCODE=$s($g(%RSDcurc):-101,1:0) q:SQLCODE'=0
 s %RSDcurc=1 k %RSDcurm
 s %RSDcurE=$zt,%RSDcurf=0,%RSDcure=0,%RSDcurL=""
 s %RSDcurd(8)=$P(%data(5),$C(1))
 l +^mtemp s %RSDcurt(1)=$zp(^mtemp(" "))+1,^(%RSDcurt(1))="" l -^mtemp
 s %RSDcurd(9)=$$ALPHAUP(%RSDcurd(8))
 q
%0Dfirst   ;  init
 k ^mtemp(%RSDcurt(1),0)
 ; asl MOD# 3
 d %0DBMod
 s %RSDcurs(7)=""
%0DCk1 s %RSDcurs(7)=$o(^mtemp(%RSDcurt(1),0,%RSDcurs(7)))
 i %RSDcurs(7)="" g %0DCdun
 s %RSDcurd(7)=$s(%RSDcurs(7)=" ":"",1:%RSDcurs(7))
 s %RSDcurs(1)=""
%0DCk2 s %RSDcurs(1)=$o(^mtemp(%RSDcurt(1),0,%RSDcurs(7),%RSDcurs(1)))
 i %RSDcurs(1)="" g %0DCk1
 s %datars(1)=$s(%RSDcurs(1)=" ":"",1:%RSDcurs(1))
 s %RSDcurn=$g(^mtemp(%RSDcurt(1),0,%RSDcurs(7),%RSDcurs(1)))
 s %datars(2)=$p(%RSDcurn,"|~|",1) s %datars(3)=$p(%RSDcurn,"|~|",2)
 s SQLCODE=0 s:SQLCODE=0 %RSDcurf=%RSDcurf+1 s %RSDcurc=10 q
%RSDcurf i '$g(%RSDcurc) s SQLCODE=-102 q
 i %RSDcurc=100 s SQLCODE=100 q
 s $zt="%0Derr^"_$zn s $ze="" n %val g %0Dfirst:%RSDcurc=1
 g %0DCk2
%0DCdun 
%0DAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSDcurc=100 q
%RSDcurc i '$g(%RSDcurc) s SQLCODE=-102 q
 f %RSDcurt=1:1:1 k ^mtemp(%RSDcurt(%RSDcurt))
 k %RSDcurc,%RSDcurd,%RSDcure,%RSDcurE,%RSDcurf,%RSDcurl,%RSDcurL,%RSDcurn,%RSDcurr,%RSDcurR,%RSDcurs,%RSDcurt s SQLCODE=0 q
%0Derr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSDcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
%0DBMod ; asl MOD# 2
 n %RSDcurn  ; Nested NEWing for Subquery...
 s %RSDcurd(11)=""
%0DBk1 s %RSDcurd(11)=$o(^%IS(%RSDcurd(11)))
 i %RSDcurd(11)="" g %0DBdun
 s %RSDcurn=$g(^%IS(%RSDcurd(11),1))
 s %datars(2)=$p(%RSDcurn,"^",1)
 s %datars(1)=(%RSDcurd(11))
 d %0DBr1
 s %RSDcurd(7)=$$ALPHAUP(%datars(3))
 g:'((%RSDcurd(9))=$E((%RSDcurd(7)),1,$L((%RSDcurd(9))))) %0DBk1
 s %RSDcurs(7)=$s(%RSDcurd(7)'="":%RSDcurd(7),1:" "),%RSDcurs(1)=$s(%datars(1)'="":%datars(1),1:" "),%RSDcurn="",$p(%RSDcurn,"|~|",1)=%datars(2),$p(%RSDcurn,"|~|",2)=%datars(3),^mtemp(%RSDcurt(1),0,%RSDcurs(7),%RSDcurs(1))=%RSDcurn
 g %0DBk1
%0DBdun 
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%unique,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$e(%unique,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(3)
 i %mmmsqld(1)'="",$d(^%IS(%mmmsqld(1)))
 e  g %0FBdun
 s %mmmsqld(2)=%mmmsqld(1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Fc
%0FBdun 
%0FAdun 
%0Fc q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
]]></Routine>
</Export>
