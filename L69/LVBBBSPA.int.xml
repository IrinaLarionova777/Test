<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBBBSPA" type="INT" languagemode="0" generated="1"><![CDATA[
LVBBBSPA ; IG 6/5/98 ; LVB Control data access for BBSPA CTBB_SupplierBldProdTest
 ;
 ; supported calls:
 ;
 ; $$insert^LVBBBSPA(par)
 ; $$delete^LVBBBSPA(ROWID,Comments)
 ; $$select^LVBBBSPA(ROWID)
 ; $$open^LVBBBSPA(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBBBSPA(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBBBSPA(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBBBSPA(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBBBSPA()
 ; $$getall^LVBBBSPA(par)
 ;
  ;---&sql(DECLARE BBSPA CURSOR FOR SELECT * FROM CTBB_SupplierBldProdTest
   ;---         WHERE BBSPA_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 ;
open(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par)
  ;---&SQL(OPEN BBSPA)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %BBSPA0o
 q 0
 ;
fetch(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) k PLIST s par=$g(par)
  ;---&SQL(FETCH BBSPA INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Do
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; Fetch all data
fetchbuffer(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) N (par,PLIST) s par=$g(par) K ^TMP($zn,$j)
 i $$open(par)
 f cnt=1:1 Q:$$fetch(par)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
close()  ;---&SQL(CLOSE BBSPA)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %BBSPA0c
 q 0
 ;
select(RowID) k PLIST s RowID=$g(RowID)
  ;---&sql( SELECT * INTO :PLIST() FROM CTBB_SupplierBldProdTest WHERE BBSPA_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Fo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ;
insert(par) d pre("N") s PLIST(0)=$g(par) K PLIST(1)
  ;---&sql(INSERT INTO CTBB_SupplierBldProdTest VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Ho
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
delete(RowID,Comments) s RowID=$g(RowID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM CTBB_SupplierBldProdTest WHERE BBSPA_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0Jo
 i 'SQLCODE d adjust
 k ^TMP("Comments",$j)
 q SQLCODE
 ;
 ; Adjust certain fields
pre(xUpdate) d PreSQL^SSUTIL4()
 q
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$selskip^LVBCTTS(plist(2))
 .S X="" I 'SQLCODE S X=PLIST(2)_$c(1)_PLIST(3)_$c(1)_PLIST(4)
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 q
getall(par) n (par,PLIST) k ^TMP($zn,$j) s par=$g(par)
 i $$open(par)
 f cnt=1:1 q:$$fetch(par)  d
 .s str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .s ^TMP($zn,$j,cnt)=$p(PLIST(1),$c(1))_$c(2)_$p(PLIST(2),$c(1),2)_$c(2)_$p(PLIST(2),$c(1))_$c(2)_str
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
%BBSPA0o s $zt="%BBSPA0E" s SQLCODE=$s($g(%BBSPA0c):-101,1:0) q:SQLCODE'=0  s %BBSPA0d(8)=0 s %BBSPA0d(9)=0,%BBSPA0d(10)=""
 s %BBSPA0d(4)=$g(par)
 s %BBSPA0c=1 q
%BBSPA0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %BBSPA0c,%BBSPA0d,%BBSPA0E,%BBSPA0l,%BBSPA0n,%BBSPA0R,%BBSPA0Z q
%0Afirst 
 ; asl MOD# 2
 s %BBSPA0d(1)=%BBSPA0d(4)
 s %BBSPA0d(6)=$p(%BBSPA0d(1),"||"),%BBSPA0d(7)=$p(%BBSPA0d(1),"||",2)
 i %BBSPA0d(6)="" g %0ABdun
 i %BBSPA0d(7)="" g %0ABdun
 s %BBSPA0d(3)=""
%0ABk1 s %BBSPA0d(3)=$o(^TTAB("BB-SUP",%BBSPA0d(6),"BB-BP",%BBSPA0d(7),"TEST",%BBSPA0d(3)))
 i %BBSPA0d(3)="" g %0ABdun
 s %BBSPA0d(2)=(%BBSPA0d(6))_"||"_(%BBSPA0d(7))_"||"_(%BBSPA0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTAB("BB-SUP",$p(%BBSPA0d(2),"||",1),"BB-BP",$p(%BBSPA0d(2),"||",2),"TEST",$p(%BBSPA0d(2),"||",3))#"S":$zu(115,4) i $t { s %BBSPA0d(9)=1,%BBSPA0d(10)=$name(^TTAB("BB-SUP",$p(%BBSPA0d(2),"||",1),"BB-BP",$p(%BBSPA0d(2),"||",2),"TEST",$p(%BBSPA0d(2),"||",3)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CTBB_SupplierBldProdTest for RowID value: "_%BBSPA0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %BBSPA0d(6)=$p(%BBSPA0d(2),"||"),%BBSPA0d(7)=$p(%BBSPA0d(2),"||",2),%BBSPA0d(3)=$p(%BBSPA0d(2),"||",3)
 i %BBSPA0d(6)'="",%BBSPA0d(7)'="",%BBSPA0d(3)'="",$d(^TTAB("BB-SUP",%BBSPA0d(6),"BB-BP",%BBSPA0d(7),"TEST",%BBSPA0d(3)))
 e  g %0ACdun
 s %BBSPA0d(1)=$p(%BBSPA0d(2),"||",1,2)
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %BBSPA0d(8)=%BBSPA0d(8)+1,%ROWCOUNT=%BBSPA0d(8),%ROWID=%BBSPA0d(2),%BBSPA0c=10 q
%BBSPA0f i '$g(%BBSPA0c) { s SQLCODE=-102 q  } i %BBSPA0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%BBSPA0d(8))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%BBSPA0d(8),%BBSPA0c=100 q  } g %0Afirst:%BBSPA0c=1
%0ACdun i $zu(115,2)=1,$g(%BBSPA0d(9))=1 { l -@%BBSPA0d(10) s %BBSPA0d(9)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%BBSPA0d(8),SQLCODE=100,%BBSPA0c=100 q
%BBSPA0c i '$g(%BBSPA0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%BBSPA0d(8)),1:0)
 i $zu(115,2)=1,$g(%BBSPA0d(9))=1 { l -@%BBSPA0d(10) } k %BBSPA0c,%BBSPA0d,%BBSPA0E,%BBSPA0l,%BBSPA0n,%BBSPA0R,%BBSPA0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %BBSPA0c=100 q
%0Do d %BBSPA0f q:SQLCODE'=0
 s PLIST(0)=%BBSPA0d(1),PLIST(1)=%BBSPA0d(2),PLIST(2)=%BBSPA0d(3)
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Ferr" s %mmmsqld(9)=0,%mmmsqld(10)=""
 s %mmmsqld(5)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(5)
 s %mmmsqld(7)=$p(PLIST(1),"||"),%mmmsqld(8)=$p(PLIST(1),"||",2),PLIST(2)=$p(PLIST(1),"||",3)
 i %mmmsqld(7)'="",%mmmsqld(8)'="",PLIST(2)'="",$d(^TTAB("BB-SUP",%mmmsqld(7),"BB-BP",%mmmsqld(8),"TEST",PLIST(2)))
 e  g %0FBdun
 s PLIST(0)=$p(PLIST(1),"||",1,2)
 g:$zu(115,2)=0 %0FBuncommitted i $zu(115,2)=1 l +^TTAB("BB-SUP",$p(PLIST(1),"||",1),"BB-BP",$p(PLIST(1),"||",2),"TEST",$p(PLIST(1),"||",3))#"S":$zu(115,4) i $t { s %mmmsqld(9)=1,%mmmsqld(10)=$name(^TTAB("BB-SUP",$p(PLIST(1),"||",1),"BB-BP",$p(PLIST(1),"||",2),"TEST",$p(PLIST(1),"||",3)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CTBB_SupplierBldProdTest for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(7)=$p(PLIST(1),"||"),%mmmsqld(8)=$p(PLIST(1),"||",2),PLIST(2)=$p(PLIST(1),"||",3)
 i %mmmsqld(7)'="",%mmmsqld(8)'="",PLIST(2)'="",$d(^TTAB("BB-SUP",%mmmsqld(7),"BB-BP",%mmmsqld(8),"TEST",PLIST(2)))
 e  g %0FCdun
 s PLIST(0)=$p(PLIST(1),"||",1,2)
%0FBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FCdun i $zu(115,2)=1,$g(%mmmsqld(9))=1 { l -@%mmmsqld(10) s %mmmsqld(9)=0 }
%0FBdun 
%0FAdun 
%0Fc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(9))=1 { l -@%mmmsqld(10) } q
%0Ferr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Fc
%0Ho n %i,icol,ir
 f icol=0:1:2 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.CTBBSupplierBldProdTest.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Ho
%0Jo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Jerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TTAB("BB-SUP",%mmmsqld(3),"BB-BP",%mmmsqld(4),"TEST",%mmmsqld(5)))
 e  g %0JBdun
 s %mmmsqld(18)=$$%getlock^User.CTBBSupplierBldProdTest.T1(%mmmsqld(1)) i '%mmmsqld(18) s SQLCODE=-110 g %0Jc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TTAB("BB-SUP",%mmmsqld(3),"BB-BP",%mmmsqld(4),"TEST",%mmmsqld(5)))
 e  g %0JCdun
 d %delete^User.CTBBSupplierBldProdTest.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(18)=1 %ReleaseLock^User.CTBBSupplierBldProdTest.T1(%mmmsqld(1)) g %0Jc
%0JCdun 
 d:%mmmsqld(18)=1 %ReleaseLock^User.CTBBSupplierBldProdTest.T1(%mmmsqld(1)) g:SQLCODE<0 %0Jc
%0JBdun 
%0JAdun 
%0Jc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(18))=1 %ReleaseLock^User.CTBBSupplierBldProdTest.T1(%mmmsqld(1)) g %0Jc
]]></Routine>
</Export>
