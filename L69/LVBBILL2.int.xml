<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBBILL2" type="INT" languagemode="0"><![CDATA[
LVBBILL2 ; IG 07/10/98 ; Pricing  ; Compiled May 22, 2000 13:25:13 for Cache for Windows
 ;
 ; supported calls:
 ;
 ; $$ext^LVBBILL2(user)
 ;
ext(user) s user=$g(user) k ^TMP("PRICING",$j),^TMP("NON-PRICING",$j),^TMP($zn,$j)
 s (delay,COMMON)="" i '$$select^MVBCFLAB(1) s delay=PLIST(24),COMMON=$p(PLIST(17),$c(1))
 ; sort episodes
 s epis="" f  s epis=$o(^TBIL(9,epis)) q:epis=""  d
 .s date=$p(^TBIL(9,epis),"\",1),flag=$p(^TBIL(9,epis),"\",2)
 .i '$d(^TEPI(epis)) k ^TBIL(9,epis) q
 . ; check if patient is PriceAble
 .i '$$PriceAble^LVBCOM02(epis) k ^TBIL(9,epis) q
 .s prompt="" d %0Ao
 .i $p(prompt,$c(1))="Y" s flag="P"
 .i (date'>($h-delay))!(flag="Y")!(flag="P") d
 .. d %0Bo
 ..s VISIT(20)=$p(VISIT(20),$c(1)) f j=12,14 s VISIT(j)=+VISIT(j)
 ..i '$l(VISIT(20)) d log(epis,"Patient does not have MRN") q
 ..i '$l(VISIT(12)) d log(epis,"Patient does not have Date_of_Collection") q
 ..i '$l(VISIT(14)) d log(epis,"Patient does not have Date_of_Request") q
 ..i VISIT(12)>VISIT(14),VISIT(12)-VISIT(14)>364 d log(epis,"Check Date_of_Request or Date_of_Collection") q
 ..i VISIT(14)>VISIT(12) d log(epis,"Check Date_of_Request or Date_of_Collection") q
 ..s ^TMP($zn,$j,10,VISIT(20),VISIT(12),epis)=flag
 ; price all outstanding patients
 s deb="" f  s deb=$o(^TMP($zn,$j,10,deb)) q:deb=""  d
 .s date="" f  s date=$o(^TMP($zn,$j,10,deb,date)) q:date=""  d
 .. ; check all episodes
 ..s (EpisodeList,DelayedList,InvoicedList,epis)="" f  s epis=$o(^TDEB(deb,date,0,epis)) q:epis=""  d
 ...i '$$PriceAble^LVBCOM02(epis) q
 ...i '$d(^TMP($zn,$j,10,deb,date,epis)) d
 ....i $d(^TBIL(9,epis)) s DelayedList=DelayedList_$s($l(DelayedList):" ",1:"")_epis q
 .... d %0Do
 ....s inv=$p(inv,$c(1)) i '$l(inv) d  q
 .....s (stop,event)="" f  s event=$o(^TEPI(epis,6,event),-1)  q:event=""  d  i $l(stop) q
 ......i $p(^(event),"\")="RB" s stop=0 q
 ......i $p(^(event),"\")="AP" s stop=1 i '$l($p($p(^(event),"\",4)," on ",2)) s stop=0
 .....i 'stop s EpisodeList=EpisodeList_$s($l(EpisodeList):" ",1:"")_epis
 ....s InvoicedList=InvoicedList_$s($l(InvoicedList):" ",1:"")_epis q
 .. ; check if all episodes ready to be priced
 ..i $l(EpisodeList)!$l(DelayedList)!$l(InvoicedList) d  q
 ...s epis="" f  s epis=$o(^TMP($zn,$j,10,deb,date,epis)) q:epis=""  d
 ....i $l(EpisodeList) d log(epis,"Waiting for episode(s) <"_EpisodeList_">")
 ....i $l(DelayedList) d log(epis,"Episode(s) <"_DelayedList_"> delayed for pricing")
 ....i $l(InvoicedList) d log(epis,"Episode(s) <"_InvoicedList_"> already invoiced. Please ReBill. Look at all requests.")
 .. ; check all episodes information
 ..s ok=1,epis="" f  s epis=$o(^TMP($zn,$j,10,deb,date,epis)) q:epis=""  d
 ...s flag=^(epis)
 ... d %0Eo
 ...f j=9,15,25,74 s VISIT(j)=$p(VISIT(j),$c(1))
 ...i '$l(VISIT(9)) d log(epis,"Patient does not have a payment code") q
 ...i $$select^LVBCTPC(VISIT(9),"Y") d log(epis,"Payment code <"_VISIT(9)_"> does not exist") q
 ...i '$l(VISIT(15)) d log(epis,"Patient does not have a doctor") q
 ...i $$select^LVBCTDR(VISIT(15),"Y") d log(epis,"Doctor <"_VISIT(15)_"> does not exist") q
 ...i '$l(PLIST(18)) d log(epis,"Doctor <"_VISIT(15)_"> does not have provider number") q
 ...i $d(^TTAB("BILL-LOC")),'$l(VISIT(74)) d log(epis,"Patient does not have Billing location") q
 ...i $l(VISIT(25)) s supress="" d  i $p(supress,$c(1))="Y" d log(epis,"Billing Supressed by Visit/Action < "_VISIT(25)_" >") q
 .... d %0Fo
 ...s supress="" d  i $p(supress,$c(1))="Y" d log(epis,"Billing Supressed by Debtor/Action < "_da_" >") q
 ....s rowid=deb_"||"_date_"||"_epis
 .... d %0Go
 ...s comp=$$epcomp^LVBVIS1(epis)
 ...i '$l(comp) d log(epis,"Doctor <"_VISIT(15)_"> does not have a company") q
 ...s type="" d %0Ho
 ...i ($p(type,$c(1))="M")!($p(type,$c(1))="V") d  i '$l(provider) d log(epis,"Doctor <"_VISIT(15)_"> Provider No is null") q
 ....s provider="" d %0Io
 ...s ^TMP($zn,$j,0,deb,date,comp,VISIT(9),epis)=flag
 ..i 'ok k ^TMP($zn,$j,0,deb,date)
 ; create list of items
 s deb="" f  s deb=$o(^TMP($zn,$j,0,deb)) q:deb=""  d
 .s date="" f  s date=$o(^TMP($zn,$j,0,deb,date)) q:date=""  d
 ..s Company="" f  s Company=$o(^TMP($zn,$j,0,deb,date,Company)) q:Company=""  d
 ...s pc="" f  s pc=$o(^TMP($zn,$j,0,deb,date,Company,pc)) q:pc=""  d
 ....k ^TMP($zn,$j,2) s ok=1,(Master,MasterFlag)=""
 ....k PAYCODE i '$$select^LVBCTPC(pc,"Y") m PAYCODE=PLIST
 ....s epis="" f  s epis=$o(^TMP($zn,$j,0,deb,date,Company,pc,epis)) q:epis=""  d
 .....s flag=^(epis) i MasterFlag'="P" s MasterFlag=flag
 .....i '$l(Master) s Master=epis
 .....s test="" f  s test=$o(^TEPI(epis,1,test)) q:test=""  d
 ......s tscnt="" f  s tscnt=$o(^TEPI(epis,1,test,tscnt)) q:tscnt=""  d
 .......s rowid=epis_"||"_test_"||"_tscnt
 ....... d %0Jo
 .......s HISTO=0 f j=1:1:$l(HistoCyto,",") i $l($p(HistoCyto,",",j)) s HISTO=1
 ....... ; no charge test set
 .......i $p(type,$c(1))="N",PAYCODE(17)'="Y" q
 ....... ; supress billing
 .......i $p(supress,$c(1))="Y" q
 ....... ; manual pricing
 .......i $p(type,$c(1))="M" s ^TMP($zn,$j,2,Master)="Manual"
 .......i PAYCODE(4)="M",PAYCODE(2)'=COMMON s ^TMP($zn,$j,2,Master)="Manual"
 .......s date1=$o(^TTAB("TS",test,3,date+1),-1)
 .......i 'HISTO d  q
 ........i '$l(date1),$p(type,$c(1))'="M" d log(epis,"Test Set <"_test_"> No item effective date before "_$$extdate2^SSUTIL4(date)) q
 ........i $l(date1) s item="" f  s item=$o(^TTAB("TS",test,3,date1,item)) q:item=""  d
 .........s xx=$g(^TTAB("TS",test,3,date1,item))
 .........i "*"'[$p(xx,"\",3),$p(xx,"\",4)="",$g(^TEPI(epis,1,test,tscnt,"DATA",$p(xx,"\",3)))="" q
 .........i "*"'[$p(xx,"\",3),$p(xx,"\",3)'="",'$$CheckRes0(epis_"||"_test_"||"_tscnt,$p(xx,"\",3),$p(xx,"\",4),$p(xx,"\",5)) q
 .........i $p(xx,"\",3)="*",'$$CheckRes1(epis_"||"_test_"||"_tscnt,date1,item) q
 .........s $p(^TMP($zn,$j,2,Master,0,item),"\",1)=$p($g(^TMP($zn,$j,2,Master,0,item)),"\",1)+$p(xx,"\",1)
 .........s $p(^TMP($zn,$j,2,Master,0,item),"\",2)=$p($g(^TMP($zn,$j,2,Master,0,item)),"\",2)_";"_$p(xx,"\",2)
 .........s $p(^TMP($zn,$j,2,Master,0,item),"\",3)=Rule3Exempt
 .......i HISTO d  q
 ........f j=1:1:$l(HistoCyto,",") s item=$p(HistoCyto,",",j) i $l(item) d
 .........s $p(^TMP($zn,$j,2,Master,0,item),"\",1)=$p($g(^TMP($zn,$j,2,Master,0,item)),"\",1)+1
 .........s $p(^TMP($zn,$j,2,Master,0,item),"\",2)=$p($g(^TMP($zn,$j,2,Master,0,item)),"\",2)_";"_synonym
 .........s $p(^TMP($zn,$j,2,Master,0,item),"\",3)=Rule3Exempt
 ....i 'ok k ^TMP($zn,$j,0,deb,date,Company,pc) q
 ....m ^TMP($zn,$j,4,Master)=^TMP($zn,$j,2,Master) k High
 ....s epis="" f  s epis=$o(^TMP($zn,$j,0,deb,date,Company,pc,epis)) q:epis=""  s ^TMP($zn,$j,4,Master,1,epis)=""
 .... ; find Set fee
 ....i $l(PAYCODE(20)) s ^TMP($zn,$j,4,Master,0,PAYCODE(20))="1\"_PAYCODE(21)
 .... ; find Initiation item
 ....s epis="" f  s epis=$o(^TMP($zn,$j,4,Master,1,epis)) q:epis=""  d InitCode(epis)
 ....i 'ok k ^TMP($zn,$j,4,Master) q
 ....s (text,amt)="" f  s amt=$o(High(amt),-1) q:amt=""  d  i $l(text) q
 .....s epis="" f  s epis=$o(High(amt,epis)) q:epis=""  d  i $l(text) q
 ......i $d(^TMP($zn,$j,4,Master,1,epis)) s text=High(amt,epis)_"\"_amt q
 ....s ^TMP($zn,$j,2,Master,0)=text
 .... ; check items
 ....k Items,Result m Items=^TMP($zn,$j,4,Master,0)
 ....d ItmCheck(PAYCODE(23))
 ....d ItmLimit(Master,PAYCODE(7))
 ....d ItmCalc(PAYCODE(2),date)
 .... ; check Medicare conning
 ....i PAYCODE(22)="Y" d
 ..... d %0Ko
 ..... ; Rule 3 Exempt - Patient
 .....i $p(conn1,$c(1))="Y" q
 ..... ; Doctor's Speciality
 .....i $p(conn2,$c(1))'="Y" q
 ..... ; InPatient
 .....i ($p(inpat1,$c(1))="Y")!($p(inpat2,$c(1))="Y") q
 .....d ItmConning()
 .... ; check Initiation Item exclusion
 ....s check="Y",item="" f  s item=$o(Items(item)) q:item=""  d  q:check="N"
 .....i '$$select^LVBCTBI(item,"Y"),PLIST(10)'="Y" s check="N"
 ....i check="Y" s ^TMP($zn,$j,2,Master,0)=""
 ....i $g(^TMP($zn,$j,4,Master))'="Manual" d
 .....s (EpisodeList,epis)="" f  s epis=$o(^TMP($zn,$j,4,Master,1,epis)) q:epis=""  i epis'=Master d
 ......s EpisodeList=EpisodeList_$s($l(EpisodeList):",",1:"")_epis
 ......i '$$select^LVBEPVIS(epis,"Y") d
 .......i $$LOCK^SSLOCK("Patient",epis,,,,1)
 .......s (PLIST(54),PLIST(55))="",PLIST(21)=+$h i $$update^LVBEPVIS(epis)
 .......i $$LOCKCLR^SSLOCK("Patient",epis)
 .......s item="" f  s item=$o(^TEPI(epis,7,item)) q:item=""  k ^TEPI(epis,7,item)
 .......d events^LVBCOM01(epis,"AP",PLIST(68)_" on "_Master)
 .......s ^TBIL(2,Company,PAYCODE(2),epis)="\\"_MasterFlag k ^TBIL(9,epis)
 .......s ^TMP("PRICING",Company,PAYCODE(2),epis)=""
 ..... ; update Master record
 .....i '$$select^LVBEPVIS(Master,"Y") d
 ......i $$LOCK^SSLOCK("Patient",Master,,,,1)
 ......s (PLIST(54),PLIST(55))=""
 ......i $l($p(^TMP($zn,$j,2,Master,0),"\",1)) s PLIST(54)=$p(^TMP($zn,$j,2,Master,0),"\",1),PLIST(55)=+$p(^TMP($zn,$j,2,Master,0),"\",2)
 ......s PLIST(21)=+$h,Total=PLIST(55) i $$update^LVBEPVIS(Master)
 ......i $$LOCKCLR^SSLOCK("Patient",Master)
 ......s item="" f  s item=$o(^TEPI(Master,7,item)) q:item=""  k ^TEPI(Master,7,item)
 ......s item="" f  s item=$o(Result(item)) q:item=""  s ^TEPI(Master,7,item)=Result(item),Total=Total+Result(item)
 ......d events^LVBCOM01(Master,"AP",PLIST(68)_$s($l(EpisodeList):" incl "_EpisodeList,1:""))
 ......s ^TBIL(2,Company,PAYCODE(2),Master)=Total_"\"_EpisodeList_"\"_MasterFlag k ^TBIL(9,Master)
 ......s ^TMP("PRICING",Company,PAYCODE(2),Master)=Total
 ....i $g(^TMP($zn,$j,4,Master))="Manual" d
 .....s ^TBIL(8,Master)=$g(^TBIL(8,Master)) i MasterFlag="P" s ^TBIL(8,Master)=MasterFlag
 .....k ^TBIL(9,Master)
 ..... ; set list of episodes
 .....s epis="" f  s epis=$o(^TMP($zn,$j,4,Master,1,epis)) q:epis=""  i epis'=Master d
 ......s ^TBIL(8,Master,"EP",epis)="" k ^TBIL(9,epis)
 ..... ; set list of items
 .....s item="" f  s item=$o(Items(item)) q:item=""  s ^TBIL(8,Master,"IT",item)=Items(item)
 .....s item=$p(^TMP($zn,$j,2,Master,0),"\",1)
 .....i $l(item) s ^TBIL(8,Master,"IT",item)="1\\Y"
 ..... ; set list of amounts
 .....s item="" f  s item=$o(Result(item)) q:item=""  s ^TBIL(8,Master,"AM",item)=Result(item)
 .....s item=$p(^TMP($zn,$j,2,Master,0),"\",1),amt=+$p(^TMP($zn,$j,2,Master,0),"\",2)
 .....i $l(item) s ^TBIL(8,Master,"AM",item)=amt_"\\Y"
 ; Print NotPriced report
 s ROWID=$$START^PRTREP00(user,"","","NPR")
 k ^TMP("PRICING",$j),^TMP("PRICING-NON",$j),^TMP($zn,$j)
 q 0
 ; medicare conning
ItmConning(epis) n (epis,Result) s epis=$g(epis)
 s item="" f cnt=0:1 s item=$o(Result(item)) q:item=""
 i cnt>3 d
 .m OldResult=Result k Result
 .s item="" f  s item=$o(OldResult(item)) q:item=""  d
 .. d %0Lo
 ..i $p(exclude,$c(1))="Y" s Result(item)=OldResult(item) q
 ..i $p(OldResult(item),"\",3)="Y" s Result(item)=OldResult(item) q
 ..s descr=$p(OldResult(item),"\",2) i descr'[" x " s Item(+OldResult(item),item)="" q
 ..s cnt=$p(descr," x ",2) f j=1:1:cnt s Item(OldResult(item)/cnt,item_"."_j)=""
 .s (cnt,amt)="" f  s amt=$o(Item(amt),-1) q:amt=""  d  i cnt=3 q
 ..s xitem="" f  s xitem=$o(Item(amt,xitem)) q:xitem=""  s item=$p(xitem,".") d  i cnt=3 q
 ...s cnt=cnt+1
 ...i xitem'["." s Result(item)=OldResult(item) q
 ...s $p(Result(item),"\",1)=$p($g(Result(item)),"\",1)+amt
 ...s $p(Result(item),"\",2)=$p($p(OldResult(item),"\",2)," x ",1)_" x "_($p($p($g(Result(item)),"\",2)," x ",2)+1)
 .s item="" f  s item=$o(Result(item)) q:item=""  s $p(Result(item),"\",1)=$j(Result(item),0,2)
 q
InitCode(epis) n (epis,High,Master,ok,PAYCODE) s epis=$g(epis),(pc,init,date)=""
 d %0Mo
 s pc=$p(pc,$c(1)),init=$p(init,$c(1)),date=$p(date,$c(1))
 i $l(init) d
 .s date1=$o(^TTAB("IC",init,date),-1)
 .i '$l(date1) d log(Master,"No Initiation item before "_$$extdate2^SSUTIL4(date)) q
 .s item=$p($g(^TTAB("IC",init,date1)),"\",1)
 .i '$l(item) d log(Master,"Invalid Iniitiation item <"_item_"> before "_$$extdate2^SSUTIL4(date)) q
 .s z=$$amount(item,pc,date)
 .i 'z d log(Master,"No fee for pay code "_pc_" item "_item_" before "_$$extdate2^SSUTIL4(date),"Y") q
 .s High(+z,epis)=item
 q
 ; check items limits and item description
ItmLimit(Master,MedCode) n (Master,MedCode,Items) s Master=$g(Master),MedCode=$g(MedCode)
 s item="" f  s item=$o(Items(item)) q:item=""  d
 .k descr s descr=$p(Items(item),"\",2)
 .f j=1:1:$l(descr,";") s x=$p(descr,";",j) i $l(x) s descr(x)=$g(descr(x))+1
 .s (x,descr)="" f  s x=$o(descr(x)) q:x=""  s descr=descr_$s($l(descr):";",1:"")_x i Items(item)>1,descr(x)>1 s descr=descr_" x "_descr(x)
 .s $p(Items(item),"\",2)=descr
 .i $$select^LVBCTBI(item,"Y") q
 .k ITEM m ITEM=PLIST
 . ; no number limit
 .i 'ITEM(5) q
 . ; second item exists
 .i Items(item)>1 d
 ..i '$l(ITEM(7)) s ITEM(7)=item
 ..i ITEM(7)=item s x1=$s(ITEM(5)<Items(item):ITEM(5),1:+Items(item)),$p(Items(item),"\",1)=x1 q
 ..s x1=$s(ITEM(5)-1<Items(item):ITEM(5)-1,1:Items(item)-1),$p(Items(ITEM(7)),"\",1)=x1
 ..s $p(Items(item),"\",1)=1
 . ; Medicare conning
 .i $l(Master),MedCode="Y" d
 .. d %0No
 ..f j=12,20 s VISIT(j)=$p(VISIT(j),$c(1))
 ..s date=VISIT(12)-ITEM(6),(cnt,Next)=""
 ..f  s date=$o(^TDEB(VISIT(20),date)) q:date=""  q:date>VISIT(12)  i $d(^TDEB(VISIT(20),date,0)) d
 ...i Next="" s Next=date
 ...s epis="" f  s epis=$o(^TDEB(VISIT(20),date,0,epis)) q:epis=""  d
 ....i epis'=Master,$d(^TEPI(epis,7,item)) s cnt=cnt+1
 ..i cnt,cnt'<ITEM(5) d log(Master,"Item <"_item_"> LIMIT EXCEEDED - NOT PRICED, Next allowed after "_$$extdate2^SSUTIL4(Next+ITEM(6)),"Y") k Items(item) q
 ..i cnt,ITEM(5)-cnt=1,(Next+ITEM(6))>$h d log(Master,"Item <"_item_"> limit reached, No more until "_$$extdate2^SSUTIL4(Next+ITEM(6)),"Y")
 q
 ; calculating amount by items
ItmCalc(PayCode,date) n (PayCode,date,Items,Result,PAYCODE) s PayCode=$g(PayCode),date=$g(date)
 s item="" f  s item=$o(Items(item)) q:item=""  d
 .s amt=$$amount(item,PayCode,$s($l(date):date,1:+$h))
 .s $p(Result(item),"\",1)=$p(Items(item),"\",1)*amt
 .s $p(Result(item),"\",2)=$p(Items(item),"\",2)
 .s $p(Result(item),"\",3)=$p(Items(item),"\",3)
 q
ItmCheck(sched) n (sched,Items) s sched=$g(sched)
 i $l(sched) d
 .s item="" f  s item=$o(Items(item)) q:item=""  d check1(item)
 .s item="" f  s item=$o(Items(item)) q:item=""  d check2(item)
 .s item="" f  s item=$o(Items(item)) q:item=""  d check3(item)
 .s item="" f  s item=$o(Items(item)) q:item=""  d check3(item)
 .s item="" f  s item=$o(Items(item)) q:item=""  d check2(item)
 .i $d(Items(65003)),$d(Items(65005)) d
 ..s zz="" f j=65007,65003,65005 s zz=zz_$p($g(Items(j)),"\",2)
 ..s Items(65007)=1_"\"_zz f j=65003,65005 k Items(j)
 q
 ; check item grouping
check1(item) n (item,sched,Items) s item=$g(item),quantity=$p(Items(item),"\",1)
 i quantity<1 k Items(item) q
 s xx=$o(^TSCH(sched,item,1,quantity-1)) i $l(xx) d
 .s newitem=$p($g(^TSCH(sched,item,1,xx)),"\") i $l(newitem) d
 ..i newitem=item s $p(Items(newitem),"\",1)=1 q
 ..s Items(newitem)=1_"\"_$p(Items(item),"\",2)
 ..i $p(Items(item),"\",3)="Y" s $p(Items(newitem),"\",3)="Y"
 ..k Items(item)
 q
 ; check item Xover
check2(item) n (item,sched,Items) s item=$g(item)
 s xitem="" f  s xitem=$o(^TSCH(sched,item,2,xitem)) q:xitem=""  i $d(Items(xitem)) d
 .s $p(Items(item),"\",2)=$p(Items(item),"\",2)_$p(Items(xitem),"\",2)
 .f j=item,xitem i $p(Items(j),"\",3)="Y" s $p(Items(item),"\",3)="Y"
 .k Items(xitem)
 q
 ; check item coning
check3(item) n (item,sched,Items) s item=$g(item),newitem=""
 s xitem="" f  s xitem=$o(^TSCH(sched,item,3,xitem)) q:xitem=""  i $d(Items(xitem)) d  i $l(newitem) q
 .s newitem=$p($g(^TSCH(sched,item,3,xitem)),"\") i $l(newitem) d
 ..s Items(newitem)=1_"\"_$p(Items(item),"\",2)_$p(Items(xitem),"\",2)
 ..f j=item,xitem i $p(Items(j),"\",3)="Y" s $p(Items(newitem),"\",3)="Y"
 ..f j=item,xitem k Items(j)
 q
 ; create log file
log(epis,text,warning) n (epis,text,warning,ok) s epis=$g(epis),text=$g(text),warning=$g(warning),ok=$g(ok)
 s ok=$s(warning="Y":ok,1:0)
 s x=$o(^TMP("NON-PRICING",$j,epis,""),-1)+1,^TMP("NON-PRICING",$j,epis,x)=$s(warning="Y":"Warning - ",1:"")_text
 q
 ; check result
CheckRes0(vtsRID,ti,operand,result) n (vtsRID,ti,operand,result)
 s epis=$p(vtsRID,"||",1),test=$p(vtsRID,"||",2),tscnt=$p(vtsRID,"||",3)
 s xx=$g(^TEPI(epis,1,test,tscnt,"DATA",ti))
 i operand="-",xx'<$p(result,","),xx'>$p(result,",",2) q 1
 i @(""""_xx_""""_operand_""""_result_"""") q 1
 q 0
CheckRes1(vtsRID,date1,item) n (vtsRID,date1,item) s vtsRID=$g(vtsRID),date1=$g(date1),item=$g(item)
 s epis=$p(vtsRID,"||",1),test=$p(vtsRID,"||",2),tscnt=$p(vtsRID,"||",3)
 s (check,check1,order)="" f  s order=$o(^TTAB("TS",test,3,date1,item,order)) q:order=""  s xx=^(order) d
 .f j=1:1:5 s @("xx"_j)=$p(xx,"\",j)
 .i $o(^(order))="" s xx5=""
 .i $d(^TEPI(epis,1,xx2,tscnt)) s check1=1
 .s check=check_$$CheckRes0(epis_"||"_xx2_"||"_tscnt,xx1,xx3,xx4)
 .i $e(check,$l(check)-1)="&" s @("check="_check)
 .i xx5="AND" s check=check_"&"
 .i xx5="OR" s check=check_"!"
 i 'check1 q 1
 s @("check="_check)
 q check
amount(item,PayCode,date) n (item,PayCode,date,PAYCODE) s item=$g(item),PayCode=$g(PayCode),date=$g(date),result=""
 s:'$l(date) date=+$h s date=100000-date
 s date1=$o(^TTAB("IB",item,0,PayCode,date-1)),xx=PAYCODE(4)
 i date1="" s PayCode=$p($g(^CF("LAB",1)),"^",20),date1=$o(^TTAB("IB",item,0,PayCode,date-1))
 e  s xx="M"
 i $l(date1) d
 .s result=$p($g(^TTAB("IB",item,0,PayCode,date1)),"\")
 .i result,xx="C",PAYCODE(5)-100 s result=$j(result*PAYCODE(5)/100,0,2),x=result#.1*100,result=$s((x>0)&(x<5):result\.1/10+.05,x>5:result\.1/10+.1,1:result)
 q result
 q
%0ABs1 s %val=$s("Yy"[$e(%val):"Yes","Nn"[$e(%val):"No",1:"") q
%0Ao n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Aerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(4)=$P(epis,$C(1))
 s:%mmmsqld(4)="" %mmmsqld(4)=$E(epis,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(6)=$p($g(%mmmsqld(4)),"||",1,1)
 s %mmmsqld(3)=$g(%mmmsqld(4))
 i %mmmsqld(6)'="",$d(^TEPI(%mmmsqld(6)))
 e  g %0ABdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(6),.1))
 s prompt=$p(%mmmsqln,"\",6)
 s %val=$P(prompt,$C(1)) d %0ABs1:%val'="" s $P(prompt,$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ac
%0ABdun 
%0AAdun 
%0Ac q
%0Aerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0AAdun
%0BBs1 s %val=+$g(%val) s:%val<1 %val="" q:%val=""  s %val=$ZDATE(%val,4,-1,4) q
%0Bo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Berr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(6)=$P(epis,$C(1))
 s:%mmmsqld(6)="" %mmmsqld(6)=$E(epis,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(8)=$p($g(%mmmsqld(6)),"||",1,1)
 s %mmmsqld(5)=$g(%mmmsqld(6))
 i %mmmsqld(8)'="",$d(^TEPI(%mmmsqld(8)))
 e  g %0BBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(8)))
 s VISIT(12)=$p(%mmmsqln,"\",10) s VISIT(14)=$p(%mmmsqln,"\",12) s VISIT(20)=$p(%mmmsqln,"\",18)
 s %val=$P(VISIT(12),$C(1)) d %0BBs1:%val'="" s $P(VISIT(12),$C(1),2)=%val
 s %val=$P(VISIT(14),$C(1)) d %0BBs1:%val'="" s $P(VISIT(14),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Bc
%0BBdun 
%0BAdun 
%0Bc q
%0Berr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0BAdun
%0Do n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Derr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(4)=$P(epis,$C(1))
 s:%mmmsqld(4)="" %mmmsqld(4)=$E(epis,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(6)=$p($g(%mmmsqld(4)),"||",1,1)
 s %mmmsqld(3)=$g(%mmmsqld(4))
 i %mmmsqld(6)'="",$d(^TEPI(%mmmsqld(6)))
 e  g %0DBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(6),7))
 s inv=$p(%mmmsqln,"\",3)
 s %val=$P(inv,$C(1)) d %0BBs1:%val'="" s $P(inv,$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Dc
%0DBdun 
%0DAdun 
%0Dc q
%0Derr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Eerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(7)=$P(epis,$C(1))
 s:%mmmsqld(7)="" %mmmsqld(7)=$E(epis,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(9)=$p($g(%mmmsqld(7)),"||",1,1)
 s %mmmsqld(6)=$g(%mmmsqld(7))
 i %mmmsqld(9)'="",$d(^TEPI(%mmmsqld(9)))
 e  g %0EBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(9)))
 s VISIT(9)=$p(%mmmsqln,"\",7) s VISIT(15)=$p(%mmmsqln,"\",13) s VISIT(25)=$p(%mmmsqln,"\",24) s VISIT(74)=$p(%mmmsqln,"\",22)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ec
%0EBdun 
%0EAdun 
%0Ec q
%0Eerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0EAdun
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(4)=$P(VISIT(25),$C(1))
 s:%mmmsqld(4)="" %mmmsqld(4)=$E(VISIT(25),2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(6)=$p($g(%mmmsqld(4)),"||",1,1)
 s %mmmsqld(3)=$g(%mmmsqld(4))
 i %mmmsqld(6)'="",$d(^TTAB("VA",%mmmsqld(6)))
 e  g %0FBdun
 s %mmmsqln=$g(^TTAB("VA",%mmmsqld(6)))
 s supress=$p(%mmmsqln,"\",2)
 s %val=$P(supress,$C(1)) d %0ABs1:%val'="" s $P(supress,$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Fc
%0FBdun 
%0FAdun 
%0Fc q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
%0Go n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Gerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(6)=$P(rowid,$C(1))
 s:%mmmsqld(6)="" %mmmsqld(6)=$E(rowid,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(9)=$p($g(%mmmsqld(6)),"||",1,1),$P(%mmmsqld(10),$C(1))=$p($g(%mmmsqld(6)),"||",2,2),%mmmsqld(11)=$p($g(%mmmsqld(6)),"||",3,3)
 s %mmmsqld(5)=$g(%mmmsqld(6))
 i %mmmsqld(9)'="",$P(%mmmsqld(10),$C(1))'="",%mmmsqld(11)'="",$d(^TDEB(%mmmsqld(9),$P(%mmmsqld(10),$C(1)),0,%mmmsqld(11)))
 e  g %0GBdun
 s %mmmsqln=$g(^TDEB(%mmmsqld(9),$P(%mmmsqld(10),$C(1)),0,%mmmsqld(11)))
 s da=$p(%mmmsqln,"\",5)
 s %mmmsqld(12)=$p($g(da),"||",1,1)
 s %mmmsqld(8)=$g(da)
 i %mmmsqld(12)'="",$d(^TTAB("DA",%mmmsqld(12)))
 e  s (%mmmsqld(8),supress)="" g %0GBp2
 s %mmmsqln=$g(^TTAB("DA",%mmmsqld(12)))
 s supress=$p(%mmmsqln,"\",2)
 s %val=$P(supress,$C(1)) d %0ABs1:%val'="" s $P(supress,$C(1),2)=%val
%0GBp2 
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Gc
%0GBdun 
%0GAdun 
%0Gc q
%0Gerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0GAdun
%0HBs1 s %val=$p("Medicare|Veterance Affairs|Invoice|Group Billing","|",$l($p("|M|V|I|G|","|"_%val_"|"),"|")) q
%0Ho n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Herr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(4)=$P(VISIT(9),$C(1))
 s:%mmmsqld(4)="" %mmmsqld(4)=$E(VISIT(9),2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(6)=$p($g(%mmmsqld(4)),"||",1,1)
 s %mmmsqld(3)=$g(%mmmsqld(4))
 i %mmmsqld(6)'="",$d(^TTAB("BI",%mmmsqld(6)))
 e  g %0HBdun
 s %mmmsqln=$g(^TTAB("BI",%mmmsqld(6)))
 s type=$p(%mmmsqln,"\",26)
 s %val=$P(type,$C(1)) d %0HBs1:%val'="" s $P(type,$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Hc
%0HBdun 
%0HAdun 
%0Hc q
%0Herr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0HAdun
%0Io n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ierr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(4)=$P(VISIT(15),$C(1))
 s:%mmmsqld(4)="" %mmmsqld(4)=$E(VISIT(15),2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(6)=$p($g(%mmmsqld(4)),"||",1,1)
 s %mmmsqld(3)=$g(%mmmsqld(4))
 i %mmmsqld(6)'="",$d(^TTAB("DR",%mmmsqld(6)))
 e  g %0IBdun
 s %mmmsqln=$g(^TTAB("DR",%mmmsqld(6),0))
 s provider=$p(%mmmsqln,"\",3)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ic
%0IBdun 
%0IAdun 
%0Ic q
%0Ierr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0IAdun
%0JBs1 s %val=$p("Group Billing Test|Single Billed Test|Manual Billed Test|No Charge Test|Charge Only Test","|",$l($p("|G|S|M|N|C|","|"_%val_"|"),"|")) q
%0Jo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Jerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(12)=$P(rowid,$C(1))
 s:%mmmsqld(12)="" %mmmsqld(12)=$E(rowid,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(16)=$p($g(%mmmsqld(12)),"||",1,1),%mmmsqld(14)=$p($g(%mmmsqld(12)),"||",2,2),%mmmsqld(17)=$p($g(%mmmsqld(12)),"||",3,3)
 s %mmmsqld(11)=$g(%mmmsqld(12))
 i %mmmsqld(16)'="",%mmmsqld(14)'="",%mmmsqld(17)'="",$d(^TEPI(%mmmsqld(16),1,%mmmsqld(14),%mmmsqld(17)))
 e  g %0JBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(16),1,%mmmsqld(14),%mmmsqld(17)))
 s Rule3Exempt=$p(%mmmsqln,"\",9) s HistoCyto=$p(%mmmsqln,"\",33) s supress=$p(%mmmsqln,"\",34)
 s %val=$P(Rule3Exempt,$C(1)) d %0ABs1:%val'="" s $P(Rule3Exempt,$C(1),2)=%val
 s %val=$P(supress,$C(1)) d %0ABs1:%val'="" s $P(supress,$C(1),2)=%val
 s %mmmsqld(18)=$p($g(%mmmsqld(14)),"||",1,1)
 s %mmmsqld(15)=$g(%mmmsqld(14))
 i %mmmsqld(18)'="",$d(^TTAB("TS",%mmmsqld(18)))
 e  s (%mmmsqld(15),synonym,type)="" g %0JBp2
 s %mmmsqln=$g(^TTAB("TS",%mmmsqld(18)))
 s type=$p(%mmmsqln,"\",13) s synonym=$p(%mmmsqln,"\",2)
 s %val=$P(type,$C(1)) d %0JBs1:%val'="" s $P(type,$C(1),2)=%val
%0JBp2 
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Jc
%0JBdun 
%0JAdun 
%0Jc q
%0Jerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0JAdun
%0Ko n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Kerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(10)=$P(Master,$C(1))
 s:%mmmsqld(10)="" %mmmsqld(10)=$E(Master,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(20)=$p($g(%mmmsqld(10)),"||",1,1)
 s %mmmsqld(9)=$g(%mmmsqld(10))
 i %mmmsqld(20)'="",$d(^TEPI(%mmmsqld(20)))
 e  g %0KBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(20),.1))
 s conn1=$p(%mmmsqln,"\",1)
 s %mmmsqln=$g(^TEPI(%mmmsqld(20)))
 s %mmmsqld(14)=$p(%mmmsqln,"\",13) s %mmmsqld(16)=$p(%mmmsqln,"\",16) s %mmmsqld(18)=$p(%mmmsqln,"\",20)
 s %val=$P(conn1,$C(1)) d %0ABs1:%val'="" s $P(conn1,$C(1),2)=%val
 s %mmmsqld(21)=$p($g(%mmmsqld(14)),"||",1,1)
 s %mmmsqld(15)=$g(%mmmsqld(14))
 i %mmmsqld(21)'="",$d(^TTAB("DR",%mmmsqld(21)))
 e  s (%mmmsqld(15),%mmmsqld(12))="" g %0KBp2
 s %mmmsqln=$g(^TTAB("DR",%mmmsqld(21),0))
 s %mmmsqld(12)=$p(%mmmsqln,"\",7)
%0KBp2 
 s %mmmsqld(22)=$p($g(%mmmsqld(16)),"||",1,1)
 s %mmmsqld(17)=$g(%mmmsqld(16))
 i %mmmsqld(22)'="",$d(^TTAB("IC",%mmmsqld(22)))
 e  s (%mmmsqld(17),inpat2)="" g %0KBp3
 s %mmmsqln=$g(^TTAB("IC",%mmmsqld(22)))
 s inpat2=$p(%mmmsqln,"\",2)
 s %val=$P(inpat2,$C(1)) d %0ABs1:%val'="" s $P(inpat2,$C(1),2)=%val
%0KBp3 
 s %mmmsqld(23)=$p($g(%mmmsqld(18)),"||",1,1)
 s %mmmsqld(19)=$g(%mmmsqld(18))
 i %mmmsqld(23)'="",$d(^TTAB("RH",%mmmsqld(23)))
 e  s (%mmmsqld(19),inpat1)="" g %0KBp4
 s %mmmsqln=$g(^TTAB("RH",%mmmsqld(23)))
 s inpat1=$p(%mmmsqln,"\",16)
 s %val=$P(inpat1,$C(1)) d %0ABs1:%val'="" s $P(inpat1,$C(1),2)=%val
%0KBp4 
 s %mmmsqld(24)=$p($g(%mmmsqld(12)),"||",1,1)
 s %mmmsqld(13)=$g(%mmmsqld(12))
 i %mmmsqld(24)'="",$d(^TTAB("SPC",%mmmsqld(24)))
 e  s (%mmmsqld(13),conn2)="" g %0KBp5
 s %mmmsqln=$g(^TTAB("SPC",%mmmsqld(24)))
 s conn2=$p(%mmmsqln,"\",2)
 s %val=$P(conn2,$C(1)) d %0ABs1:%val'="" s $P(conn2,$C(1),2)=%val
%0KBp5 
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Kc
%0KBdun 
%0KAdun 
%0Kc q
%0Kerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0KAdun
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Lerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(4)=$P(item,$C(1))
 s:%mmmsqld(4)="" %mmmsqld(4)=$E(item,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(6)=$p($g(%mmmsqld(4)),"||",1,1)
 s %mmmsqld(3)=$g(%mmmsqld(4))
 i %mmmsqld(6)'="",$d(^TTAB("IB",%mmmsqld(6)))
 e  g %0LBdun
 s %mmmsqln=$g(^TTAB("IB",%mmmsqld(6)))
 s exclude=$p(%mmmsqln,"\",6)
 s %val=$P(exclude,$C(1)) d %0ABs1:%val'="" s $P(exclude,$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Lc
%0LBdun 
%0LAdun 
%0Lc q
%0Lerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0LAdun
%0Mo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Merr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(8)=$P(epis,$C(1))
 s:%mmmsqld(8)="" %mmmsqld(8)=$E(epis,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(10)=$p($g(%mmmsqld(8)),"||",1,1)
 s %mmmsqld(7)=$g(%mmmsqld(8))
 i %mmmsqld(10)'="",$d(^TEPI(%mmmsqld(10)))
 e  g %0MBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(10)))
 s pc=$p(%mmmsqln,"\",7) s init=$p(%mmmsqln,"\",16) s date=$p(%mmmsqln,"\",10)
 s %val=$P(date,$C(1)) d %0BBs1:%val'="" s $P(date,$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Mc
%0MBdun 
%0MAdun 
%0Mc q
%0Merr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0MAdun
%0No n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Nerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(5)=$P(Master,$C(1))
 s:%mmmsqld(5)="" %mmmsqld(5)=$E(Master,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(7)=$p($g(%mmmsqld(5)),"||",1,1)
 s %mmmsqld(4)=$g(%mmmsqld(5))
 i %mmmsqld(7)'="",$d(^TEPI(%mmmsqld(7)))
 e  g %0NBdun
 s %mmmsqln=$g(^TEPI(%mmmsqld(7)))
 s VISIT(12)=$p(%mmmsqln,"\",10) s VISIT(20)=$p(%mmmsqln,"\",18)
 s %val=$P(VISIT(12),$C(1)) d %0BBs1:%val'="" s $P(VISIT(12),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Nc
%0NBdun 
%0NAdun 
%0Nc q
%0Nerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0NAdun
]]></Routine>
</Export>
