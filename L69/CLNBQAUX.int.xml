<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="CLNBQAUX" type="INT" languagemode="0"><![CDATA[
CLNBQAUX
	; +----------------+
	; | Binary Queries |
	; | Auxiliar       |
	; +----------------+
	;  Mar 13, 2006 by Mc_Fly
	;  TrakHealth BCN
	q
save
	n (cube,make,isajob,changed)
	s (rowid,field,ord)=""
	s sum=0,rowidmin=""
	f  s rowid=$o(make(rowid)) q:rowid=""  d
	. i rowidmin="" s rowidmin=rowid
	. i $l(rowid,"||")<$l(rowidmin,"||") s rowidmin=rowid
	. f  s field=$o(make(rowid,field)) q:field=""  d
	.. f  s ord=$o(make(rowid,field,ord)) q:ord=""  d
	... s sum=sum+$zcrc(rowid_","_field_","_ord_"="_make(rowid,field,ord),0)
	i '$l(rowidmin) w:'isajob "-" q  ; No hi ha res per indexar
	i sum=$g(^BQD(cube,0,rowidmin)) w:'isajob "-" q
	; Something changed 8-(
	w:'isajob "+"
	l +^BQD(cube,0,rowidmin)
	s changed=changed+1
	k makeold
	s (rowini,row)=rowidmin
	f  m makeold(row)=^BQD(cube,0,row) k ^(row) s row=$o(^BQD(cube,0,row)) q:row=""  q:$p(row,"||",1,$l(rowini,"||"))'=rowini
	m ^BQD(cube,0)=make
	; ----------------------
	k ^TMP($zn,$j,"TODO")
	s rowid=""
	f  s rowid=$o(makeold(rowid)) q:rowid=""  d
	. f  s field=$o(makeold(rowid,field)) q:field=""  d
	.. f  s ord=$o(makeold(rowid,field,ord)) q:ord=""  d
	... s v2=$p(makeold(rowid,field,ord),"\",1)
	... s v1=$p(makeold(rowid,field,ord),"\",2) i '$l(v1) s v1=$c(31)
	... s ^TMP($zn,$j,"TODO",field,rowid,v2,v1,0)=""
	f  s rowid=$o(makeold(rowid)) q:rowid=""  d
	. s (i,f,o)=""
	. f  s i=$o(makeold(i)) q:i=""  d
	.. s li=$l(i,"||"),lrowid=$l(rowid,"||")
	.. i li>lrowid,$p(rowid,"||",1,lrowid)'=$p(i,"||",1,lrowid) q
	.. i lrowid>li,$p(rowid,"||",1,li)'=$p(i,"||",1,li) q
	.. i li=lrowid q
	.. f  s f=$o(makeold(i,f)) q:f=""  d
	... f  s o=$o(makeold(i,f,o)) q:o=""  d
	.... s v2=$p(makeold(i,f,o),"\",1)
	.... s v1=$p(makeold(i,f,o),"\",2) i '$l(v1) s v1=$c(31)
	.... s ^TMP($zn,$j,"TODO",f,rowid,v2,v1,0)=""
	
	f  s rowid=$o(make(rowid)) q:rowid=""  d
	. f  s field=$o(make(rowid,field)) q:field=""  d
	.. f  s ord=$o(make(rowid,field,ord)) q:ord=""  d
	... s v2=$p(make(rowid,field,ord),"\",1)
	... s v1=$p(make(rowid,field,ord),"\",2) i '$l(v1) s v1=$c(31)
	... s ^TMP($zn,$j,"TODO",field,rowid,v2,v1,1)=""
	f  s rowid=$o(make(rowid)) q:rowid=""  d
	. s (i,f,o)=""
	. f  s i=$o(make(i)) q:i=""  d
	.. s li=$l(i,"||"),lrowid=$l(rowid,"||")
	.. i li>lrowid,$p(rowid,"||",1,lrowid)'=$p(i,"||",1,lrowid) q
	.. i lrowid>li,$p(rowid,"||",1,li)'=$p(i,"||",1,li) q
	.. i li=lrowid q
	.. f  s f=$o(make(i,f)) q:f=""  d
	... f  s o=$o(make(i,f,o)) q:o=""  d
	.... s v2=$p(make(i,f,o),"\",1)
	.... s v1=$p(make(i,f,o),"\",2) i '$l(v1) s v1=$c(31)
	.... s ^TMP($zn,$j,"TODO",f,rowid,v2,v1,1)=""
	s (f,r,v2,v1,w)=""
	f  s f=$o(^TMP($zn,$j,"TODO",f)) q:f=""  d
	. f  s r=$o(^TMP($zn,$j,"TODO",f,r)) q:r=""  d
	.. f  s v2=$o(^TMP($zn,$j,"TODO",f,r,v2)) q:v2=""  d
	... f  s v1=$o(^TMP($zn,$j,"TODO",f,r,v2,v1)) q:v1=""  d
	.... i $d(^TMP($zn,$j,"TODO",f,r,v2,v1,0)),$d(^TMP($zn,$j,"TODO",f,r,v2,v1,1)) k ^TMP($zn,$j,"TODO",f,r,v2,v1) q
	.... f  s w=$o(^TMP($zn,$j,"TODO",f,r,v2,v1,w)) q:w=""  d
	..... i w d setindex(f,r,v2,v1) q
	..... d delindex(f,r,v2,v1)
	s ^BQD(cube,0,rowidmin)=sum
	l -^BQD(cube,0,rowidmin)
	q
	
delindex(field,rowid,val2,val1)	n (cube,field,rowid,val2,val1)
	;w !,"delete field=",field," rowid=",rowid," val2=",val2," val1=",val1
	s rowid=$e(rowid,2,$l(rowid))
	s lev=$l(rowid,"||")
	
	s r=^BQD(cube,lev,1,rowid)
	s col=+$p(r,",",1),chunk=+$p(r,",",2)
	                
	s r=$g(^BQD(cube,lev,3,field,val1,val2,chunk))
	s $bit(r,col)=0
	s ^BQD(cube,lev,3,field,val1,val2,chunk)=r
	i $bitcount(r,1) q
	k ^BQD(cube,lev,3,field,val1,val2,chunk)
	i $d(^BQD(cube,lev,3,field,val1,val2))=1 k ^BQD(cube,lev,3,field,val1,val2)
	q
	
	;Recycle columns... Maybe too slow Mc_Fly Dec 28, 2005
	;s (f,i,j)="",swused=0
	;f  s f=$o(^BQD(cube,lev,3,f)) q:f=""  d  q:swused
	;. f  s i=$o(^BQD(cube,lev,3,f,i)) q:i=""  d  q:swused
	;.. f  s j=$o(^BQD(cube,lev,3,f,i,j)) q:j=""  s r=$g(^BQD(cube,lev,3,f,i,j,chunk)) i $bit(r,col)=1 s swused=1 q
	;
	;i 'swused d
	;. ;w !,"Reuse lev=",lev," chunk=",chunk," col=",col
	;. s ^BQD(cube,lev,4,chunk,col)=""
	;. s delrowid=^BQD(cube,lev,2,chunk,col)
	;. k ^BQD(cube,lev,2,chunk,col)
	;. k ^BQD(cube,lev,1,delrowid)	
	q
setindex(field,rowid,val2,val1)	n (cube,field,rowid,val2,val1)
	;w !,"setindex field=",field," rowid=",rowid," val2=",val2," val1=",val1
	s rowid=$e(rowid,2,$l(rowid))
	s lev=$l(rowid,"||")
	
	i '$d(^BQD(cube,lev,1,rowid)) d
	. s chunk=""
	. s chunk=$o(^BQD(cube,lev,4,chunk)) i $l(chunk) s col=$o(^BQD(cube,lev,4,chunk,"")) ;w !,"Recycled lev=",lev," chunk=",chunk," col=",col
	. i '$l(chunk) d
	.. ; Search a free Column,Chunk
	.. s chunk=$o(^BQD(cube,lev,2,""),-1)
	.. i chunk="" s chunk=1
	.. s col=$o(^BQD(cube,lev,2,chunk,""),-1)+1
	.. i col>64000 s chunk=chunk+1,col=1
	. s ^BQD(cube,lev,1,rowid)=col_","_chunk
	. s ^BQD(cube,lev,2,chunk,col)=rowid
	. k ^BQD(cube,lev,4,chunk,col)
	
	s r=$g(^BQD(cube,lev,1,rowid))
	s col=+$p(r,",",1),chunk=+$p(r,",",2)
	        
	s r=$g(^BQD(cube,lev,3,field,val1,val2,chunk))
	s $bit(r,col)=1
	s ^BQD(cube,lev,3,field,val1,val2,chunk)=r
	q
end
	s mess="Last "_$s(swfull:"full",1:"partial")_" rebuild at "_$zd($h,4)_" "_$zt($p($h,",",2))_" took "_$j(($zh-zhini)/60,0,0)_" minutes. Done "_changed_"/"_cur
	d setmess(mess)
	s $p(^BQD(cube),"\",swfull+1)=$zd($h,4)_" "_$zt($p($h,",",2))_" "_$j(($zh-zhini)/60,0,0)_" "_changed_"/"_cur
	k ^TMP($zn,$j)
	l -^BQD(cube,$s(swfull>0:"full",1:"partial"))
	; Purge old logs
	s d=$p($h,",",1)-7
	f  s d=$o(^BQL(cube,swfull,d),-1) q:d=""  k ^BQL(cube,swfull,d)
	q
setmess(txt)
	n d
	s d=+$h
	s ^BQL(cube,swfull,d,$j,$i(^BQL(cube,swfull,d,$j)))=$zdt($h,4)_" "_txt
	i 'isajob w !,txt,!
	q
err	
	s $zt=""
	d setmess("Last rebuild crash. Error:"_$ze)
	l -^BQD(cube,$s(swfull>0:"full",1:"partial"))
	d BACK^%ETN
	q
isanum(num)
	i '$isvalidnum(num) q 0
	i $e(num,1,2)="0." q 1
	i $e(num)="0" q 0
	i $f($zcvt(num,"u"),"E") q 0
	q 1
]]></Routine>
</Export>
