<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBQCMTL" type="INT" languagemode="0" generated="1"><![CDATA[
LVBQCMTL ; ML 15/6/2000 ; MVB Control code access for QC_MLTTestCodeLevel
 ;
 ; supported calls:
 ;
 ; $$insert^LVBQCMTL(par)
 ; $$update^LVBQCMTL(ROWID)
 ; $$delete^LVBQCMTL(ROWID,Comments)
 ; $$open^LVBQCMTL(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBQCMTL(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBQCMTL(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBQCMTL(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBQCMTL()
 ; $$select^LVBQCMTL(ROWID,skip)
 ; $$getall^LVBQCMTL(par,skip)
 ; $$getall1^LVBQCMTL(par,skip)
 ;
  ;---&SQL(DECLARE QCMTL CURSOR FOR SELECT * FROM QC_MLTTestCodeLevel
   ;---         WHERE QCMTL_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 ; insert the data
insert(par) d pre("N") s PLIST(0)=$g(par) k PLIST(1)
  ;---&SQL(insert INTO QC_MLTTestCodeLevel VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 i 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; update the data
update(ROWID) d pre("Y") s ROWID=$g(ROWID)
  ;---&SQL(UPDATE QC_MLTTestCodeLevel VALUES :PLIST() WHERE QCMTL_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; delete the data
delete(ROWID,Comments) s ROWID=$g(ROWID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM QC_MLTTestCodeLevel WHERE QCMTL_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 k ^TMP("Comments",$j)
 q SQLCODE
 ; open the cursor
open(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),skip=$g(skip)
  ;---&SQL(OPEN QCMTL)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %QCMTL0o
 q 0
 ; fetch the data
fetch(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) k PLIST s par=$g(par),skip=$g(skip)
  ;---&SQL(FETCH QCMTL INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 s PLIST=$o(PLIST(""),-1) 
 i 'SQLCODE d adjust
 q SQLCODE
 ; fetch all data
fetchbuffer(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),skip=$g(skip) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par,skip) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) n (par,skip,PLIST) s par=$g(par),skip=$g(skip) k ^TMP($zn,$j)
 i $$open(par,skip)
 f cnt=1:1 q:$$fetch(par,skip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ; close the cursor
close()  ;---&SQL(CLOSE QCMTL)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %QCMTL0c
 q 0
 ; select data by code
select(ROWID,skip) k PLIST s ROWID=$g(ROWID),skip=$g(skip)
  ;---&SQL(SELECT * INTO :PLIST() FROM QC_MLTTestCodeLevel WHERE QCMTL_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("","")
 i $l($g(PLIST(5))),$l(PLIST(3)),PLIST(3) s PLIST(5)=$j(+PLIST(5),0,$l($p(PLIST(3),".",2)))
 i $l($g(PLIST(8))),$l(PLIST(3)),PLIST(3) s PLIST(8)=$j(+PLIST(8),0,$l($p(PLIST(3),".",2)))
 i $l($g(PLIST(6))),$l(PLIST(4)),PLIST(4) s PLIST(6)=$j(+PLIST(6),0,$l($p(PLIST(4),".",2)))
 i $l($g(PLIST(9))),$l(PLIST(4)),PLIST(4) s PLIST(9)=$j(+PLIST(9),0,$l($p(PLIST(4),".",2)))
 q
 ; post-filing adjustments
adjust d PostSQL^SSUTIL4("")
 i $l($g(PLIST(5))),$l($g(PLIST(3))),PLIST(3) s PLIST(5)=$j(+PLIST(5),0,$l($p(PLIST(3),".",2)))
 i $l($g(PLIST(8))),$l($g(PLIST(3))),PLIST(3) s PLIST(8)=$j(+PLIST(8),0,$l($p(PLIST(3),".",2)))
 i $l($g(PLIST(6))),$l($g(PLIST(4))),PLIST(4) s PLIST(6)=$j(+PLIST(6),0,$l($p(PLIST(4),".",2)))
 i $l($g(PLIST(9))),$l($g(PLIST(4))),PLIST(4) s PLIST(9)=$j(+PLIST(9),0,$l($p(PLIST(4),".",2)))
 q
getall(par) n (PLIST,par) k ^TMP($zn,$j) s par=$g(par)
 i $$open(par)
 f cnt=1:1 q:$$fetch(par)  s ^TMP($zn,$j,cnt)=$p(PLIST(1),$c(1))_$c(2)_"Level : "_$p(PLIST(2),$c(1))_$c(2)_$p(PLIST(2),$c(1))
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
getall1(par) n (PLIST,par) k ^TMP($zn,$j) s par=$g(par)
 i $$open(par)
 f cnt=1:1 q:$$fetch(par)  f J=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(2),J)=$p(PLIST(J),$c(1))
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
%QCMTL0o s $zt="%QCMTL0E" s SQLCODE=$s($g(%QCMTL0c):-101,1:0) q:SQLCODE'=0  s %QCMTL0d(20)=0 s %QCMTL0d(21)=0,%QCMTL0d(22)=""
 s %QCMTL0d(13)=$g(par)
 s %QCMTL0c=1 q
%QCMTL0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %QCMTL0c,%QCMTL0d,%QCMTL0E,%QCMTL0l,%QCMTL0n,%QCMTL0R,%QCMTL0Z q
%0Afirst 
 ; asl MOD# 2
 s %QCMTL0d(1)=%QCMTL0d(13)
 s %QCMTL0d(15)=$p(%QCMTL0d(1),"||"),%QCMTL0d(16)=$p(%QCMTL0d(1),"||",2),%QCMTL0d(17)=$p(%QCMTL0d(1),"||",3),%QCMTL0d(18)=$p(%QCMTL0d(1),"||",4),%QCMTL0d(19)=$p(%QCMTL0d(1),"||",5)
 i %QCMTL0d(15)="" g %0ABdun
 i %QCMTL0d(16)="" g %0ABdun
 i %QCMTL0d(17)="" g %0ABdun
 i %QCMTL0d(18)="" g %0ABdun
 i %QCMTL0d(19)="" g %0ABdun
 s %QCMTL0d(3)=""
%0ABk1 s %QCMTL0d(3)=$o(^TTQC(%QCMTL0d(15),"LOT",%QCMTL0d(16),"TYPE",%QCMTL0d(17),%QCMTL0d(18),"TEST",%QCMTL0d(19),"DATA",%QCMTL0d(3)))
 i %QCMTL0d(3)="" g %0ABdun
 s %QCMTL0d(38)=$g(^TTQC(%QCMTL0d(15),"LOT",%QCMTL0d(16),"TYPE",%QCMTL0d(17),%QCMTL0d(18),"TEST",%QCMTL0d(19),"DATA",%QCMTL0d(3)))
 s %QCMTL0d(4)=$p(%QCMTL0d(38),"\",1) s %QCMTL0d(5)=$p(%QCMTL0d(38),"\",2) s %QCMTL0d(6)=$p(%QCMTL0d(38),"\",3) s %QCMTL0d(7)=$p(%QCMTL0d(38),"\",4) s %QCMTL0d(8)=$p(%QCMTL0d(38),"\",5) s %QCMTL0d(9)=$p(%QCMTL0d(38),"\",6) s %QCMTL0d(10)=$p(%QCMTL0d(38),"\",7) s %QCMTL0d(11)=$p(%QCMTL0d(38),"\",8) s %QCMTL0d(12)=$p(%QCMTL0d(38),"\",9)
 s %QCMTL0d(2)=(%QCMTL0d(15))_"||"_(%QCMTL0d(16))_"||"_(%QCMTL0d(17))_"||"_(%QCMTL0d(18))_"||"_(%QCMTL0d(19))_"||"_(%QCMTL0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTQC($p(%QCMTL0d(2),"||",1),"LOT",$p(%QCMTL0d(2),"||",2),"TYPE",$p(%QCMTL0d(2),"||",3),$p(%QCMTL0d(2),"||",4),"TEST",$p(%QCMTL0d(2),"||",5),"DATA",$p(%QCMTL0d(2),"||",6))#"S":$zu(115,4) i $t { s %QCMTL0d(21)=1,%QCMTL0d(22)=$name(^TTQC($p(%QCMTL0d(2),"||",1),"LOT",$p(%QCMTL0d(2),"||",2),"TYPE",$p(%QCMTL0d(2),"||",3),$p(%QCMTL0d(2),"||",4),"TEST",$p(%QCMTL0d(2),"||",5),"DATA",$p(%QCMTL0d(2),"||",6)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.QC_MLTTestCodeLevel for RowID value: "_%QCMTL0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %QCMTL0d(15)=$p(%QCMTL0d(2),"||"),%QCMTL0d(16)=$p(%QCMTL0d(2),"||",2),%QCMTL0d(17)=$p(%QCMTL0d(2),"||",3),%QCMTL0d(18)=$p(%QCMTL0d(2),"||",4),%QCMTL0d(19)=$p(%QCMTL0d(2),"||",5),%QCMTL0d(3)=$p(%QCMTL0d(2),"||",6)
 i %QCMTL0d(15)'="",%QCMTL0d(16)'="",%QCMTL0d(17)'="",%QCMTL0d(18)'="",%QCMTL0d(19)'="",%QCMTL0d(3)'="",$d(^TTQC(%QCMTL0d(15),"LOT",%QCMTL0d(16),"TYPE",%QCMTL0d(17),%QCMTL0d(18),"TEST",%QCMTL0d(19),"DATA",%QCMTL0d(3)))
 e  g %0ACdun
 s %QCMTL0d(54)=$g(^TTQC(%QCMTL0d(15),"LOT",%QCMTL0d(16),"TYPE",%QCMTL0d(17),%QCMTL0d(18),"TEST",%QCMTL0d(19),"DATA",%QCMTL0d(3)))
 s %QCMTL0d(4)=$p(%QCMTL0d(54),"\",1) s %QCMTL0d(5)=$p(%QCMTL0d(54),"\",2) s %QCMTL0d(6)=$p(%QCMTL0d(54),"\",3) s %QCMTL0d(7)=$p(%QCMTL0d(54),"\",4) s %QCMTL0d(8)=$p(%QCMTL0d(54),"\",5) s %QCMTL0d(9)=$p(%QCMTL0d(54),"\",6) s %QCMTL0d(10)=$p(%QCMTL0d(54),"\",7) s %QCMTL0d(11)=$p(%QCMTL0d(54),"\",8) s %QCMTL0d(12)=$p(%QCMTL0d(54),"\",9)
 s %QCMTL0d(1)=$p(%QCMTL0d(2),"||",1,5)
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %QCMTL0d(20)=%QCMTL0d(20)+1,%ROWCOUNT=%QCMTL0d(20),%ROWID=%QCMTL0d(2),%QCMTL0c=10 q
%QCMTL0f i '$g(%QCMTL0c) { s SQLCODE=-102 q  } i %QCMTL0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%QCMTL0d(20))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%QCMTL0d(20),%QCMTL0c=100 q  } g %0Afirst:%QCMTL0c=1
%0ACdun i $zu(115,2)=1,$g(%QCMTL0d(21))=1 { l -@%QCMTL0d(22) s %QCMTL0d(21)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%QCMTL0d(20),SQLCODE=100,%QCMTL0c=100 q
%QCMTL0c i '$g(%QCMTL0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%QCMTL0d(20)),1:0)
 i $zu(115,2)=1,$g(%QCMTL0d(21))=1 { l -@%QCMTL0d(22) } k %QCMTL0c,%QCMTL0d,%QCMTL0E,%QCMTL0l,%QCMTL0n,%QCMTL0R,%QCMTL0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %QCMTL0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:11 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.QCMLTTestCodeLevel.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(10)=0 s %mmmsqld(11)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3),%mmmsqld(7)=$p(%mmmsqld(2),"||",4),%mmmsqld(8)=$p(%mmmsqld(2),"||",5),%mmmsqld(9)=$p(%mmmsqld(2),"||",6)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",%mmmsqld(8)'="",%mmmsqld(9)'="",$d(^TTQC(%mmmsqld(4),"LOT",%mmmsqld(5),"TYPE",%mmmsqld(6),%mmmsqld(7),"TEST",%mmmsqld(8),"DATA",%mmmsqld(9)))
 e  g %0EBdun
 s %mmmsqld(27)=$$%getlock^User.QCMLTTestCodeLevel.T1(%mmmsqld(2)) i '%mmmsqld(27) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3),%mmmsqld(7)=$p(%mmmsqld(2),"||",4),%mmmsqld(8)=$p(%mmmsqld(2),"||",5),%mmmsqld(9)=$p(%mmmsqld(2),"||",6)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",%mmmsqld(8)'="",%mmmsqld(9)'="",$d(^TTQC(%mmmsqld(4),"LOT",%mmmsqld(5),"TYPE",%mmmsqld(6),%mmmsqld(7),"TEST",%mmmsqld(8),"DATA",%mmmsqld(9)))
 e  g %0ECdun
 k %data
 f icol=0:1:11 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.QCMLTTestCodeLevel.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(10))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(27)=1 %ReleaseLock^User.QCMLTTestCodeLevel.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(27)=1 %ReleaseLock^User.QCMLTTestCodeLevel.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(10)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(27))=1 %ReleaseLock^User.QCMLTTestCodeLevel.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(9)=0 s %mmmsqld(10)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3),%mmmsqld(6)=$p(%mmmsqld(1),"||",4),%mmmsqld(7)=$p(%mmmsqld(1),"||",5),%mmmsqld(8)=$p(%mmmsqld(1),"||",6)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",%mmmsqld(8)'="",$d(^TTQC(%mmmsqld(3),"LOT",%mmmsqld(4),"TYPE",%mmmsqld(5),%mmmsqld(6),"TEST",%mmmsqld(7),"DATA",%mmmsqld(8)))
 e  g %0GBdun
 s %mmmsqld(26)=$$%getlock^User.QCMLTTestCodeLevel.T1(%mmmsqld(1)) i '%mmmsqld(26) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3),%mmmsqld(6)=$p(%mmmsqld(1),"||",4),%mmmsqld(7)=$p(%mmmsqld(1),"||",5),%mmmsqld(8)=$p(%mmmsqld(1),"||",6)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",%mmmsqld(8)'="",$d(^TTQC(%mmmsqld(3),"LOT",%mmmsqld(4),"TYPE",%mmmsqld(5),%mmmsqld(6),"TEST",%mmmsqld(7),"DATA",%mmmsqld(8)))
 e  g %0GCdun
 d %delete^User.QCMLTTestCodeLevel.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(9))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(26)=1 %ReleaseLock^User.QCMLTTestCodeLevel.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(26)=1 %ReleaseLock^User.QCMLTTestCodeLevel.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(9)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(26))=1 %ReleaseLock^User.QCMLTTestCodeLevel.T1(%mmmsqld(1)) g %0Gc
%0Jo d %QCMTL0f q:SQLCODE'=0
 s PLIST(0)=%QCMTL0d(1),PLIST(1)=%QCMTL0d(2),PLIST(2)=%QCMTL0d(3),PLIST(3)=%QCMTL0d(4),PLIST(4)=%QCMTL0d(5),PLIST(5)=%QCMTL0d(6),PLIST(6)=%QCMTL0d(7),PLIST(7)=%QCMTL0d(8),PLIST(8)=%QCMTL0d(9),PLIST(9)=%QCMTL0d(10),PLIST(10)=%QCMTL0d(11),PLIST(11)=%QCMTL0d(12)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(21)=0,%mmmsqld(22)=""
 s %mmmsqld(14)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(14)
 s %mmmsqld(16)=$p(PLIST(1),"||"),%mmmsqld(17)=$p(PLIST(1),"||",2),%mmmsqld(18)=$p(PLIST(1),"||",3),%mmmsqld(19)=$p(PLIST(1),"||",4),%mmmsqld(20)=$p(PLIST(1),"||",5),PLIST(2)=$p(PLIST(1),"||",6)
 i %mmmsqld(16)'="",%mmmsqld(17)'="",%mmmsqld(18)'="",%mmmsqld(19)'="",%mmmsqld(20)'="",PLIST(2)'="",$d(^TTQC(%mmmsqld(16),"LOT",%mmmsqld(17),"TYPE",%mmmsqld(18),%mmmsqld(19),"TEST",%mmmsqld(20),"DATA",PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(38)=$g(^TTQC(%mmmsqld(16),"LOT",%mmmsqld(17),"TYPE",%mmmsqld(18),%mmmsqld(19),"TEST",%mmmsqld(20),"DATA",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(38),"\",1) s PLIST(4)=$p(%mmmsqld(38),"\",2) s PLIST(5)=$p(%mmmsqld(38),"\",3) s PLIST(6)=$p(%mmmsqld(38),"\",4) s PLIST(7)=$p(%mmmsqld(38),"\",5) s PLIST(8)=$p(%mmmsqld(38),"\",6) s PLIST(9)=$p(%mmmsqld(38),"\",7) s PLIST(10)=$p(%mmmsqld(38),"\",8) s PLIST(11)=$p(%mmmsqld(38),"\",9)
 s PLIST(0)=$p(PLIST(1),"||",1,5)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TTQC($p(PLIST(1),"||",1),"LOT",$p(PLIST(1),"||",2),"TYPE",$p(PLIST(1),"||",3),$p(PLIST(1),"||",4),"TEST",$p(PLIST(1),"||",5),"DATA",$p(PLIST(1),"||",6))#"S":$zu(115,4) i $t { s %mmmsqld(21)=1,%mmmsqld(22)=$name(^TTQC($p(PLIST(1),"||",1),"LOT",$p(PLIST(1),"||",2),"TYPE",$p(PLIST(1),"||",3),$p(PLIST(1),"||",4),"TEST",$p(PLIST(1),"||",5),"DATA",$p(PLIST(1),"||",6)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.QC_MLTTestCodeLevel for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(16)=$p(PLIST(1),"||"),%mmmsqld(17)=$p(PLIST(1),"||",2),%mmmsqld(18)=$p(PLIST(1),"||",3),%mmmsqld(19)=$p(PLIST(1),"||",4),%mmmsqld(20)=$p(PLIST(1),"||",5),PLIST(2)=$p(PLIST(1),"||",6)
 i %mmmsqld(16)'="",%mmmsqld(17)'="",%mmmsqld(18)'="",%mmmsqld(19)'="",%mmmsqld(20)'="",PLIST(2)'="",$d(^TTQC(%mmmsqld(16),"LOT",%mmmsqld(17),"TYPE",%mmmsqld(18),%mmmsqld(19),"TEST",%mmmsqld(20),"DATA",PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(54)=$g(^TTQC(%mmmsqld(16),"LOT",%mmmsqld(17),"TYPE",%mmmsqld(18),%mmmsqld(19),"TEST",%mmmsqld(20),"DATA",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(54),"\",1) s PLIST(4)=$p(%mmmsqld(54),"\",2) s PLIST(5)=$p(%mmmsqld(54),"\",3) s PLIST(6)=$p(%mmmsqld(54),"\",4) s PLIST(7)=$p(%mmmsqld(54),"\",5) s PLIST(8)=$p(%mmmsqld(54),"\",6) s PLIST(9)=$p(%mmmsqld(54),"\",7) s PLIST(10)=$p(%mmmsqld(54),"\",8) s PLIST(11)=$p(%mmmsqld(54),"\",9)
 s PLIST(0)=$p(PLIST(1),"||",1,5)
%0LBuncommitted ;
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(21))=1 { l -@%mmmsqld(22) s %mmmsqld(21)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(21))=1 { l -@%mmmsqld(22) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
