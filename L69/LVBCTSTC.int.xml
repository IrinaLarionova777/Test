<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBCTSTC" type="INT" languagemode="0" generated="1"><![CDATA[
LVBCTSTC ; IG 30/4/98 ;MVB Control code access for CT_StorageContainers
 ;
 ; supported calls:
 ;
 ; $$select^LVBCTSTC(ROWID,skip)
 ; $$seldata^LVBCTSTC(ROWID,data)
 ; $$open^LVBCTSTC(text,active,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBCTSTC(text,active,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBCTSTC(text,active,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBCTSTC(text,active,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBCTSTC()
 ; $$insert^LVBCTSTC()
 ; $$update^LVBCTSTC(ROWID)
 ; $$delete^LVBCTSTC(ROWID,Comments)
 ; $$getall^LVBCTSTC(active)
 ;
  ;---&SQL(DECLARE CTSTC CURSOR FOR SELECT * FROM CT_StorageContainers
   ;---         WHERE ((CTSTC_ActiveFlag = :active) OR (:active IS NULL))
   ;---         AND (%ALPHAUP(CTSTC_Code) %STARTSWITH %ALPHAUP(:code))
   ;---         AND (%ALPHAUP(CTSTC_Description) %STARTSWITH %ALPHAUP(:descr)))
   ;--- ** SQL PUBLIC Variables: SQLCODE, active, code, descr
 ;
 ; Insert the data
insert() K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO CT_StorageContainers VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) S ROWID=$G(ROWID) d pre("Y") 
  ;---&SQL(UPDATE CT_StorageContainers VALUES :PLIST() WHERE CTSTC_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Delete the data
delete(ROWID,Comments) s ROWID=$g(ROWID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM CT_StorageContainers WHERE CTSTC_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 k ^TMP("Comments",$j)
 Q SQLCODE
 ;
 ; Open the cursor
open(text,active,skip,p3,p4,p5,p6,p7,p8,p9) s text=$g(text),active=$g(active),skip=$g(skip)
 s code=$p(text,$c(1),1),descr=$p(text,$c(1),2)
  ;---&SQL(OPEN CTSTC)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTSTC0o
 Q 0
 ;
 ; Fetch the data
fetch(text,active,skip,p3,p4,p5,p6,p7,p8,p9) K PLIST s text=$g(text),active=$g(active),skip=$g(skip)
 s code=$p(text,$c(1),1),descr=$p(text,$c(1),2)
  ;---&SQL(FETCH CTSTC INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(text,active,skip,p3,p4,p5,p6,p7,p8,p9) k ^TMP($zn,$j) s text=$g(text),active=$g(active),skip=$g(skip)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(text,active,skip) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(text,active,skip,p3,p4,p5,p6,p7,p8,p9) N (text,active,skip,PLIST) s text=$g(text),active=$g(active),skip=$g(skip) K ^TMP($zn,$j)
 i $$open(text,active,skip)
 f cnt=1:1 Q:$$fetch(text,active,skip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor 
close()  ;---&SQL(CLOSE CTSTC) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTSTC0c 
 q 0
 ; select data by code and field No
seldata(ROWID,data) n (ROWID,data) s ROWID=$g(ROWID),data=$g(data),result=""
 i $l(ROWID) d  q result
 .i data=8 s result=$p($g(^TTAB("ST-CONT",ROWID)),"\",6) q
 .i data=13 s result=$p($g(^TTAB("ST-CONT",ROWID)),"\",11) q
 .i '$$select(ROWID,"Y") s result=$g(PLIST(data))
 q result
 ; select data by code
select(ROWID,skip) K PLIST S ROWID=$G(ROWID),skip=$g(skip)
  ;---&SQL(SELECT * INTO :PLIST() FROM CT_StorageContainers WHERE CTSTC_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("","")
 S (PLIST(1),PLIST(2))=$$ALPHAUP^SSUTIL4(PLIST(2))
 q
 ;
 ; Post-filing adjustments
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 i $g(skip)="Y" q
 ;
 I $G(PLIST(7))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTSPE(plist(7),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(7)=X K plist
 Q
getall(active) N (active,PLIST) K ^TMP($ZN,$J) s active=$g(active)
 I $$open("Y",active)
 F cnt=1:1 Q:$$fetch("Y",active)  D
 .s str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))_$c(2)_str
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
 ;
 q
%CTSTC0o s $zt="%CTSTC0E" s SQLCODE=$s($g(%CTSTC0c):-101,1:0) q:SQLCODE'=0  s %CTSTC0d(26)=0 s %CTSTC0d(27)=0,%CTSTC0d(28)=""
 s %CTSTC0d(13)=$g(active),%CTSTC0d(14)=$g(active),%CTSTC0d(16)=$g(code),%CTSTC0d(19)=$g(descr)
 s %CTSTC0d(23)=$zu(28,%CTSTC0d(13),7)
 s %CTSTC0d(20)=$zu(28,%CTSTC0d(19),6)
 s %CTSTC0d(17)=$zu(28,%CTSTC0d(16),6)
 s %CTSTC0c=1 q
%CTSTC0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %CTSTC0c,%CTSTC0d,%CTSTC0E,%CTSTC0l,%CTSTC0n,%CTSTC0R,%CTSTC0Z q
%0Afirst 
 ; asl MOD# 2
 s %CTSTC0d(1)=""
%0ABk1 s %CTSTC0d(1)=$o(^TTST(%CTSTC0d(1)))
 i %CTSTC0d(1)="" g %0ABdun
 s %CTSTC0d(15)=$zu(28,%CTSTC0d(1),6)
 g:'(($c(0)[%CTSTC0d(17))||(%CTSTC0d(17)=$c(32,0)&&($e(%CTSTC0d(15))=$c(32)))||(%CTSTC0d(17)=$e(%CTSTC0d(15),1,$l(%CTSTC0d(17))))) %0ABk1
 i %CTSTC0d(1)'="",$d(^TTAB("ST-CONT",%CTSTC0d(1)))
 e  g %0ABk1
 s %CTSTC0d(35)=$g(^TTAB("ST-CONT",%CTSTC0d(1)))
 s %CTSTC0d(2)=$p(%CTSTC0d(35),"\",1) s %CTSTC0d(3)=$p(%CTSTC0d(35),"\",2) s %CTSTC0d(4)=$p(%CTSTC0d(35),"\",3) s %CTSTC0d(5)=$p(%CTSTC0d(35),"\",4) s %CTSTC0d(6)=$p(%CTSTC0d(35),"\",5) s %CTSTC0d(7)=$p(%CTSTC0d(35),"\",6) s %CTSTC0d(8)=$p(%CTSTC0d(35),"\",7) s %CTSTC0d(9)=$p(%CTSTC0d(35),"\",8) s %CTSTC0d(10)=$p(%CTSTC0d(35),"\",9) s %CTSTC0d(11)=$p(%CTSTC0d(35),"\",10) s %CTSTC0d(12)=$p(%CTSTC0d(35),"\",11)
 s %CTSTC0d(22)=$zu(28,%CTSTC0d(8),7) s %CTSTC0d(18)=$zu(28,%CTSTC0d(2),6)
 g:'(($c(0)[%CTSTC0d(20))||(%CTSTC0d(20)=$c(32,0)&&($e(%CTSTC0d(18))=$c(32)))||(%CTSTC0d(20)=$e(%CTSTC0d(18),1,$l(%CTSTC0d(20))))) %0ABk1
 g:'(((%CTSTC0d(22)'=" ")&&(%CTSTC0d(22)=%CTSTC0d(23)))||(%CTSTC0d(14)="")) %0ABk1
 g:'(%CTSTC0d(18)'="") %0ABk1
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTAB("ST-CONT",$p(%CTSTC0d(1),"||",1))#"S":$zu(115,4) i $t { s %CTSTC0d(27)=1,%CTSTC0d(28)=$name(^TTAB("ST-CONT",$p(%CTSTC0d(1),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_StorageContainers for RowID value: "_%CTSTC0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %CTSTC0d(24)=$lb(""_%CTSTC0d(18),""_%CTSTC0d(15),""_%CTSTC0d(22))
 i %CTSTC0d(1)'="",$d(^TTAB("ST-CONT",%CTSTC0d(1)))
 e  g %0ACdun
 s %CTSTC0d(40)=$g(^TTAB("ST-CONT",%CTSTC0d(1)))
 s %CTSTC0d(2)=$p(%CTSTC0d(40),"\",1) s %CTSTC0d(3)=$p(%CTSTC0d(40),"\",2) s %CTSTC0d(4)=$p(%CTSTC0d(40),"\",3) s %CTSTC0d(5)=$p(%CTSTC0d(40),"\",4) s %CTSTC0d(6)=$p(%CTSTC0d(40),"\",5) s %CTSTC0d(7)=$p(%CTSTC0d(40),"\",6) s %CTSTC0d(8)=$p(%CTSTC0d(40),"\",7) s %CTSTC0d(9)=$p(%CTSTC0d(40),"\",8) s %CTSTC0d(10)=$p(%CTSTC0d(40),"\",9) s %CTSTC0d(11)=$p(%CTSTC0d(40),"\",10) s %CTSTC0d(12)=$p(%CTSTC0d(40),"\",11)
 s %CTSTC0d(22)=$zu(28,%CTSTC0d(8),7) s %CTSTC0d(18)=$zu(28,%CTSTC0d(2),6) s %CTSTC0d(15)=$zu(28,%CTSTC0d(1),6)
 s %CTSTC0d(25)=$lb(""_%CTSTC0d(18),""_%CTSTC0d(15),""_%CTSTC0d(22))
 g:%CTSTC0d(24)'=%CTSTC0d(25) %0ACdun
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %CTSTC0d(26)=%CTSTC0d(26)+1,%ROWCOUNT=%CTSTC0d(26),%ROWID=%CTSTC0d(1),%CTSTC0c=10 q
%CTSTC0f i '$g(%CTSTC0c) { s SQLCODE=-102 q  } i %CTSTC0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%CTSTC0d(26))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%CTSTC0d(26),%CTSTC0c=100 q  } g %0Afirst:%CTSTC0c=1
%0ACdun i $zu(115,2)=1,$g(%CTSTC0d(27))=1 { l -@%CTSTC0d(28) s %CTSTC0d(27)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%CTSTC0d(26),SQLCODE=100,%CTSTC0c=100 q
%CTSTC0c i '$g(%CTSTC0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%CTSTC0d(26)),1:0)
 i $zu(115,2)=1,$g(%CTSTC0d(27))=1 { l -@%CTSTC0d(28) } k %CTSTC0c,%CTSTC0d,%CTSTC0E,%CTSTC0l,%CTSTC0n,%CTSTC0R,%CTSTC0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %CTSTC0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:13 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.CTStorageContainers.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(4)=0 s %mmmsqld(5)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 i %mmmsqld(2)'="",$d(^TTAB("ST-CONT",%mmmsqld(2)))
 e  g %0EBdun
 s %mmmsqld(10)=$$%getlock^User.CTStorageContainers.T1(%mmmsqld(2)) i '%mmmsqld(10) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 i %mmmsqld(2)'="",$d(^TTAB("ST-CONT",%mmmsqld(2)))
 e  g %0ECdun
 k %data
 f icol=0:1:13 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.CTStorageContainers.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(4))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(10)=1 %ReleaseLock^User.CTStorageContainers.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(10)=1 %ReleaseLock^User.CTStorageContainers.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(4)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(10))=1 %ReleaseLock^User.CTStorageContainers.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(3)=0 s %mmmsqld(4)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 i %mmmsqld(1)'="",$d(^TTAB("ST-CONT",%mmmsqld(1)))
 e  g %0GBdun
 s %mmmsqld(9)=$$%getlock^User.CTStorageContainers.T1(%mmmsqld(1)) i '%mmmsqld(9) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 i %mmmsqld(1)'="",$d(^TTAB("ST-CONT",%mmmsqld(1)))
 e  g %0GCdun
 d %delete^User.CTStorageContainers.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(3))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(9)=1 %ReleaseLock^User.CTStorageContainers.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(9)=1 %ReleaseLock^User.CTStorageContainers.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(3)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(9))=1 %ReleaseLock^User.CTStorageContainers.T1(%mmmsqld(1)) g %0Gc
%0Jo d %CTSTC0f q:SQLCODE'=0
 s PLIST(1)=%CTSTC0d(1),PLIST(2)=%CTSTC0d(1),PLIST(3)=%CTSTC0d(2),PLIST(4)=%CTSTC0d(3),PLIST(5)=%CTSTC0d(4),PLIST(6)=%CTSTC0d(5),PLIST(7)=%CTSTC0d(6),PLIST(8)=%CTSTC0d(7),PLIST(9)=%CTSTC0d(8),PLIST(10)=%CTSTC0d(9),PLIST(11)=%CTSTC0d(10),PLIST(12)=%CTSTC0d(11),PLIST(13)=%CTSTC0d(12)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(16)=0,%mmmsqld(17)=""
 s %mmmsqld(14)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(2)=%mmmsqld(14)
 i PLIST(2)'="",$d(^TTAB("ST-CONT",PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(22)=$g(^TTAB("ST-CONT",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(22),"\",1) s PLIST(4)=$p(%mmmsqld(22),"\",2) s PLIST(5)=$p(%mmmsqld(22),"\",3) s PLIST(6)=$p(%mmmsqld(22),"\",4) s PLIST(7)=$p(%mmmsqld(22),"\",5) s PLIST(8)=$p(%mmmsqld(22),"\",6) s PLIST(9)=$p(%mmmsqld(22),"\",7) s PLIST(10)=$p(%mmmsqld(22),"\",8) s PLIST(11)=$p(%mmmsqld(22),"\",9) s PLIST(12)=$p(%mmmsqld(22),"\",10) s PLIST(13)=$p(%mmmsqld(22),"\",11)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TTAB("ST-CONT",$p(PLIST(2),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(16)=1,%mmmsqld(17)=$name(^TTAB("ST-CONT",$p(PLIST(2),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_StorageContainers for RowID value: "_PLIST(2) ztrap "LOCK"  }
 ; asl MOD# 3
 i PLIST(2)'="",$d(^TTAB("ST-CONT",PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(27)=$g(^TTAB("ST-CONT",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(27),"\",1) s PLIST(4)=$p(%mmmsqld(27),"\",2) s PLIST(5)=$p(%mmmsqld(27),"\",3) s PLIST(6)=$p(%mmmsqld(27),"\",4) s PLIST(7)=$p(%mmmsqld(27),"\",5) s PLIST(8)=$p(%mmmsqld(27),"\",6) s PLIST(9)=$p(%mmmsqld(27),"\",7) s PLIST(10)=$p(%mmmsqld(27),"\",8) s PLIST(11)=$p(%mmmsqld(27),"\",9) s PLIST(12)=$p(%mmmsqld(27),"\",10) s PLIST(13)=$p(%mmmsqld(27),"\",11)
%0LBuncommitted ;
 s PLIST(1)=PLIST(2)
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(16))=1 { l -@%mmmsqld(17) s %mmmsqld(16)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(16))=1 { l -@%mmmsqld(17) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
