<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="mt4801" type="INT" languagemode="0"><![CDATA[
mt4801  ; Compiled May 8, 2007 15:09:22 for Cache for Windows
delete(%rowid,%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%data(1)=%rowid,tupkill=1
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt4801(.%edit) i SQLCODE s SQLCODE=-106 g gunlock
 d trig0C^mt4801
 d file
 g gunlock
insert(%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%edit=1
 d insertnw^mt4801(+%check=1) i '%ok s SQLCODE=-104 q
winsert i $c(1)[%data(1),$g(%data(0))'="",$g(%data(2))'="" d
 . s %data(1)=$g(%data(0))_"||"_$g(%data(2))
 . d insertnw^mt4801(+%check=1,0,1) i '%ok s SQLCODE=-104 q
 s %ROWID=%data(1)
 d:%check'["nolock" glock q:SQLCODE
 d:%check uniqfile(-104) i '%ok s SQLCODE=-104 g gunlock
 i +%check d required^mt4801 i '%ok s SQLCODE=-108 g gunlock
 d file
 d trig0A^mt4801
 g gunlock
update(%rowid,%check,%copyedi) n icol,ir,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1
 i '%copyedi f icol=0:1:4 k:'$d(%edit(icol)) %data(icol)
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt4801(.%edit) i SQLCODE s SQLCODE=-109 g gunlock
 f icol=0:1:4 i '$d(%data(icol)),$d(%edit(icol)) s %data(icol)=%edit(icol) d:$d(%edit(icol,1))  k %edit(icol)
 . f ir=1:1:%edit(icol) s %data(icol,ir)=%edit(icol,ir)
 d uniqfile(-105) i '%ok s SQLCODE=-105 g gunlock
 d updatenw^mt4801(%check) i '%ok s SQLCODE=-105 g gunlock
 i +%check d required^mt4801 i '%ok s SQLCODE=-108 g gunlock
 d file
 d trig0B^mt4801
 g gunlock
lock(%ROWID)   ;  user entry
glock q:$c(1)[%ROWID
 l +^TTQC($p(%ROWID,"||",1,1),"LOT",$p(%ROWID,"||",2,2),"TYPE",$p(%ROWID,"||",3,3),$p(%ROWID,"||",4,4),"TEST",$p(%ROWID,"||",5,5)):5 e  s SQLCODE=-110
 q
unlock(%ROWID)   ;  user entry
gunlock q:%check["nolock"
 q:$c(1)[%ROWID
 l -^TTQC($p(%ROWID,"||",1,1),"LOT",$p(%ROWID,"||",2,2),"TYPE",$p(%ROWID,"||",3,3),$p(%ROWID,"||",4,4),"TEST",$p(%ROWID,"||",5,5))
 q
file n subs,tempn,irep,x,node,sn s %file=1,sn=0,subs(3349)=$p(%data(1),"||",1,1),subs(3358)=$p(%data(1),"||",2,2),subs(3374)=$p(%data(1),"||",3,3),subs(3375)=$p(%data(1),"||",4,4)
 i $g(tupkill) k ^TTQC(subs(3349),"LOT",subs(3358),"TYPE",subs(3374),subs(3375),"TEST",%edit(2))
 g:$g(tupkill) maps
 s:$g(%edit) tempn=""
 i $d(%edit(3)) s:'($d(tempn)#2) tempn=$g(^TTQC(subs(3349),"LOT",subs(3358),"TYPE",subs(3374),subs(3375),"TEST",%data(2))) s $p(tempn,"\",1)=$p($g(%data(3)),$c(1))
 i $d(%edit(4)) s:'($d(tempn)#2) tempn=$g(^TTQC(subs(3349),"LOT",subs(3358),"TYPE",subs(3374),subs(3375),"TEST",%data(2))) s $p(tempn,"\",2)=$g(%data(4))
 s:$d(tempn)#2 ^TTQC(subs(3349),"LOT",subs(3358),"TYPE",subs(3374),subs(3375),"TEST",%data(2))=tempn
maps q
trig0A n %ROWID,%didit,SQLCODE s %didit="" k %skip
 d trigA0A i $d(%skip) g trgdoneA
 d trigB0A i $d(%skip) g trgdoneA
trgdoneA q  ;  trigger done
trigA0A s %didit=1
 i $$insert^SSAUDIT(480)
 q
trigB0A s %didit=1
 d POFILINS^at480
 q
trig0B n %ROWID,%didit,SQLCODE s %didit="" k %skip
 d trigA0B i $d(%skip) g trgdoneB
 d trigB0B i $d(%skip) g trgdoneB
trgdoneB q  ;  trigger done
trigA0B s %didit=1
 i $$update^SSAUDIT(480)
 q
trigB0B s %didit=1
 d POFILUPD^at480
 q
%0Do n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val  ;  Code for SQL: 
 s %mmmsqlE=$zt,$zt="%0Derr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(%data(1),$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$e(%data(1),2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=$g(%mmmsqld(2))
 s %mmmsqld(5)=$p($g(%mmmsqld(1)),"||",1,1),%mmmsqld(6)=$p($g(%mmmsqld(1)),"||",2,2),%mmmsqld(7)=$p($g(%mmmsqld(1)),"||",3,3),%mmmsqld(8)=$p($g(%mmmsqld(1)),"||",4,4),%mmmsqld(9)=$p($g(%mmmsqld(1)),"||",5,5)
 i %mmmsqld(5)="" g %0DBdun
 i %mmmsqld(6)="" g %0DBdun
 i %mmmsqld(7)="" g %0DBdun
 i %mmmsqld(8)="" g %0DBdun
 i %mmmsqld(9)="" g %0DBdun
 s %mmmsqld(4)=""
%0DBk1 s %mmmsqld(4)=$o(^TTQC(%mmmsqld(5),"LOT",%mmmsqld(6),"TYPE",%mmmsqld(7),%mmmsqld(8),"TEST",%mmmsqld(9),"DATA",%mmmsqld(4)))
 i %mmmsqld(4)="" g %0DBdun
 s %mmmsqld(3)=(%mmmsqld(5))_"||"_(%mmmsqld(6))_"||"_(%mmmsqld(7))_"||"_(%mmmsqld(8))_"||"_(%mmmsqld(9))_"||"_(%mmmsqld(4))
 d delete^mt4821(%mmmsqld(3),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
 g %0DBk1
%0DBdun 
%0DAdun 
 q
%0Derr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
trig0C n %ROWID,%didit,SQLCODE s %didit="" k %skip
 d trigA0C i $d(%skip) g trgdoneC
  d %0Do^mt4801  s %didit=1
trgdoneC q  ;  trigger done
trigA0C s %didit=1
 i $$delete^SSAUDIT(480)
 q
%0EBs1 s %val=$s("Yy"[$e(%val):"Yes","Nn"[$e(%val):"No",1:"") q  ;  Code for update (get old values) of table: QC_MLTTestCode
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Eerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%rowid,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$e(%rowid,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %dataold(1)=%mmmsqld(3)
 s %mmmsqld(9)=$p($g(%dataold(1)),"||",1,1),%mmmsqld(10)=$p($g(%dataold(1)),"||",2,2),%mmmsqld(11)=$p($g(%dataold(1)),"||",3,3),%mmmsqld(12)=$p($g(%dataold(1)),"||",4,4),%dataold(2)=$p($g(%dataold(1)),"||",5,5)
 i %mmmsqld(9)'="",%mmmsqld(10)'="",%mmmsqld(11)'="",%mmmsqld(12)'="",%dataold(2)'="",$d(^TTQC(%mmmsqld(9),"LOT",%mmmsqld(10),"TYPE",%mmmsqld(11),%mmmsqld(12),"TEST",%dataold(2)))
 e  g %0EBdun
 s %mmmsqln=$g(^TTQC(%mmmsqld(9),"LOT",%mmmsqld(10),"TYPE",%mmmsqld(11),%mmmsqld(12),"TEST",%dataold(2)))
 s %dataold(3)=$p(%mmmsqln,"\",1) s %dataold(4)=$p(%mmmsqln,"\",2)
 s %dataold(0)=$p(%dataold(1),"||",1,4)
 
 s %val=$P(%dataold(3),$C(1)) d %0EBs1:%val'="" s $P(%dataold(3),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ec
%0EBdun 
%0EAdun 
%0Ec q
%0Eerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0EAdun
getold(%dataold) g %0Eo
%mdiag(oper,sqlcode,class,subclass,field,cursor,%msg) ; diagnostics for sql operations
 i '$d(%mdiag) s $p(%mdiag,$c(1),2,3)="NO"_$c(1)_oper
 i ($p(%mdiag,$c(1))+1)>10 s $p(%mdiag,$c(1),2)="YES" q
 s $p(%mdiag,$c(1))=$p(%mdiag,$c(1))+1,%mdiag($p(%mdiag,$c(1)))=$g(sqlcode)_$c(1)_$g(class)_$c(1)_$g(subclass)_$c(1)_"QC_MLTTestCode"_$c(1)_$g(field)_$c(1)_$g(cursor)_$c(1)_$g(%msg) q
 ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
required ; Entry point to check the required fields
 n %lang,%oper k %mdiag s %msg="",%ok=1,%oper=$s($g(%edit):"INSERT",1:"UPDATE"),%lang=$p($g(%msql),$c(1),5) s:'%lang %lang=1
 i $c(1,1)[$g(%data(1)) s %ok="QC_MLTTestCode Row ID" d %mdiag(%oper,-106,"Fld Int","Req","QCMTT_RowID","",%ok) s %msg=%ok,%ok=0
 i $c(1,1)[$g(%data(0)) s %ok="QC_MaterialLotType Parent Reference" d %mdiag(%oper,-106,"Fld Int","Req","QCMTT_ParRef","",%ok) s %msg=%ok,%ok=0
 q
inf0 ; get value for field QCMTT_ParRef
 i $c(1)'[$g(%data(0)),$p(%data(0),$c(1))="" s %val=$p(%data(0),$c(1),2) g ine0
 i $c(1)'[$g(%data(0)) s %val=$p(%data(0),$c(1)) g ini0
 i $c(1)'[$g(%insert(0)),$p(%insert(0),$c(1))="" s %val=$p(%insert(0),$c(1),2) g ine0
 i $c(1)'[$g(%insert(0)) s %val=$p(%insert(0),$c(1)) g ini0
 s %val=$g(da477)
ine0 ; external to internal conversion code for field QCMTT_ParRef
ini0 ; internal validation code and uniqueness, also int-ext
 d fdv0^mt4801 q:'%ok
 s %data(0)=%val
 s:$c(1)[%data(0) %ok=0 s:%ok %edit(0)=""
 q
inf2 ; get value for field QCMTT_TestItem_DR
 i $c(1)'[$g(%data(2)),$p(%data(2),$c(1))="" s %val=$p(%data(2),$c(1),2) g ine2
 i $c(1)'[$g(%data(2)) s %val=$p(%data(2),$c(1)) g ini2
 i $c(1)'[$g(%insert(2)),$p(%insert(2),$c(1))="" s %val=$p(%insert(2),$c(1),2) g ine2
 i $c(1)'[$g(%insert(2)) s %val=$p(%insert(2),$c(1)) g ini2
 s %ok=0 q
ine2 ; external to internal conversion code for field QCMTT_TestItem_DR
ini2 ; internal validation code and uniqueness, also int-ext
 d fdv2^mt4801 q:'%ok
 s %data(2)=%val
 s:$c(1)[%data(2) %ok=0 s:%ok %edit(2)=""
 q
rowiderr s %ok=0 q
insertnw(%check,iform,recheck) ; insert tuple for table QC_MLTTestCode
 n %based,%call,%done,%i,%icol,%irep,%irepi,%oper,%val,db,rowerr
 s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),recheck=$g(recheck),%oper="INSERT",rowerr=0 k %mdiag
 i recheck s %val=$g(%data(1)) g inrwid
 i iform s redrawit=0,idexist=2
 i '$d(rptform) n rptform s rptform=0
 s %val=""
 i $c(1)'[$g(%data(1)),$p(%data(1),$c(1))="" s %val=$p(%data(1),$c(1),2) g inrwide
 i $c(1)'[$g(%data(1)) s %val=$p(%data(1),$c(1)) g inrwid
 i $c(1)'[$g(%insert(1)),$p(%insert(1),$c(1))="" s %val=$p(%insert(1),$c(1),2) g inrwide
 i $c(1)'[$g(%insert(1)) s %val=$p(%insert(1),$c(1)) g inrwid
 s %based=""
 d inf0 i '%ok g:'iform rowiderr s rowerr=1
 d inf2 i '%ok g:'iform rowiderr s rowerr=1
 s %val=$s(rowerr:"",1:$p(%data(0),$c(1))_"||"_$p(%data(2),$c(1))),%based=1 g inrwid
inrwide ; external to internal conversion for rowid
inrwid ; rowid in internal
 i 'rowerr d fdv1^mt4801 i '%ok s rowerr=1 g rowiderr
 s %data(1)=%val
 i $c(1)[%data(1) g:'iform rowiderr s rowerr=1
 s:'$g(rowerr) %edit(1)=""
 ; set the based on fields if we did not calculate them
 ; based on already calculated and validated
 g:$g(%based) insarr
 s %val=$p(%data(1),"||",1,4) g:%val="" rowiderr d ini0 g:'%ok rowiderr
 s %val=$p(%data(1),"||",5) g:%val="" rowiderr d ini2 g:'%ok rowiderr
insarr q:$g(recheck)  ; entry point to spin through the %insert array
 s %icol=""
insloop s %icol=$o(%insert(%icol)) g insdef:%icol="",insloop:$d(%data(%icol))
 i ",1,0,2,"[(","_%icol_",") g insloop
 s %data(%icol)=%insert(%icol) s:+%check %edit(%icol)=""
 i $d(%insert(%icol))>9 g insrep
 g insloop
insrep ; entry point to work on repeating fields in the %insert array
 s %irep=0
insreplp s %irep=%irep+1 g:%irep>%insert(%icol) insloop
 s %data(%icol,%irep)=%insert(%icol,%irep) g insreplp
insdef ; entry point to compile all of the defaults
 d extint g:'%ok rowiderr:'iform i +%check=1 d validate g:'%ok rowiderr:'iform
 d intext^mt4801
 g:+%check inscomp
insedit s %icol=""
insedlop s %icol=$o(%insert(%icol)) g inscomp:%icol="",insedlop:$d(%edit(%icol))!(",1,0,2,"[(","_%icol_",")) s %edit(%icol)="" g insedlop
inscomp ; entry point to calculate all computed fields
 s %data=%data(1) s:$g(iform) %ok=1 q
etiok i '%ok,'$d(%edit(%icol)) k %data(%icol) s %ok=1 q
 i '%ok s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
 s $p(%data(%icol),$c(1))=%val q
etiokrp i '%ok k %data(%icol,%irep) s %ok=1 q
 s $p(%data(%icol,%irep),$c(1))=%val q
etivalen s %irepi=0 f %irep=1:1:$g(%data(%icol)) i $d(%data(%icol,%irep)) s %irepi=%irepi+1,%data(%icol,%irepi)=%data(%icol,%irep)
 i '$g(%data(%icol))!%irepi s %data(%icol)=%irepi q
 k %data(%icol) q:'$d(%edit(%icol))
 f %irep=1:1:%edit(%icol) s %data(%icol,%irep)=%edit(%icol,%irep)
 s %data(%icol)=%edit(%icol) k %edit(%icol) q
fde3 ; external to internal conversion code
 s %ok=1 s %val=$s("Yy"[$e(%val):"Y","Nn"[$e(%val):"N",1:"") s:%val="" %ok=0
 q
extint s %ok=1 ; entry point to do all external to internal conversion code
 i $d(%data(1)),$p(%data(1),$c(1))="",$p(%data(1),$c(1),2)'="" s %val=$p(%data(1),$c(1),2) s %data(1)=%val
 i $d(%data(0)),$p(%data(0),$c(1))="",$p(%data(0),$c(1),2)'="" s %val=$p(%data(0),$c(1),2) s %data(0)=%val
 i $d(%data(2)),$p(%data(2),$c(1))="",$p(%data(2),$c(1),2)'="" s %val=$p(%data(2),$c(1),2) s %data(2)=%val
 i $d(%data(3)),$p(%data(3),$c(1))="",$p(%data(3),$c(1),2)'="" s %val=$p(%data(3),$c(1),2) d  g:'%ok rowiderr:'iform s %icol=3 d etiok
 . s %msg="" d fde3 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Ext->Int","QCMTT_Active","",$g(%msg))
 i $d(%data(4)),$p(%data(4),$c(1))="",$p(%data(4),$c(1),2)'="" s %val=$p(%data(4),$c(1),2) s %data(4)=%val
 q
fdv0 ; DO validation and additional validation code
 n nval s nval=%val d %0Go
  i SQLCODE'=0 s %ok=0
 q
%0Go n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Gerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(nval,$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$e(nval,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(4)=$p($g(%mmmsqld(1)),"||",1,1),%mmmsqld(5)=$p($g(%mmmsqld(1)),"||",2,2),%mmmsqld(6)=$p($g(%mmmsqld(1)),"||",3,3),%mmmsqld(7)=$p($g(%mmmsqld(1)),"||",4,4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",$d(^TTQC(%mmmsqld(4),"LOT",%mmmsqld(5),"TYPE",%mmmsqld(6),%mmmsqld(7)))
 e  g %0GBdun
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Gc
%0GBdun 
%0GAdun 
%0Gc q
%0Gerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0GAdun
fdv1 ; DO field validation (ALL of it)
 s %ok=1 s:'$$uniq1($g(%data(1)),%val) %ok=0,%msg=$$setmsg^%qarzst("UniqueQ") q
fdv2 ; DO validation and additional validation code
 n nval s nval=%val d %0Ho
  i SQLCODE'=0 s %ok=0
 q
%0Ho n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Herr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(nval,$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$e(nval,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(4)=$p($g(%mmmsqld(1)),"||",1,1)
 i %mmmsqld(4)'="",$d(^TTAB("TC",%mmmsqld(4)))
 e  g %0HBdun
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Hc
%0HBdun 
%0HAdun 
%0Hc q
%0Herr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0HAdun
fdv3 ; DO validation and additional validation code
 i %val'="Y",%val'="N" s %ok=0,%msg=$$setmsg^%qarzst("DTYesIn")
 q
fdv4 ; DO validation and additional validation code
 n nval s nval=%val d %0Io
  i SQLCODE'=0 s %ok=0
 q
%0Io n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ierr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(nval,$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$e(nval,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(4)=$p($g(%mmmsqld(1)),"||",1,1)
 i %mmmsqld(4)'="",$d(^TTAB("QC-TIGROUP",%mmmsqld(4)))
 e  g %0IBdun
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ic
%0IBdun 
%0IAdun 
%0Ic q
%0Ierr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0IAdun
uniq1(%rowid,%unique) n SQLCODE,%val d %0Fo q SQLCODE=100
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%unique,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$e(%unique,2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(3)
 s %mmmsqld(5)=$p($g(%mmmsqld(1)),"||",1,1),%mmmsqld(6)=$p($g(%mmmsqld(1)),"||",2,2),%mmmsqld(7)=$p($g(%mmmsqld(1)),"||",3,3),%mmmsqld(8)=$p($g(%mmmsqld(1)),"||",4,4),%mmmsqld(9)=$p($g(%mmmsqld(1)),"||",5,5)
 i %mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",%mmmsqld(8)'="",%mmmsqld(9)'="",$d(^TTQC(%mmmsqld(5),"LOT",%mmmsqld(6),"TYPE",%mmmsqld(7),%mmmsqld(8),"TEST",%mmmsqld(9)))
 e  g %0FBdun
 s %mmmsqld(2)=%mmmsqld(1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Fc
%0FBdun 
%0FAdun 
%0Fc q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
uniqfile(%sqcode) k %mdiag
 i %sqcode=-104,%ok,$c(1)'[$g(%data(1)),'$$uniq1($g(%data(1)),$g(%data(1))) s %ok="QCMTT_RowID"_": "_$$setmsg^%qarzst("UniqueQ") d %mdiag("",%sqcode,"","","QCMTT_RowID","",%ok)
 q
valok i %ok s $p(%data(%icol),$c(1))=%val q
 s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
valokrp i %ok s $p(%data(%icol,%irep),$c(1))=%val q
 k %data(%icol,%irep) s %ok=1 q
validate s %ok=1 ; entry point to do all validation code
 i $d(%edit(1)),%data(1)'=%edit(1) s %icol=1 s %val=$p(%data(1),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","QCMTT_RowID","",$g(%msg))
 i $d(%edit(0)),%data(0)'=%edit(0) s %icol=0 s %val=$p(%data(0),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv0 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","QCMTT_ParRef","",$g(%msg))
 i $d(%edit(2)),%data(2)'=%edit(2) s %icol=2 s %val=$p(%data(2),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv2 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","QCMTT_TestItem_DR","",$g(%msg))
 i $d(%edit(3)),%data(3)'=%edit(3) s %icol=3 s %val=$p(%data(3),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv3 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","QCMTT_Active","",$g(%msg))
 i $d(%edit(4)),%data(4)'=%edit(4) s %icol=4 s %val=$p(%data(4),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv4 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","QCMTT_TestItemGroup_DR","",$g(%msg))
 q
fdi3 s %val=$s("Yy"[$e(%val):"Yes","Nn"[$e(%val):"No",1:"")
 q
intext ; entry point to do all internal to external conversion code
 i $d(%data(1)),%data(1)[$c(1) s %data(1)=$s($p(%data(1),$c(1))'="":$p(%data(1),$c(1)),1:$p(%data(1),$c(1),2))
 i $d(%data(0)),%data(0)[$c(1) s %data(0)=$s($p(%data(0),$c(1))'="":$p(%data(0),$c(1)),1:$p(%data(0),$c(1),2))
 i $d(%data(2)),%data(2)[$c(1) s %data(2)=$s($p(%data(2),$c(1))'="":$p(%data(2),$c(1)),1:$p(%data(2),$c(1),2))
 i $d(%data(3)),$p(%data(3),$c(1))'="" s %val=$p(%data(3),$c(1)) d fdi3 s $p(%data(3),$c(1),2)=%val
 i $d(%data(4)),%data(4)[$c(1) s %data(4)=$s($p(%data(4),$c(1))'="":$p(%data(4),$c(1)),1:$p(%data(4),$c(1),2))
 q
updatenw(%check,iform) n %i,%icol,%irep,%irepi,%oldval,%oper,%val,db s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),%oper="UPDATE" k %mdiag
 d:%check'=2 extint g:'%ok rowiderr:'iform i %check=1 d validate g:'%ok rowiderr:'iform
 d:%check'=2 intext^mt4801 q:'%ok
 q
 g ^mt4802
UPPER(val) d:'$d(%trans) %trans^%qarztrm q $tr(val,%trans(3),%trans(4))
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
]]></Routine>
</Export>
