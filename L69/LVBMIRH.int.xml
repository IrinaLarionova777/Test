<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBMIRH" type="INT" languagemode="0" generated="1"><![CDATA[
LVBMIRH ; IG 5/5/98 ; LVB Control data access for MIRH MIF_MachineResultHeader
 ;
 ; supported calls:
 ;
 ; $$insert^LVBMIRH(par)
 ; $$update^LVBMIRH(ROWID)
 ; $$delete^LVBMIRH(ROWID,app,group)
 ; $$select^LVBMIRH(ROWID)
 ; $$open^LVBMIRH(par)
 ; $$fetch^LVBMIRH(par)
 ; $$close^LVBMIRH()
 ; $$purge^LVBMIRH(mi,date,sample)
 ; $$testsetc^LVBMIRH(tgroup)
 ; $$reconcil^LVBMIRH(mi,epis)
 ;
  ;---&sql(DECLARE MIRH CURSOR FOR SELECT * FROM MIF_MachineResultHeader
   ;---         WHERE MIRH_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 ;
open(par) s par=$g(par)
  ;---&SQL(OPEN MIRH)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %MIRH0o
 q 0
 ;
fetch(par) k PLIST s par=$g(par)
  ;---&SQL(FETCH MIRH INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Eo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ;
close()  ;---&SQL(CLOSE MIRH)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %MIRH0c
 q 0
 ;
select(RowID) k PLIST s RowID=$g(RowID)
  ;---&sql( SELECT * INTO :PLIST() FROM MIF_MachineResultHeader WHERE MIRH_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Go
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ;
insert(par) d pre("N") s PLIST(0)=$g(par) K PLIST(1)
  ;---&sql(INSERT INTO MIF_MachineResultHeader VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
update(RowID) d pre("Y") k PLIST(1) s RowID=$g(RowID)
  ;---&sql(UPDATE MIF_MachineResultHeader VALUES :PLIST() WHERE MIRH_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Lo
 i 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
delete(RowID,app,group) s RowID=$g(RowID),app=$g(app),group=$g(group)
 f j=1,2 s @("x"_j)=$p(RowID,"||",j)
 i $l(x1),$l(x2) f j="DATA","PLOT" k ^TMIF(x1,1,x2,j)
  ;---&sql(DELETE FROM MIF_MachineResultHeader WHERE MIRH_RowID = :RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0No
 q SQLCODE
 ;
 ; Adjust certain fields
pre(xUpdate) d PreSQL^SSUTIL4()
 q
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 I $G(PLIST(1))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBMIMP($p(plist(1),"||"))
 .S X="" I 'SQLCODE S X=PLIST(3)
 .K PLIST M PLIST=plist S PLIST(1)=PLIST(1)_$c(1)_X K plist
 I $G(PLIST(3))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBEPVIS(plist(3),"Y")
 .S X=PLIST(2) I 'SQLCODE S X=PLIST(2)_$c(1)_$p(PLIST(20),$c(1))_$c(1)_$p(PLIST(17),$c(1))
 .K PLIST M PLIST=plist S PLIST(3)=X K plist
 q
purge(mi,date,sample) ;purge results
 n (mi,date,sample) s mi=$g(mi),date=$g(date),sample=$g(sample)
 s xsample="" f  s xsample=$o(^TMIF(mi,1,xsample)) q:xsample=""  d
 .s xx=$g(^(xsample)),epis=$p(xx,"\",1),ok=1
 .i ok,$l(date),$p(xx,"\",3)>date s ok=0
 .i ok,$l(date),date=$p(xx,"\",3),$p(xx,"\",4)>(21*3600) s ok=0
 .i ok,$l(sample),xsample]sample s ok=0
 .i ok k ^TMIF(mi,1,xsample) i $l(epis) k ^TMIF(mi,9,epis,xsample)
 q 0
 ;
testsetc(tsgrp) ;create reverse index from testset to test code
 n (tsgrp) k ^TMP("MVB",$j,"TS")
 s mi=$p(tsgrp,"||"),grp=$p(tsgrp,"||",2) q:mi=""  q:grp=""
 s ts="" f  s ts=$o(^TMIF(mi,"TG",grp,"TS",ts)) q:ts=""  d         
 .s ind="" f  s ind=$o(^TTAB("TS",ts,0,ind)) q:ind=""  s s=^(ind) d
 ..s tc=$p(s,"\",8),type=$p(s,"\",6) q:tc=""  
 ..s ^TMP("MVB",$j,"TS",ts,tc)=$tr(type,"M","Y")
 q
 ; reconcile patient
reconcil(miROWID,epis) n (miROWID,epis) s miROWID=$p($g(miROWID),$c(1)),epis=$g(epis)
 s mi1=$p(miROWID,"||",1),mi2=$p(miROWID,"||",2)
 ; find received time
 s re=$p(^TMIF(mi1,1,mi2),"\"),rdt="" i $l(re) s rdt=$p($g(^TMIF(mi1,20,re)),"\",3)
 ; find already existing sample
 s (stop,x)="" f  s x=$o(^TMIF(mi1,1,x)) q:x=""  d  q:$l(stop)
 .i x'=mi2,$p(^(x),"\",1)=epis s stop=x
 ; sample does exist
 i $l(stop),'$$select(mi1_"||"_stop) s PLIST(3)=epis i '$$update(mi1_"||"_stop),'$l($p($g(^TMIF(mi1,20,epis)),"\",3)) s $p(^TMIF(mi1,20,epis),"\",3)=rdt
 ; sample does not exist
 i '$l(stop) s stop=epis_" " i $$select(mi1_"||"_stop) d
 .i $$select(mi1_"||"_mi2) s stop="" q
 .k PLIST(1) s PLIST(2)=stop,PLIST(3)=epis,err=$$insert(mi1)
 .i err s stop=""
 .e  i '$l($p($g(^TMIF(mi1,20,epis)),"\",3)) s $p(^TMIF(mi1,20,epis),"\",3)=rdt
 ; same sample
 i miROWID=(mi1_"||"_stop) s stop=""
 i $l(stop) d
 .s xx1="" f  s xx1=$o(^TMIF(mi1,1,mi2,"DATA",xx1)) q:xx1=""  d
 ..s xx2="" f  s xx2=$o(^TMIF(mi1,1,mi2,"DATA",xx1,xx2)) q:xx2=""  d
 ...i $$select^LVBMIRI(mi1_"||"_mi2_"||"_xx1_"||"_xx2) q
 ...k PLIST(0),PLIST(1) s (PLIST(6),PLIST(8))=""
 ...i '$$insert^LVBMIRI(mi1_"||"_stop) d
 ....m ^TMIF(mi1,1,stop,"DATA",xx1,xx2,"ANT")=^TMIF(mi1,1,mi2,"DATA",xx1,xx2,"ANT")
 ....k ^TMIF(mi1,1,mi2,"DATA",xx1,xx2)
 .s xx1="" f  s xx1=$o(^TMIF(mi1,1,mi2,"BUG",xx1)) q:xx1=""  d
 ..s xx3=$o(^TMIF(mi1,1,stop,"BUG",""),-1)+1
 ..m ^TMIF(mi1,1,stop,"BUG",xx3)=^TMIF(mi1,1,mi2,"BUG",xx1) k ^TMIF(mi1,1,mi2,"BUG",xx1)
 .m ^TMIF(mi1,1,stop,"PLOT")=^TMIF(mi1,1,mi2,"PLOT") k ^TMIF(mi1,1,mi2,"PLOT")
 .i $l(re),$l($p($g(^TMIF(mi1,20,re)),"\",3)),'$l($p($g(^TMIF(mi1,20,re)),"\",1)),$l($p($g(^TMIF(mi1,20,re)),"\",2)) k ^TMIF(mi1,20,re)
 .i '$d(^TMIF(mi1,1,mi2,"DATA")),$$delete(miROWID)
 q 0
%0ABr1 s %MIRH0d(11)="N"
 i $d(^TMIF($p($g(%MIRH0d(2)),"||",1),1,$p($g(%MIRH0d(2)),"||",2),"PLOT")) s %MIRH0d(11)="Y"
 q
%MIRH0o s $zt="%MIRH0E" s SQLCODE=$s($g(%MIRH0c):-101,1:0) q:SQLCODE'=0  s %MIRH0d(18)=0 s %MIRH0d(19)=0,%MIRH0d(20)=""
 s %MIRH0d(15)=$g(par)
 s %MIRH0c=1 q
%MIRH0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %MIRH0c,%MIRH0d,%MIRH0E,%MIRH0l,%MIRH0n,%MIRH0R,%MIRH0Z q
%0Afirst 
 ; asl MOD# 2
 s %MIRH0d(1)=%MIRH0d(15)
 i %MIRH0d(1)="" g %0ABdun
 s %MIRH0d(3)=""
%0ABk1 s %MIRH0d(3)=$o(^TMIF(%MIRH0d(1),1,%MIRH0d(3)))
 i %MIRH0d(3)="" g %0ABdun
 s %MIRH0d(26)=$g(^TMIF(%MIRH0d(1),1,%MIRH0d(3)))
 s %MIRH0d(4)=$p(%MIRH0d(26),"\",1) s %MIRH0d(5)=$p(%MIRH0d(26),"\",2) s %MIRH0d(6)=$p(%MIRH0d(26),"\",3) s %MIRH0d(7)=$p(%MIRH0d(26),"\",4) s %MIRH0d(8)=$p(%MIRH0d(26),"\",5) s %MIRH0d(12)=$p(%MIRH0d(26),"\",6) s %MIRH0d(14)=$p(%MIRH0d(26),"\",7)
 s %MIRH0d(2)=(%MIRH0d(1))_"||"_(%MIRH0d(3))
 s %MIRH0d(1)=$p(%MIRH0d(2),"||")
 s %MIRH0d(9)=$$status^LVBMIRH0($g(%MIRH0d(2))) s %MIRH0d(13)=$$CT012^at180($g(%MIRH0d(1)),$g(%MIRH0d(3))) d %0ABr1 s %MIRH0d(10)=$$tsetlst^LVBMIRH0($g(%MIRH0d(2)))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TMIF($p(%MIRH0d(2),"||",1),1,$p(%MIRH0d(2),"||",2))#"S":$zu(115,4) i $t { s %MIRH0d(19)=1,%MIRH0d(20)=$name(^TMIF($p(%MIRH0d(2),"||",1),1,$p(%MIRH0d(2),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.MIF_MachineResultHeader for RowID value: "_%MIRH0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %MIRH0d(17)=$p(%MIRH0d(2),"||"),%MIRH0d(3)=$p(%MIRH0d(2),"||",2)
 i %MIRH0d(17)'="",%MIRH0d(3)'="",$d(^TMIF(%MIRH0d(17),1,%MIRH0d(3)))
 e  g %0ACdun
 s %MIRH0d(32)=$g(^TMIF(%MIRH0d(17),1,%MIRH0d(3)))
 s %MIRH0d(4)=$p(%MIRH0d(32),"\",1) s %MIRH0d(5)=$p(%MIRH0d(32),"\",2) s %MIRH0d(6)=$p(%MIRH0d(32),"\",3) s %MIRH0d(7)=$p(%MIRH0d(32),"\",4) s %MIRH0d(8)=$p(%MIRH0d(32),"\",5) s %MIRH0d(12)=$p(%MIRH0d(32),"\",6) s %MIRH0d(14)=$p(%MIRH0d(32),"\",7)
 s %MIRH0d(1)=$p(%MIRH0d(2),"||")
 s %MIRH0d(9)=$$status^LVBMIRH0($g(%MIRH0d(2))) s %MIRH0d(13)=$$CT012^at180($g(%MIRH0d(1)),$g(%MIRH0d(3))) d %0ABr1 s %MIRH0d(10)=$$tsetlst^LVBMIRH0($g(%MIRH0d(2)))
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %MIRH0d(18)=%MIRH0d(18)+1,%ROWCOUNT=%MIRH0d(18),%ROWID=%MIRH0d(2),%MIRH0c=10 q
%MIRH0f i '$g(%MIRH0c) { s SQLCODE=-102 q  } i %MIRH0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%MIRH0d(18))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%MIRH0d(18),%MIRH0c=100 q  } g %0Afirst:%MIRH0c=1
%0ACdun i $zu(115,2)=1,$g(%MIRH0d(19))=1 { l -@%MIRH0d(20) s %MIRH0d(19)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%MIRH0d(18),SQLCODE=100,%MIRH0c=100 q
%MIRH0c i '$g(%MIRH0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%MIRH0d(18)),1:0)
 i $zu(115,2)=1,$g(%MIRH0d(19))=1 { l -@%MIRH0d(20) } k %MIRH0c,%MIRH0d,%MIRH0E,%MIRH0l,%MIRH0n,%MIRH0R,%MIRH0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %MIRH0c=100 q
%0Eo d %MIRH0f q:SQLCODE'=0
 s PLIST(0)=%MIRH0d(1),PLIST(1)=%MIRH0d(2),PLIST(2)=%MIRH0d(3),PLIST(3)=%MIRH0d(4),PLIST(4)=%MIRH0d(5),PLIST(5)=%MIRH0d(6),PLIST(6)=%MIRH0d(7),PLIST(7)=%MIRH0d(8),PLIST(8)=%MIRH0d(9),PLIST(9)=%MIRH0d(10),PLIST(10)=%MIRH0d(11),PLIST(11)=%MIRH0d(12),PLIST(12)=%MIRH0d(13),PLIST(13)=%MIRH0d(14)
 q
%0GBr1 s PLIST(10)="N"
 i $d(^TMIF($p($g(PLIST(1)),"||",1),1,$p($g(PLIST(1)),"||",2),"PLOT")) s PLIST(10)="Y"
 q
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(19)=0,%mmmsqld(20)=""
 s %mmmsqld(16)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(16)
 s %mmmsqld(18)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(18)'="",PLIST(2)'="",$d(^TMIF(%mmmsqld(18),1,PLIST(2)))
 e  g %0GBdun
 s %mmmsqld(26)=$g(^TMIF(%mmmsqld(18),1,PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(26),"\",1) s PLIST(4)=$p(%mmmsqld(26),"\",2) s PLIST(5)=$p(%mmmsqld(26),"\",3) s PLIST(6)=$p(%mmmsqld(26),"\",4) s PLIST(7)=$p(%mmmsqld(26),"\",5) s PLIST(11)=$p(%mmmsqld(26),"\",6) s PLIST(13)=$p(%mmmsqld(26),"\",7)
 s PLIST(0)=$p(PLIST(1),"||")
 s PLIST(8)=$$status^LVBMIRH0($g(PLIST(1))) s PLIST(12)=$$CT012^at180($g(PLIST(0)),$g(PLIST(2))) d %0GBr1 s PLIST(9)=$$tsetlst^LVBMIRH0($g(PLIST(1)))
 g:$zu(115,2)=0 %0GBuncommitted i $zu(115,2)=1 l +^TMIF($p(PLIST(1),"||",1),1,$p(PLIST(1),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(19)=1,%mmmsqld(20)=$name(^TMIF($p(PLIST(1),"||",1),1,$p(PLIST(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.MIF_MachineResultHeader for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(18)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(18)'="",PLIST(2)'="",$d(^TMIF(%mmmsqld(18),1,PLIST(2)))
 e  g %0GCdun
 s %mmmsqld(32)=$g(^TMIF(%mmmsqld(18),1,PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(32),"\",1) s PLIST(4)=$p(%mmmsqld(32),"\",2) s PLIST(5)=$p(%mmmsqld(32),"\",3) s PLIST(6)=$p(%mmmsqld(32),"\",4) s PLIST(7)=$p(%mmmsqld(32),"\",5) s PLIST(11)=$p(%mmmsqld(32),"\",6) s PLIST(13)=$p(%mmmsqld(32),"\",7)
 s PLIST(0)=$p(PLIST(1),"||")
 s PLIST(8)=$$status^LVBMIRH0($g(PLIST(1))) s PLIST(12)=$$CT012^at180($g(PLIST(0)),$g(PLIST(2))) d %0GBr1 s PLIST(9)=$$tsetlst^LVBMIRH0($g(PLIST(1)))
%0GBuncommitted ;
 s SQLCODE=0 g %0Gc
%0GCdun i $zu(115,2)=1,$g(%mmmsqld(19))=1 { l -@%mmmsqld(20) s %mmmsqld(19)=0 }
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(19))=1 { l -@%mmmsqld(20) } q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Gc
%0Jo n %i,icol,ir
 f icol=0:1:13 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.MIFMachineResultHeader.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Jo
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(3)=$g(RowID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMIF(%mmmsqld(4),1,%mmmsqld(5)))
 e  g %0LBdun
 s %mmmsqld(13)=$$%getlock^User.MIFMachineResultHeader.T1(%mmmsqld(2)) i '%mmmsqld(13) s SQLCODE=-110 g %0Lc
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMIF(%mmmsqld(4),1,%mmmsqld(5)))
 e  g %0LCdun
 k %data
 f icol=0:1:13 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.MIFMachineResultHeader.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(13)=1 %ReleaseLock^User.MIFMachineResultHeader.T1(%mmmsqld(2)) g %0Lc
%0LCdun 
 d:%mmmsqld(13)=1 %ReleaseLock^User.MIFMachineResultHeader.T1(%mmmsqld(2)) g:SQLCODE<0 %0Lc
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(13))=1 %ReleaseLock^User.MIFMachineResultHeader.T1(%mmmsqld(2)) g %0Lc
%0No n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Nerr" s %mmmsqld(5)=0 s %mmmsqld(6)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TMIF(%mmmsqld(3),1,%mmmsqld(4)))
 e  g %0NBdun
 s %mmmsqld(12)=$$%getlock^User.MIFMachineResultHeader.T1(%mmmsqld(1)) i '%mmmsqld(12) s SQLCODE=-110 g %0Nc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TMIF(%mmmsqld(3),1,%mmmsqld(4)))
 e  g %0NCdun
 d %delete^User.MIFMachineResultHeader.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(5))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(12)=1 %ReleaseLock^User.MIFMachineResultHeader.T1(%mmmsqld(1)) g %0Nc
%0NCdun 
 d:%mmmsqld(12)=1 %ReleaseLock^User.MIFMachineResultHeader.T1(%mmmsqld(1)) g:SQLCODE<0 %0Nc
%0NBdun 
%0NAdun 
%0Nc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(5)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Nerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(12))=1 %ReleaseLock^User.MIFMachineResultHeader.T1(%mmmsqld(1)) g %0Nc
]]></Routine>
</Export>
