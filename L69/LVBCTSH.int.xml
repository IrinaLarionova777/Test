<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBCTSH" type="INT" languagemode="0" generated="1"><![CDATA[
LVBCTSH ; IG 30/4/98 ; MVB Control code access for CT_Schedule
 ;
 ; supported calls:
 ;
 ; $$select^LVBCTSH(ROWID,skip)
 ; $$open^LVBCTSH(code,desc,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBCTSH(code,desc,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBCTSH(code,desc,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBCTSH(code,desc,skip,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBCTSH()
 ; $$insert^LVBCTSH()
 ; $$update^LVBCTSH(ROWID)
 ; $$delete^LVBCTSH(ROWID,Comments)
 ; $$getall^LVBCTSH()
 ;
  ;---&SQL(DECLARE CTSH CURSOR FOR SELECT * FROM CT_Schedule
   ;--- WHERE (%ALPHAUP(CTSH_Code) %STARTSWITH %ALPHAUP(:code)) OR (:code IS NULL)
   ;--- AND (%ALPHAUP(CTSH_Desc) %STARTSWITH %ALPHAUP(:desc)) OR (:desc IS NULL))
   ;--- ** SQL PUBLIC Variables: SQLCODE, code, desc
 ;
 ; Insert the data
insert() K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO CT_Schedule VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) S ROWID=$G(ROWID) d pre("Y") 
  ;---&SQL(UPDATE CT_Schedule VALUES :PLIST() WHERE CTSH_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Delete the data
delete(ROWID,Comments) s ROWID=$g(ROWID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM CT_Schedule WHERE CTSH_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 k ^TMP("Comments",$j)
 Q SQLCODE
 ;
 ; Open the cursor
open(code,desc,skip,p3,p4,p5,p6,p7,p8,p9) s code=$g(code),desc=$g(desc),skip=$g(skip)
  ;---&SQL(OPEN CTSH)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTSH0o
 Q 0
 ;
 ; Fetch the data
fetch(code,desc,skip,p3,p4,p5,p6,p7,p8,p9) K PLIST s code=$g(code),desc=$g(desc),skip=$g(skip)
  ;---&SQL(FETCH CTSH INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(code,desc,skip,p3,p4,p5,p6,p7,p8,p9) s code=$g(code),desc=$g(desc),skip=$g(skip) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(code,desc,skip) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(code,desc,skip,p3,p4,p5,p6,p7,p8,p9) N (code,desc,skip,PLIST) s code=$g(code),desc=$g(desc),skip=$g(skip) K ^TMP($zn,$j)
 i $$open(code,desc,skip)
 f cnt=1:1 Q:$$fetch(code,desc,skip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor 
close()  ;---&SQL(CLOSE CTSH) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTSH0c 
 q 0
 ;
 ; select data by code
select(ROWID,skip) K PLIST s skip=$g(skip)
  ;---&SQL(SELECT * INTO :PLIST() FROM CT_Schedule WHERE CTSH_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("","")
 S (PLIST(1),PLIST(2))=$$ALPHAUP^SSUTIL4(PLIST(2))
 q
 ;
 ; Post-filing adjustments
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 i $g(skip)="Y" q
 I $G(PLIST(4))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTPC(plist(4),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(4)=X K plist
 Q
 ;
getall() N (PLIST) K ^TMP($ZN,$J)
 I $$open(,,"Y")
 F cnt=1:1 Q:$$fetch(,,"Y")  S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
%CTSH0o s $zt="%CTSH0E" s SQLCODE=$s($g(%CTSH0c):-101,1:0) q:SQLCODE'=0  s %CTSH0d(15)=0 s %CTSH0d(16)=0,%CTSH0d(17)=""
 s %CTSH0d(5)=$g(code),%CTSH0d(7)=$g(code),%CTSH0d(9)=$g(desc),%CTSH0d(11)=$g(desc)
 s %CTSH0d(10)=$zu(28,%CTSH0d(9),6)
 s %CTSH0d(6)=$zu(28,%CTSH0d(5),6)
 s %CTSH0c=1 q
%CTSH0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %CTSH0c,%CTSH0d,%CTSH0E,%CTSH0l,%CTSH0n,%CTSH0R,%CTSH0Z q
%0Afirst 
 ; asl MOD# 2
 s %CTSH0d(1)=""
%0ABk1 s %CTSH0d(1)=$o(^TSCH(%CTSH0d(1)))
 i %CTSH0d(1)="" g %0ABdun
 s %CTSH0d(20)=$g(^TSCH(%CTSH0d(1)))
 s %CTSH0d(2)=$p(%CTSH0d(20),"\",1) s %CTSH0d(3)=$p(%CTSH0d(20),"\",2)
 s %CTSH0d(8)=$zu(28,%CTSH0d(2),6) s %CTSH0d(4)=$zu(28,%CTSH0d(1),6)
 g:'(((($c(0)[%CTSH0d(6))||(%CTSH0d(6)=$c(32,0)&&($e(%CTSH0d(4))=$c(32)))||(%CTSH0d(6)=$e(%CTSH0d(4),1,$l(%CTSH0d(6)))))||((%CTSH0d(8)'="")&&((%CTSH0d(7)="")&&(($c(0)[%CTSH0d(10))||(%CTSH0d(10)=$c(32,0)&&($e(%CTSH0d(8))=$c(32)))||(%CTSH0d(10)=$e(%CTSH0d(8),1,$l(%CTSH0d(10))))))))||(%CTSH0d(11)="")) %0ABk1
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TSCH($p(%CTSH0d(1),"||",1))#"S":$zu(115,4) i $t { s %CTSH0d(16)=1,%CTSH0d(17)=$name(^TSCH($p(%CTSH0d(1),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_Schedule for RowID value: "_%CTSH0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %CTSH0d(13)=$lb(""_%CTSH0d(4),""_%CTSH0d(8))
 i %CTSH0d(1)'="",$d(^TSCH(%CTSH0d(1)))
 e  g %0ACdun
 s %CTSH0d(23)=$g(^TSCH(%CTSH0d(1)))
 s %CTSH0d(2)=$p(%CTSH0d(23),"\",1) s %CTSH0d(3)=$p(%CTSH0d(23),"\",2)
 s %CTSH0d(8)=$zu(28,%CTSH0d(2),6) s %CTSH0d(4)=$zu(28,%CTSH0d(1),6)
 s %CTSH0d(14)=$lb(""_%CTSH0d(4),""_%CTSH0d(8))
 g:%CTSH0d(13)'=%CTSH0d(14) %0ACdun
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %CTSH0d(15)=%CTSH0d(15)+1,%ROWCOUNT=%CTSH0d(15),%ROWID=%CTSH0d(1),%CTSH0c=10 q
%CTSH0f i '$g(%CTSH0c) { s SQLCODE=-102 q  } i %CTSH0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%CTSH0d(15))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%CTSH0d(15),%CTSH0c=100 q  } g %0Afirst:%CTSH0c=1
%0ACdun i $zu(115,2)=1,$g(%CTSH0d(16))=1 { l -@%CTSH0d(17) s %CTSH0d(16)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%CTSH0d(15),SQLCODE=100,%CTSH0c=100 q
%CTSH0c i '$g(%CTSH0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%CTSH0d(15)),1:0)
 i $zu(115,2)=1,$g(%CTSH0d(16))=1 { l -@%CTSH0d(17) } k %CTSH0c,%CTSH0d,%CTSH0E,%CTSH0l,%CTSH0n,%CTSH0R,%CTSH0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %CTSH0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:4 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.CTSchedule.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(4)=0 s %mmmsqld(5)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 i %mmmsqld(2)'="",$d(^TSCH(%mmmsqld(2)))
 e  g %0EBdun
 s %mmmsqld(8)=$$%getlock^User.CTSchedule.T1(%mmmsqld(2)) i '%mmmsqld(8) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 i %mmmsqld(2)'="",$d(^TSCH(%mmmsqld(2)))
 e  g %0ECdun
 k %data
 f icol=0:1:4 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.CTSchedule.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(4))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(8)=1 %ReleaseLock^User.CTSchedule.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(8)=1 %ReleaseLock^User.CTSchedule.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(4)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(8))=1 %ReleaseLock^User.CTSchedule.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(3)=0 s %mmmsqld(4)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 i %mmmsqld(1)'="",$d(^TSCH(%mmmsqld(1)))
 e  g %0GBdun
 s %mmmsqld(7)=$$%getlock^User.CTSchedule.T1(%mmmsqld(1)) i '%mmmsqld(7) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 i %mmmsqld(1)'="",$d(^TSCH(%mmmsqld(1)))
 e  g %0GCdun
 d %delete^User.CTSchedule.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(3))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(7)=1 %ReleaseLock^User.CTSchedule.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(7)=1 %ReleaseLock^User.CTSchedule.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(3)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(7))=1 %ReleaseLock^User.CTSchedule.T1(%mmmsqld(1)) g %0Gc
%0Jo d %CTSH0f q:SQLCODE'=0
 s PLIST(1)=%CTSH0d(1),PLIST(2)=%CTSH0d(1),PLIST(3)=%CTSH0d(2),PLIST(4)=%CTSH0d(3)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(7)=0,%mmmsqld(8)=""
 s %mmmsqld(5)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(2)=%mmmsqld(5)
 i PLIST(2)'="",$d(^TSCH(PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(11)=$g(^TSCH(PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(11),"\",1) s PLIST(4)=$p(%mmmsqld(11),"\",2)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TSCH($p(PLIST(2),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(7)=1,%mmmsqld(8)=$name(^TSCH($p(PLIST(2),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_Schedule for RowID value: "_PLIST(2) ztrap "LOCK"  }
 ; asl MOD# 3
 i PLIST(2)'="",$d(^TSCH(PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(14)=$g(^TSCH(PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(14),"\",1) s PLIST(4)=$p(%mmmsqld(14),"\",2)
%0LBuncommitted ;
 s PLIST(1)=PLIST(2)
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(7))=1 { l -@%mmmsqld(8) s %mmmsqld(7)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(7))=1 { l -@%mmmsqld(8) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
