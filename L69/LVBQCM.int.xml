<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBQCM" type="INT" languagemode="0" generated="1"><![CDATA[
LVBQCM ; ML 14/6/2000 ; MVB Control code access for QC_Material
 ;
 ; supported calls:
 ;
 ; $$insert^LVBQCM()
 ; $$update^LVBQCM(ROWID)
 ; $$delete^LVBQCM(ROWID)
 ; $$open^LVBQCM(material,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBQCM(material,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBQCM(material,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBQCM(material,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBQCM()
 ; $$select^LVBQCM(ROWID)
 ; $$getall^LVBQCM(ws)
 ; $$copy^LVBQCM(materialfrom,material)
 ;
  ;---&SQL(DECLARE QCM CURSOR FOR SELECT * FROM QC_Material WHERE QCM_RowID = :material OR (:material IS NULL))
   ;--- ** SQL PUBLIC Variables: SQLCODE, material
 ;
 ; insert the data
insert() d pre("N") k PLIST(1)
  ;---&SQL(insert INTO QC_Material VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 i 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; update the data
update(ROWID) d pre("Y") s ROWID=$g(ROWID)
  ;---&SQL(UPDATE QC_Material VALUES :PLIST() WHERE QCM_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; delete the data
delete(ROWID) s ROWID=$g(ROWID)
  ;---&SQL(DELETE FROM QC_Material WHERE QCM_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 q SQLCODE
 ; open the cursor
open(material,p1,p2,p3,p4,p5,p6,p7,p8,p9) s material=$g(material)
  ;---&SQL(OPEN QCM)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %QCM0o
 q 0
 ; fetch the data
fetch(material,p1,p2,p3,p4,p5,p6,p7,p8,p9) k PLIST s material=$g(material)
  ;---&SQL(FETCH QCM INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; fetch all data
fetchbuffer(material,p1,p2,p3,p4,p5,p6,p7,p8,p9) k ^TMP($zn,$j) s material=$g(material),max=$s($g(PLIST(1)):PLIST(1),1:100)
 f xxx=1:1:max s SQLCODE=$$fetch(material) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(material,p1,p2,p3,p4,p5,p6,p7,p8,p9) n (PLIST) k ^TMP($zn,$j) s material=$g(material)
 i $$open(material)
 f cnt=1:1 q:$$fetch(material)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ; close the cursor
close()  ;---&SQL(CLOSE QCM)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %QCM0c
 q 0
 ; select data by code
select(ROWID) k PLIST s ROWID=$g(ROWID)
  ;---&SQL(SELECT * INTO :PLIST() FROM QC_Material WHERE QCM_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("5","")
 q
 ; post-filing adjustments
adjust d PostSQL^SSUTIL4("5")
 n plist,j,I,SQLCODE,X f j=1,2,3,4,5,7 i $d(PLIST(j)) s PLIST(j)=$p(PLIST(j),$c(1),1)
 s PLIST(6)=$$CT006^at471(PLIST(1))
 I $G(PLIST(6))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBQCML(plist(2)_"||"_plist(6))
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(6)=X K plist
 q
 ; list all materials
getall(ws) n (ws,PLIST) k ^TMP($zn,$j) s ws=$g(ws)
 i $$open()
 s cnt=0 f  q:$$fetch()  d
 .i $l(ws) s xx=$p(PLIST(1),$c(1)) i '$d(^TTQCi("TYPE","W",ws,xx)) q
 .s cnt=cnt+1,str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .s ^TMP($zn,$j,0,cnt)=$p(PLIST(1),$c(1))_$c(2)_$p(PLIST(3),$c(1))_$c(2)_$c(2)_str
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j,0)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ; copy current lot to new material
copy(materialfrom,material) n (materialfrom,material)
 s materialfrom=$g(materialfrom),material=$g(material) k ^TTQC(material,"LOT")
 ; find current lot and set against new material
 s lot="" f  s lot=$o(^TTQC(materialfrom,"LOT",lot)) q:lot=""  s active=$p(^(lot),"\",6) q:active="Y"
 s newlot=1 s ^TTQC(material,"LOT",newlot)=^TTQC(materialfrom,"LOT",lot) f i=3,4,5 s $p(^TTQC(material,"LOT",lot),"\",i)=""
 ; set levels on lot
 s levels=$p(^TTQC(material),"\",2) f i=1:1:levels d
 .k PLIST s par=material_"||"_lot,PLIST(2)=i,PLIST(3)="Level "_i i $$insert^LVBQCMLL(par)
 s type="" f  s type=$o(^TTQC(materialfrom,"LOT",lot,"TYPE",type)) q:type=""  d
 .s wsmach="" f  s wsmach=$o(^TTQC(materialfrom,"LOT",lot,"TYPE",type,wsmach)) q:wsmach=""  d
 ..s par=material_"||"_newlot,PLIST(2)=type,PLIST(3)=wsmach q:$$insert^LVBQCMLT(par)
 ..s tc="" f  s tc=$o(^TTQC(materialfrom,"LOT",lot,"TYPE",type,wsmach,"TEST",tc)) q:tc=""  s x=^(tc) d
 ...s par=material_"||"_newlot_"||"_type_"||"_wsmach,PLIST(2)=tc,PLIST(3)=$p(x,"\",1),PLIST(4)=$p(x,"\",2) q:$$insert^LVBQCMTT(par)
 ...s lev="" f  s lev=$o(^TTQC(materialfrom,"LOT",lot,"TYPE",type,wsmach,"TEST",tc,"DATA",lev)) q:lev=""  s x=^(lev) d
 ....i '$d(^TTQC(material,"LOT",lot,"TYPE",type,wsmach,"TEST",tc,"DATA",lev)) q
 ....s PLIST(0)=material_"||"_newlot_"||"_type_"||"_wsmach_"||"_tc,PLIST(1)=material_"||"_newlot_"||"_type_"||"_wsmach_"||"_tc_"||"_lev
 ....s PLIST(2)=lev,PLIST(3)=$p(x,"\",2),PLIST(4)=$p(x,"\",1),PLIST(7)=$p(x,"\",5) i $$update^LVBQCMTL(PLIST(1))
 q 0
%QCM0o s $zt="%QCM0E" s SQLCODE=$s($g(%QCM0c):-101,1:0) q:SQLCODE'=0  s %QCM0d(10)=0 s %QCM0d(11)=0,%QCM0d(12)=""
 s %QCM0d(7)=$g(material),%QCM0d(8)=$g(material)
 s %QCM0c=1 q
%QCM0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %QCM0c,%QCM0d,%QCM0E,%QCM0l,%QCM0n,%QCM0R,%QCM0Z q
%0Afirst 
 ; asl MOD# 2
 s %QCM0d(1)=""
%0ABk1 s %QCM0d(1)=$o(^TTQC(%QCM0d(1)))
 i %QCM0d(1)="" g %0ABdun
 i '((%QCM0d(1)=%QCM0d(7))||(%QCM0d(8)="")) g %0ABk1
 s %QCM0d(15)=$g(^TTQC(%QCM0d(1)))
 s %QCM0d(2)=$p(%QCM0d(15),"\",1) s %QCM0d(3)=$p(%QCM0d(15),"\",2) s %QCM0d(6)=$p(%QCM0d(15),"\",3)
 s %QCM0d(4)="" f %irep=1:1:$g(^TTQC(%QCM0d(1),"REM",0)) s $li(%QCM0d(4),%irep)=$g(^(%irep))
 s %QCM0d(5)=$$CT006^at471($g(%QCM0d(1)))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTQC($p(%QCM0d(1),"||",1))#"S":$zu(115,4) i $t { s %QCM0d(11)=1,%QCM0d(12)=$name(^TTQC($p(%QCM0d(1),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.QC_Material for RowID value: "_%QCM0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 i %QCM0d(1)'="",$d(^TTQC(%QCM0d(1)))
 e  g %0ACdun
 s %QCM0d(18)=$g(^TTQC(%QCM0d(1)))
 s %QCM0d(2)=$p(%QCM0d(18),"\",1) s %QCM0d(3)=$p(%QCM0d(18),"\",2) s %QCM0d(6)=$p(%QCM0d(18),"\",3)
 s %QCM0d(4)="" f %irep=1:1:$g(^TTQC(%QCM0d(1),"REM",0)) s $li(%QCM0d(4),%irep)=$g(^(%irep))
 s %QCM0d(5)=$$CT006^at471($g(%QCM0d(1)))
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %QCM0d(10)=%QCM0d(10)+1,%ROWCOUNT=%QCM0d(10),%ROWID=%QCM0d(1),%QCM0c=10 q
%QCM0f i '$g(%QCM0c) { s SQLCODE=-102 q  } i %QCM0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%QCM0d(10))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%QCM0d(10),%QCM0c=100 q  } g %0Afirst:%QCM0c=1
%0ACdun i $zu(115,2)=1,$g(%QCM0d(11))=1 { l -@%QCM0d(12) s %QCM0d(11)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%QCM0d(10),SQLCODE=100,%QCM0c=100 q
%QCM0c i '$g(%QCM0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%QCM0d(10)),1:0)
 i $zu(115,2)=1,$g(%QCM0d(11))=1 { l -@%QCM0d(12) } k %QCM0c,%QCM0d,%QCM0E,%QCM0l,%QCM0n,%QCM0R,%QCM0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %QCM0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:7 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.QCMaterial.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(4)=0 s %mmmsqld(5)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 i %mmmsqld(2)'="",$d(^TTQC(%mmmsqld(2)))
 e  g %0EBdun
 s %mmmsqld(8)=$$%getlock^User.QCMaterial.T1(%mmmsqld(2)) i '%mmmsqld(8) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 i %mmmsqld(2)'="",$d(^TTQC(%mmmsqld(2)))
 e  g %0ECdun
 k %data
 f icol=0:1:7 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.QCMaterial.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(4))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(8)=1 %ReleaseLock^User.QCMaterial.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(8)=1 %ReleaseLock^User.QCMaterial.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(4)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(8))=1 %ReleaseLock^User.QCMaterial.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(3)=0 s %mmmsqld(4)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 i %mmmsqld(1)'="",$d(^TTQC(%mmmsqld(1)))
 e  g %0GBdun
 s %mmmsqld(7)=$$%getlock^User.QCMaterial.T1(%mmmsqld(1)) i '%mmmsqld(7) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 i %mmmsqld(1)'="",$d(^TTQC(%mmmsqld(1)))
 e  g %0GCdun
 d %delete^User.QCMaterial.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(3))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(7)=1 %ReleaseLock^User.QCMaterial.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(7)=1 %ReleaseLock^User.QCMaterial.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(3)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(7))=1 %ReleaseLock^User.QCMaterial.T1(%mmmsqld(1)) g %0Gc
%0Jo d %QCM0f q:SQLCODE'=0
 s PLIST(1)=%QCM0d(1),PLIST(2)=%QCM0d(1),PLIST(3)=%QCM0d(2),PLIST(4)=%QCM0d(3),PLIST(5)=%QCM0d(4),PLIST(6)=%QCM0d(5),PLIST(7)=%QCM0d(6)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(10)=0,%mmmsqld(11)=""
 s %mmmsqld(8)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(2)=%mmmsqld(8)
 i PLIST(2)'="",$d(^TTQC(PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(14)=$g(^TTQC(PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(14),"\",1) s PLIST(4)=$p(%mmmsqld(14),"\",2) s PLIST(7)=$p(%mmmsqld(14),"\",3)
 s PLIST(5)="" f %irep=1:1:$g(^TTQC(PLIST(2),"REM",0)) s $li(PLIST(5),%irep)=$g(^(%irep))
 s PLIST(6)=$$CT006^at471($g(PLIST(2)))
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TTQC($p(PLIST(2),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(10)=1,%mmmsqld(11)=$name(^TTQC($p(PLIST(2),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.QC_Material for RowID value: "_PLIST(2) ztrap "LOCK"  }
 ; asl MOD# 3
 i PLIST(2)'="",$d(^TTQC(PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(17)=$g(^TTQC(PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(17),"\",1) s PLIST(4)=$p(%mmmsqld(17),"\",2) s PLIST(7)=$p(%mmmsqld(17),"\",3)
 s PLIST(5)="" f %irep=1:1:$g(^TTQC(PLIST(2),"REM",0)) s $li(PLIST(5),%irep)=$g(^(%irep))
 s PLIST(6)=$$CT006^at471($g(PLIST(2)))
%0LBuncommitted ;
 s PLIST(1)=PLIST(2)
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(10))=1 { l -@%mmmsqld(11) s %mmmsqld(10)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(10))=1 { l -@%mmmsqld(11) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
