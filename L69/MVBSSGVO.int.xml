<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="MVBSSGVO" type="INT" languagemode="0" generated="1"><![CDATA[
MVBSSGVO ; IG 09/07/98 ; MVB Control data access for SS_GroupVBExFunctOptions
 ;
 ; supported calls:
 ;
 ; $$options^MVBSSGVO(par)
 ; $$getall^MVBSSGVO(par)
 ; $$saveall^MVBSSGVO(par,read)
 ; $$select^MVBSSGVO(ROWID,skip)
 ; $$open^MVBSSGVO(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^MVBSSGVO(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^MVBSSGVO(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^MVBSSGVO(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^MVBSSGVO()
 ; $$insert^MVBSSGVO(par)
 ; $$update^MVBSSGVO(ROWID)
 ; $$delete^MVBSSGVO(ROWID)
 ;
  ;---&SQL(DECLARE SSGVO CURSOR FOR SELECT * FROM SS_GroupVBExFunctOptions
   ;---         WHERE SSGVO_ParRef = :param)
   ;--- ** SQL PUBLIC Variables: SQLCODE, param
 ;
 ; Insert the data
insert(param) K PLIST(1) s PLIST(0)=param d pre("N") 
  ;---&SQL(insert INTO SS_GroupVBExFunctOptions VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) k PLIST(1) s ROWID=$g(ROWID) d pre("Y") 
  ;---&SQL(UPDATE SS_GroupVBExFunctOptions VALUES :PLIST() WHERE SSGVO_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Delete the data
delete(ROWID) s ROWID=$g(ROWID)
  ;---&SQL(DELETE FROM SS_GroupVBExFunctOptions WHERE SSGVO_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 Q SQLCODE
 ;
 ; Open the cursor
open(param,skip,p2,p3,p4,p5,p6,p7,p8,p9) s param=$g(param),skip=$g(skip)
  ;---&SQL(OPEN SSGVO)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %SSGVO0o
 Q 0
 ;
 ; Fetch the data
fetch(param,skip,p2,p3,p4,p5,p6,p7,p8,p9) K PLIST s param=$g(param),skip=$g(skip)
  ;---&SQL(FETCH SSGVO INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(param,skip,p2,p3,p4,p5,p6,p7,p8,p9) s param=$g(param),skip=$g(skip) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100)
 f xxx=1:1:max s SQLCODE=$$fetch(param,skip) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(param,skip,p2,p3,p4,p5,p6,p7,p8,p9) N (param,skip,PLIST) s param=$g(param),skip=$g(skip) K ^TMP($zn,$j)
 i $$open(param,skip)
 f cnt=1:1 Q:$$fetch(param,skip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor 
close()  ;---&SQL(CLOSE SSGVO) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %SSGVO0c 
 q 0
 ;
 ; select data by code
select(ROWID) K PLIST s ROWID=$g(ROWID)
  ;---&SQL(SELECT * INTO :PLIST() FROM SS_GroupVBExFunctOptions WHERE SSGVO_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
 ;
pre(xUpdate) d PreSQL^SSUTIL4("","")
 q
 ;
 ; Post-filing adjustments
 ; Adjust certain fields
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 i $g(skip)="Y" q
 ;
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^MVBSSVBO(plist(2),"Y")
 .S X="" I 'SQLCODE S X=PLIST(1)_$C(1)_PLIST(3)_$c(1)_PLIST(4)
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 ;
 q
options(par) N (par,PLIST) K ^TMP($ZN,$J) s par=$g(par)
 I $$open(par)
 F cnt=1:1 Q:$$fetch(par)  S ^TMP($ZN,$J,cnt)=$P(PLIST(2),$c(1),3)
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 I $$close()
 K ^TMP($ZN,$J)
 Q 0
getall(par) N (par,PLIST) K ^TMP($ZN,$J) s par=$g(par)
 I $$open(par)
 F cnt=1:1 Q:$$fetch(par)  S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(2),$c(1),2)_$c(2)_$P(PLIST(2),$c(1))
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
saveall(par,read) n (par,read,PLIST) s par=$g(par),read=$g(read),group=$p(par,"||",1),exe=$p(par,"||",2)
 k ^TMP($zn,$j) m ^TMP($zn,$j)=PLIST i $$delete^MVBSSGVF(par)
 k PLIST s PLIST(2)=exe,PLIST(3)=read,PLIST=$o(PLIST(""),-1)
 i $o(^TMP($zn,$j,""))'="",'$$insert^MVBSSGVF(group) d
 .s x="" f  s x=$o(^TMP($zn,$j,x)) q:x=""  d
 ..k PLIST s PLIST(2)=^(x),PLIST=$o(PLIST(""),-1) i $$insert(group_"||"_exe)
 K ^TMP($ZN,$J)
 q 0
%SSGVO0o s $zt="%SSGVO0E" s SQLCODE=$s($g(%SSGVO0c):-101,1:0) q:SQLCODE'=0  s %SSGVO0d(8)=0 s %SSGVO0d(9)=0,%SSGVO0d(10)=""
 s %SSGVO0d(4)=$g(param)
 s %SSGVO0c=1 q
%SSGVO0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %SSGVO0c,%SSGVO0d,%SSGVO0E,%SSGVO0l,%SSGVO0n,%SSGVO0R,%SSGVO0Z q
%0Afirst 
 ; asl MOD# 2
 s %SSGVO0d(1)=%SSGVO0d(4)
 s %SSGVO0d(6)=$p(%SSGVO0d(1),"||"),%SSGVO0d(7)=$p(%SSGVO0d(1),"||",2)
 i %SSGVO0d(6)="" g %0ABdun
 i %SSGVO0d(7)="" g %0ABdun
 s %SSGVO0d(3)=""
%0ABk1 s %SSGVO0d(3)=$o(^SSU("SSGRP",%SSGVO0d(6),"VBEX",%SSGVO0d(7),"VBOP",%SSGVO0d(3)))
 i %SSGVO0d(3)="" g %0ABdun
 s %SSGVO0d(2)=(%SSGVO0d(6))_"||"_(%SSGVO0d(7))_"||"_(%SSGVO0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^SSU("SSGRP",$p(%SSGVO0d(2),"||",1),"VBEX",$p(%SSGVO0d(2),"||",2),"VBOP",$p(%SSGVO0d(2),"||",3,4))#"S":$zu(115,4) i $t { s %SSGVO0d(9)=1,%SSGVO0d(10)=$name(^SSU("SSGRP",$p(%SSGVO0d(2),"||",1),"VBEX",$p(%SSGVO0d(2),"||",2),"VBOP",$p(%SSGVO0d(2),"||",3,4)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.SS_GroupVBExFunctOptions for RowID value: "_%SSGVO0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %SSGVO0d(6)=$p(%SSGVO0d(2),"||"),%SSGVO0d(7)=$p(%SSGVO0d(2),"||",2),%SSGVO0d(3)=$p(%SSGVO0d(2),"||",3,4)
 i %SSGVO0d(6)'="",%SSGVO0d(7)'="",%SSGVO0d(3)'="",$d(^SSU("SSGRP",%SSGVO0d(6),"VBEX",%SSGVO0d(7),"VBOP",%SSGVO0d(3)))
 e  g %0ACdun
 s %SSGVO0d(1)=$p(%SSGVO0d(2),"||",1,2)
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %SSGVO0d(8)=%SSGVO0d(8)+1,%ROWCOUNT=%SSGVO0d(8),%ROWID=%SSGVO0d(2),%SSGVO0c=10 q
%SSGVO0f i '$g(%SSGVO0c) { s SQLCODE=-102 q  } i %SSGVO0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%SSGVO0d(8))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%SSGVO0d(8),%SSGVO0c=100 q  } g %0Afirst:%SSGVO0c=1
%0ACdun i $zu(115,2)=1,$g(%SSGVO0d(9))=1 { l -@%SSGVO0d(10) s %SSGVO0d(9)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%SSGVO0d(8),SQLCODE=100,%SSGVO0c=100 q
%SSGVO0c i '$g(%SSGVO0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%SSGVO0d(8)),1:0)
 i $zu(115,2)=1,$g(%SSGVO0d(9))=1 { l -@%SSGVO0d(10) } k %SSGVO0c,%SSGVO0d,%SSGVO0E,%SSGVO0l,%SSGVO0n,%SSGVO0R,%SSGVO0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %SSGVO0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:2 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.SSGroupVBExFunctOptions.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(7)=0 s %mmmsqld(8)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3,4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^SSU("SSGRP",%mmmsqld(4),"VBEX",%mmmsqld(5),"VBOP",%mmmsqld(6)))
 e  g %0EBdun
 s %mmmsqld(19)=$$%getlock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(2)) i '%mmmsqld(19) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3,4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^SSU("SSGRP",%mmmsqld(4),"VBEX",%mmmsqld(5),"VBOP",%mmmsqld(6)))
 e  g %0ECdun
 k %data
 f icol=0:1:2 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.SSGroupVBExFunctOptions.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(7))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(19)=1 %ReleaseLock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(19)=1 %ReleaseLock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(7)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(19))=1 %ReleaseLock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3,4)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",$d(^SSU("SSGRP",%mmmsqld(3),"VBEX",%mmmsqld(4),"VBOP",%mmmsqld(5)))
 e  g %0GBdun
 s %mmmsqld(18)=$$%getlock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(1)) i '%mmmsqld(18) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3,4)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",$d(^SSU("SSGRP",%mmmsqld(3),"VBEX",%mmmsqld(4),"VBOP",%mmmsqld(5)))
 e  g %0GCdun
 d %delete^User.SSGroupVBExFunctOptions.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(18)=1 %ReleaseLock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(18)=1 %ReleaseLock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(18))=1 %ReleaseLock^User.SSGroupVBExFunctOptions.T1(%mmmsqld(1)) g %0Gc
%0Jo d %SSGVO0f q:SQLCODE'=0
 s PLIST(0)=%SSGVO0d(1),PLIST(1)=%SSGVO0d(2),PLIST(2)=%SSGVO0d(3)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(9)=0,%mmmsqld(10)=""
 s %mmmsqld(5)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(5)
 s %mmmsqld(7)=$p(PLIST(1),"||"),%mmmsqld(8)=$p(PLIST(1),"||",2),PLIST(2)=$p(PLIST(1),"||",3,4)
 i %mmmsqld(7)'="",%mmmsqld(8)'="",PLIST(2)'="",$d(^SSU("SSGRP",%mmmsqld(7),"VBEX",%mmmsqld(8),"VBOP",PLIST(2)))
 e  g %0LBdun
 s PLIST(0)=$p(PLIST(1),"||",1,2)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^SSU("SSGRP",$p(PLIST(1),"||",1),"VBEX",$p(PLIST(1),"||",2),"VBOP",$p(PLIST(1),"||",3,4))#"S":$zu(115,4) i $t { s %mmmsqld(9)=1,%mmmsqld(10)=$name(^SSU("SSGRP",$p(PLIST(1),"||",1),"VBEX",$p(PLIST(1),"||",2),"VBOP",$p(PLIST(1),"||",3,4)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.SS_GroupVBExFunctOptions for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(7)=$p(PLIST(1),"||"),%mmmsqld(8)=$p(PLIST(1),"||",2),PLIST(2)=$p(PLIST(1),"||",3,4)
 i %mmmsqld(7)'="",%mmmsqld(8)'="",PLIST(2)'="",$d(^SSU("SSGRP",%mmmsqld(7),"VBEX",%mmmsqld(8),"VBOP",PLIST(2)))
 e  g %0LCdun
 s PLIST(0)=$p(PLIST(1),"||",1,2)
%0LBuncommitted ;
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(9))=1 { l -@%mmmsqld(10) s %mmmsqld(9)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(9))=1 { l -@%mmmsqld(10) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
