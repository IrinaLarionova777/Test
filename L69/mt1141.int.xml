<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="mt1141" type="INT" languagemode="0"><![CDATA[
mt1141  ; Compiled June 25, 2008 14:23:56 for Cache for Windows
delete(%rowid,%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%data(1)=%rowid,tupkill=1
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt1141(.%edit) i SQLCODE s SQLCODE=-106 g gunlock
 d trig0A^mt1141
 d file
 g gunlock
insert(%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%edit=1
 d insertnw^mt1141(+%check=1) i '%ok s SQLCODE=-104 q
winsert s %ROWID=%data(1)
 d:%check'["nolock" glock q:SQLCODE
 d:%check uniqfile(-104) i '%ok s SQLCODE=-104 g gunlock
 i +%check d required^mt1141 i '%ok s SQLCODE=-108 g gunlock
 d file
 g gunlock
update(%rowid,%check,%copyedi) n icol,ir,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1
 i '%copyedi f icol=0:1:2 k:'$d(%edit(icol)) %data(icol)
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt1141(.%edit) i SQLCODE s SQLCODE=-109 g gunlock
 f icol=0:1:2 i '$d(%data(icol)),$d(%edit(icol)) s %data(icol)=%edit(icol) d:$d(%edit(icol,1))  k %edit(icol)
 . f ir=1:1:%edit(icol) s %data(icol,ir)=%edit(icol,ir)
 d uniqfile(-105) i '%ok s SQLCODE=-105 g gunlock
 d updatenw^mt1141(%check) i '%ok s SQLCODE=-105 g gunlock
 i +%check d required^mt1141 i '%ok s SQLCODE=-108 g gunlock
 d file
 g gunlock
lock(%ROWID)   ;  user entry
glock q:$c(1)[%ROWID
 l +^mdd(1,$p(%ROWID,$c(1)),1):5 e  s SQLCODE=-110
 q
unlock(%ROWID)   ;  user entry
gunlock q:%check["nolock"
 q:$c(1)[%ROWID
 l -^mdd(1,$p(%ROWID,$c(1)),1)
 q
file n subs,tempn,irep,x,node,sn s %file=1,sn=0
 i $g(tupkill) k ^mdd(1,$p(%edit(1),$c(1),1),1)
 g:$g(tupkill) maps
 s:$g(%edit) tempn=""
 i $d(%edit(2)) s:'($d(tempn)#2) tempn=$g(^mdd(1,$p(%data(1),$c(1),1),1)) s $p(tempn,$c(1),1)=$g(%data(2))
 s:$d(tempn)#2 ^mdd(1,$p(%data(1),$c(1),1),1)=tempn
maps q
%0Bo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val  ;  Code for SQL: 
 s %mmmsqlE=$zt,$zt="%0Berr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(%data(1),$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$e(%data(1),2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(1)="" g %0BBdun
 s %mmmsqld(4)=""
%0BBk1 s %mmmsqld(4)=$o(^mdd(1,%mmmsqld(1),2,%mmmsqld(4)))
 i %mmmsqld(4)="" g %0BBdun
 i %mmmsqld(4)'=+%mmmsqld(4) g %0BBdun
 s %mmmsqld(3)=(%mmmsqld(1))_"||"_(%mmmsqld(4))
 d delete^mt1151(%mmmsqld(3),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
 g %0BBk1
%0BBdun 
%0BAdun 
 q
%0Berr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0BAdun
trig0A n %ROWID,%didit,SQLCODE s %didit="" k %skip
  d %0Bo^mt1141  s %didit=1
trgdoneA q  ;  trigger done
%0CAr1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num  ;  Code for update (get old values) of table: SS_Table
 q  
%0CBs1 s %val=$s(%val'=+%val:"",1:$fn(%val,"")) q
%0Co n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Cerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%rowid,$C(1))
 i %mmmsqld(3)="",$L(%rowid)>1 s %val=$E(%rowid,2,999) d %0CAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s $P(%dataold(1),$C(1))=%mmmsqld(3)
 i $P(%dataold(1),$C(1))'="",$d(^mdd(1,$P(%dataold(1),$C(1)),1))
 e  g %0CBdun
 s %mmmsqln=$g(^mdd(1,$P(%dataold(1),$C(1)),1))
 s %dataold(2)=$p(%mmmsqln,$c(1),1)
 
 s %val=$P(%dataold(1),$C(1)) d %0CBs1:%val'="" s $P(%dataold(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Cc
%0CBdun 
%0CAdun 
%0Cc q
%0Cerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0CAdun
getold(%dataold) g %0Co
lookupD d %RSDcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupD
%RSDcuro s SQLCODE=$s($g(%RSDcurc):-101,1:0) q:SQLCODE'=0
 s %RSDcurc=1 k %RSDcurm
 s %RSDcurE=$zt,%RSDcurf=0,%RSDcure=0,%RSDcurL=""
 l +^mtemp s %RSDcurt(1)=$zp(^mtemp(" "))+1,^(%RSDcurt(1))="" l -^mtemp
 q
%0Dfirst   ;  init
 k ^mtemp(%RSDcurt(1),0)
 ; asl MOD# 3
 d %0DBMod
 s %RSDcurs(6)=""
%0DCk1 s %RSDcurs(6)=$o(^mtemp(%RSDcurt(1),0,%RSDcurs(6)))
 i %RSDcurs(6)="" g %0DCdun
 s %RSDcurd(6)=$s(%RSDcurs(6)=" ":"",1:%RSDcurs(6))
 s %RSDcurs(1)=""
%0DCk2 s %RSDcurs(1)=$o(^mtemp(%RSDcurt(1),0,%RSDcurs(6),%RSDcurs(1)))
 i %RSDcurs(1)="" g %0DCk1
 s $P(%datars(1),$C(1))=$s(%RSDcurs(1)=-99999999999999999:"",1:%RSDcurs(1))
 
 s %val=$P(%datars(1),$C(1)) d %0CBs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 i $P(%datars(1),$C(1))'="",$d(^mdd(1,$P(%datars(1),$C(1)),1))
 e  g %0DCk2
 s %RSDcurn=$g(^mdd(1,$P(%datars(1),$C(1)),1))
 s %datars(2)=$p(%RSDcurn,$c(1),1)
 s SQLCODE=0 s:SQLCODE=0 %RSDcurf=%RSDcurf+1 s %RSDcurc=10 q
%RSDcurf i '$g(%RSDcurc) s SQLCODE=-102 q
 i %RSDcurc=100 s SQLCODE=100 q
 s $zt="%0Derr^"_$zn s $ze="" n %val g %0Dfirst:%RSDcurc=1
 g %0DCk2
%0DCdun 
%0DAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSDcurc=100 q
%RSDcurc i '$g(%RSDcurc) s SQLCODE=-102 q
 f %RSDcurt=1:1:1 k ^mtemp(%RSDcurt(%RSDcurt))
 k %RSDcurc,%RSDcurd,%RSDcure,%RSDcurE,%RSDcurf,%RSDcurl,%RSDcurL,%RSDcurn,%RSDcurr,%RSDcurR,%RSDcurs,%RSDcurt s SQLCODE=0 q
%0Derr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSDcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
%0DBMod ; asl MOD# 2
 n %RSDcurn  ; Nested NEWing for Subquery...
 s $P(%datars(1),$C(1))=""
%0DBk1 s $P(%datars(1),$C(1))=$o(^mdd(1,$P(%datars(1),$C(1))))
 i $P(%datars(1),$C(1))="" g %0DBdun
 i $P(%datars(1),$C(1))'=+$P(%datars(1),$C(1)) g %0DBdun
 i '$d(^mdd(1,$P(%datars(1),$C(1)),1)) g %0DBk1
 s %RSDcurn=$g(^mdd(1,$P(%datars(1),$C(1)),1))
 s %datars(2)=$p(%RSDcurn,$c(1),1)
 
 s %val=$P(%datars(1),$C(1)) d %0CBs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 s %RSDcurd(6)=$$ALPHAUP(%datars(2))
 s %RSDcurs(6)=$s(%RSDcurd(6)'="":%RSDcurd(6),1:" "),%RSDcurs(1)=$s($P(%datars(1),$C(1))'="":$P(%datars(1),$C(1)),1:-99999999999999999),^mtemp(%RSDcurt(1),0,%RSDcurs(6),%RSDcurs(1))=""
 g %0DBk1
%0DBdun 
 q
lookupE d %RSEcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupE
%RSEcuro s SQLCODE=$s($g(%RSEcurc):-101,1:0) q:SQLCODE'=0
 s %RSEcurc=1 k %RSEcurm
 s %RSEcurE=$zt,%RSEcurf=0,%RSEcure=0,%RSEcurL=""
 s %RSEcurd(6)=$P(%data(2),$C(1))
 l +^mtemp s %RSEcurt(1)=$zp(^mtemp(" "))+1,^(%RSEcurt(1))="" l -^mtemp
 s %RSEcurd(7)=$$ALPHAUP(%RSEcurd(6))
 q
%0Efirst   ;  init
 k ^mtemp(%RSEcurt(1),0)
 ; asl MOD# 3
 d %0EBMod
 s %RSEcurs(5)=""
%0ECk1 s %RSEcurs(5)=$o(^mtemp(%RSEcurt(1),0,%RSEcurs(5)))
 i %RSEcurs(5)="" g %0ECdun
 s %RSEcurd(5)=$s(%RSEcurs(5)=" ":"",1:%RSEcurs(5))
 s %RSEcurs(1)=""
%0ECk2 s %RSEcurs(1)=$o(^mtemp(%RSEcurt(1),0,%RSEcurs(5),%RSEcurs(1)))
 i %RSEcurs(1)="" g %0ECk1
 s $P(%datars(1),$C(1))=$s(%RSEcurs(1)=-99999999999999999:"",1:%RSEcurs(1))
 s %datars(2)=$g(^mtemp(%RSEcurt(1),0,%RSEcurs(5),%RSEcurs(1)))
 
 s %val=$P(%datars(1),$C(1)) d %0CBs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %RSEcurf=%RSEcurf+1 s %RSEcurc=10 q
%RSEcurf i '$g(%RSEcurc) s SQLCODE=-102 q
 i %RSEcurc=100 s SQLCODE=100 q
 s $zt="%0Eerr^"_$zn s $ze="" n %val g %0Efirst:%RSEcurc=1
 g %0ECk2
%0ECdun 
%0EAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSEcurc=100 q
%RSEcurc i '$g(%RSEcurc) s SQLCODE=-102 q
 f %RSEcurt=1:1:1 k ^mtemp(%RSEcurt(%RSEcurt))
 k %RSEcurc,%RSEcurd,%RSEcure,%RSEcurE,%RSEcurf,%RSEcurl,%RSEcurL,%RSEcurn,%RSEcurr,%RSEcurR,%RSEcurs,%RSEcurt s SQLCODE=0 q
%0Eerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSEcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0EAdun
%0EBMod ; asl MOD# 2
 n %RSEcurn  ; Nested NEWing for Subquery...
 s $P(%datars(1),$C(1))=""
%0EBk1 s $P(%datars(1),$C(1))=$o(^mdd(1,$P(%datars(1),$C(1))))
 i $P(%datars(1),$C(1))="" g %0EBdun
 i $P(%datars(1),$C(1))'=+$P(%datars(1),$C(1)) g %0EBdun
 i '$d(^mdd(1,$P(%datars(1),$C(1)),1)) g %0EBk1
 s %RSEcurn=$g(^mdd(1,$P(%datars(1),$C(1)),1))
 s %datars(2)=$p(%RSEcurn,$c(1),1)
 
 s %val=$P(%datars(1),$C(1)) d %0CBs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 s %RSEcurd(5)=$$ALPHAUP(%datars(2))
 g:'((%RSEcurd(7))=$E((%RSEcurd(5)),1,$L((%RSEcurd(7))))) %0EBk1
 s %RSEcurs(5)=$s(%RSEcurd(5)'="":%RSEcurd(5),1:" "),%RSEcurs(1)=$s($P(%datars(1),$C(1))'="":$P(%datars(1),$C(1)),1:-99999999999999999),^mtemp(%RSEcurt(1),0,%RSEcurs(5),%RSEcurs(1))=%datars(2)
 g %0EBk1
%0EBdun 
 q
selitmE  ; entry point to select the Row Selection Item
 i $c(1)'[$g(%data(2)) s item=2 q
 s item=0 f  s item=$o(%data(item)) q:item=""  i $c(1)'[%data(item) s item=1 q
 s item=$s(item=1:"",1:1) q
 s item="" q
%mdiag(oper,sqlcode,class,subclass,field,cursor,%msg) ; diagnostics for sql operations
 i '$d(%mdiag) s $p(%mdiag,$c(1),2,3)="NO"_$c(1)_oper
 i ($p(%mdiag,$c(1))+1)>10 s $p(%mdiag,$c(1),2)="YES" q
 s $p(%mdiag,$c(1))=$p(%mdiag,$c(1))+1,%mdiag($p(%mdiag,$c(1)))=$g(sqlcode)_$c(1)_$g(class)_$c(1)_$g(subclass)_$c(1)_"SS_Table"_$c(1)_$g(field)_$c(1)_$g(cursor)_$c(1)_$g(%msg) q
 ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
required ; Entry point to check the required fields
 n %lang,%oper k %mdiag s %msg="",%ok=1,%oper=$s($g(%edit):"INSERT",1:"UPDATE"),%lang=$p($g(%msql),$c(1),5) s:'%lang %lang=1
 i $c(1,1)[$g(%data(1)) s %ok="SS_Table Row ID" d %mdiag(%oper,-106,"Fld Int","Req","SSTAB_RowId","",%ok) s %msg=%ok,%ok=0
 q
rowiderr s %ok=0 q
insertnw(%check,iform,recheck) ; insert tuple for table SS_Table
 n %based,%call,%done,%i,%icol,%irep,%irepi,%oper,%val,db,rowerr
 s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),recheck=$g(recheck),%oper="INSERT",rowerr=0 k %mdiag
 i recheck s %val=$g(%data(1)) g inrwid
 i iform s redrawit=0,idexist=2
 i '$d(rptform) n rptform s rptform=0
 s %val=""
 i $c(1)'[$g(%data(1)),$p(%data(1),$c(1))="" s %val=$p(%data(1),$c(1),2) g inrwide
 i $c(1)'[$g(%data(1)) s %val=$p(%data(1),$c(1)) g inrwid
 i $c(1)'[$g(%insert(1)),$p(%insert(1),$c(1))="" s %val=$p(%insert(1),$c(1),2) g inrwide
 i $c(1)'[$g(%insert(1)) s %val=$p(%insert(1),$c(1)) g inrwid
 s %val=$i(^mdata(114)) g inrwide
 g rowiderr
inrwide ; external to internal conversion for rowid
 i 'rowerr d fde1^mt1141 i '%ok g:'iform rowiderr s rowerr=1
inrwid ; rowid in internal
 i 'rowerr d fdv1^mt1141 i '%ok s rowerr=1 g rowiderr
 s %data(1)=%val
 i 'rowerr d fdi1^mt1141 s %data(1)=%data(1)_$c(1)_%val
 i $c(1)[%data(1) g:'iform rowiderr s rowerr=1
 s:'$g(rowerr) %edit(1)=""
 g insarr
insarr q:$g(recheck)  ; entry point to spin through the %insert array
 s %icol=""
insloop s %icol=$o(%insert(%icol)) g insdef:%icol="",insloop:$d(%data(%icol))
 i ",1,"[(","_%icol_",") g insloop
 s %data(%icol)=%insert(%icol) s:+%check %edit(%icol)=""
 i $d(%insert(%icol))>9 g insrep
 g insloop
insrep ; entry point to work on repeating fields in the %insert array
 s %irep=0
insreplp s %irep=%irep+1 g:%irep>%insert(%icol) insloop
 s %data(%icol,%irep)=%insert(%icol,%irep) g insreplp
insdef ; entry point to compile all of the defaults
 d extint g:'%ok rowiderr:'iform i +%check=1 d validate g:'%ok rowiderr:'iform
 d intext^mt1141
 g:+%check inscomp
insedit s %icol=""
insedlop s %icol=$o(%insert(%icol)) g inscomp:%icol="",insedlop:$d(%edit(%icol))!(",1,"[(","_%icol_",")) s %edit(%icol)="" g insedlop
inscomp ; entry point to calculate all computed fields
 s %data=%data(1) s:$g(iform) %ok=1 q
etiok i '%ok,'$d(%edit(%icol)) k %data(%icol) s %ok=1 q
 i '%ok s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
 s $p(%data(%icol),$c(1))=%val q
etiokrp i '%ok k %data(%icol,%irep) s %ok=1 q
 s $p(%data(%icol,%irep),$c(1))=%val q
etivalen s %irepi=0 f %irep=1:1:$g(%data(%icol)) i $d(%data(%icol,%irep)) s %irepi=%irepi+1,%data(%icol,%irepi)=%data(%icol,%irep)
 i '$g(%data(%icol))!%irepi s %data(%icol)=%irepi q
 k %data(%icol) q:'$d(%edit(%icol))
 f %irep=1:1:%edit(%icol) s %data(%icol,%irep)=%edit(%icol,%irep)
 s %data(%icol)=%edit(%icol) k %edit(%icol) q
fde1 ; external to internal conversion code
 s %ok=1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num
 q
extint s %ok=1 ; entry point to do all external to internal conversion code
 i $d(%data(1)),$p(%data(1),$c(1))="",$p(%data(1),$c(1),2)'="" s %val=$p(%data(1),$c(1),2) d  g:'%ok rowiderr:'iform s %icol=1 d etiok
 . s %msg="" d fde1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Ext->Int","SSTAB_RowId","",$g(%msg))
 i $d(%data(2)),$p(%data(2),$c(1))="",$p(%data(2),$c(1),2)'="" s %val=$p(%data(2),$c(1),2) s %data(2)=%val
 q
fda1 ; DO validation and additional validation code
 i %val'=+%val s %ok=0,%msg=$$setmsg^%qarzst("DTNumIn")
 q
fdv1 ; DO field validation (ALL of it)
 s %ok=1 d fda1 q:'%ok  s:'$$uniq1($g(%data(1)),%val) %ok=0,%msg=$$setmsg^%qarzst("UniqueQ") q
uniq1(%rowid,%unique) n SQLCODE,%val d %0Fo q SQLCODE=100
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%unique,$C(1))
 i %mmmsqld(3)="",$L(%unique)>1 s %val=$E(%unique,2,999) d %0CAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(3)
 i %mmmsqld(1)'="",$d(^mdd(1,%mmmsqld(1),1))
 e  g %0FBdun
 s %mmmsqld(2)=%mmmsqld(1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Fc
%0FBdun 
%0FAdun 
%0Fc q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
uniqfile(%sqcode) k %mdiag
 i %sqcode=-104,%ok,$c(1)'[$g(%data(1)),'$$uniq1($g(%data(1)),$g(%data(1))) s %ok="SSTAB_RowId"_": "_$$setmsg^%qarzst("UniqueQ") d %mdiag("",%sqcode,"","","SSTAB_RowId","",%ok)
 q
valok i %ok s $p(%data(%icol),$c(1))=%val q
 s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
valokrp i %ok s $p(%data(%icol,%irep),$c(1))=%val q
 k %data(%icol,%irep) s %ok=1 q
validate s %ok=1 ; entry point to do all validation code
 i $d(%edit(1)),%data(1)'=%edit(1) s %icol=1 s %val=$p(%data(1),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSTAB_RowId","",$g(%msg))
 q
fdi1 s %val=$s(%val'=+%val:"",1:$fn(%val,""))
 q
intext ; entry point to do all internal to external conversion code
 i $d(%data(1)),$p(%data(1),$c(1))'="" s %val=$p(%data(1),$c(1)) d fdi1 s $p(%data(1),$c(1),2)=%val
 i $d(%data(2)),%data(2)[$c(1) s %data(2)=$s($p(%data(2),$c(1))'="":$p(%data(2),$c(1)),1:$p(%data(2),$c(1),2))
 q
updatenw(%check,iform) n %i,%icol,%irep,%irepi,%oldval,%oper,%val,db s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),%oper="UPDATE" k %mdiag
 d:%check'=2 extint g:'%ok rowiderr:'iform i %check=1 d validate g:'%ok rowiderr:'iform
 d:%check'=2 intext^mt1141 q:'%ok
 q
 g ^mt1142
UPPER(val) d:'$d(%trans) %trans^%qarztrm q $tr(val,%trans(3),%trans(4))
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
]]></Routine>
</Export>
