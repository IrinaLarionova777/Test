<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBCTBT" type="INT" languagemode="0" generated="1"><![CDATA[
LVBCTBT ; IG 29/4/98 ; MVB Control code access for CT_BatchCreditType
 ;
 ; supported calls:
 ;
 ; $$select^LVBCTBT(ROWID,skip)
 ; $$open^LVBCTBT(skip,active,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBCTBT(skip,active,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBCTBT(skip,active,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBCTBT(skip,active,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBCTBT()
 ; $$insert^LVBCTBT()
 ; $$update^LVBCTBT(ROWID)
 ; $$delete^LVBCTBT(ROWID,Comments)
 ; $$getall^LVBCTBT(active)
 ; FIX^LVBCTBT
 ;
  ;---&SQL(DECLARE CTBT CURSOR FOR SELECT * FROM CT_BatchCreditType
   ;---         WHERE ((CTBT_ActiveFlag = :active) OR (:active is NULL)))
   ;--- ** SQL PUBLIC Variables: SQLCODE, active
FIX k ^TTABi("BT") s a="" f  s a=$o(^TTAB("BT",a)) q:a=""  d
 .i '$$select(a,"Y") s PLIST(4)="Y",err=$$update(a) i err w !,a," ",err
 d ##class(User.CTBatchCreditType).%BuildIndices()
 q
 ; Insert the data
insert() K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO CT_BatchCreditType VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; Update the data
update(ROWID) D pre("Y")
  ;---&SQL(UPDATE CT_BatchCreditType VALUES :PLIST() WHERE CTBT_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; Delete the data
delete(ROWID,Comments) s ROWID=$g(ROWID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM CT_BatchCreditType WHERE CTBT_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 k ^TMP("Comments",$j)
 Q SQLCODE
 ; Open the cursor
open(skip,active,p2,p3,p4,p5,p6,p7,p8,p9) s skip=$g(skip),active=$g(active)
  ;---&SQL(OPEN CTBT)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTBT0o
 Q 0
 ;
 ; Fetch the data
fetch(skip,active,p2,p3,p4,p5,p6,p7,p8,p9) s skip=$g(skip),active=$g(active) k PLIST
  ;---&SQL(FETCH CTBT INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(skip,active,p2,p3,p4,p5,p6,p7,p8,p9) s skip=$g(skip),active=$g(active) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(skip,active) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(skip,active,p2,p3,p4,p5,p6,p7,p8,p9) N (skip,active,PLIST) s skip=$g(skip),active=$g(active) K ^TMP($zn,$j)
 i $$open(skip,active)
 f cnt=1:1 Q:$$fetch(skip,active)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor 
close()  ;---&SQL(CLOSE CTBT) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTBT0c 
 q 0
 ;
 ; select data by code
select(ROWID,skip) s skip=$g(skip) K PLIST
  ;---&SQL(SELECT * INTO :PLIST() FROM CT_BatchCreditType WHERE CTBT_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4("","")
 S (PLIST(1),PLIST(2))=$$ALPHAUP^SSUTIL4(PLIST(2))
 q
 ;
 ; Post-filing adjustments
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 i $g(skip)="Y" q
 ;
 I $G(PLIST(5))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTAU(plist(5),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(5)=X K plist
 Q
 ;
getall(active) n (active,PLIST) k ^TMP($zn,$j) s active=$g(active)
 i $$open("Y",active)
 f cnt=1:1 q:$$fetch("Y",active)  s ^TMP($zn,$j,cnt)=$p(PLIST(1),$c(1))_$c(2)_$p(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
%CTBT0o s $zt="%CTBT0E" s SQLCODE=$s($g(%CTBT0c):-101,1:0) q:SQLCODE'=0  s %CTBT0d(14)=0 s %CTBT0d(15)=0,%CTBT0d(16)=""
 s %CTBT0d(7)=$g(active),%CTBT0d(8)=$g(active)
 s %CTBT0d(11)=$zu(28,%CTBT0d(7),7)
 s %CTBT0c=1 q
%CTBT0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %CTBT0c,%CTBT0d,%CTBT0E,%CTBT0l,%CTBT0n,%CTBT0R,%CTBT0Z q
%0Afirst 
 ; asl MOD# 2
 s %CTBT0d(1)=""
%0ABk1 s %CTBT0d(1)=$o(^TTAB("BT",%CTBT0d(1)))
 i %CTBT0d(1)="" g %0ABdun
 s %CTBT0d(21)=$g(^TTAB("BT",%CTBT0d(1)))
 s %CTBT0d(2)=$p(%CTBT0d(21),"\",1) s %CTBT0d(3)=$p(%CTBT0d(21),"\",2) s %CTBT0d(4)=$p(%CTBT0d(21),"\",3) s %CTBT0d(5)=$p(%CTBT0d(21),"\",5) s %CTBT0d(6)=$p(%CTBT0d(21),"\",6)
 s %CTBT0d(10)=$zu(28,%CTBT0d(3),7)
 g:'(((%CTBT0d(10)'=" ")&&(%CTBT0d(10)=%CTBT0d(11)))||(%CTBT0d(8)="")) %0ABk1
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTAB("BT",$p(%CTBT0d(1),"||",1))#"S":$zu(115,4) i $t { s %CTBT0d(15)=1,%CTBT0d(16)=$name(^TTAB("BT",$p(%CTBT0d(1),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_BatchCreditType for RowID value: "_%CTBT0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %CTBT0d(12)=$lb(""_%CTBT0d(10))
 i %CTBT0d(1)'="",$d(^TTAB("BT",%CTBT0d(1)))
 e  g %0ACdun
 s %CTBT0d(26)=$g(^TTAB("BT",%CTBT0d(1)))
 s %CTBT0d(2)=$p(%CTBT0d(26),"\",1) s %CTBT0d(3)=$p(%CTBT0d(26),"\",2) s %CTBT0d(4)=$p(%CTBT0d(26),"\",3) s %CTBT0d(5)=$p(%CTBT0d(26),"\",5) s %CTBT0d(6)=$p(%CTBT0d(26),"\",6)
 s %CTBT0d(10)=$zu(28,%CTBT0d(3),7)
 s %CTBT0d(13)=$lb(""_%CTBT0d(10))
 g:%CTBT0d(12)'=%CTBT0d(13) %0ACdun
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %CTBT0d(14)=%CTBT0d(14)+1,%ROWCOUNT=%CTBT0d(14),%ROWID=%CTBT0d(1),%CTBT0c=10 q
%CTBT0f i '$g(%CTBT0c) { s SQLCODE=-102 q  } i %CTBT0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%CTBT0d(14))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%CTBT0d(14),%CTBT0c=100 q  } g %0Afirst:%CTBT0c=1
%0ACdun i $zu(115,2)=1,$g(%CTBT0d(15))=1 { l -@%CTBT0d(16) s %CTBT0d(15)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%CTBT0d(14),SQLCODE=100,%CTBT0c=100 q
%CTBT0c i '$g(%CTBT0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%CTBT0d(14)),1:0)
 i $zu(115,2)=1,$g(%CTBT0d(15))=1 { l -@%CTBT0d(16) } k %CTBT0c,%CTBT0d,%CTBT0E,%CTBT0l,%CTBT0n,%CTBT0R,%CTBT0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %CTBT0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:7 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.CTBatchCreditType.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(4)=0 s %mmmsqld(5)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 i %mmmsqld(2)'="",$d(^TTAB("BT",%mmmsqld(2)))
 e  g %0EBdun
 s %mmmsqld(10)=$$%getlock^User.CTBatchCreditType.T1(%mmmsqld(2)) i '%mmmsqld(10) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 i %mmmsqld(2)'="",$d(^TTAB("BT",%mmmsqld(2)))
 e  g %0ECdun
 k %data
 f icol=0:1:7 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.CTBatchCreditType.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(4))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(10)=1 %ReleaseLock^User.CTBatchCreditType.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(10)=1 %ReleaseLock^User.CTBatchCreditType.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(4)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(10))=1 %ReleaseLock^User.CTBatchCreditType.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(3)=0 s %mmmsqld(4)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 i %mmmsqld(1)'="",$d(^TTAB("BT",%mmmsqld(1)))
 e  g %0GBdun
 s %mmmsqld(9)=$$%getlock^User.CTBatchCreditType.T1(%mmmsqld(1)) i '%mmmsqld(9) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 i %mmmsqld(1)'="",$d(^TTAB("BT",%mmmsqld(1)))
 e  g %0GCdun
 d %delete^User.CTBatchCreditType.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(3))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(9)=1 %ReleaseLock^User.CTBatchCreditType.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(9)=1 %ReleaseLock^User.CTBatchCreditType.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(3)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(9))=1 %ReleaseLock^User.CTBatchCreditType.T1(%mmmsqld(1)) g %0Gc
%0Jo d %CTBT0f q:SQLCODE'=0
 s PLIST(1)=%CTBT0d(1),PLIST(2)=%CTBT0d(1),PLIST(3)=%CTBT0d(2),PLIST(4)=%CTBT0d(3),PLIST(5)=%CTBT0d(4),PLIST(6)=%CTBT0d(5),PLIST(7)=%CTBT0d(6)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(10)=0,%mmmsqld(11)=""
 s %mmmsqld(8)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(2)=%mmmsqld(8)
 i PLIST(2)'="",$d(^TTAB("BT",PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(16)=$g(^TTAB("BT",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(16),"\",1) s PLIST(4)=$p(%mmmsqld(16),"\",2) s PLIST(5)=$p(%mmmsqld(16),"\",3) s PLIST(6)=$p(%mmmsqld(16),"\",5) s PLIST(7)=$p(%mmmsqld(16),"\",6)
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TTAB("BT",$p(PLIST(2),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(10)=1,%mmmsqld(11)=$name(^TTAB("BT",$p(PLIST(2),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_BatchCreditType for RowID value: "_PLIST(2) ztrap "LOCK"  }
 ; asl MOD# 3
 i PLIST(2)'="",$d(^TTAB("BT",PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(21)=$g(^TTAB("BT",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(21),"\",1) s PLIST(4)=$p(%mmmsqld(21),"\",2) s PLIST(5)=$p(%mmmsqld(21),"\",3) s PLIST(6)=$p(%mmmsqld(21),"\",5) s PLIST(7)=$p(%mmmsqld(21),"\",6)
%0LBuncommitted ;
 s PLIST(1)=PLIST(2)
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(10))=1 { l -@%mmmsqld(11) s %mmmsqld(10)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(10))=1 { l -@%mmmsqld(11) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
