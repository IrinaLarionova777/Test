<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBINVB" type="INT" languagemode="0" generated="1"><![CDATA[
LVBINVB ; IG 29/4/98 ; MVB Control code access for INV_Batch
 ;
 ; supported calls:
 ;
 ; $$select^LVBINVB(ROWID)
 ; $$open^LVBINVB(hic,type1,type2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBINVB(hic,type1,type2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBINVB(hic,type1,type2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBINVB()
 ; $$insert^LVBINVB()
 ; $$update^LVBINVB(ROWID)
 ; $$delete^LVBINVB(ROWID)
 ; $$seldata^LVBINVB(ROWID,data)
 ; $$summary^LVBINVB(ROWID,type,seq)
 ;
  ;---&SQL(DECLARE INVB CURSOR FOR SELECT * FROM INV_Batch)
   ;--- ** SQL PUBLIC Variables: SQLCODE
FIX d ##class(User.INVBatch).%BuildIndices()
 q
 ;
 ; Insert the data
insert() K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO INV_Batch VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) s ROWID=$g(ROWID) d pre("Y") 
  ;---&SQL(UPDATE INV_Batch VALUES :PLIST() WHERE INVB_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Delete the data
delete(ROWID) s ROWID=$g(ROWID)
  ;---&SQL(DELETE FROM INV_Batch WHERE INVB_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 Q SQLCODE
 ;
 ; Open the cursor
open(hic,type1,type2,p3,p4,p5,p6,p7,p8,p9) s hic=$g(hic),type1=$g(type1),type2=$g(type2)
  ;---i '$l(hic) &SQL(OPEN INVB)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 i '$l(hic) Do %INVB0o
 i $l(hic) s ^TMP($zn,$j,0)=""
 Q 0
 ;
 ; Fetch the data
fetch(hic,type1,type2,p3,p4,p5,p6,p7,p8,p9) s hic=$g(hic),type1=$g(type1),type2=$g(type2) K PLIST
  ;---i '$l(hic) &SQL(FETCH INVB INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 i '$l(hic) Do %0Jo
 i $l(hic) s stop="" f  d  q:stop
 .k PLIST s (stop,SQLCODE)=100,line=$g(^TMP($zn,$j,0)),line=$o(^TMCBi("EDI",line)),^TMP($zn,$j,0)=line
 .i $l(line) s stop="" d
 .. ;---s pc=$p(line,"||",1),(xt1,xt2)="" &SQL(SELECT CTPC_PaymentCodeType_DR,CTPC_Type INTO :xt1,:xt2 FROM CT_PaymentCode WHERE CTPC_RowID=:pc)
  .. ;--- ** SQL PUBLIC Variables: SQLCODE, pc, xt1, xt2
 ..s pc=$p(line,"||",1),(xt1,xt2)="" Do %0Ko
 ..s xt1=$p(xt1,$c(1)),xt2=$p(xt2,$c(1))
 ..i $l(type2),type2'=xt2 q
 ..i $l(type1),type1'=xt1 q
 ..s SQLCODE=$$select(line) i 'SQLCODE s amounts="" d  s PLIST(11)=amounts
 ...s x=PLIST(1) n PLIST
 ...i '$$summary(x),PLIST(1) s stop=100,amounts=PLIST(1)_$c(1)_PLIST(2)
 s PLIST=$o(PLIST(""),-1) 
 i 'SQLCODE d adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(hic,type1,type2,p3,p4,p5,p6,p7,p8,p9) s hic=$g(hic),type1=$g(type1),type2=$g(type2) k ^TMP($zn,$j,1)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(hic,type1,type2) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,1,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,1,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j,1) k ^TMP($zn,$j,1)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
 ; Close the cursor 
close()  ;---&SQL(CLOSE INVB) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %INVB0c 
 k ^TMP($zn,$j,0)
 q 0
 ;
 ; select data by code
select(ROWID) K PLIST s ROWID=$g(ROWID)
  ;---&SQL(SELECT * INTO :PLIST() FROM INV_Batch WHERE INVB_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0No
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ; select data by code and field No
seldata(ROWID,data) n (ROWID,data) s ROWID=$g(ROWID),data=$g(data),result=""
 i $l(ROWID) d  q result
 .f j=1:1:2 s x(j)=$p(ROWID,"||",j)
 .i $l(x(1)),$l(x(2)),data=4 s result=$p($g(^TMCB(x(1),x(2))),"\",1) q
 .i $l(x(1)),$l(x(2)),data=6 s result=$p($g(^TMCB(x(1),x(2))),"\",3) q
 .i $l(x(1)),$l(x(2)),data=11 s result=$p($g(^TMCB(x(1),x(2))),"\",7) q
 .i '$$select(ROWID) s result=$g(PLIST(data))
 q result
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4()
 q
 ;
 ; Post-filing adjustments
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 ;
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTPC(plist(2),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 I $G(PLIST(6))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTCO(plist(6),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(6)=X K plist
 i $g(PLIST(10))'="" d
 .k plist m plist=PLIST k PLIST
 .s SQLCODE=$$selrow^MVBSSUSR(plist(10),"Y")
 .s X="" i 'SQLCODE s X=PLIST(2)_$c(1)_PLIST(3)_$c(1)_PLIST(14)
 .k PLIST m PLIST=plist s PLIST(10)=X k plist
 ;
 Q
 ;
 ; Invoice Batch summary
 ; PLIST - 1.Amount Outstanding
 ;         2.Amount Billed
summary(RowID,type,seq) n (RowID,seq,PLIST) s RowID=$g(RowID),seq=$g(seq),result=""
 s x1=$p(RowID,"||",1),x2=$p(RowID,"||",2)
 s epis="" f  s epis=$o(^TMCB(x1,x2,epis)) q:epis=""  d
 .i $l(seq),seq'=$p(^(epis),"\",2) q
 . ;---s batch="" &sql(SELECT EPVIS_InvoiceBatch_DR INTO :batch FROM EP_VisitNumber WHERE EPVIS_RowID=:epis)
  . ;--- ** SQL PUBLIC Variables: SQLCODE, batch, epis
 .s batch="" Do %0Po
 .s batch=$p(batch,$c(1))
 .i batch=RowID d
 ..s $p(result,$c(1),1)=$p(result,$c(1),1)+$$CT004^at54(epis)
 ..s $p(result,$c(1),2)=$p(result,$c(1),2)+$$CT005^at54(epis)
 k PLIST
 s PLIST(1)=$j($p(result,$c(1),1),0,2)
 s PLIST(2)=$j($p(result,$c(1),2),0,2)
 s PLIST=$o(PLIST(""),-1)
 q 0
%INVB0o s $zt="%INVB0E" s SQLCODE=$s($g(%INVB0c):-101,1:0) q:SQLCODE'=0  s %INVB0d(13)=0 s %INVB0d(14)=0,%INVB0d(15)=""
 s %INVB0c=1 q
%INVB0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %INVB0c,%INVB0d,%INVB0E,%INVB0l,%INVB0n,%INVB0R,%INVB0Z q
%0Afirst 
 ; asl MOD# 2
 s %INVB0d(2)=""
%0ABk1 s %INVB0d(2)=$o(^TMCB(%INVB0d(2)))
 i %INVB0d(2)="" g %0ABdun
 s %INVB0d(3)=""
%0ABk2 s %INVB0d(3)=$o(^TMCB(%INVB0d(2),%INVB0d(3)))
 i %INVB0d(3)="" g %0ABk1
 s %INVB0d(19)=$g(^TMCB(%INVB0d(2),%INVB0d(3)))
 s %INVB0d(4)=$p(%INVB0d(19),"\",1) s %INVB0d(6)=$p(%INVB0d(19),"\",3) s %INVB0d(7)=$p(%INVB0d(19),"\",4) s %INVB0d(8)=$p(%INVB0d(19),"\",5) s %INVB0d(9)=$p(%INVB0d(19),"\",6) s %INVB0d(10)=$p(%INVB0d(19),"\",2) s %INVB0d(11)=$p(%INVB0d(19),"\",7)
 s %INVB0d(1)=(%INVB0d(2))_"||"_(%INVB0d(3))
 s %INVB0d(5)=$$CT005^at344($g(%INVB0d(10)))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TMCB($p(%INVB0d(1),"||",1),$p(%INVB0d(1),"||",2))#"S":$zu(115,4) i $t { s %INVB0d(14)=1,%INVB0d(15)=$name(^TMCB($p(%INVB0d(1),"||",1),$p(%INVB0d(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.INV_Batch for RowID value: "_%INVB0d(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %INVB0d(2)=$p(%INVB0d(1),"||"),%INVB0d(3)=$p(%INVB0d(1),"||",2)
 i %INVB0d(2)'="",%INVB0d(3)'="",$d(^TMCB(%INVB0d(2),%INVB0d(3)))
 e  g %0ACdun
 s %INVB0d(23)=$g(^TMCB(%INVB0d(2),%INVB0d(3)))
 s %INVB0d(4)=$p(%INVB0d(23),"\",1) s %INVB0d(6)=$p(%INVB0d(23),"\",3) s %INVB0d(7)=$p(%INVB0d(23),"\",4) s %INVB0d(8)=$p(%INVB0d(23),"\",5) s %INVB0d(9)=$p(%INVB0d(23),"\",6) s %INVB0d(10)=$p(%INVB0d(23),"\",2) s %INVB0d(11)=$p(%INVB0d(23),"\",7)
 s %INVB0d(5)=$$CT005^at344($g(%INVB0d(10)))
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %INVB0d(13)=%INVB0d(13)+1,%ROWCOUNT=%INVB0d(13),%ROWID=%INVB0d(1),%INVB0c=10 q
%INVB0f i '$g(%INVB0c) { s SQLCODE=-102 q  } i %INVB0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%INVB0d(13))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%INVB0d(13),%INVB0c=100 q  } g %0Afirst:%INVB0c=1
%0ACdun i $zu(115,2)=1,$g(%INVB0d(14))=1 { l -@%INVB0d(15) s %INVB0d(14)=0 }
 g %0ABk2
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%INVB0d(13),SQLCODE=100,%INVB0c=100 q
%INVB0c i '$g(%INVB0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%INVB0d(13)),1:0)
 i $zu(115,2)=1,$g(%INVB0d(14))=1 { l -@%INVB0d(15) } k %INVB0c,%INVB0d,%INVB0E,%INVB0l,%INVB0n,%INVB0R,%INVB0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %INVB0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:11 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.INVBatch.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMCB(%mmmsqld(4),%mmmsqld(5)))
 e  g %0EBdun
 s %mmmsqld(11)=$$%getlock^User.INVBatch.T1(%mmmsqld(2)) i '%mmmsqld(11) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMCB(%mmmsqld(4),%mmmsqld(5)))
 e  g %0ECdun
 k %data
 f icol=0:1:11 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.INVBatch.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(11)=1 %ReleaseLock^User.INVBatch.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(11)=1 %ReleaseLock^User.INVBatch.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(11))=1 %ReleaseLock^User.INVBatch.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(5)=0 s %mmmsqld(6)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TMCB(%mmmsqld(3),%mmmsqld(4)))
 e  g %0GBdun
 s %mmmsqld(10)=$$%getlock^User.INVBatch.T1(%mmmsqld(1)) i '%mmmsqld(10) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TMCB(%mmmsqld(3),%mmmsqld(4)))
 e  g %0GCdun
 d %delete^User.INVBatch.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(5))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(10)=1 %ReleaseLock^User.INVBatch.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(10)=1 %ReleaseLock^User.INVBatch.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(5)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(10))=1 %ReleaseLock^User.INVBatch.T1(%mmmsqld(1)) g %0Gc
%0Jo d %INVB0f q:SQLCODE'=0
 s PLIST(1)=%INVB0d(1),PLIST(2)=%INVB0d(2),PLIST(3)=%INVB0d(3),PLIST(4)=%INVB0d(4),PLIST(5)=%INVB0d(5),PLIST(6)=%INVB0d(6),PLIST(7)=%INVB0d(7),PLIST(8)=%INVB0d(8),PLIST(9)=%INVB0d(9),PLIST(10)=%INVB0d(10),PLIST(11)=%INVB0d(11)
 q
%0Ko n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Kerr" s %mmmsqld(8)=0,%mmmsqld(9)=""
 s %mmmsqld(6)=$g(pc)
 s SQLCODE=100
 ; asl MOD# 2
 s %mmmsqld(5)=%mmmsqld(6)
 i %mmmsqld(5)'="",$d(^TTAB("BI",%mmmsqld(5)))
 e  g %0KBdun
 s %mmmsqld(14)=$g(^TTAB("BI",%mmmsqld(5)))
 s xt1=$p(%mmmsqld(14),"\",35) s xt2=$p(%mmmsqld(14),"\",26)
 g:$zu(115,2)=0 %0KBuncommitted i $zu(115,2)=1 l +^TTAB("BI",$p(%mmmsqld(5),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(8)=1,%mmmsqld(9)=$name(^TTAB("BI",$p(%mmmsqld(5),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_PaymentCode for RowID value: "_%mmmsqld(5) ztrap "LOCK"  }
 ; asl MOD# 3
 i %mmmsqld(5)'="",$d(^TTAB("BI",%mmmsqld(5)))
 e  g %0KCdun
 s %mmmsqld(19)=$g(^TTAB("BI",%mmmsqld(5)))
 s xt1=$p(%mmmsqld(19),"\",35) s xt2=$p(%mmmsqld(19),"\",26)
%0KBuncommitted ;
 s SQLCODE=0 g %0Kc
%0KCdun i $zu(115,2)=1,$g(%mmmsqld(8))=1 { l -@%mmmsqld(9) s %mmmsqld(8)=0 }
%0KBdun 
%0KAdun 
%0Kc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(8))=1 { l -@%mmmsqld(9) } q
%0Kerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Kc
%0No n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Nerr" s %mmmsqld(15)=0,%mmmsqld(16)=""
 s %mmmsqld(13)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(13)
 s PLIST(2)=$p(PLIST(1),"||"),PLIST(3)=$p(PLIST(1),"||",2)
 i PLIST(2)'="",PLIST(3)'="",$d(^TMCB(PLIST(2),PLIST(3)))
 e  g %0NBdun
 s %mmmsqld(20)=$g(^TMCB(PLIST(2),PLIST(3)))
 s PLIST(4)=$p(%mmmsqld(20),"\",1) s PLIST(6)=$p(%mmmsqld(20),"\",3) s PLIST(7)=$p(%mmmsqld(20),"\",4) s PLIST(8)=$p(%mmmsqld(20),"\",5) s PLIST(9)=$p(%mmmsqld(20),"\",6) s PLIST(10)=$p(%mmmsqld(20),"\",2) s PLIST(11)=$p(%mmmsqld(20),"\",7)
 s PLIST(5)=$$CT005^at344($g(PLIST(10)))
 g:$zu(115,2)=0 %0NBuncommitted i $zu(115,2)=1 l +^TMCB($p(PLIST(1),"||",1),$p(PLIST(1),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(15)=1,%mmmsqld(16)=$name(^TMCB($p(PLIST(1),"||",1),$p(PLIST(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.INV_Batch for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s PLIST(2)=$p(PLIST(1),"||"),PLIST(3)=$p(PLIST(1),"||",2)
 i PLIST(2)'="",PLIST(3)'="",$d(^TMCB(PLIST(2),PLIST(3)))
 e  g %0NCdun
 s %mmmsqld(24)=$g(^TMCB(PLIST(2),PLIST(3)))
 s PLIST(4)=$p(%mmmsqld(24),"\",1) s PLIST(6)=$p(%mmmsqld(24),"\",3) s PLIST(7)=$p(%mmmsqld(24),"\",4) s PLIST(8)=$p(%mmmsqld(24),"\",5) s PLIST(9)=$p(%mmmsqld(24),"\",6) s PLIST(10)=$p(%mmmsqld(24),"\",2) s PLIST(11)=$p(%mmmsqld(24),"\",7)
 s PLIST(5)=$$CT005^at344($g(PLIST(10)))
%0NBuncommitted ;
 s SQLCODE=0 g %0Nc
%0NCdun i $zu(115,2)=1,$g(%mmmsqld(15))=1 { l -@%mmmsqld(16) s %mmmsqld(15)=0 }
%0NBdun 
%0NAdun 
%0Nc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(15))=1 { l -@%mmmsqld(16) } q
%0Nerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Nc
%0Po n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Perr" s %mmmsqld(6)=0,%mmmsqld(7)=""
 s %mmmsqld(4)=$g(epis)
 s SQLCODE=100
 ; asl MOD# 2
 s %mmmsqld(3)=%mmmsqld(4)
 i %mmmsqld(3)'="",$d(^TEPI(%mmmsqld(3)))
 e  g %0PBdun
 s %mmmsqld(10)=$g(^TEPI(%mmmsqld(3),7))
 s batch=$p(%mmmsqld(10),"\",4)
 g:$zu(115,2)=0 %0PBuncommitted i $zu(115,2)=1 l +^TEPI($p(%mmmsqld(3),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(6)=1,%mmmsqld(7)=$name(^TEPI($p(%mmmsqld(3),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.EP_VisitNumber for RowID value: "_%mmmsqld(3) ztrap "LOCK"  }
 ; asl MOD# 3
 i %mmmsqld(3)'="",$d(^TEPI(%mmmsqld(3)))
 e  g %0PCdun
 s %mmmsqld(13)=$g(^TEPI(%mmmsqld(3),7))
 s batch=$p(%mmmsqld(13),"\",4)
%0PBuncommitted ;
 s SQLCODE=0 g %0Pc
%0PCdun i $zu(115,2)=1,$g(%mmmsqld(6))=1 { l -@%mmmsqld(7) s %mmmsqld(6)=0 }
%0PBdun 
%0PAdun 
%0Pc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(6))=1 { l -@%mmmsqld(7) } q
%0Perr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Pc
]]></Routine>
</Export>
