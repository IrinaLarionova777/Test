<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBCTRPD" type="INT" languagemode="0" generated="1"><![CDATA[
LVBCTRPD ; IG 30/4/98 ; MVB Control code access for CT_ReportData
 ;
 ; supported calls:
 ;
 ; $$select^LVBCTRPD(ROWID,skip)
 ; $$open^LVBCTRPD(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBCTRPD(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBCTRPD(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBCTRPD(par,skip,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBCTRPD()
 ; $$insert^LVBCTRPD(par)
 ; $$update^LVBCTRPD(ROWID)
 ; $$delete^LVBCTRPD(ROWID,Comments)
 ; $$getall^LVBCTRPD(par)
 ;
  ;---&SQL(DECLARE CTRPD CURSOR FOR SELECT * FROM CT_ReportData
   ;---         WHERE CTRPD_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 ; Insert the data
insert(par) K PLIST(1) s PLIST(0)=$g(par) d pre("N") 
  ;---&SQL(insert INTO CT_ReportData VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; Update the data
update(RowID) s RowID=$g(RowID) d pre("Y") 
  ;---&SQL(UPDATE CT_ReportData VALUES :PLIST() WHERE CTRPD_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Eo
 I 'SQLCODE Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ; Delete the data
delete(RowID,Comments) s RowID=$g(RowID),^TMP("Comments",$j)=$g(Comments)
  ;---&SQL(DELETE FROM CT_ReportData WHERE CTRPD_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0Go
 k ^TMP("Comments",$j)
 Q SQLCODE
 ; Open the cursor
open(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),skip=$g(skip)
  ;---&SQL(OPEN CTRPD)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTRPD0o
 Q 0
 ;
 ; Fetch the data
fetch(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) K PLIST s par=$g(par),skip=$g(skip)
  ;---&SQL(FETCH CTRPD INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),skip=$g(skip) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par,skip) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,skip,p2,p3,p4,p5,p6,p7,p8,p9) N (par,skip,PLIST) s par=$g(par),skip=$g(skip) K ^TMP($zn,$j)
 i $$open(par,skip)
 f cnt=1:1 Q:$$fetch(par,skip)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor
close()  ;---&SQL(CLOSE CTRPD) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %CTRPD0c 
 q 0
 ;
 ; select data by code
select(RowID,skip) s RowID=$g(RowID),skip=$g(skip) K PLIST
  ;---&SQL(SELECT * INTO :PLIST() FROM CT_ReportData WHERE CTRPD_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4()
 q
 ;
 ; Post-filing adjustments
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 Q
 ;
getall(par) N (par,PLIST) K ^TMP($ZN,$J) s par=$g(par)
 I $$open(par)
 F cnt=1:1 Q:$$fetch(par)  d
 .s str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(2),$c(1),2)_$c(2)_$P(PLIST(2),$c(1))_$c(2)_str
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
 ;
 q
%CTRPD0o s $zt="%CTRPD0E" s SQLCODE=$s($g(%CTRPD0c):-101,1:0) q:SQLCODE'=0  s %CTRPD0d(10)=0 s %CTRPD0d(11)=0,%CTRPD0d(12)=""
 s %CTRPD0d(7)=$g(par)
 s %CTRPD0c=1 q
%CTRPD0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %CTRPD0c,%CTRPD0d,%CTRPD0E,%CTRPD0l,%CTRPD0n,%CTRPD0R,%CTRPD0Z q
%0Afirst 
 ; asl MOD# 2
 s %CTRPD0d(1)=%CTRPD0d(7)
 i %CTRPD0d(1)="" g %0ABdun
 s %CTRPD0d(3)=""
%0ABk1 s %CTRPD0d(3)=$o(^TTAB("RPX",%CTRPD0d(1),%CTRPD0d(3)))
 i %CTRPD0d(3)="" g %0ABdun
 s %CTRPD0d(18)=$g(^TTAB("RPX",%CTRPD0d(1),%CTRPD0d(3)))
 s %CTRPD0d(4)=$p(%CTRPD0d(18),"\",1) s %CTRPD0d(5)=$p(%CTRPD0d(18),"\",2) s %CTRPD0d(6)=$p(%CTRPD0d(18),"\",3)
 s %CTRPD0d(2)=(%CTRPD0d(1))_"||"_(%CTRPD0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TTAB("RPX",$p(%CTRPD0d(2),"||",1),$p(%CTRPD0d(2),"||",2))#"S":$zu(115,4) i $t { s %CTRPD0d(11)=1,%CTRPD0d(12)=$name(^TTAB("RPX",$p(%CTRPD0d(2),"||",1),$p(%CTRPD0d(2),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_ReportData for RowID value: "_%CTRPD0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %CTRPD0d(9)=$p(%CTRPD0d(2),"||"),%CTRPD0d(3)=$p(%CTRPD0d(2),"||",2)
 i %CTRPD0d(9)'="",%CTRPD0d(3)'="",$d(^TTAB("RPX",%CTRPD0d(9),%CTRPD0d(3)))
 e  g %0ACdun
 s %CTRPD0d(24)=$g(^TTAB("RPX",%CTRPD0d(9),%CTRPD0d(3)))
 s %CTRPD0d(4)=$p(%CTRPD0d(24),"\",1) s %CTRPD0d(5)=$p(%CTRPD0d(24),"\",2) s %CTRPD0d(6)=$p(%CTRPD0d(24),"\",3)
 s %CTRPD0d(1)=$p(%CTRPD0d(2),"||")
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %CTRPD0d(10)=%CTRPD0d(10)+1,%ROWCOUNT=%CTRPD0d(10),%ROWID=%CTRPD0d(2),%CTRPD0c=10 q
%CTRPD0f i '$g(%CTRPD0c) { s SQLCODE=-102 q  } i %CTRPD0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%CTRPD0d(10))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%CTRPD0d(10),%CTRPD0c=100 q  } g %0Afirst:%CTRPD0c=1
%0ACdun i $zu(115,2)=1,$g(%CTRPD0d(11))=1 { l -@%CTRPD0d(12) s %CTRPD0d(11)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%CTRPD0d(10),SQLCODE=100,%CTRPD0c=100 q
%CTRPD0c i '$g(%CTRPD0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%CTRPD0d(10)),1:0)
 i $zu(115,2)=1,$g(%CTRPD0d(11))=1 { l -@%CTRPD0d(12) } k %CTRPD0c,%CTRPD0d,%CTRPD0E,%CTRPD0l,%CTRPD0n,%CTRPD0R,%CTRPD0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %CTRPD0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:5 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.CTReportData.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(3)=$g(RowID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TTAB("RPX",%mmmsqld(4),%mmmsqld(5)))
 e  g %0EBdun
 s %mmmsqld(13)=$$%getlock^User.CTReportData.T1(%mmmsqld(2)) i '%mmmsqld(13) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TTAB("RPX",%mmmsqld(4),%mmmsqld(5)))
 e  g %0ECdun
 k %data
 f icol=0:1:5 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.CTReportData.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(13)=1 %ReleaseLock^User.CTReportData.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(13)=1 %ReleaseLock^User.CTReportData.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(13))=1 %ReleaseLock^User.CTReportData.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(5)=0 s %mmmsqld(6)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TTAB("RPX",%mmmsqld(3),%mmmsqld(4)))
 e  g %0GBdun
 s %mmmsqld(12)=$$%getlock^User.CTReportData.T1(%mmmsqld(1)) i '%mmmsqld(12) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",$d(^TTAB("RPX",%mmmsqld(3),%mmmsqld(4)))
 e  g %0GCdun
 d %delete^User.CTReportData.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(5))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(12)=1 %ReleaseLock^User.CTReportData.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(12)=1 %ReleaseLock^User.CTReportData.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(5)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(12))=1 %ReleaseLock^User.CTReportData.T1(%mmmsqld(1)) g %0Gc
%0Jo d %CTRPD0f q:SQLCODE'=0
 s PLIST(0)=%CTRPD0d(1),PLIST(1)=%CTRPD0d(2),PLIST(2)=%CTRPD0d(3),PLIST(3)=%CTRPD0d(4),PLIST(4)=%CTRPD0d(5),PLIST(5)=%CTRPD0d(6)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(11)=0,%mmmsqld(12)=""
 s %mmmsqld(8)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(8)
 s %mmmsqld(10)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(10)'="",PLIST(2)'="",$d(^TTAB("RPX",%mmmsqld(10),PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(18)=$g(^TTAB("RPX",%mmmsqld(10),PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(18),"\",1) s PLIST(4)=$p(%mmmsqld(18),"\",2) s PLIST(5)=$p(%mmmsqld(18),"\",3)
 s PLIST(0)=$p(PLIST(1),"||")
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TTAB("RPX",$p(PLIST(1),"||",1),$p(PLIST(1),"||",2))#"S":$zu(115,4) i $t { s %mmmsqld(11)=1,%mmmsqld(12)=$name(^TTAB("RPX",$p(PLIST(1),"||",1),$p(PLIST(1),"||",2)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_ReportData for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(10)=$p(PLIST(1),"||"),PLIST(2)=$p(PLIST(1),"||",2)
 i %mmmsqld(10)'="",PLIST(2)'="",$d(^TTAB("RPX",%mmmsqld(10),PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(24)=$g(^TTAB("RPX",%mmmsqld(10),PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(24),"\",1) s PLIST(4)=$p(%mmmsqld(24),"\",2) s PLIST(5)=$p(%mmmsqld(24),"\",3)
 s PLIST(0)=$p(PLIST(1),"||")
%0LBuncommitted ;
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(11))=1 { l -@%mmmsqld(12) s %mmmsqld(11)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(11))=1 { l -@%mmmsqld(12) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
]]></Routine>
</Export>
