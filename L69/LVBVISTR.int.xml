<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBVISTR" type="INT" languagemode="0" generated="1"><![CDATA[
LVBVISTR ; IG 5/5/98 ; LVB Control data access for VISTR EP_VisitTestSetBBRequired
 ;
 ; supported calls:
 ;
 ; $$save^LVBVISTR(par,app,group,user)
 ; $$insert^LVBVISTR(par)
 ; $$update^LVBVISTR(ROWID,app,group)
 ; $$delall^LVBVISTR(par,app,group)
 ; $$delete^LVBVISTR(ROWID,app,group)
 ; $$select^LVBVISTR(ROWID)
 ; $$open^LVBVISTR(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBVISTR(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBVISTR(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBVISTR(par,p1,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBVISTR()
 ; $$getall^LVBVISTR(par)
 ;
  ;---&sql(DECLARE VISTR CURSOR FOR SELECT * FROM EP_VisitTestSetBBRequired
   ;---         WHERE VISTR_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
save(par,app,group,user) n (par,app,group,user,PLIST) s par=$g(par),app=$g(app),group=$g(group),user=$g(user)
 s l=$i(^TMPlog("log")) m ^TMPlog("log",l)=PLIST
 s ^TMPlog("log",l)=$h_" : "_$j_" : $$save^"_$zn_" : "_$g(par)_"^"_$g(app)_"^"_$g(group)_"^"_$g(user)
 k ^TMP($zn,$j) m ^TMP($zn,$j,"save")=PLIST
 s x="" f  s x=$o(^TMP($zn,$j,"save",x)) q:x=""  s xRowID=$p(^(x),$c(2),1) d
 .i $l(xRowID),'$$select(xRowID) s ^TMP($zn,$j,"old",xRowID)=^TMP($zn,$j,"save",x) q
 .s ^TMP($zn,$j,"new",x)=^TMP($zn,$j,"save",x)
 ; delete deleted records
 i $$open(par,,"Y",user)
 f  q:$$fetch(par,,"Y",user)  i '$d(^TMP($zn,$j,"old",$p(PLIST(1),$c(1)))),$$delete($p(PLIST(1),$c(1)),app,group)
 i $$close()
 ; update existing records
 s xRowID="" f  s xRowID=$o(^TMP($zn,$j,"old",xRowID)) q:xRowID=""  d
 .i '$$select(xRowID) d  i $$update(xRowID,app,group)
 ..s xx=^TMP($zn,$j,"old",xRowID)
 ..f j=1:1:$l(xx,$c(2)) s PLIST(j)=$p($p(xx,$c(2),j),$c(1))
 ; insert new records
 s xCounter="" f  s xCounter=$o(^TMP($zn,$j,"new",xCounter)) q:xCounter=""  d
 .s xx=^TMP($zn,$j,"new",xCounter)
 .f j=1:1:$l(xx,$c(2)) s PLIST(j)=$p($p(xx,$c(2),j),$c(1))
 .i $$insert(par)
 k ^TMP($zn,$j)
 q 0
 ;
open(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par)
  ;---&SQL(OPEN VISTR)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %VISTR0o
 q 0
 ;
fetch(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par) k PLIST
  ;---&SQL(FETCH VISTR INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Do
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ; Fetch all data
fetchbuffer(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,p1,p2,p3,p4,p5,p6,p7,p8,p9) N (par,PLIST) s par=$g(par) K ^TMP($zn,$j)
 i $$open(par)
 f cnt=1:1 Q:$$fetch(par)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
close()  ;---&SQL(CLOSE VISTR)
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %VISTR0c
 q 0
 ;
select(RowID) S RowID=$G(RowID) k PLIST
  ;---&sql( SELECT * INTO :PLIST() FROM EP_VisitTestSetBBRequired WHERE VISTR_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Fo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE d adjust
 q SQLCODE
 ;
insert(par) d pre("N") s PLIST(0)=$g(par) K PLIST(1)
  ;---&sql(INSERT INTO EP_VisitTestSetBBRequired VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Ho
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$G(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
update(RowID,app,group) d pre("Y") s RowID=$g(RowID),app=$g(app),group=$g(group)
 s ^TMP("FUNCTION",$j)=app_$c(1)_group
  ;---&sql(UPDATE EP_VisitTestSetBBRequired VALUES :PLIST() WHERE VISTR_RowID=:RowID)
   ;--- ** SQL PUBLIC Variables: PLIST, RowID, SQLCODE
 Do %0Jo
 k ^TMP("FUNCTION",$j)
 I 'SQLCODE q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$G(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
delall(par,app,group) s par=$g(par),app=$g(app),group=$g(group)
 s ^TMP("FUNCTION",$j)=app_$c(1)_group
  ;---&sql(DELETE FROM EP_VisitTestSetBBRequired WHERE VISTR_ParRef = :par)
   ;--- ** SQL PUBLIC Variables: SQLCODE, par
 Do %0Lo
 k ^TMP("FUNCTION",$j)
 q SQLCODE
delete(RowID,app,group) s RowID=$g(RowID),app=$g(app),group=$g(group)
 s ^TMP("FUNCTION",$j)=app_$c(1)_group
  ;---&sql(DELETE FROM EP_VisitTestSetBBRequired WHERE VISTR_RowID = :RowID)
   ;--- ** SQL PUBLIC Variables: RowID, SQLCODE
 Do %0No
 k ^TMP("FUNCTION",$j)
 q SQLCODE
 ;
 ; adjust certain fields
pre(xUpdate) d PreSQL^SSUTIL4()
 q
adjust N plist,I,J,SQLCODE,X d PostSQL^SSUTIL4("")
 ;
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBBBBP(plist(2),"Y")
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 q
getall(par) N (par,PLIST) K ^TMP($ZN,$J) s par=$g(par)
 I $$open(par)
 F cnt=1:1 Q:$$fetch(par)  d
 .s str="" f j=1:1:PLIST s $p(str,$c(28),j)=PLIST(j)
 .s ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))_$c(2)_str
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
 ;
 q
%VISTR0o s $zt="%VISTR0E" s SQLCODE=$s($g(%VISTR0c):-101,1:0) q:SQLCODE'=0  s %VISTR0d(10)=0 s %VISTR0d(11)=0,%VISTR0d(12)=""
 s %VISTR0d(5)=$g(par)
 s %VISTR0c=1 q
%VISTR0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %VISTR0c,%VISTR0d,%VISTR0E,%VISTR0l,%VISTR0n,%VISTR0R,%VISTR0Z q
%0Afirst 
 ; asl MOD# 2
 s %VISTR0d(1)=%VISTR0d(5)
 s %VISTR0d(7)=$p(%VISTR0d(1),"||"),%VISTR0d(8)=$p(%VISTR0d(1),"||",2),%VISTR0d(9)=$p(%VISTR0d(1),"||",3)
 i %VISTR0d(7)="" g %0ABdun
 i %VISTR0d(8)="" g %0ABdun
 i %VISTR0d(9)="" g %0ABdun
 s %VISTR0d(3)=""
%0ABk1 s %VISTR0d(3)=$o(^TEPI(%VISTR0d(7),1,%VISTR0d(8),%VISTR0d(9),"BBR",%VISTR0d(3)))
 i %VISTR0d(3)="" g %0ABdun
 s %VISTR0d(22)=$g(^TEPI(%VISTR0d(7),1,%VISTR0d(8),%VISTR0d(9),"BBR",%VISTR0d(3)))
 s %VISTR0d(4)=$p(%VISTR0d(22),"\",1)
 s %VISTR0d(2)=(%VISTR0d(7))_"||"_(%VISTR0d(8))_"||"_(%VISTR0d(9))_"||"_(%VISTR0d(3))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TEPI($p(%VISTR0d(2),"||",1),1,$p(%VISTR0d(2),"||",2),$p(%VISTR0d(2),"||",3),"BBR",$p(%VISTR0d(2),"||",4))#"S":$zu(115,4) i $t { s %VISTR0d(11)=1,%VISTR0d(12)=$name(^TEPI($p(%VISTR0d(2),"||",1),1,$p(%VISTR0d(2),"||",2),$p(%VISTR0d(2),"||",3),"BBR",$p(%VISTR0d(2),"||",4)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.EP_VisitTestSetBBRequired for RowID value: "_%VISTR0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %VISTR0d(7)=$p(%VISTR0d(2),"||"),%VISTR0d(8)=$p(%VISTR0d(2),"||",2),%VISTR0d(9)=$p(%VISTR0d(2),"||",3),%VISTR0d(3)=$p(%VISTR0d(2),"||",4)
 i %VISTR0d(7)'="",%VISTR0d(8)'="",%VISTR0d(9)'="",%VISTR0d(3)'="",$d(^TEPI(%VISTR0d(7),1,%VISTR0d(8),%VISTR0d(9),"BBR",%VISTR0d(3)))
 e  g %0ACdun
 s %VISTR0d(32)=$g(^TEPI(%VISTR0d(7),1,%VISTR0d(8),%VISTR0d(9),"BBR",%VISTR0d(3)))
 s %VISTR0d(4)=$p(%VISTR0d(32),"\",1)
 s %VISTR0d(1)=$p(%VISTR0d(2),"||",1,3)
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %VISTR0d(10)=%VISTR0d(10)+1,%ROWCOUNT=%VISTR0d(10),%ROWID=%VISTR0d(2),%VISTR0c=10 q
%VISTR0f i '$g(%VISTR0c) { s SQLCODE=-102 q  } i %VISTR0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%VISTR0d(10))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%VISTR0d(10),%VISTR0c=100 q  } g %0Afirst:%VISTR0c=1
%0ACdun i $zu(115,2)=1,$g(%VISTR0d(11))=1 { l -@%VISTR0d(12) s %VISTR0d(11)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%VISTR0d(10),SQLCODE=100,%VISTR0c=100 q
%VISTR0c i '$g(%VISTR0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%VISTR0d(10)),1:0)
 i $zu(115,2)=1,$g(%VISTR0d(11))=1 { l -@%VISTR0d(12) } k %VISTR0c,%VISTR0d,%VISTR0E,%VISTR0l,%VISTR0n,%VISTR0R,%VISTR0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %VISTR0c=100 q
%0Do d %VISTR0f q:SQLCODE'=0
 s PLIST(0)=%VISTR0d(1),PLIST(1)=%VISTR0d(2),PLIST(2)=%VISTR0d(3),PLIST(3)=%VISTR0d(4)
 q
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Ferr" s %mmmsqld(11)=0,%mmmsqld(12)=""
 s %mmmsqld(6)=$g(RowID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(6)
 s %mmmsqld(8)=$p(PLIST(1),"||"),%mmmsqld(9)=$p(PLIST(1),"||",2),%mmmsqld(10)=$p(PLIST(1),"||",3),PLIST(2)=$p(PLIST(1),"||",4)
 i %mmmsqld(8)'="",%mmmsqld(9)'="",%mmmsqld(10)'="",PLIST(2)'="",$d(^TEPI(%mmmsqld(8),1,%mmmsqld(9),%mmmsqld(10),"BBR",PLIST(2)))
 e  g %0FBdun
 s %mmmsqld(22)=$g(^TEPI(%mmmsqld(8),1,%mmmsqld(9),%mmmsqld(10),"BBR",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(22),"\",1)
 s PLIST(0)=$p(PLIST(1),"||",1,3)
 g:$zu(115,2)=0 %0FBuncommitted i $zu(115,2)=1 l +^TEPI($p(PLIST(1),"||",1),1,$p(PLIST(1),"||",2),$p(PLIST(1),"||",3),"BBR",$p(PLIST(1),"||",4))#"S":$zu(115,4) i $t { s %mmmsqld(11)=1,%mmmsqld(12)=$name(^TEPI($p(PLIST(1),"||",1),1,$p(PLIST(1),"||",2),$p(PLIST(1),"||",3),"BBR",$p(PLIST(1),"||",4)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.EP_VisitTestSetBBRequired for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(8)=$p(PLIST(1),"||"),%mmmsqld(9)=$p(PLIST(1),"||",2),%mmmsqld(10)=$p(PLIST(1),"||",3),PLIST(2)=$p(PLIST(1),"||",4)
 i %mmmsqld(8)'="",%mmmsqld(9)'="",%mmmsqld(10)'="",PLIST(2)'="",$d(^TEPI(%mmmsqld(8),1,%mmmsqld(9),%mmmsqld(10),"BBR",PLIST(2)))
 e  g %0FCdun
 s %mmmsqld(32)=$g(^TEPI(%mmmsqld(8),1,%mmmsqld(9),%mmmsqld(10),"BBR",PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(32),"\",1)
 s PLIST(0)=$p(PLIST(1),"||",1,3)
%0FBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FCdun i $zu(115,2)=1,$g(%mmmsqld(11))=1 { l -@%mmmsqld(12) s %mmmsqld(11)=0 }
%0FBdun 
%0FAdun 
%0Fc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(11))=1 { l -@%mmmsqld(12) } q
%0Ferr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Fc
%0Ho n %i,icol,ir
 f icol=0:1:3 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.EPVisitTestSetBBRequired.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Ho
%0Jo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Jerr" s %mmmsqld(8)=0 s %mmmsqld(9)=""
 s %mmmsqld(3)=$g(RowID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3),%mmmsqld(7)=$p(%mmmsqld(2),"||",4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",$d(^TEPI(%mmmsqld(4),1,%mmmsqld(5),%mmmsqld(6),"BBR",%mmmsqld(7)))
 e  g %0JBdun
 s %mmmsqld(19)=$$%getlock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(2)) i '%mmmsqld(19) s SQLCODE=-110 g %0Jc
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3),%mmmsqld(7)=$p(%mmmsqld(2),"||",4)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",$d(^TEPI(%mmmsqld(4),1,%mmmsqld(5),%mmmsqld(6),"BBR",%mmmsqld(7)))
 e  g %0JCdun
 k %data
 f icol=0:1:3 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.EPVisitTestSetBBRequired.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(8))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(19)=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(2)) g %0Jc
%0JCdun 
 d:%mmmsqld(19)=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(2)) g:SQLCODE<0 %0Jc
%0JBdun 
%0JAdun 
%0Jc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(8)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Jerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(19))=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(2)) g %0Jc
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(8)=0 s %mmmsqld(9)=""
 s %mmmsqld(2)=$g(par)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(5)=$p(%mmmsqld(1),"||"),%mmmsqld(6)=$p(%mmmsqld(1),"||",2),%mmmsqld(7)=$p(%mmmsqld(1),"||",3)
 i %mmmsqld(5)="" g %0LBdun
 i %mmmsqld(6)="" g %0LBdun
 i %mmmsqld(7)="" g %0LBdun
 s %mmmsqld(4)=""
%0LBk1 s %mmmsqld(4)=$o(^TEPI(%mmmsqld(5),1,%mmmsqld(6),%mmmsqld(7),"BBR",%mmmsqld(4)))
 i %mmmsqld(4)="" g %0LBdun
 s %mmmsqld(3)=(%mmmsqld(5))_"||"_(%mmmsqld(6))_"||"_(%mmmsqld(7))_"||"_(%mmmsqld(4))
 s %mmmsqld(19)=$$%getlock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(3)) i '%mmmsqld(19) s SQLCODE=-110 g %0Lc
 ; asl MOD# 3
 s %mmmsqld(5)=$p(%mmmsqld(3),"||"),%mmmsqld(6)=$p(%mmmsqld(3),"||",2),%mmmsqld(7)=$p(%mmmsqld(3),"||",3),%mmmsqld(4)=$p(%mmmsqld(3),"||",4)
 i %mmmsqld(5)'="",%mmmsqld(6)'="",%mmmsqld(7)'="",%mmmsqld(4)'="",$d(^TEPI(%mmmsqld(5),1,%mmmsqld(6),%mmmsqld(7),"BBR",%mmmsqld(4)))
 e  g %0LCdun
 s %mmmsqld(1)=$p(%mmmsqld(3),"||",1,3)
 d %delete^User.EPVisitTestSetBBRequired.T1(%mmmsqld(3),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(8))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(19)=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(3)) g %0Lc
%0LCdun 
 d:%mmmsqld(19)=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(3)) g:SQLCODE<0 %0Lc
 g %0LBk1
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(8)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(19))=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(3)) g %0Lc
%0No n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Nerr" s %mmmsqld(7)=0 s %mmmsqld(8)=""
 s %mmmsqld(2)=$g(RowID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3),%mmmsqld(6)=$p(%mmmsqld(1),"||",4)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^TEPI(%mmmsqld(3),1,%mmmsqld(4),%mmmsqld(5),"BBR",%mmmsqld(6)))
 e  g %0NBdun
 s %mmmsqld(18)=$$%getlock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(1)) i '%mmmsqld(18) s SQLCODE=-110 g %0Nc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3),%mmmsqld(6)=$p(%mmmsqld(1),"||",4)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^TEPI(%mmmsqld(3),1,%mmmsqld(4),%mmmsqld(5),"BBR",%mmmsqld(6)))
 e  g %0NCdun
 d %delete^User.EPVisitTestSetBBRequired.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(7))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(18)=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(1)) g %0Nc
%0NCdun 
 d:%mmmsqld(18)=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(1)) g:SQLCODE<0 %0Nc
%0NBdun 
%0NAdun 
%0Nc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(7)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Nerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(18))=1 %ReleaseLock^User.EPVisitTestSetBBRequired.T1(%mmmsqld(1)) g %0Nc
]]></Routine>
</Export>
