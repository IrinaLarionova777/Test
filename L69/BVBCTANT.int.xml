<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="BVBCTANT" type="INT" languagemode="0"><![CDATA[
BVBCTANT ; IG 11/5/98 ; MVB Control code access for CT_AntibodyRegister  ; Compiled May 22, 2000 13:23:14 for Cache for Windows
 ;
 ; supported calls:
 ;
 ; $$select^BVBCTANT(ROWID)
 ; $$open^BVBCTANT(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^BVBCTANT(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^BVBCTANT(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^BVBCTANT(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^BVBCTANT()
 ; $$insert^BVBCTANT()
 ; $$update^BVBCTANT(ROWID)
 ; $$delete^BVBCTANT(ROWID,Comments)
 ; $$getall^BVBCTANT()
 ; $$selcode^BVBCTANT(testset,testitem)
 ;
 ;
 ; Insert the data
insert() D pre K PLIST(1)
 d %0Bo
 I 'SQLCODE Q $$select(%ROWID)
 Q SQLCODE
 ;
 ; Update the data
update(ROWID) D pre S ROWID=$G(ROWID) k PLIST(1)
 d %0Co
 s PLIST=$o(PLIST(""),-1)
 I 'SQLCODE q $$select(ROWID)
 Q SQLCODE
 ;
 ; Delete the data
delete(ROWID,Comments) s ROWID=$g(ROWID),^TMP("Comments",$j)=$g(Comments)
 d %0Do
 k ^TMP("Comments",$j)
 Q SQLCODE
 ;
 ; Open the cursor
open(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9) s testset=$g(testset),testitem=$g(testitem)
 d %CTANT0o
 Q 0
 ;
 ; Fetch the data
fetch(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9) s testset=$g(testset),testitem=$g(testitem) K PLIST
 d %0Fo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9) s testset=$g(testset),testitem=$g(testitem) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100)
 f xxx=1:1:max s SQLCODE=$$fetch(testset,testitem) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(testset,testitem,p2,p3,p4,p5,p6,p7,p8,p9) N (testset,testitem,PLIST) s testset=$g(testset),testitem=$g(testitem) K ^TMP($zn,$j)
 i $$open(testset,testitem)
 f cnt=1:1 Q:$$fetch(testset,testitem)  s ^TMP($zn,$j,cnt)="" f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 i $$close()
 k PLIST M PLIST=^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 k ^TMP($zn,$j)
 q 0
 ;
 ; Close the cursor 
close() d %CTANT0c 
 q 0
 ;
 ; select data by code
select(ROWID) K PLIST S ROWID=$G(ROWID)
 d %0Ho
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
selcode(testset,testitem) s testset=$g(testset),testitem=$g(testitem) K PLIST
 d %0Io
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ;
 ; Pre-filing adjustments
pre ;
 q
 ;
 ; Post-filing adjustments
adjust N plist,I,J,SQLCODE,X F J=1:1:PLIST I $D(PLIST(J)) S PLIST(J)=$P(PLIST(J),$C(1),1)
 ;
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTTS(plist(2))
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 I $G(PLIST(3))'="" D
 .K plist M plist=PLIST K PLIST
 .S SQLCODE=$$select^LVBCTTC(plist(3))
 .S X="" I 'SQLCODE S X=PLIST(2)_$C(1)_PLIST(3)
 .K PLIST M PLIST=plist S PLIST(3)=X K plist
 ;
 Q
getall() N (PLIST) K ^TMP($ZN,$J)
 I $$open()
 F cnt=1:1 Q:$$fetch()  S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(3),$c(1))_$c(2)_$P(PLIST(2),$c(1))
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
 ;
 q
%0ABs1 s %val=$s(%val'=+%val:"",1:$fn(%val,"")) q
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
%CTANT0o s SQLCODE=$s($g(%CTANT0c):-101,1:0) q:SQLCODE'=0
 s %CTANT0c=1 k %CTANT0m
 s %CTANT0E=$zt,%CTANT0f=0,%CTANT0e=0,%CTANT0L=""
 s %CTANT0d(2)=$P(testset,$C(1)),%CTANT0d(5)=$P(testitem,$C(1))
 q
%0Afirst   ;  init
 s %CTANT0d(3)=$$ALPHAUP(%CTANT0d(2))
 s %CTANT0d(6)=$$ALPHAUP(%CTANT0d(5))
 ; asl MOD# 2
 s %CTANT0d(1)=%CTANT0d(3)
 i %CTANT0d(1)'="",$d(^CT("ANTIB",0,"TS-TC",%CTANT0d(1))) g %0ABg1
%0ABk1 s %CTANT0d(1)=$o(^CT("ANTIB",0,"TS-TC",%CTANT0d(1)))
 i %CTANT0d(1)="" g %0ABdun
%0ABg1 i (%CTANT0d(3)?1n.n),":"']%CTANT0d(1) g %0ABdun
 i '(%CTANT0d(3)=$e(%CTANT0d(1),1,$l(%CTANT0d(3)))) g:(%CTANT0d(3)?1n.n) %0ABk1 g %0ABdun
 s %CTANT0d(4)=%CTANT0d(6)
 i %CTANT0d(4)'="",$d(^CT("ANTIB",0,"TS-TC",%CTANT0d(1),%CTANT0d(4))) g %0ABg2
%0ABk2 s %CTANT0d(4)=$o(^CT("ANTIB",0,"TS-TC",%CTANT0d(1),%CTANT0d(4)))
 i %CTANT0d(4)="" g %0ABk1
%0ABg2 i (%CTANT0d(6)?1n.n),":"']%CTANT0d(4) g %0ABk1
 i '(%CTANT0d(6)=$e(%CTANT0d(4),1,$l(%CTANT0d(6)))) g:(%CTANT0d(6)?1n.n) %0ABk2 g %0ABk1
 s $P(%CTANT0d(8),$C(1))=""
%0ABk3 s $P(%CTANT0d(8),$C(1))=$o(^CT("ANTIB",0,"TS-TC",%CTANT0d(1),%CTANT0d(4),$P(%CTANT0d(8),$C(1))))
 i $P(%CTANT0d(8),$C(1))="" g %0ABk2
 i $P(%CTANT0d(8),$C(1))'=+$P(%CTANT0d(8),$C(1)) g %0ABk2
 s %val=$P(%CTANT0d(8),$C(1)) d %0ABs1:%val'="" s $P(%CTANT0d(8),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %CTANT0f=%CTANT0f+1 s %CTANT0c=10 q
%CTANT0f i '$g(%CTANT0c) s SQLCODE=-102 q
 i %CTANT0c=100 s SQLCODE=100 q
 s $zt="%0Aerr^"_$zn s $ze="" n %val g %0Afirst:%CTANT0c=1
 g %0ABk3
%0ABdun 
%0AAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %CTANT0c=100 q
%CTANT0c i '$g(%CTANT0c) s SQLCODE=-102 q
 k %CTANT0c,%CTANT0d,%CTANT0e,%CTANT0E,%CTANT0f,%CTANT0l,%CTANT0L,%CTANT0n,%CTANT0r,%CTANT0R s SQLCODE=0 q
%0Aerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%CTANT0E),SQLCODE=-20603,%msg=$ze s $ze="" g %0AAdun
%0Bo n %insert,icol,ir
 f icol=0:1:3 i $D(PLIST(icol)) s %insert(icol)=PLIST(icol) i $D(PLIST(icol,1)) f ir=1:1:PLIST(icol) s %insert(icol,ir)=PLIST(icol,ir)
 d insert^mt2521("1")
 q
%0CAr1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num
 q  
%0Co n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Cerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(ROWID,$C(1))
 i %mmmsqld(3)="",$L(ROWID)>1 s %val=$E(ROWID,2,999) d %0CAr1 s %mmmsqld(3)=%val
 n %data,%edit,icol,ir
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s $P(%mmmsqld(2),$C(1))=$g(%mmmsqld(3))
 i $P(%mmmsqld(2),$C(1))'="",$d(^CT("ANTIB",$P(%mmmsqld(2),$C(1))))
 i '$t
 e  i 1>$P(%mmmsqld(2),$C(1)),$P(%mmmsqld(2),$C(1))=+$P(%mmmsqld(2),$C(1))
 i  g %0CBdun
 s %val=$P(%mmmsqld(2),$C(1)) d %0ABs1:%val'="" s $P(%mmmsqld(2),$C(1),2)=%val
 k %data,%edit
 f icol=0:1:3 i $D(PLIST(icol)) s %data(icol)=PLIST(icol) i $D(PLIST(icol,1)) f ir=1:1:PLIST(icol) s %data(icol,ir)=PLIST(icol,ir)
 d update^mt2521(%mmmsqld(2),"1",1)
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
%0CBdun 
%0CAdun 
 q
%0Cerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0CAdun
%0Do n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Derr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(ROWID,$C(1))
 i %mmmsqld(2)="",$L(ROWID)>1 s %val=$E(ROWID,2,999) d %0CAr1 s %mmmsqld(2)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(1)'="",$d(^CT("ANTIB",%mmmsqld(1)))
 i '$t
 e  i 1>%mmmsqld(1),%mmmsqld(1)=+%mmmsqld(1)
 i  g %0DBdun
 d delete^mt2521(%mmmsqld(1),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
%0DBdun 
%0DAdun 
 q
%0Derr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
%0Fo d %CTANT0f q:SQLCODE'=0
 s PLIST(1)=%CTANT0d(8),PLIST(2)=%CTANT0d(1),PLIST(3)=%CTANT0d(4)
 q
%0Ho n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Herr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(ROWID,$C(1))
 i %mmmsqld(3)="",$L(ROWID)>1 s %val=$E(ROWID,2,999) d %0CAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s $P(PLIST(1),$C(1))=$g(%mmmsqld(3))
 i $P(PLIST(1),$C(1))'="",$d(^CT("ANTIB",$P(PLIST(1),$C(1))))
 i '$t
 e  i 1>$P(PLIST(1),$C(1)),$P(PLIST(1),$C(1))=+$P(PLIST(1),$C(1))
 i  g %0HBdun
 s %mmmsqln=$g(^CT("ANTIB",$P(PLIST(1),$C(1))))
 s PLIST(2)=$p(%mmmsqln,"^",1) s PLIST(3)=$p(%mmmsqln,"^",2)
 s %val=$P(PLIST(1),$C(1)) d %0ABs1:%val'="" s $P(PLIST(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Hc
%0HBdun 
%0HAdun 
%0Hc q
%0Herr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0HAdun
%0Io n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ierr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(testset,$C(1)),%mmmsqld(5)=$P(testitem,$C(1))
 s:%mmmsqld(3)="" %mmmsqld(3)=$E(testset,2,999)
 s:%mmmsqld(5)="" %mmmsqld(5)=$E(testitem,2,999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s PLIST(2)=$g(%mmmsqld(3))
 s PLIST(3)=$g(%mmmsqld(5))
 i PLIST(2)="" g %0IBdun
 i PLIST(3)="" g %0IBdun
 s $P(PLIST(1),$C(1))=""
%0IBk1 s $P(PLIST(1),$C(1))=$o(^CT("ANTIB",0,"TS-TC",PLIST(2),PLIST(3),$P(PLIST(1),$C(1))))
 i $P(PLIST(1),$C(1))="" g %0IBdun
 i $P(PLIST(1),$C(1))'=+$P(PLIST(1),$C(1)) g %0IBdun
 s %val=$P(PLIST(1),$C(1)) d %0ABs1:%val'="" s $P(PLIST(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ic
 g %0IBk1
%0IBdun 
%0IAdun 
%0Ic q
%0Ierr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0IAdun
]]></Routine>
</Export>
