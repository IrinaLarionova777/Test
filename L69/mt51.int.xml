<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="mt51" type="INT" languagemode="0"><![CDATA[
mt51  ; Compiled June 26, 2008 14:32:45 for Cache for Windows
delete(%rowid,%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%data(1)=%rowid,tupkill=1
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt51(.%edit) i SQLCODE s SQLCODE=-106 g gunlock
 i +%check d valid33 i '%ok d vdiag("DELETE",-107_$c(1)_"tbl"_$c(1)_"val"_$c(1)_"SS_Group"_$C(1,1)) s SQLCODE=-107 g gunlock
 d trig0C^mt51
 d file
 g gunlock
insert(%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%edit=1
 d insertnw^mt51(+%check=1) i '%ok s SQLCODE=-104 q
winsert s %ROWID=%data(1)
 d:%check'["nolock" glock q:SQLCODE
 d:%check uniqfile(-104) i '%ok s SQLCODE=-104 g gunlock
 i +%check d required^mt51 i '%ok s SQLCODE=-108 g gunlock
 i +%check d valid35 i '%ok d vdiag("INSERT",-107_$c(1)_"tbl"_$c(1)_"val"_$c(1)_"SS_Group"_$C(1,1)) s SQLCODE=-107 g gunlock
 d file
 d trig0A^mt51
 g gunlock
update(%rowid,%check,%copyedi) n icol,ir,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1
 i '%copyedi f icol=0:1:5 k:'$d(%edit(icol)) %data(icol)
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt51(.%edit) i SQLCODE s SQLCODE=-109 g gunlock
 f icol=0:1:5 i '$d(%data(icol)),$d(%edit(icol)) s %data(icol)=%edit(icol) d:$d(%edit(icol,1))  k %edit(icol)
 . f ir=1:1:%edit(icol) s %data(icol,ir)=%edit(icol,ir)
 d uniqfile(-105) i '%ok s SQLCODE=-105 g gunlock
 d updatenw^mt51(%check) i '%ok s SQLCODE=-105 g gunlock
 i +%check d required^mt51 i '%ok s SQLCODE=-108 g gunlock
 i +%check d valid36 i '%ok d vdiag("UPDATE",-107_$c(1)_"tbl"_$c(1)_"val"_$c(1)_"SS_Group"_$C(1,1)) s SQLCODE=-107 g gunlock
 d file
 d trig0B^mt51
 g gunlock
vdiag(oper,info) i $g(%mdiag)'<10 s $p(%mdiag,$c(1),2)="YES" q
 s %mdiag=$g(%mdiag)+1_$c(1)_"NO"_$c(1)_oper,%mdiag(+%mdiag)=info_$c(1)_$g(%msg) q
lock(%ROWID)   ;  user entry
glock q:$c(1)[%ROWID
 l +^SSU("SSGRP",$p(%ROWID,$c(1))):5 e  s SQLCODE=-110
 q
unlock(%ROWID)   ;  user entry
gunlock q:%check["nolock"
 q:$c(1)[%ROWID
 l -^SSU("SSGRP",$p(%ROWID,$c(1)))
 q
file n subs,tempn,irep,x,node,sn s %file=1,sn=0
 i $g(tupkill) k ^SSU("SSGRP",$p(%edit(1),$c(1),1))
 g:$g(tupkill) maps
 s:$g(%edit) tempn=""
 i $d(%edit(3)) s:'($d(tempn)#2) tempn=$g(^SSU("SSGRP",$p(%data(1),$c(1),1))) s $p(tempn,"^",1)=$g(%data(3))
 i $d(%edit(4)) s:'($d(tempn)#2) tempn=$g(^SSU("SSGRP",$p(%data(1),$c(1),1))) s $p(tempn,"^",2)=$p($g(%data(4)),$c(1))
 i $d(%edit(5)) s:'($d(tempn)#2) tempn=$g(^SSU("SSGRP",$p(%data(1),$c(1),1))) s $p(tempn,"^",3)=$g(%data(5))
 s:$d(tempn)#2 ^SSU("SSGRP",$p(%data(1),$c(1),1))=tempn
maps q
trig0A n %ROWID,%didit,SQLCODE s %didit="" k %skip
 d trigA0A i $d(%skip) g trgdoneA
trgdoneA q  ;  trigger done
trigA0A s %didit=1
 i $$insert^SSAUDIT(5)
 q
trig0B n %ROWID,%didit,SQLCODE s %didit="" k %skip
 d trigA0B i $d(%skip) g trgdoneB
trgdoneB q  ;  trigger done
trigA0B s %didit=1
 i $$update^SSAUDIT(5)
 q
%0Do n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val  ;  Code for SQL: 
 s %mmmsqlE=$zt,$zt="%0Derr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(%data(1),$C(1))
 s:%mmmsqld(2)="" %mmmsqld(2)=$e(%data(1),2,99999)
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(4)=""
%0DBk1 s %mmmsqld(4)=$o(^SSU("SSGRP",%mmmsqld(4)))
 i %mmmsqld(4)="" g %0DBdun
 s %mmmsqld(5)=""
%0DBk2 s %mmmsqld(5)=$o(^SSU("SSGRP",%mmmsqld(4),"VBEX",%mmmsqld(5)))
 i %mmmsqld(5)="" g %0DBk1
 i 1>%mmmsqld(5),%mmmsqld(5)=+%mmmsqld(5) g %0DBk2
 s %mmmsqld(3)=(%mmmsqld(4))_"||"_(%mmmsqld(5))
 s %mmmsqld(1)=$p(%mmmsqld(3),"||",1,1)
 g:'((%mmmsqld(1))=(%mmmsqld(2))) %0DBk2
 d delete^mt91(%mmmsqld(3),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
 g %0DBk2
%0DBdun 
%0DAdun 
 q
%0Derr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
%0EAr1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num  ;  Code for SQL: 
 q  
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Eerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(%data(1),$C(1))
 i %mmmsqld(2)="",$L(%data(1))>1 s %val=$E(%data(1),2,999) d %0EAr1 s %mmmsqld(2)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(1)="" g %0EBdun
 s %mmmsqld(4)=""
%0EBk1 s %mmmsqld(4)=$o(^SSU("SSGRP",%mmmsqld(1),"Query-In",%mmmsqld(4)))
 i %mmmsqld(4)="" g %0EBdun
 s %mmmsqld(3)=(%mmmsqld(1))_"||"_(%mmmsqld(4))
 d delete^mt6231(%mmmsqld(3),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
 g %0EBk1
%0EBdun 
%0EAdun 
 q
%0Eerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0EAdun
%0Fo n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Ferr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(%data(1),$C(1))
 i %mmmsqld(2)="",$L(%data(1))>1 s %val=$E(%data(1),2,999) d %0EAr1 s %mmmsqld(2)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(1)="" g %0FBdun
 s %mmmsqld(4)=""
%0FBk1 s %mmmsqld(4)=$o(^SSU("SSGRP",%mmmsqld(1),"Query-Out",%mmmsqld(4)))
 i %mmmsqld(4)="" g %0FBdun
 i %mmmsqld(4)'=+%mmmsqld(4) g %0FBdun
 s %mmmsqld(3)=(%mmmsqld(1))_"||"_(%mmmsqld(4))
 d delete^mt6321(%mmmsqld(3),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
 g %0FBk1
%0FBdun 
%0FAdun 
 q
%0Ferr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0FAdun
%0Go n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Gerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(2)=$P(%data(1),$C(1))
 i %mmmsqld(2)="",$L(%data(1))>1 s %val=$E(%data(1),2,999) d %0EAr1 s %mmmsqld(2)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=$g(%mmmsqld(2))
 i %mmmsqld(1)="" g %0GBdun
 s %mmmsqld(4)=""
%0GBk1 s %mmmsqld(4)=$o(^SSU("SSGRP",%mmmsqld(1),"Query-Saved",%mmmsqld(4)))
 i %mmmsqld(4)="" g %0GBdun
 i %mmmsqld(4)'=+%mmmsqld(4) g %0GBdun
 s %mmmsqld(3)=(%mmmsqld(1))_"||"_(%mmmsqld(4))
 d delete^mt6351(%mmmsqld(3),"1")
 q:SQLCODE<0
 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1
 g %0GBk1
%0GBdun 
%0GAdun 
 q
%0Gerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0GAdun
trig0C n %ROWID,%didit,SQLCODE s %didit="" k %skip
 d trigA0C i $d(%skip) g trgdoneC
  d %0Do^mt51  s %didit=1
  d %0Eo^mt51  s %didit=1
  d %0Fo^mt51  s %didit=1
  d %0Go^mt51  s %didit=1
trgdoneC q  ;  trigger done
trigA0C s %didit=1
 i $$delete^SSAUDIT(5)
 q
%0HBs1 s %val=$s("Yy"[$e(%val):"Yes","Nn"[$e(%val):"No",1:"") q
%0HBs2 i %val'=+%val s %val=""
 e  s %val=$fn(%val,"")
 q
%0Ho n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Herr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%rowid,$C(1))
 i %mmmsqld(3)="",$L(%rowid)>1 s %val=$E(%rowid,2,999) d %0EAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s $P(%dataold(1),$C(1))=%mmmsqld(3)
 i $P(%dataold(1),$C(1))'="",$d(^SSU("SSGRP",$P(%dataold(1),$C(1))))
 e  g %0HBdun
 s %mmmsqln=$g(^SSU("SSGRP",$P(%dataold(1),$C(1))))
 s %dataold(3)=$p(%mmmsqln,"^",1) s %dataold(4)=$p(%mmmsqln,"^",2) s %dataold(5)=$p(%mmmsqln,"^",3)
 
 s %val=$P(%dataold(4),$C(1)) d %0HBs1:%val'="" s $P(%dataold(4),$C(1),2)=%val
 s %val=$P(%dataold(1),$C(1)) d %0HBs2:%val'="" s $P(%dataold(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Hc
%0HBdun 
%0HAdun 
%0Hc q
%0Herr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0HAdun
getold(%dataold) g %0Ho
lookupI d %RSIcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupI
%RSIcuro s SQLCODE=$s($g(%RSIcurc):-101,1:0) q:SQLCODE'=0
 s %RSIcurc=1 k %RSIcurm
 s %RSIcurE=$zt,%RSIcurf=0,%RSIcure=0,%RSIcurL=""
 s %RSIcurd(6)=$P(%data(3),$C(1))
 l +^mtemp s %RSIcurt(1)=$zp(^mtemp(" "))+1,^(%RSIcurt(1))="" l -^mtemp
 s %RSIcurd(7)=$$ALPHAUP(%RSIcurd(6))
 q
%0Ifirst   ;  init
 k ^mtemp(%RSIcurt(1),0)
 ; asl MOD# 3
 d %0IBMod
 s %RSIcurs(5)=""
%0ICk1 s %RSIcurs(5)=$o(^mtemp(%RSIcurt(1),0,%RSIcurs(5)))
 i %RSIcurs(5)="" g %0ICdun
 s %RSIcurd(5)=$s(%RSIcurs(5)=" ":"",1:%RSIcurs(5))
 s %RSIcurs(1)=""
%0ICk2 s %RSIcurs(1)=$o(^mtemp(%RSIcurt(1),0,%RSIcurs(5),%RSIcurs(1)))
 i %RSIcurs(1)="" g %0ICk1
 s $P(%datars(1),$C(1))=$s(%RSIcurs(1)=-99999999999999999:"",1:%RSIcurs(1))
 s %datars(2)=$g(^mtemp(%RSIcurt(1),0,%RSIcurs(5),%RSIcurs(1)))
 
 s %val=$P(%datars(1),$C(1)) d %0HBs2:%val'="" s $P(%datars(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %RSIcurf=%RSIcurf+1 s %RSIcurc=10 q
%RSIcurf i '$g(%RSIcurc) s SQLCODE=-102 q
 i %RSIcurc=100 s SQLCODE=100 q
 s $zt="%0Ierr^"_$zn s $ze="" n %val g %0Ifirst:%RSIcurc=1
 g %0ICk2
%0ICdun 
%0IAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSIcurc=100 q
%RSIcurc i '$g(%RSIcurc) s SQLCODE=-102 q
 f %RSIcurt=1:1:1 k ^mtemp(%RSIcurt(%RSIcurt))
 k %RSIcurc,%RSIcurd,%RSIcure,%RSIcurE,%RSIcurf,%RSIcurl,%RSIcurL,%RSIcurn,%RSIcurr,%RSIcurR,%RSIcurs,%RSIcurt s SQLCODE=0 q
%0Ierr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSIcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0IAdun
%0IBMod ; asl MOD# 2
 n %RSIcurn  ; Nested NEWing for Subquery...
 s %RSIcurd(9)=""
%0IBk1 s %RSIcurd(9)=$o(^SSU("SSGRP",%RSIcurd(9)))
 i %RSIcurd(9)="" g %0IBdun
 s %RSIcurn=$g(^SSU("SSGRP",%RSIcurd(9)))
 s %datars(2)=$p(%RSIcurn,"^",1)
 s $P(%datars(1),$C(1))=(%RSIcurd(9))
 
 s %val=$P(%datars(1),$C(1)) d %0HBs2:%val'="" s $P(%datars(1),$C(1),2)=%val
 s %RSIcurd(5)=$$ALPHAUP(%datars(2))
 g:'((%RSIcurd(7))=$E((%RSIcurd(5)),1,$L((%RSIcurd(7))))) %0IBk1
 s %RSIcurs(5)=$s(%RSIcurd(5)'="":%RSIcurd(5),1:" "),%RSIcurs(1)=$s($P(%datars(1),$C(1))'="":$P(%datars(1),$C(1)),1:-99999999999999999),^mtemp(%RSIcurt(1),0,%RSIcurs(5),%RSIcurs(1))=%datars(2)
 g %0IBk1
%0IBdun 
 q
lookupJ d %RSJcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",30),1,30)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupJ
%RSJcuro s SQLCODE=$s($g(%RSJcurc):-101,1:0) q:SQLCODE'=0
 s %RSJcurc=1 k %RSJcurm
 s %RSJcurE=$zt,%RSJcurf=0,%RSJcure=0,%RSJcurL=""
 l +^mtemp s %RSJcurt(1)=$zp(^mtemp(" "))+1,^(%RSJcurt(1))="" l -^mtemp
 q
%0Jfirst   ;  init
 k ^mtemp(%RSJcurt(1),0)
 ; asl MOD# 3
 d %0JBMod
 s %RSJcurs(6)=""
%0JCk1 s %RSJcurs(6)=$o(^mtemp(%RSJcurt(1),0,%RSJcurs(6)))
 i %RSJcurs(6)="" g %0JCdun
 s %RSJcurd(6)=$s(%RSJcurs(6)=" ":"",1:%RSJcurs(6))
 s %RSJcurs(1)=""
%0JCk2 s %RSJcurs(1)=$o(^mtemp(%RSJcurt(1),0,%RSJcurs(6),%RSJcurs(1)))
 i %RSJcurs(1)="" g %0JCk1
 s $P(%datars(1),$C(1))=$s(%RSJcurs(1)=-99999999999999999:"",1:%RSJcurs(1))
 s %datars(2)=$g(^mtemp(%RSJcurt(1),0,%RSJcurs(6),%RSJcurs(1)))
 
 s %val=$P(%datars(1),$C(1)) d %0HBs2:%val'="" s $P(%datars(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %RSJcurf=%RSJcurf+1 s %RSJcurc=10 q
%RSJcurf i '$g(%RSJcurc) s SQLCODE=-102 q
 i %RSJcurc=100 s SQLCODE=100 q
 s $zt="%0Jerr^"_$zn s $ze="" n %val g %0Jfirst:%RSJcurc=1
 g %0JCk2
%0JCdun 
%0JAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSJcurc=100 q
%RSJcurc i '$g(%RSJcurc) s SQLCODE=-102 q
 f %RSJcurt=1:1:1 k ^mtemp(%RSJcurt(%RSJcurt))
 k %RSJcurc,%RSJcurd,%RSJcure,%RSJcurE,%RSJcurf,%RSJcurl,%RSJcurL,%RSJcurn,%RSJcurr,%RSJcurR,%RSJcurs,%RSJcurt s SQLCODE=0 q
%0Jerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSJcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0JAdun
%0JBMod ; asl MOD# 2
 n %RSJcurn  ; Nested NEWing for Subquery...
 s %RSJcurd(7)=""
%0JBk1 s %RSJcurd(7)=$o(^SSU("SSGRP",%RSJcurd(7)))
 i %RSJcurd(7)="" g %0JBdun
 s %RSJcurn=$g(^SSU("SSGRP",%RSJcurd(7)))
 s %datars(2)=$p(%RSJcurn,"^",1)
 s $P(%datars(1),$C(1))=(%RSJcurd(7))
 
 s %val=$P(%datars(1),$C(1)) d %0HBs2:%val'="" s $P(%datars(1),$C(1),2)=%val
 s %RSJcurd(6)=$$ALPHAUP(%datars(2))
 s %RSJcurs(6)=$s(%RSJcurd(6)'="":%RSJcurd(6),1:" "),%RSJcurs(1)=$s($P(%datars(1),$C(1))'="":$P(%datars(1),$C(1)),1:-99999999999999999),^mtemp(%RSJcurt(1),0,%RSJcurs(6),%RSJcurs(1))=%datars(2)
 g %0JBk1
%0JBdun 
 q
selitmJ  ; entry point to select the Row Selection Item
 i $c(1)'[$g(%data(3)) s item=1 q
 s item=0 f  s item=$o(%data(item)) q:item=""  i $c(1)'[%data(item) s item=1 q
 s item=$s(item=1:"",1:2) q
 s item="" q
%mdiag(oper,sqlcode,class,subclass,field,cursor,%msg) ; diagnostics for sql operations
 i '$d(%mdiag) s $p(%mdiag,$c(1),2,3)="NO"_$c(1)_oper
 i ($p(%mdiag,$c(1))+1)>10 s $p(%mdiag,$c(1),2)="YES" q
 s $p(%mdiag,$c(1))=$p(%mdiag,$c(1))+1,%mdiag($p(%mdiag,$c(1)))=$g(sqlcode)_$c(1)_$g(class)_$c(1)_$g(subclass)_$c(1)_"SS_Group"_$c(1)_$g(field)_$c(1)_$g(cursor)_$c(1)_$g(%msg) q
 ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
required ; Entry point to check the required fields
 n %lang,%oper k %mdiag s %msg="",%ok=1,%oper=$s($g(%edit):"INSERT",1:"UPDATE"),%lang=$p($g(%msql),$c(1),5) s:'%lang %lang=1
 i $c(1,1)[$g(%data(3)) s %ok="Group Description" d %mdiag(%oper,-106,"Fld Int","Req","SSGRP_Desc","",%ok) s %msg=%ok,%ok=0
 i $c(1,1)[$g(%data(1)) s %ok="SSGRP Row ID" d %mdiag(%oper,-106,"Fld Int","Req","SSGRP_RowId","",%ok) s %msg=%ok,%ok=0
 q
valid33 ; DELETE: Row Validation
 n SQLCODE
 d VALDEL^atgen
 q
valid35 ; INSERT: Row Validation
 n SQLCODE
 d VALINS^atgen
 q
valid36 ; UPDATE: Row Validation
 n SQLCODE
 d VALUPD^atgen
 q
rowiderr s %ok=0 q
insertnw(%check,iform,recheck) ; insert tuple for table SS_Group
 n %based,%call,%done,%i,%icol,%irep,%irepi,%oper,%val,db,rowerr
 s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),recheck=$g(recheck),%oper="INSERT",rowerr=0 k %mdiag
 i recheck s %val=$g(%data(1)) g inrwid
 i iform s redrawit=0,idexist=2
 i '$d(rptform) n rptform s rptform=0
 s %val=""
 i $c(1)'[$g(%data(1)),$p(%data(1),$c(1))="" s %val=$p(%data(1),$c(1),2) g inrwide
 i $c(1)'[$g(%data(1)) s %val=$p(%data(1),$c(1)) g inrwid
 i $c(1)'[$g(%insert(1)),$p(%insert(1),$c(1))="" s %val=$p(%insert(1),$c(1),2) g inrwide
 i $c(1)'[$g(%insert(1)) s %val=$p(%insert(1),$c(1)) g inrwid
 g rowiderr
inrwide ; external to internal conversion for rowid
 i 'rowerr d fde1^mt51 i '%ok g:'iform rowiderr s rowerr=1
inrwid ; rowid in internal
 i 'rowerr d fdv1^mt51 i '%ok s rowerr=1 g rowiderr
 s %data(1)=%val
 i 'rowerr d fdi1^mt51 s %data(1)=%data(1)_$c(1)_%val
 i $c(1)[%data(1) g:'iform rowiderr s rowerr=1
 s:'$g(rowerr) %edit(1)=""
 g insarr
insarr q:$g(recheck)  ; entry point to spin through the %insert array
 s %icol=""
insloop s %icol=$o(%insert(%icol)) g insdef:%icol="",insloop:$d(%data(%icol))
 i ",1,"[(","_%icol_",") g insloop
 s %data(%icol)=%insert(%icol) s:+%check %edit(%icol)=""
 i $d(%insert(%icol))>9 g insrep
 g insloop
insrep ; entry point to work on repeating fields in the %insert array
 s %irep=0
insreplp s %irep=%irep+1 g:%irep>%insert(%icol) insloop
 s %data(%icol,%irep)=%insert(%icol,%irep) g insreplp
insdef ; entry point to compile all of the defaults
 d extint g:'%ok rowiderr:'iform i +%check=1 d validate g:'%ok rowiderr:'iform
 d intext^mt51
 g:+%check inscomp
insedit s %icol=""
insedlop s %icol=$o(%insert(%icol)) g inscomp:%icol="",insedlop:$d(%edit(%icol))!(",1,"[(","_%icol_",")) s %edit(%icol)="" g insedlop
inscomp ; entry point to calculate all computed fields
 s %data=%data(1) s:$g(iform) %ok=1 q
etiok i '%ok,'$d(%edit(%icol)) k %data(%icol) s %ok=1 q
 i '%ok s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
 s $p(%data(%icol),$c(1))=%val q
etiokrp i '%ok k %data(%icol,%irep) s %ok=1 q
 s $p(%data(%icol,%irep),$c(1))=%val q
etivalen s %irepi=0 f %irep=1:1:$g(%data(%icol)) i $d(%data(%icol,%irep)) s %irepi=%irepi+1,%data(%icol,%irepi)=%data(%icol,%irep)
 i '$g(%data(%icol))!%irepi s %data(%icol)=%irepi q
 k %data(%icol) q:'$d(%edit(%icol))
 f %irep=1:1:%edit(%icol) s %data(%icol,%irep)=%edit(%icol,%irep)
 s %data(%icol)=%edit(%icol) k %edit(%icol) q
fde1 ; external to internal conversion code
 s %ok=1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num
 q
fde4 ; external to internal conversion code
 s %ok=1 s %val=$s("Yy"[$e(%val):"Y","Nn"[$e(%val):"N",1:"") s:%val="" %ok=0
 q
extint s %ok=1 ; entry point to do all external to internal conversion code
 i $d(%data(3)),$p(%data(3),$c(1))="",$p(%data(3),$c(1),2)'="" s %val=$p(%data(3),$c(1),2) s %data(3)=%val
 i $d(%data(4)),$p(%data(4),$c(1))="",$p(%data(4),$c(1),2)'="" s %val=$p(%data(4),$c(1),2) d  g:'%ok rowiderr:'iform s %icol=4 d etiok
 . s %msg="" d fde4 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Ext->Int","SSGRP_AuditForResultEnquiry","",$g(%msg))
 i $d(%data(5)),$p(%data(5),$c(1))="",$p(%data(5),$c(1),2)'="" s %val=$p(%data(5),$c(1),2) s %data(5)=%val
 i $d(%data(1)),$p(%data(1),$c(1))="",$p(%data(1),$c(1),2)'="" s %val=$p(%data(1),$c(1),2) d  g:'%ok rowiderr:'iform s %icol=1 d etiok
 . s %msg="" d fde1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Ext->Int","SSGRP_RowId","",$g(%msg))
 q
fda1 ; DO validation and additional validation code
 i %val'=+%val s %ok=0,%msg=$$setmsg^%qarzst("DTNumIn")
 q
fdv1 ; DO field validation (ALL of it)
 s %ok=1 d fda1 q:'%ok  s:'$$uniq1($g(%data(1)),%val) %ok=0,%msg=$$setmsg^%qarzst("UniqueQ") q
fdv4 ; DO validation and additional validation code
 i %val'="Y",%val'="N" s %ok=0,%msg=$$setmsg^%qarzst("DTYesIn")
 q
uniq1(%rowid,%unique) n SQLCODE,%val d %0Ko q SQLCODE=100
 q
%0Ko n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Kerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%unique,$C(1))
 i %mmmsqld(3)="",$L(%unique)>1 s %val=$E(%unique,2,999) d %0EAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(3)
 i %mmmsqld(1)'="",$d(^SSU("SSGRP",%mmmsqld(1)))
 e  g %0KBdun
 s %mmmsqld(2)=%mmmsqld(1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Kc
%0KBdun 
%0KAdun 
%0Kc q
%0Kerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0KAdun
uniqfile(%sqcode) k %mdiag
 i %sqcode=-104,%ok,$c(1)'[$g(%data(1)),'$$uniq1($g(%data(1)),$g(%data(1))) s %ok="SSGRP_RowId"_": "_$$setmsg^%qarzst("UniqueQ") d %mdiag("",%sqcode,"","","SSGRP_RowId","",%ok)
 q
valok i %ok s $p(%data(%icol),$c(1))=%val q
 s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
valokrp i %ok s $p(%data(%icol,%irep),$c(1))=%val q
 k %data(%icol,%irep) s %ok=1 q
validate s %ok=1 ; entry point to do all validation code
 i $d(%edit(4)),%data(4)'=%edit(4) s %icol=4 s %val=$p(%data(4),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv4 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSGRP_AuditForResultEnquiry","",$g(%msg))
 i $d(%edit(1)),%data(1)'=%edit(1) s %icol=1 s %val=$p(%data(1),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSGRP_RowId","",$g(%msg))
 q
fdi1 i %val'=+%val s %val=""
 e  s %val=$fn(%val,"")
 q
fdi4 s %val=$s("Yy"[$e(%val):"Yes","Nn"[$e(%val):"No",1:"")
 q
intext ; entry point to do all internal to external conversion code
 i $d(%data(3)),%data(3)[$c(1) s %data(3)=$s($p(%data(3),$c(1))'="":$p(%data(3),$c(1)),1:$p(%data(3),$c(1),2))
 i $d(%data(4)),$p(%data(4),$c(1))'="" s %val=$p(%data(4),$c(1)) d fdi4 s $p(%data(4),$c(1),2)=%val
 i $d(%data(5)),%data(5)[$c(1) s %data(5)=$s($p(%data(5),$c(1))'="":$p(%data(5),$c(1)),1:$p(%data(5),$c(1),2))
 i $d(%data(1)),$p(%data(1),$c(1))'="" s %val=$p(%data(1),$c(1)) d fdi1 s $p(%data(1),$c(1),2)=%val
 q
updatenw(%check,iform) n %i,%icol,%irep,%irepi,%oldval,%oper,%val,db s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),%oper="UPDATE" k %mdiag
 d:%check'=2 extint g:'%ok rowiderr:'iform i %check=1 d validate g:'%ok rowiderr:'iform
 d:%check'=2 intext^mt51 q:'%ok
 q
 g ^mt52
UPPER(val) d:'$d(%trans) %trans^%qarztrm q $tr(val,%trans(3),%trans(4))
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
]]></Routine>
</Export>
