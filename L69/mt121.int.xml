<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="mt121" type="INT" languagemode="0"><![CDATA[
mt121  ; Compiled June 25, 2008 14:26:37 for Cache for Windows
delete(%rowid,%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%data(1)=%rowid,tupkill=1
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt121(.%edit) i SQLCODE s SQLCODE=-106 g gunlock
 d file
 g gunlock
insert(%check) n %data,%edit,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1,%edit=1
 d insertnw^mt121(+%check=1) i '%ok s SQLCODE=-104 q
winsert s %ROWID=%data(1)
 d:%check'["nolock" glock q:SQLCODE
 d:%check uniqfile(-104) i '%ok s SQLCODE=-104 g gunlock
 i +%check d required^mt121 i '%ok s SQLCODE=-108 g gunlock
 d file
 g gunlock
update(%rowid,%check,%copyedi) n icol,ir,tupkill,iform,%ok k %mdiag s db=$c(1),SQLCODE=0,%ok=1
 i '%copyedi f icol=0:1:4 k:'$d(%edit(icol)) %data(icol)
 s %ROWID=%rowid d:%check'["nolock" glock q:SQLCODE  d getold^mt121(.%edit) i SQLCODE s SQLCODE=-109 g gunlock
 f icol=0:1:4 i '$d(%data(icol)),$d(%edit(icol)) s %data(icol)=%edit(icol) d:$d(%edit(icol,1))  k %edit(icol)
 . f ir=1:1:%edit(icol) s %data(icol,ir)=%edit(icol,ir)
 d uniqfile(-105) i '%ok s SQLCODE=-105 g gunlock
 d updatenw^mt121(%check) i '%ok s SQLCODE=-105 g gunlock
 i +%check d required^mt121 i '%ok s SQLCODE=-108 g gunlock
 d file
 g gunlock
lock(%ROWID)   ;  user entry
glock q:$c(1)[%ROWID
 l +^mobject("object","menu",$p(%ROWID,$c(1))):5 e  s SQLCODE=-110
 q
unlock(%ROWID)   ;  user entry
gunlock q:%check["nolock"
 q:$c(1)[%ROWID
 l -^mobject("object","menu",$p(%ROWID,$c(1)))
 q
file n subs,tempn,irep,x,node,sn s %file=1,sn=0
 i $g(tupkill) k ^mobject("object","menu",$p(%edit(1),$c(1),1))
 g:$g(tupkill) maps
 s:$g(%edit) tempn=""
 i $d(%edit(2)) s:'($d(tempn(1))#2)&'$g(%edit) tempn(1)=$g(^mobject("object","menu",$p(%data(1),$c(1),1),1)) s $p(tempn(1),$c(1),1)=$g(%data(2))
 i $d(%edit(3)) s:'($d(tempn(3))#2)&'$g(%edit) tempn(3)=$g(^mobject("object","menu",$p(%data(1),$c(1),1),3)) s $p(tempn(3),$c(1),10)=$g(%data(3))
 i $d(%edit(4)) s:'($d(tempn(2))#2)&'$g(%edit) tempn(2)=$g(^mobject("object","menu",$p(%data(1),$c(1),1),2)) s $p(tempn(2),$c(1),10)=$g(%data(4))
 f node=1,2,3 s:$d(tempn(node))#2 ^mobject("object","menu",$p(%data(1),$c(1),1),node)=tempn(node)
 i 'sn,$d(tempn)=1 s ^mobject("object","menu",$p(%data(1),$c(1),1))=""
maps q
%0AAr1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num  ;  Code for update (get old values) of table: SS_Menu
 q  
%0ABs1 i %val'=+%val s %val=""
 e  s %val=$fn(%val,"")
 q
%0Ao n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Aerr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%rowid,$C(1))
 i %mmmsqld(3)="",$L(%rowid)>1 s %val=$E(%rowid,2,999) d %0AAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s $P(%dataold(1),$C(1))=%mmmsqld(3)
 i $P(%dataold(1),$C(1))'="",$d(^mobject("object","menu",$P(%dataold(1),$C(1))))
 e  g %0ABdun
 s %mmmsqln=$g(^mobject("object","menu",$P(%dataold(1),$C(1)),1))
 s %dataold(2)=$p(%mmmsqln,$c(1),1)
 s %mmmsqln=$g(^mobject("object","menu",$P(%dataold(1),$C(1)),2))
 s %dataold(4)=$p(%mmmsqln,$c(1),10)
 s %mmmsqln=$g(^mobject("object","menu",$P(%dataold(1),$C(1)),3))
 s %dataold(3)=$p(%mmmsqln,$c(1),10)
 
 s %val=$P(%dataold(1),$C(1)) d %0ABs1:%val'="" s $P(%dataold(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Ac
%0ABdun 
%0AAdun 
%0Ac q
%0Aerr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0AAdun
getold(%dataold) g %0Ao
lookupB d %RSBcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",30),1,30)_"  "_$e(%datars(3)_$j("",8),1,8)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupB
%RSBcuro s SQLCODE=$s($g(%RSBcurc):-101,1:0) q:SQLCODE'=0
 s %RSBcurc=1 k %RSBcurm
 s %RSBcurE=$zt,%RSBcurf=0,%RSBcure=0,%RSBcurL=""
 s %RSBcurd(8)=$P(%data(2),$C(1))
 l +^mtemp s %RSBcurt(1)=$zp(^mtemp(" "))+1,^(%RSBcurt(1))="" l -^mtemp
 s %RSBcurd(9)=$$ALPHAUP(%RSBcurd(8))
 q
%0Bfirst   ;  init
 k ^mtemp(%RSBcurt(1),0)
 ; asl MOD# 3
 d %0BBMod
 s %RSBcurs(7)=""
%0BCk1 s %RSBcurs(7)=$o(^mtemp(%RSBcurt(1),0,%RSBcurs(7)))
 i %RSBcurs(7)="" g %0BCdun
 s %RSBcurd(7)=$s(%RSBcurs(7)=" ":"",1:%RSBcurs(7))
 s %RSBcurs(1)=""
%0BCk2 s %RSBcurs(1)=$o(^mtemp(%RSBcurt(1),0,%RSBcurs(7),%RSBcurs(1)))
 i %RSBcurs(1)="" g %0BCk1
 s $P(%datars(1),$C(1))=$s(%RSBcurs(1)=-99999999999999999:"",1:%RSBcurs(1))
 s %RSBcurn=$g(^mtemp(%RSBcurt(1),0,%RSBcurs(7),%RSBcurs(1)))
 s %datars(2)=$p(%RSBcurn,"|~|",2) s %datars(3)=$p(%RSBcurn,"|~|",1)
 
 s %val=$P(%datars(1),$C(1)) d %0ABs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 s SQLCODE=0 s:SQLCODE=0 %RSBcurf=%RSBcurf+1 s %RSBcurc=10 q
%RSBcurf i '$g(%RSBcurc) s SQLCODE=-102 q
 i %RSBcurc=100 s SQLCODE=100 q
 s $zt="%0Berr^"_$zn s $ze="" n %val g %0Bfirst:%RSBcurc=1
 g %0BCk2
%0BCdun 
%0BAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSBcurc=100 q
%RSBcurc i '$g(%RSBcurc) s SQLCODE=-102 q
 f %RSBcurt=1:1:1 k ^mtemp(%RSBcurt(%RSBcurt))
 k %RSBcurc,%RSBcurd,%RSBcure,%RSBcurE,%RSBcurf,%RSBcurl,%RSBcurL,%RSBcurn,%RSBcurr,%RSBcurR,%RSBcurs,%RSBcurt s SQLCODE=0 q
%0Berr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSBcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0BAdun
%0BBMod ; asl MOD# 2
 n %RSBcurn  ; Nested NEWing for Subquery...
 s %RSBcurd(11)=""
%0BBk1 s %RSBcurd(11)=$o(^mobject("object","menu",%RSBcurd(11)))
 i %RSBcurd(11)="" g %0BBdun
 s %RSBcurn=$g(^mobject("object","menu",%RSBcurd(11),1))
 s %datars(2)=$p(%RSBcurn,$c(1),1)
 s %RSBcurn=$g(^mobject("object","menu",%RSBcurd(11),2))
 s %datars(3)=$p(%RSBcurn,$c(1),10)
 s $P(%datars(1),$C(1))=(%RSBcurd(11))
 
 s %val=$P(%datars(1),$C(1)) d %0ABs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 s %RSBcurd(7)=$$ALPHAUP(%datars(2))
 g:'((%RSBcurd(9))=$E((%RSBcurd(7)),1,$L((%RSBcurd(9))))) %0BBk1
 s %RSBcurs(7)=$s(%RSBcurd(7)'="":%RSBcurd(7),1:" "),%RSBcurs(1)=$s($P(%datars(1),$C(1))'="":$P(%datars(1),$C(1)),1:-99999999999999999),%RSBcurn="",$p(%RSBcurn,"|~|",2)=%datars(2),$p(%RSBcurn,"|~|",1)=%datars(3),^mtemp(%RSBcurt(1),0,%RSBcurs(7),%RSBcurs(1))=%RSBcurn
 g %0BBk1
%0BBdun 
 q
lookupC d %RSCcurf i SQLCODE=100 s tuplen=tuplen_"done" q
 i SQLCODE'=0 s tuplen=tuplen_"done" q
 s tuplen=tuplen+1,$p(tuple(tuplen),$c(1),2)=%datars(1)
 s tuple(tuplen,1)=$e(%datars(2)_$j("",30),1,30)_"  "_$e(%datars(3)_$j("",8),1,8)
 s $p(tuple(tuplen),$c(1),1)=1,$p(tuple(tuplen),$c(1),3)=x1+1+1 i tmp'<(tresh*1) s max=0 q
 s tmp=tmp+1 g lookupC
%RSCcuro s SQLCODE=$s($g(%RSCcurc):-101,1:0) q:SQLCODE'=0
 s %RSCcurc=1 k %RSCcurm
 s %RSCcurE=$zt,%RSCcurf=0,%RSCcure=0,%RSCcurL=""
 l +^mtemp s %RSCcurt(1)=$zp(^mtemp(" "))+1,^(%RSCcurt(1))="" l -^mtemp
 q
%0Cfirst   ;  init
 k ^mtemp(%RSCcurt(1),0)
 ; asl MOD# 3
 d %0CBMod
 s %RSCcurs(8)=""
%0CCk1 s %RSCcurs(8)=$o(^mtemp(%RSCcurt(1),0,%RSCcurs(8)))
 i %RSCcurs(8)="" g %0CCdun
 s %RSCcurd(8)=$s(%RSCcurs(8)=" ":"",1:%RSCcurs(8))
 s %RSCcurs(1)=""
%0CCk2 s %RSCcurs(1)=$o(^mtemp(%RSCcurt(1),0,%RSCcurs(8),%RSCcurs(1)))
 i %RSCcurs(1)="" g %0CCk1
 s $P(%datars(1),$C(1))=$s(%RSCcurs(1)=-99999999999999999:"",1:%RSCcurs(1))
 
 s %val=$P(%datars(1),$C(1)) d %0ABs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 i $P(%datars(1),$C(1))'="",$d(^mobject("object","menu",$P(%datars(1),$C(1))))
 e  g %0CCk2
 s %RSCcurn=$g(^mobject("object","menu",$P(%datars(1),$C(1)),1))
 s %datars(2)=$p(%RSCcurn,$c(1),1)
 s %RSCcurn=$g(^mobject("object","menu",$P(%datars(1),$C(1)),2))
 s %datars(3)=$p(%RSCcurn,$c(1),10)
 s SQLCODE=0 s:SQLCODE=0 %RSCcurf=%RSCcurf+1 s %RSCcurc=10 q
%RSCcurf i '$g(%RSCcurc) s SQLCODE=-102 q
 i %RSCcurc=100 s SQLCODE=100 q
 s $zt="%0Cerr^"_$zn s $ze="" n %val g %0Cfirst:%RSCcurc=1
 g %0CCk2
%0CCdun 
%0CAdun 
 s:$g(SQLCODE)'<0 SQLCODE=100 s %RSCcurc=100 q
%RSCcurc i '$g(%RSCcurc) s SQLCODE=-102 q
 f %RSCcurt=1:1:1 k ^mtemp(%RSCcurt(%RSCcurt))
 k %RSCcurc,%RSCcurd,%RSCcure,%RSCcurE,%RSCcurf,%RSCcurl,%RSCcurL,%RSCcurn,%RSCcurr,%RSCcurR,%RSCcurs,%RSCcurt s SQLCODE=0 q
%0Cerr ; Cursor-Based Error Trap Module...
 s $zt=$g(%RSCcurE),SQLCODE=-20603,%msg=$ze s $ze="" g %0CAdun
%0CBMod ; asl MOD# 2
 n %RSCcurn  ; Nested NEWing for Subquery...
 s %RSCcurd(9)=""
%0CBk1 s %RSCcurd(9)=$o(^mobject("object","menu",%RSCcurd(9)))
 i %RSCcurd(9)="" g %0CBdun
 s %RSCcurn=$g(^mobject("object","menu",%RSCcurd(9),1))
 s %datars(2)=$p(%RSCcurn,$c(1),1)
 s %RSCcurn=$g(^mobject("object","menu",%RSCcurd(9),2))
 s %datars(3)=$p(%RSCcurn,$c(1),10)
 s $P(%datars(1),$C(1))=(%RSCcurd(9))
 
 s %val=$P(%datars(1),$C(1)) d %0ABs1:%val'="" s $P(%datars(1),$C(1),2)=%val
 s %RSCcurd(8)=$$ALPHAUP(%datars(2))
 s %RSCcurs(8)=$s(%RSCcurd(8)'="":%RSCcurd(8),1:" "),%RSCcurs(1)=$s($P(%datars(1),$C(1))'="":$P(%datars(1),$C(1)),1:-99999999999999999),^mtemp(%RSCcurt(1),0,%RSCcurs(8),%RSCcurs(1))=""
 g %0CBk1
%0CBdun 
 q
selitmC  ; entry point to select the Row Selection Item
 i $c(1)'[$g(%data(2)) s item=1 q
 s item=0 f  s item=$o(%data(item)) q:item=""  i $c(1)'[%data(item) s item=1 q
 s item=$s(item=1:"",1:2) q
 s item="" q
%mdiag(oper,sqlcode,class,subclass,field,cursor,%msg) ; diagnostics for sql operations
 i '$d(%mdiag) s $p(%mdiag,$c(1),2,3)="NO"_$c(1)_oper
 i ($p(%mdiag,$c(1))+1)>10 s $p(%mdiag,$c(1),2)="YES" q
 s $p(%mdiag,$c(1))=$p(%mdiag,$c(1))+1,%mdiag($p(%mdiag,$c(1)))=$g(sqlcode)_$c(1)_$g(class)_$c(1)_$g(subclass)_$c(1)_"SS_Menu"_$c(1)_$g(field)_$c(1)_$g(cursor)_$c(1)_$g(%msg) q
 ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
required ; Entry point to check the required fields
 n %lang,%oper k %mdiag s %msg="",%ok=1,%oper=$s($g(%edit):"INSERT",1:"UPDATE"),%lang=$p($g(%msql),$c(1),5) s:'%lang %lang=1
 i $c(1,1)[$g(%data(1)) s %ok="SSMNU Row ID" d %mdiag(%oper,-106,"Fld Int","Req","SSMNU_RowId","",%ok) s %msg=%ok,%ok=0
 q
rowiderr s %ok=0 q
insertnw(%check,iform,recheck) ; insert tuple for table SS_Menu
 n %based,%call,%done,%i,%icol,%irep,%irepi,%oper,%val,db,rowerr
 s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),recheck=$g(recheck),%oper="INSERT",rowerr=0 k %mdiag
 i recheck s %val=$g(%data(1)) g inrwid
 i iform s redrawit=0,idexist=2
 i '$d(rptform) n rptform s rptform=0
 s %val=""
 i $c(1)'[$g(%data(1)),$p(%data(1),$c(1))="" s %val=$p(%data(1),$c(1),2) g inrwide
 i $c(1)'[$g(%data(1)) s %val=$p(%data(1),$c(1)) g inrwid
 i $c(1)'[$g(%insert(1)),$p(%insert(1),$c(1))="" s %val=$p(%insert(1),$c(1),2) g inrwide
 i $c(1)'[$g(%insert(1)) s %val=$p(%insert(1),$c(1)) g inrwid
 s %val=$i(^mdata(19)) g inrwide
 g rowiderr
inrwide ; external to internal conversion for rowid
 i 'rowerr d fde1^mt121 i '%ok g:'iform rowiderr s rowerr=1
inrwid ; rowid in internal
 i 'rowerr d fdv1^mt121 i '%ok s rowerr=1 g rowiderr
 s %data(1)=%val
 i 'rowerr d fdi1^mt121 s %data(1)=%data(1)_$c(1)_%val
 i $c(1)[%data(1) g:'iform rowiderr s rowerr=1
 s:'$g(rowerr) %edit(1)=""
 g insarr
insarr q:$g(recheck)  ; entry point to spin through the %insert array
 s %icol=""
insloop s %icol=$o(%insert(%icol)) g insdef:%icol="",insloop:$d(%data(%icol))
 i ",1,"[(","_%icol_",") g insloop
 s %data(%icol)=%insert(%icol) s:+%check %edit(%icol)=""
 i $d(%insert(%icol))>9 g insrep
 g insloop
insrep ; entry point to work on repeating fields in the %insert array
 s %irep=0
insreplp s %irep=%irep+1 g:%irep>%insert(%icol) insloop
 s %data(%icol,%irep)=%insert(%icol,%irep) g insreplp
insdef ; entry point to compile all of the defaults
 d extint g:'%ok rowiderr:'iform i +%check=1 d validate g:'%ok rowiderr:'iform
 d intext^mt121
 g:+%check inscomp
insedit s %icol=""
insedlop s %icol=$o(%insert(%icol)) g inscomp:%icol="",insedlop:$d(%edit(%icol))!(",1,"[(","_%icol_",")) s %edit(%icol)="" g insedlop
inscomp ; entry point to calculate all computed fields
 s %data=%data(1) s:$g(iform) %ok=1 q
etiok i '%ok,'$d(%edit(%icol)) k %data(%icol) s %ok=1 q
 i '%ok s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
 s $p(%data(%icol),$c(1))=%val q
etiokrp i '%ok k %data(%icol,%irep) s %ok=1 q
 s $p(%data(%icol,%irep),$c(1))=%val q
etivalen s %irepi=0 f %irep=1:1:$g(%data(%icol)) i $d(%data(%icol,%irep)) s %irepi=%irepi+1,%data(%icol,%irepi)=%data(%icol,%irep)
 i '$g(%data(%icol))!%irepi s %data(%icol)=%irepi q
 k %data(%icol) q:'$d(%edit(%icol))
 f %irep=1:1:%edit(%icol) s %data(%icol,%irep)=%edit(%icol,%irep)
 s %data(%icol)=%edit(%icol) k %edit(%icol) q
fde1 ; external to internal conversion code
 s %ok=1 n num s num=$$numint^%qarzdt(%val,1,"","",1) s:(num="")&(%val'="") %ok=0 s %val=num
 q
extint s %ok=1 ; entry point to do all external to internal conversion code
 i $d(%data(3)),$p(%data(3),$c(1))="",$p(%data(3),$c(1),2)'="" s %val=$p(%data(3),$c(1),2) s %data(3)=%val
 i $d(%data(4)),$p(%data(4),$c(1))="",$p(%data(4),$c(1),2)'="" s %val=$p(%data(4),$c(1),2) s %data(4)=%val
 i $d(%data(2)),$p(%data(2),$c(1))="",$p(%data(2),$c(1),2)'="" s %val=$p(%data(2),$c(1),2) s %data(2)=%val
 i $d(%data(1)),$p(%data(1),$c(1))="",$p(%data(1),$c(1),2)'="" s %val=$p(%data(1),$c(1),2) d  g:'%ok rowiderr:'iform s %icol=1 d etiok
 . s %msg="" d fde1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Ext->Int","SSMNU_RowId","",$g(%msg))
 q
fda1 ; DO validation and additional validation code
 i %val'=+%val s %ok=0,%msg=$$setmsg^%qarzst("DTNumIn")
 q
fdv1 ; DO field validation (ALL of it)
 s %ok=1 d fda1 q:'%ok  s:'$$uniq1($g(%data(1)),%val) %ok=0,%msg=$$setmsg^%qarzst("UniqueQ") q
uniq1(%rowid,%unique) n SQLCODE,%val d %0Do q SQLCODE=100
 q
%0Do n %mmmsqlc,%mmmsqld,%mmmsqle,%mmmsqlE,%mmmsqlf,%mmmsqll,%mmmsqlL,%mmmsqlm,%mmmsqln,%mmmsqlp,%mmmsqlr,%mmmsqlR,%mmmsqls,%mmmsqlt,%val
 s %mmmsqlE=$zt,$zt="%0Derr^"_$zn,%mmmsqlf=0 s $ze=""
 s %mmmsqld(3)=$P(%unique,$C(1))
 i %mmmsqld(3)="",$L(%unique)>1 s %val=$E(%unique,2,999) d %0AAr1 s %mmmsqld(3)=%val
 s SQLCODE=100
   ;  init
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(3)
 i %mmmsqld(1)'="",$d(^mobject("object","menu",%mmmsqld(1)))
 e  g %0DBdun
 s %mmmsqld(2)=%mmmsqld(1)
 s SQLCODE=0 s:SQLCODE=0 %mmmsqlf=%mmmsqlf+1 g %0Dc
%0DBdun 
%0DAdun 
%0Dc q
%0Derr ; Non Cursor-Based Error Trap Module...
 s $zt=$g(%mmmsqlE),SQLCODE=-20603,%msg=$ze s $ze="" g %0DAdun
uniqfile(%sqcode) k %mdiag
 i %sqcode=-104,%ok,$c(1)'[$g(%data(1)),'$$uniq1($g(%data(1)),$g(%data(1))) s %ok="SSMNU_RowId"_": "_$$setmsg^%qarzst("UniqueQ") d %mdiag("",%sqcode,"","","SSMNU_RowId","",%ok)
 q
valok i %ok s $p(%data(%icol),$c(1))=%val q
 s %data(%icol)=%edit(%icol),%ok=1 k %edit(%icol) q
valokrp i %ok s $p(%data(%icol,%irep),$c(1))=%val q
 k %data(%icol,%irep) s %ok=1 q
validate s %ok=1 ; entry point to do all validation code
 i $d(%edit(1)),%data(1)'=%edit(1) s %icol=1 s %val=$p(%data(1),$c(1)) i %val'="" d  g:'%ok rowiderr:'iform d valok
 . s %msg="" d fdv1 d:'%ok %mdiag(%oper,-104,"Fld Oprs","Val","SSMNU_RowId","",$g(%msg))
 q
fdi1 i %val'=+%val s %val=""
 e  s %val=$fn(%val,"")
 q
intext ; entry point to do all internal to external conversion code
 i $d(%data(3)),%data(3)[$c(1) s %data(3)=$s($p(%data(3),$c(1))'="":$p(%data(3),$c(1)),1:$p(%data(3),$c(1),2))
 i $d(%data(4)),%data(4)[$c(1) s %data(4)=$s($p(%data(4),$c(1))'="":$p(%data(4),$c(1)),1:$p(%data(4),$c(1),2))
 i $d(%data(2)),%data(2)[$c(1) s %data(2)=$s($p(%data(2),$c(1))'="":$p(%data(2),$c(1)),1:$p(%data(2),$c(1),2))
 i $d(%data(1)),$p(%data(1),$c(1))'="" s %val=$p(%data(1),$c(1)) d fdi1 s $p(%data(1),$c(1),2)=%val
 q
updatenw(%check,iform) n %i,%icol,%irep,%irepi,%oldval,%oper,%val,db s %ok=1,db=$c(1),%check=+$g(%check),iform=+$g(iform),%oper="UPDATE" k %mdiag
 d:%check'=2 extint g:'%ok rowiderr:'iform i %check=1 d validate g:'%ok rowiderr:'iform
 d:%check'=2 intext^mt121 q:'%ok
 q
 g ^mt122
UPPER(val) d:'$d(%trans) %trans^%qarztrm q $tr(val,%trans(3),%trans(4))
ALPHAUP(val,remove) d:'$d(%trans) %trans^%qarztrm q:'$d(remove) $tr(val,%trans(1),%trans(2)) q $tr(val,$tr(%trans(1),remove),%trans(2))
]]></Routine>
</Export>
