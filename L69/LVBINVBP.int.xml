<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Routine name="LVBINVBP" type="INT" languagemode="0" generated="1"><![CDATA[
LVBINVBP ; IG 29/4/98 ; MVB Control code access for INV_BatchEpisode
 ;
 ; supported calls:
 ;
 ; $$select^LVBINVBP(ROWID)
 ; $$select1^LVBINVBP(par,seq,all)
 ; $$open^LVBINVBP(par,seq,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetch^LVBINVBP(par,seq,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchbuffer^LVBINVBP(par,seq,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$fetchall^LVBINVBP(par,seq,p2,p3,p4,p5,p6,p7,p8,p9)
 ; $$close^LVBINVBP()
 ; $$insert^LVBINVBP(par)
 ; $$update^LVBINVBP(ROWID)
 ; $$delete^LVBINVBP(ROWID)
 ; $$getall^LVBINVBP(par,seq)
 ; $$invoice^LVBINVBP(un)
 ; $$seldata^LVBINVBP(ROWID,data)
 ;
  ;---&SQL(DECLARE INVBP CURSOR FOR SELECT * FROM INV_BatchEpisode
   ;---         WHERE INVBP_ParRef = :par
   ;---         AND ((INVBP_Sequence = :seq) OR (:seq IS NULL)))
   ;--- ** SQL PUBLIC Variables: SQLCODE, par, seq
 ;
invoice(un) s un=$g(un),result=""
 i $l(un) s x1=$o(^TMCBi("UN",un,"")) i $l(x1) s x2=$o(^TMCBi("UN",un,x1,"")) i $l(x2) s x3=$o(^TMCBi("UN",un,x1,x2,"")) s result=x1_"||"_x2_"||"_$p(^TMCB(x1,x2,x3),"\",2)
 q result
 ; Insert the data
insert(par) s PLIST(0)=$g(par) K PLIST(1) d pre("N") 
  ;---&SQL(insert INTO INV_BatchEpisode VALUES :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Co
 i 'SQLCODE d check^LVBDEBVI($p(%ROWID,"||",3)) Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Update the data
update(ROWID) s ROWID=$g(ROWID) d pre("Y") 
  ;---&SQL(UPDATE INV_BatchEpisode VALUES :PLIST() WHERE INVBP_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Eo
 i 'SQLCODE d check^LVBDEBVI($p(%ROWID,"||",3)) Q $$select(%ROWID)
 q SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"")
 ;
 ; Delete the data
delete(ROWID) s ROWID=$g(ROWID)
  ;---&SQL(DELETE FROM INV_BatchEpisode WHERE INVBP_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: ROWID, SQLCODE
 Do %0Go
 Q SQLCODE
 ;
 ; Open the cursor
open(par,seq,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),seq=$g(seq)
  ;---&SQL(OPEN INVBP)
   ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %INVBP0o
 Q 0
 ;
 ; Fetch the data
fetch(par,seq,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),seq=$g(seq) K PLIST
  ;---&SQL(FETCH INVBP INTO :PLIST())
   ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE
 Do %0Jo
 S PLIST=$o(PLIST(""),-1) 
 I 'SQLCODE D adjust 
 q SQLCODE 
 ; Fetch all data
fetchbuffer(par,seq,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),seq=$g(seq) k ^TMP($zn,$j)
 s max=$s($g(PLIST(1)):PLIST(1),1:100) i max>100 s max=100
 f xxx=1:1:max s SQLCODE=$$fetch(par,seq) q:SQLCODE  d
 .s cnt=$o(^TMP($zn,$j,""),-1)+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(28),j)=$g(PLIST(j))
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q SQLCODE
fetchall(par,seq,p2,p3,p4,p5,p6,p7,p8,p9) s par=$g(par),seq=$g(seq)
 q $$select1(par,seq)
 .
 ; Close the cursor 
close()  ;---&SQL(CLOSE INVBP) 
  ;--- ** SQL PUBLIC Variables: SQLCODE
 Do %INVBP0c 
 q 0
 ; select data by code
select(ROWID) K PLIST s ROWID=$g(ROWID)
  ;---&SQL(SELECT * INTO :PLIST() FROM INV_BatchEpisode WHERE INVBP_RowID=:ROWID)
   ;--- ** SQL PUBLIC Variables: PLIST, ROWID, SQLCODE
 Do %0Lo
 s PLIST=$o(PLIST(""),-1)
 i 'SQLCODE D adjust
 q SQLCODE
 ; select data by code and field No
seldata(ROWID,data) n (ROWID,data) s ROWID=$g(ROWID),data=$g(data),result=""
 i $l(ROWID) d  q result
 .f j=1:1:3 s x(j)=$p(ROWID,"||",j)
 .i $l(x(1)),$l(x(2)),$l(x(3)),data=3 s result=$p($g(^TMCB(x(1),x(2),x(3))),"\",1) q
 .i $l(x(1)),$l(x(2)),$l(x(3)),data=4 s result=$p($g(^TMCB(x(1),x(2),x(3))),"\",2) q
 .i '$$select(ROWID,"Y") s result=$g(PLIST(data))
 q result
 ; select only active invoice data
select1(par,seq,all) k ^TMP($zn,$j) s par=$g(par),seq=$g(seq),all=$g(all),cnt=0
 i $$open(par,seq)
 s cnt=0 f  q:$$fetch(par,seq)  d
 .i all'="Y",$l(PLIST(7)) q
 .s cnt=cnt+1 f j=1:1:PLIST s $p(^TMP($zn,$j,cnt),$c(2),j)=PLIST(j)
 i $$close()
 k PLIST m PLIST=^TMP($zn,$j) k ^TMP($zn,$j)
 s PLIST=$o(PLIST(""),-1)
 q $s(PLIST:0,1:100)
 ;
 ; Pre-filing adjustments
pre(xUpdate) d PreSQL^SSUTIL4()
 q
 ;
 ; Post-filing adjustments
adjust d PostSQL^SSUTIL4("")
 N amount,plist,I,J,SQLCODE,X,epis F J=1:1:PLIST I $D(PLIST(J)) S PLIST(J)=$P(PLIST(J),$C(1),1)
 ;
 s amount=""
 I $G(PLIST(8))'="",$G(PLIST(9))'="",$G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .i '$$select^LVBDEBVI(plist(8)_"||"_plist(9)_"||"_plist(2)) i PLIST(4) s amount=PLIST(4)
 .K PLIST M PLIST=plist K plist
 I $G(PLIST(2))'="" D
 .K plist M plist=PLIST K PLIST
 .s epis=plist(2)
 .  ;---&sql(SELECT EPVIS_Title_DR->CTTL_Desc,EPVIS_Surname,EPVIS_GivenName,EPVIS_Name_1,EPVIS_Name_2,EPVIS_Name_3 INTO :PLIST(7),:PLIST() FROM EP_VisitNumber WHERE EPVIS_RowID=:epis)
  .  ;--- ** SQL PUBLIC Variables: PLIST, SQLCODE, epis
 . Do %0No
 .S X="" I 'SQLCODE S X=epis_$c(1)_$$NameFormat^LVBCOM03("PT",PLIST(7),PLIST(4),PLIST(3),PLIST(99),PLIST(100),PLIST(101))_$c(1)_amount
 .K PLIST M PLIST=plist S PLIST(2)=X K plist
 ;
 Q
getall(par,seq) N (par,seq,PLIST) K ^TMP($ZN,$J) s par=$g(par),seq=$g(seq)
 I $$open(par,seq)
 F cnt=1:1 Q:$$fetch(par,seq)  S ^TMP($ZN,$J,cnt)=$p(PLIST(1),$c(1))_$c(2)_$P(PLIST(2),$c(1),2)_$c(2)_$P(PLIST(2),$c(1))_$c(2)_$P(PLIST(3),$c(1))
 I $$close()
 K PLIST M PLIST=^TMP($ZN,$J)
 S PLIST=$o(PLIST(""),-1)
 K ^TMP($ZN,$J)
 Q 0
%INVBP0o s $zt="%INVBP0E" s SQLCODE=$s($g(%INVBP0c):-101,1:0) q:SQLCODE'=0  s %INVBP0d(23)=0 s %INVBP0d(24)=0,%INVBP0d(25)=""
 s %INVBP0d(15)=$g(par),%INVBP0d(16)=$g(seq),%INVBP0d(17)=$g(seq)
 s %INVBP0c=1 q
%INVBP0E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %INVBP0c,%INVBP0d,%INVBP0E,%INVBP0l,%INVBP0n,%INVBP0R,%INVBP0Z q
%0Afirst 
 ; asl MOD# 2
 s %INVBP0d(1)=%INVBP0d(15)
 s %INVBP0d(20)=$p(%INVBP0d(1),"||"),%INVBP0d(21)=$p(%INVBP0d(1),"||",2)
 i %INVBP0d(20)="" g %0ABdun
 i %INVBP0d(21)="" g %0ABdun
 s %INVBP0d(3)=""
%0ABk1 s %INVBP0d(3)=$o(^TMCB(%INVBP0d(20),%INVBP0d(21),%INVBP0d(3)))
 i %INVBP0d(3)="" g %0ABdun
 s %INVBP0d(30)=$g(^TMCB(%INVBP0d(20),%INVBP0d(21),%INVBP0d(3)))
 s %INVBP0d(5)=$p(%INVBP0d(30),"\",2)
 g:'(((%INVBP0d(5)'="")&&(%INVBP0d(5)=%INVBP0d(16)))||(%INVBP0d(17)="")) %0ABk1
 s %INVBP0d(4)=$p(%INVBP0d(30),"\",1) s %INVBP0d(11)=$p(%INVBP0d(30),"\",3) s %INVBP0d(12)=$p(%INVBP0d(30),"\",4) s %INVBP0d(13)=$p(%INVBP0d(30),"\",5) s %INVBP0d(14)=$p(%INVBP0d(30),"\",6)
 s %INVBP0d(2)=(%INVBP0d(20))_"||"_(%INVBP0d(21))_"||"_(%INVBP0d(3))
 s %INVBP0d(1)=$p(%INVBP0d(2),"||",1,2)
 s %INVBP0d(6)=$$CT005^at345($g(%INVBP0d(1))) s %INVBP0d(10)=$$CT009^at345($g(%INVBP0d(3))) s %INVBP0d(7)=$$CT006^at345($g(%INVBP0d(1))) s %INVBP0d(9)=$$CT008^at345($g(%INVBP0d(3))) s %INVBP0d(8)=$$CT007^at345($g(%INVBP0d(3)),$g(%INVBP0d(1)))
 g:$zu(115,2)=0 %0ABuncommitted i $zu(115,2)=1 l +^TMCB($p(%INVBP0d(2),"||",1),$p(%INVBP0d(2),"||",2),$p(%INVBP0d(2),"||",3))#"S":$zu(115,4) i $t { s %INVBP0d(24)=1,%INVBP0d(25)=$name(^TMCB($p(%INVBP0d(2),"||",1),$p(%INVBP0d(2),"||",2),$p(%INVBP0d(2),"||",3)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.INV_BatchEpisode for RowID value: "_%INVBP0d(2) ztrap "LOCK"  }
 ; asl MOD# 3
 s %INVBP0d(19)=$lb(""_%INVBP0d(5))
 s %INVBP0d(20)=$p(%INVBP0d(2),"||"),%INVBP0d(21)=$p(%INVBP0d(2),"||",2),%INVBP0d(3)=$p(%INVBP0d(2),"||",3)
 i %INVBP0d(20)'="",%INVBP0d(21)'="",%INVBP0d(3)'="",$d(^TMCB(%INVBP0d(20),%INVBP0d(21),%INVBP0d(3)))
 e  g %0ACdun
 s %INVBP0d(35)=$g(^TMCB(%INVBP0d(20),%INVBP0d(21),%INVBP0d(3)))
 s %INVBP0d(4)=$p(%INVBP0d(35),"\",1) s %INVBP0d(5)=$p(%INVBP0d(35),"\",2) s %INVBP0d(11)=$p(%INVBP0d(35),"\",3) s %INVBP0d(12)=$p(%INVBP0d(35),"\",4) s %INVBP0d(13)=$p(%INVBP0d(35),"\",5) s %INVBP0d(14)=$p(%INVBP0d(35),"\",6)
 s %INVBP0d(1)=$p(%INVBP0d(2),"||",1,2)
 s %INVBP0d(6)=$$CT005^at345($g(%INVBP0d(1))) s %INVBP0d(10)=$$CT009^at345($g(%INVBP0d(3))) s %INVBP0d(7)=$$CT006^at345($g(%INVBP0d(1))) s %INVBP0d(9)=$$CT008^at345($g(%INVBP0d(3))) s %INVBP0d(8)=$$CT007^at345($g(%INVBP0d(3)),$g(%INVBP0d(1)))
 s %INVBP0d(22)=$lb(""_%INVBP0d(5))
 g:%INVBP0d(19)'=%INVBP0d(22) %0ACdun
%0ABuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %INVBP0d(23)=%INVBP0d(23)+1,%ROWCOUNT=%INVBP0d(23),%ROWID=%INVBP0d(2),%INVBP0c=10 q
%INVBP0f i '$g(%INVBP0c) { s SQLCODE=-102 q  } i %INVBP0c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr" i $d(%0CacheRowLimit)#2,$g(%INVBP0d(23))'<%0CacheRowLimit { s SQLCODE=100,%ROWCOUNT=%INVBP0d(23),%INVBP0c=100 q  } g %0Afirst:%INVBP0c=1
%0ACdun i $zu(115,2)=1,$g(%INVBP0d(24))=1 { l -@%INVBP0d(25) s %INVBP0d(24)=0 }
 g %0ABk1
%0ABdun 
%0AAdun 
 s %ROWCOUNT=%INVBP0d(23),SQLCODE=100,%INVBP0c=100 q
%INVBP0c i '$g(%INVBP0c) { s SQLCODE=-102 q  } s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%INVBP0d(23)),1:0)
 i $zu(115,2)=1,$g(%INVBP0d(24))=1 { l -@%INVBP0d(25) } k %INVBP0c,%INVBP0d,%INVBP0E,%INVBP0l,%INVBP0n,%INVBP0R,%INVBP0Z s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) s %INVBP0c=100 q
%0Co n %i,icol,ir
 f icol=0:1:13 i $d(PLIST(icol)) s %i(icol)=PLIST(icol)
 s %ROWID=$$%insert^User.INVBatchEpisode.T1(.%i,$c(0,0,0,0)),%ROWCOUNT='SQLCODE
 q  // From %0Co
%0Eo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Eerr" s %mmmsqld(7)=0 s %mmmsqld(8)=""
 s %mmmsqld(3)=$g(ROWID)
 n %data,icol,ir
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(2)=%mmmsqld(3)
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^TMCB(%mmmsqld(4),%mmmsqld(5),%mmmsqld(6)))
 e  g %0EBdun
 s %mmmsqld(13)=$$%getlock^User.INVBatchEpisode.T1(%mmmsqld(2)) i '%mmmsqld(13) s SQLCODE=-110 g %0Ec
 ; asl MOD# 3
 s %mmmsqld(4)=$p(%mmmsqld(2),"||"),%mmmsqld(5)=$p(%mmmsqld(2),"||",2),%mmmsqld(6)=$p(%mmmsqld(2),"||",3)
 i %mmmsqld(4)'="",%mmmsqld(5)'="",%mmmsqld(6)'="",$d(^TMCB(%mmmsqld(4),%mmmsqld(5),%mmmsqld(6)))
 e  g %0ECdun
 k %data
 f icol=0:1:13 i $d(PLIST(icol)) s %data(icol)=PLIST(icol)
 d %update^User.INVBatchEpisode.T1(%mmmsqld(2),$c(0,2,0,0),.%data,,'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(7))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(13)=1 %ReleaseLock^User.INVBatchEpisode.T1(%mmmsqld(2)) g %0Ec
%0ECdun 
 d:%mmmsqld(13)=1 %ReleaseLock^User.INVBatchEpisode.T1(%mmmsqld(2)) g:SQLCODE<0 %0Ec
%0EBdun 
%0EAdun 
%0Ec s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(7)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Eerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(13))=1 %ReleaseLock^User.INVBatchEpisode.T1(%mmmsqld(2)) g %0Ec
%0Go n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlTS,%mmmsqlTS2,%mmmsqlZ s $zt="%0Gerr" s %mmmsqld(6)=0 s %mmmsqld(7)=""
 s %mmmsqld(2)=$g(ROWID)
 s SQLCODE=100
 k:'$TLEVEL %0CacheLock If $zu(115,1)=2,'$TLEVEL { s %mmmsqlTS2=1 TSTART } If $zu(115,1) { s %mmmsqlTS=1 TSTART  }
 ; asl MOD# 2
 s %mmmsqld(1)=%mmmsqld(2)
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMCB(%mmmsqld(3),%mmmsqld(4),%mmmsqld(5)))
 e  g %0GBdun
 s %mmmsqld(12)=$$%getlock^User.INVBatchEpisode.T1(%mmmsqld(1)) i '%mmmsqld(12) s SQLCODE=-110 g %0Gc
 ; asl MOD# 3
 s %mmmsqld(3)=$p(%mmmsqld(1),"||"),%mmmsqld(4)=$p(%mmmsqld(1),"||",2),%mmmsqld(5)=$p(%mmmsqld(1),"||",3)
 i %mmmsqld(3)'="",%mmmsqld(4)'="",%mmmsqld(5)'="",$d(^TMCB(%mmmsqld(3),%mmmsqld(4),%mmmsqld(5)))
 e  g %0GCdun
 d %delete^User.INVBatchEpisode.T1(%mmmsqld(1),$c(0,2,0,0),'$g(%mmmsqlTS))
 i 'SQLCODE i $i(%mmmsqld(6))'<$g(%0CacheRowLimit,9223372036854775807) d:%mmmsqld(12)=1 %ReleaseLock^User.INVBatchEpisode.T1(%mmmsqld(1)) g %0Gc
%0GCdun 
 d:%mmmsqld(12)=1 %ReleaseLock^User.INVBatchEpisode.T1(%mmmsqld(1)) g:SQLCODE<0 %0Gc
%0GBdun 
%0GAdun 
%0Gc s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%mmmsqld(6)),1:0)
 If $zu(115,1),$g(%mmmsqlTS) { TCOMMIT:SQLCODE'<0  TROLLBACK:SQLCODE<0 1 } TCOMMIT:SQLCODE=100&&(%ROWCOUNT=0)&&($g(%mmmsqlTS2))&&($zu(115,1)=2)  q
%0Gerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) d:$g(%mmmsqld(12))=1 %ReleaseLock^User.INVBatchEpisode.T1(%mmmsqld(1)) g %0Gc
%0Jo d %INVBP0f q:SQLCODE'=0
 s PLIST(0)=%INVBP0d(1),PLIST(1)=%INVBP0d(2),PLIST(2)=%INVBP0d(3),PLIST(3)=%INVBP0d(4),PLIST(4)=%INVBP0d(5),PLIST(5)=%INVBP0d(6),PLIST(6)=%INVBP0d(7),PLIST(7)=%INVBP0d(8),PLIST(8)=%INVBP0d(9),PLIST(9)=%INVBP0d(10),PLIST(10)=%INVBP0d(11),PLIST(11)=%INVBP0d(12),PLIST(12)=%INVBP0d(13),PLIST(13)=%INVBP0d(14)
 q
%0Lo n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Lerr" s %mmmsqld(20)=0,%mmmsqld(21)=""
 s %mmmsqld(16)=$g(ROWID)
 s SQLCODE=100
 ; asl MOD# 2
 s PLIST(1)=%mmmsqld(16)
 s %mmmsqld(18)=$p(PLIST(1),"||"),%mmmsqld(19)=$p(PLIST(1),"||",2),PLIST(2)=$p(PLIST(1),"||",3)
 i %mmmsqld(18)'="",%mmmsqld(19)'="",PLIST(2)'="",$d(^TMCB(%mmmsqld(18),%mmmsqld(19),PLIST(2)))
 e  g %0LBdun
 s %mmmsqld(26)=$g(^TMCB(%mmmsqld(18),%mmmsqld(19),PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(26),"\",1) s PLIST(4)=$p(%mmmsqld(26),"\",2) s PLIST(10)=$p(%mmmsqld(26),"\",3) s PLIST(11)=$p(%mmmsqld(26),"\",4) s PLIST(12)=$p(%mmmsqld(26),"\",5) s PLIST(13)=$p(%mmmsqld(26),"\",6)
 s PLIST(0)=$p(PLIST(1),"||",1,2)
 s PLIST(5)=$$CT005^at345($g(PLIST(0))) s PLIST(9)=$$CT009^at345($g(PLIST(2))) s PLIST(6)=$$CT006^at345($g(PLIST(0))) s PLIST(8)=$$CT008^at345($g(PLIST(2))) s PLIST(7)=$$CT007^at345($g(PLIST(2)),$g(PLIST(0)))
 g:$zu(115,2)=0 %0LBuncommitted i $zu(115,2)=1 l +^TMCB($p(PLIST(1),"||",1),$p(PLIST(1),"||",2),$p(PLIST(1),"||",3))#"S":$zu(115,4) i $t { s %mmmsqld(20)=1,%mmmsqld(21)=$name(^TMCB($p(PLIST(1),"||",1),$p(PLIST(1),"||",2),$p(PLIST(1),"||",3)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.INV_BatchEpisode for RowID value: "_PLIST(1) ztrap "LOCK"  }
 ; asl MOD# 3
 s %mmmsqld(18)=$p(PLIST(1),"||"),%mmmsqld(19)=$p(PLIST(1),"||",2),PLIST(2)=$p(PLIST(1),"||",3)
 i %mmmsqld(18)'="",%mmmsqld(19)'="",PLIST(2)'="",$d(^TMCB(%mmmsqld(18),%mmmsqld(19),PLIST(2)))
 e  g %0LCdun
 s %mmmsqld(31)=$g(^TMCB(%mmmsqld(18),%mmmsqld(19),PLIST(2)))
 s PLIST(3)=$p(%mmmsqld(31),"\",1) s PLIST(4)=$p(%mmmsqld(31),"\",2) s PLIST(10)=$p(%mmmsqld(31),"\",3) s PLIST(11)=$p(%mmmsqld(31),"\",4) s PLIST(12)=$p(%mmmsqld(31),"\",5) s PLIST(13)=$p(%mmmsqld(31),"\",6)
 s PLIST(0)=$p(PLIST(1),"||",1,2)
 s PLIST(5)=$$CT005^at345($g(PLIST(0))) s PLIST(9)=$$CT009^at345($g(PLIST(2))) s PLIST(6)=$$CT006^at345($g(PLIST(0))) s PLIST(8)=$$CT008^at345($g(PLIST(2))) s PLIST(7)=$$CT007^at345($g(PLIST(2)),$g(PLIST(0)))
%0LBuncommitted ;
 s SQLCODE=0 g %0Lc
%0LCdun i $zu(115,2)=1,$g(%mmmsqld(20))=1 { l -@%mmmsqld(21) s %mmmsqld(20)=0 }
%0LBdun 
%0LAdun 
%0Lc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(20))=1 { l -@%mmmsqld(21) } q
%0Lerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Lc
%0No n %mmmsqlc,%mmmsqld,%mmmsqlE,%mmmsqll,%mmmsqln,%mmmsqlp,%mmmsqlR,%mmmsqls,%mmmsqlt,%mmmsqlZ s $zt="%0Nerr" s %mmmsqld(14)=0,%mmmsqld(15)="",%mmmsqld(16)=0,%mmmsqld(17)=""
 s %mmmsqld(12)=$g(epis)
 s SQLCODE=100
 ; asl MOD# 2
 s %mmmsqld(11)=%mmmsqld(12)
 i %mmmsqld(11)'="",$d(^TEPI(%mmmsqld(11)))
 e  g %0NBdun
 s %mmmsqld(20)=$g(^TEPI(%mmmsqld(11),0))
 s PLIST(99)=$p(%mmmsqld(20),"\",23) s PLIST(100)=$p(%mmmsqld(20),"\",24) s PLIST(101)=$p(%mmmsqld(20),"\",25)
 s %mmmsqld(20)=$g(^TEPI(%mmmsqld(11)))
 s %mmmsqld(1)=$p(%mmmsqld(20),"\",5) s PLIST(3)=$p(%mmmsqld(20),"\",1) s PLIST(4)=$p(%mmmsqld(20),"\",2)
 g:$zu(115,2)=0 %0NBuncommitted i $zu(115,2)=1 l +^TEPI($p(%mmmsqld(11),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(14)=1,%mmmsqld(15)=$name(^TEPI($p(%mmmsqld(11),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.EP_VisitNumber for RowID value: "_%mmmsqld(11) ztrap "LOCK"  }
 ; asl MOD# 3
 i %mmmsqld(11)'="",$d(^TEPI(%mmmsqld(11)))
 e  g %0NCdun
 s %mmmsqld(23)=$g(^TEPI(%mmmsqld(11),0))
 s PLIST(99)=$p(%mmmsqld(23),"\",23) s PLIST(100)=$p(%mmmsqld(23),"\",24) s PLIST(101)=$p(%mmmsqld(23),"\",25)
 s %mmmsqld(23)=$g(^TEPI(%mmmsqld(11)))
 s %mmmsqld(1)=$p(%mmmsqld(23),"\",5) s PLIST(3)=$p(%mmmsqld(23),"\",1) s PLIST(4)=$p(%mmmsqld(23),"\",2)
%0NBuncommitted ;
 s %mmmsqld(2)=%mmmsqld(1)
 i %mmmsqld(2)'="",$d(^TTAB("TTL",%mmmsqld(2)))
 e  s PLIST(7)="",%mmmsqld(2)="" g %0NCp4
 s %mmmsqld(28)=$g(^TTAB("TTL",%mmmsqld(2)))
 s PLIST(7)=$p(%mmmsqld(28),"\",1)
%0NCp4 
 g:$zu(115,2)=0 %0NCuncommitted i $zu(115,2)=1 l +^TTAB("TTL",$p(%mmmsqld(2),"||",1))#"S":$zu(115,4) i $t { s %mmmsqld(16)=1,%mmmsqld(17)=$name(^TTAB("TTL",$p(%mmmsqld(2),"||",1)))_"#""SI""" } else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.CT_Title for RowID value: "_%mmmsqld(2) ztrap "LOCK"  }
 ; asl MOD# 4
 i %mmmsqld(2)'="",$d(^TTAB("TTL",%mmmsqld(2)))
 e  s PLIST(7)="",%mmmsqld(2)="" g %0NDp1
 s %mmmsqld(33)=$g(^TTAB("TTL",%mmmsqld(2)))
 s PLIST(7)=$p(%mmmsqld(33),"\",1)
%0NDp1 
%0NCuncommitted ;
 s SQLCODE=0 g %0Nc
%0NDdun i $zu(115,2)=1,$g(%mmmsqld(16))=1 { l -@%mmmsqld(17) s %mmmsqld(16)=0 }
%0NCdun i $zu(115,2)=1,$g(%mmmsqld(14))=1 { l -@%mmmsqld(15) s %mmmsqld(14)=0 }
%0NBdun 
%0NAdun 
%0Nc s %ROWCOUNT='SQLCODE i $zu(115,2)=1,$g(%mmmsqld(14))=1 { l -@%mmmsqld(15) } i $zu(115,2)=1,$g(%mmmsqld(16))=1 { l -@%mmmsqld(17) } q
%0Nerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) g %0Nc
]]></Routine>
</Export>
