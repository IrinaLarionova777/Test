<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.ObjectExportImport">
<Description>
Exports a (persistent) object to a xml file.</Description>
<Super>ExportImportAbstract</Super>
<TimeCreated>60968,62427.561724</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<Parameter name="SOURCESELECTIONCLASS">
<Default>SyncTool.ObjectSelection</Default>
</Parameter>

<Parameter name="SOURCEOBJECTSCOMPILEABLE">
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="DISPLAYNAME">
<Default>XML files for persistent objects</Default>
</Parameter>

<Method name="Export">
<Description>
Exports an object to a xml file</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&iFilename:%String,iSrcObjects:%ArrayOfObjects,iFlags:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Namespace as %String

	Q:$G(iFilename)="" $system.Status.Error(5008)

	S Writer=##class(%XML.Writer).%New()
	S Writer.Charset="UTF-8"
	S Writer.Indent=1
	#dim Status as %Status = Writer.OutputToStream(.tmpStream)
	Q:'Status Status
	S Status=Writer.RootElement("Objects")
	Q:'Status Status
	#dim Initialized as %Boolean = 0

	S ObjKey=""
	F  
	{
		#dim SrcObject as SrcObject = iSrcObjects.GetNext(.ObjKey)
		Q:ObjKey=""
		#dim OID as %ObjectIdentity = SrcObject.GetObjectName()
		#;I $List(OID,2)="User.Form" s ^UARI($ZU(188))=$LB("Exporting",OID)

		I 'Initialized
		{
			S Namespace=SrcObject.File.Module.Namespace
			I Namespace'="",'$D(ThisNS) S ThisNS=$ZNSpace
			#dim ClassName as %Dictionary.CacheClassname = $List(OID,2)

			#;Check if class ID is projected for XML export or has a manually defined IdKey.
			#;http://docs.intersystems.com/cache20082/csp/docbook/DocBook.UI.Page.cls?KEY=GXML_proj_options_chapter#GXML_proj_cache_ids
			I ..FindIDProperty(ClassName,Namespace)=""
				,('..ManualIDKEY(ClassName,Namespace))
			{
				S Status=$system.Status.Error(5001,"Class "_ClassName_": Only XML projected GUID or manual IDKEY supported.")
				Quit
			}

			I $TR($E(iFilename,$L(iFilename)),"\","/")="/" ;Directory given
			{
				S iFilename=iFilename_..Objectname2Filename(OID,SrcObject.SourceSelection,Namespace)
			}

			I Namespace'="" ZN Namespace
			S TagName=$ZObjClassMethod(ClassName,"%GetParameter","XMLNAME")
			S GUIDENABLED=$ZObjClassMethod(ClassName,"%GetParameter","GUIDENABLED")
			I Namespace'="" ZN ThisNS
			I TagName="" S TagName=ClassName
			I ..FindIDProperty(ClassName,Namespace)'=""
				,('..ManualIDKEY(ClassName,Namespace)),'GUIDENABLED
			{
				S Status=$system.Status.Error(5001,"Class "_ClassName_" is not GUID enabled.")
				Quit
			}

			S Initialized=1
		}

		I Namespace'="" ZN Namespace
		S Object=##class(%Persistent).%Open(OID)
		S Status=Writer.Object(Object,TagName)
		S Object=""
		I Namespace'="" ZN ThisNS
		Q:'Status
	}
	Q:'Status Status
	S Status=Writer.EndRootElement()
	Q:'Status Status
	I ##class(%File).GetFilename(iFilename)'=""
	{
		S Stream=##class(%FileBinaryStream).%New()
		S Stream.Filename=iFilename
		S Status=Stream.CopyFromAndSave(tmpStream)
	}
	Q Status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod GetObjectGroup(iTem As %String) As %String
{
	If $Extract($ZConvert(iTem,"l"),1,)="select" Quit "object"
	Quit ##super()
}
*/
]]></Content>
</UDLText>

<Method name="Objectname2Filename">
<ClassMethod>1</ClassMethod>
<FormalSpec>iOID:%Binary,iSourceSelection:ObjectSelection,iNamespace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Quit:'$Data(iSourceSelection) ""
	#;Quit:'$IsObject(iSourceSelection) ""

	#dim ID as %String = $List(iOID,1)
	#dim ClassName as %Dictionary.CacheClassname = $List(iOID,2)
	#dim Filename as %String = ClassName
	If $IsObject(iSourceSelection),iSourceSelection.GroupObjectsBy'="ALL"
	{
		If iSourceSelection.GroupObjectsBy=""!(iSourceSelection.GroupObjectsBy="ID")
		{
			#dim IDPropID as %String = ..FindIDProperty(ClassName,iNamespace)
			If IDPropID'="" Set IDProp=##class(%Dictionary.CompiledProperty).%OpenId(IDPropID)
			If IDPropID=""||($IsObject(IDProp)&&(IDProp.Type'="%XML.GUID"))
			{
				Set Filename=Filename_"."_..EncodeFilename(ID)
			}
			Else
			{
				If iNamespace'="" Set ThisNS=$ZNSpace ZN iNamespace
				Set Filename=Filename_"."_..EncodeFilename(##class(%Persistent).%GUID(iOID))
				If iNamespace'="" ZN ThisNS
			}
		}
		Else
		{
			If iNamespace'="" Set ThisNS=$ZNSpace ZN iNamespace
			Set Object=##class(%Persistent).%Open(iOID)
			Set GroupStr=""
			For J=1:1:$Length(iSourceSelection.GroupObjectsBy,",")
			{
				Set PropName=$Piece(iSourceSelection.GroupObjectsBy,",",J)
				If $IsValidNum(PropName)!($Extract(PropName)="""")
				{
					Set $Piece(GroupStr,"||",J)=PropName
				}
				Else
				{
					Set Value=$ZObjProperty(Object,PropName)
					If $IsObject(Value) {Set Value=Value.%Id()}
					Set $Piece(GroupStr,"||",J)=Value
				}
			}
			Set Object=""
			If iNamespace'="" ZN ThisNS
			Set Filename=Filename_"."_..EncodeFilename(GroupStr)
		}
	}
	Set Filename=Filename_".xml"
	Quit Filename
]]></Implementation>
</Method>

<Method name="EncodeFilename">
<ClassMethod>1</ClassMethod>
<FormalSpec>iString:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set NewString=iString
	For I="|","\","/",":","*","?","""","<",">","."
	{
		Set HexChar=$ZHex($Ascii(I))
		Set NewString=$Replace(iString,I,"%"_HexChar)
	}
	Quit NewString
]]></Implementation>
</Method>

<Method name="ObjectExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>iOID:%Binary,iNamespace:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ThisNS=$ZNSpace
	If iNamespace'="" ZN iNamespace
	Set Exists=##class(%Persistent).%Exists(iOID)
	If iNamespace'="" ZN ThisNS
	#;s ^UARI($ZTS,"ObjectExists")=$Lb(Exists,iOID)
	Quit Exists
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* ;130210
/// Returns 1 if iFile1 and iFile2 are different.
ClassMethod FileDiff(
	iFile1 As %String,
	iFile2 As %String) As %Boolean
{
	If ##class(%File).GetFileSize(iFile1)'=##class(%File).GetFileSize(iFile2) Quit 1
	Set File1=##class(%FileCharacterStream).%New()
	Set File1.Filename=iFile1
	Set File2=##class(%FileCharacterStream).%New()
	Set File2.Filename=iFile2
	Set Diff=0
	While 'File1.AtEnd & 'File2.AtEnd & 'Diff
	{
		Set Diff = '(File1.ReadLine()=File2.ReadLine())
	}
	Quit Diff
}
*/
]]></Content>
</UDLText>

<Method name="ManualIDKEY">
<ClassMethod>1</ClassMethod>
<FormalSpec>iClassName:%Dictionary.CacheClassname,iNamespace:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set IDKEYid=..FindIDKEY(.iClassName,.iNamespace)
	Quit (IDKEYid'="")
]]></Implementation>
</Method>

<Method name="FindIDKEY">
<ClassMethod>1</ClassMethod>
<FormalSpec>iClassName:%Dictionary.CacheClassname,iNamespace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#;S ManualIDKEY=..IDKEYInfoCache.GetAt(iClassName)
	S Namespace=$ZNSpace
	I iNamespace'="" S Namespace=iNamespace
	S ManualIDKEY=$G(^||SyncTool.ObjectExportImport("IDKEYInfoCache",Namespace,iClassName))
	I ManualIDKEY=""
	{
		S ManualIDKEY=""
		I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
		S CD=##class(%Dictionary.ClassDefinition).%OpenId(iClassName)
		S IndexKey=""
		F  
		{
			S Index=CD.Indices.GetNext(.IndexKey)
			Q:IndexKey=""
			I Index.IdKey S ManualIDKEY=Index.%Id() Q
		}
		S Index="",CD=""
		I iNamespace'="" ZN ThisNS
		S ^||SyncTool.ObjectExportImport("IDKEYInfoCache",Namespace,iClassName)=ManualIDKEY
	}
	Quit ManualIDKEY
]]></Implementation>
</Method>

<Method name="FindIDProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>iClassName:%Dictionary.CacheClassname,iNamespace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim Namespace as %String = $ZNSpace
	I iNamespace'="" S Namespace=iNamespace
	#dim IDProperty=$G(^||SyncTool.ObjectExportImport("IDPropertyInfoCache",Namespace,iClassName))
	I IDProperty=""
	{
		S IDProperty=""
		I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
		S CC=##class(%Dictionary.CompiledClass).%OpenId(iClassName)
		#dim PropKey as %String = ""
		F  
		{
			#dim Prop as %Dictionary.CompiledProperty=CC.Properties.GetNext(.PropKey)
			Q:PropKey=""
			I $Case(Prop.Type,"%XML.Id":1,"%XML.Oid":1,"%XML.GUID":1,:0)
			{
				S IDProperty=Prop.%Id()
				Quit
			}
		}
		S Prop="",CC=""
		I iNamespace'="" ZN ThisNS
		S ^||SyncTool.ObjectExportImport("IDPropertyInfoCache",Namespace,iClassName)=IDProperty
	}
	Quit IDProperty
]]></Implementation>
</Method>

<Method name="Import">
<Description><![CDATA[
Imports an object from a XML file that was previously exported with ##class(SyncTool.ObjectExportImport).Export()<br>
<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&ioId="",iNamespace:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Q:$G(iFilename)="" $system.Status.Error(5008)
	#;070509 Q:'##class(%File).Exists(iFilename) $system.Status.Error(5012,iFilename)
	#dim Status as %Status = $$$OK
	#;f  q:'$d(^debug)  h 1
	#dim ClassName as %Dictionary.CacheClassname = ..ClassnameFromFilename(iFilename)
	#dim GUIDPropName as %Dictionary.CacheIdentifier = ""
	#dim Objects as %ArrayOfObjects

	S Status=..BuildObjectsFromFile(.iFilename,.Objects,.iNamespace)
	#;s ^UARI($ZU(188))=Status
	Q:'Status Status

	I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
	#dim IDPropID as %String = ..FindIDProperty(ClassName,iNamespace)
	I IDPropID'=""
	{
		S IDProp=##class(%Dictionary.CompiledProperty).%OpenId(IDPropID)
		I IDProp.Type="%XML.GUID"
		{
			Set GUIDPropName=IDProp.Name
		}
	}
	S Key=""
	F  
	{
		#dim Object as %Persistent = Objects.GetNext(.Key)
		Q:Key=""
		#;I iNamespace'="" ZN ThisNS
		S OID=$ListBuild(..BuildID(ClassName,Object,.iNamespace),ClassName)
		#;I iNamespace'="" ZN iNamespace
		I ##class(%Persistent).%Exists(OID) S Status=##class(%Persistent).%Delete(OID)
		#;s ^UARI($ZU(188))=Status
		Q:'Status
		#;S GUID=$G(^||SyncTool.ObjectExportImport("GUID",OID))
		I GUIDPropName'="" S %objGUID(+Object)=$ZObjProperty(Object,GUIDPropName)
		#;s ^UARI($ZU(188))=$g(%objGUID(+Object))
		S Status=Object.%Save()
		I $D(%objGUID(+Object)) K %objGUID(+Object)
		Q:'Status
		S ioId(Object.%Oid())=""
	}
	S (Object,Objects)=""
	I iNamespace'="" ZN ThisNS
	Q Status
]]></Implementation>
</Method>

<Method name="BuildID">
<ClassMethod>1</ClassMethod>
<FormalSpec>iClassName:%Dictionary.CacheClassname,iObject:%Persistent,iNamespace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Dim ID as %String = ""

	S IDKEYid=..FindIDKEY(.iClassName,.iNamespace)
	I IDKEYid=""
	{
		#dim IDPropID as %String = ..FindIDProperty(.iClassName,iNamespace)
		I IDPropID'=""
		{
			S IDProp=##class(%Dictionary.CompiledProperty).%OpenId(IDPropID)
			I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
			I IDProp.Type="%XML.GUID"
			{
				Set GUID=$ZObjProperty(iObject,IDProp.Name)
				Set OID=##class(%GUID).%GUIDFind(GUID)
				If OID'="" {Set ID=$List(OID,1)}
				Else {} ;...
			}
			I iNamespace'="" ZN ThisNS
		}
	}
	Else
	{
		I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
		S IDKEY=##class(%Dictionary.IndexDefinition).%OpenId(IDKEYid)
		S ID=""
		F I=1:1:$L(IDKEY.Properties,",")
		{
			S $P(ID,"||",I)=$ZObjProperty(iObject,$P(IDKEY.Properties,",",I))
		}
		I iNamespace'="" ZN ThisNS
	}
	Q ID
]]></Implementation>
</Method>

<Method name="Filename2Objectname">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&oObjectNames]]></FormalSpec>
<Implementation><![CDATA[
	Set Classname=$Piece(iFilename,".",1,$Length(iFilename,".")-2)
	Set ID=$Piece(iFilename,".",$Length(iFilename,".")-1)
	For I="|","\","/",":","*","?","""","<",">","."
	{
		Set HexChar=$ZHex($Ascii(I))
		Set ID=$Replace(ID,"%"_HexChar,I)
	}
	If ID ? 8E1"-"4E1"-"4E1"-"4E1"-"12E ;It's a GUID
	{
		Set OID=##class(%GUID).%GUIDFind(ID)
	}
	Else {Set OID=$ListBuild(ID,Classname)}
	If OID'="" Set oObjectNames(OID)=""
	Quit
]]></Implementation>
</Method>

<Method name="GetImportableFileMask">
<ClassMethod>1</ClassMethod>
<FormalSpec>iModule:Module</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "*.xml"
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod ImportDeleted(
	iFilename As %String,
	iSrcObjects As %ArrayOfObjects,
	iNamespace As %String = "") As %Status
*/
]]></Content>
</UDLText>

<Method name="DeleteSources">
<ClassMethod>1</ClassMethod>
<FormalSpec>iSrcObjects:%ArrayOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#;s ^UARI($ZU(188))=iSrcObjects.Count()
	#dim Status as %Status = $$$OK
	#dim Namespace as %String
	S Key=""
	F  
	{
		#dim SrcObject as SrcObject = iSrcObjects.GetNext(.Key)
		Q:Key=""

		I '$D(Namespace) S Namespace = SrcObject.File.Module.Namespace
		I Namespace'="" S ThisNS=$ZNSpace ZN Namespace
		S OID=SrcObject.GetObjectName()
		#;S GUID=##class(%Persistent).%GUID(OID)
		#;I GUID'="" S ^||SyncTool.ObjectExportImport("GUID",OID)=GUID
		S Status=##class(%Persistent).%Delete(OID)
		I Namespace'="" ZN ThisNS
		#;s ^UARI($ZU(188))=$lb(Status,SrcObject.%Id())
		#;s ^UARI($ZU(188))=$lb("Deleted",SrcObject.%Id(),OID,Status)
		Q:'Status
	}
	Q Status
]]></Implementation>
</Method>

<Method name="BuildObjectsFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>iFilename:%String,oBjects:%ArrayOfObjects,iNamespace:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Q:'##class(%File).Exists(iFilename) $system.Status.Error(5012,iFilename)
	S Status=$$$OK
	S ClassName=..ClassnameFromFilename(iFilename)

	I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
	S TagName=$ZObjClassMethod(ClassName,"%GetParameter","XMLNAME")
	I TagName="" S TagName=ClassName

	S oBjects=##class(%ArrayOfObjects).%New()
	S Key=1
	S Reader = ##class(%XML.Reader).%New()
	S Status=Reader.OpenFile(iFilename)
	I 'Status ZN:iNamespace'="" ThisNS Q Status
	D Reader.Correlate(TagName,ClassName)
	While Reader.Next(.Object,.Status)
	{
		Q:'Status
		S Status=oBjects.SetAt(Object,Key)
		Q:'Status
		S Key=Key+1
	}
	S (Reader,Object)=""
	I iNamespace'="" ZN ThisNS
	Q Status
]]></Implementation>
</Method>

<Method name="ClassnameFromFilename">
<ClassMethod>1</ClassMethod>
<FormalSpec>iFilename:%String</FormalSpec>
<ReturnType>%Dictionary.CacheClassname</ReturnType>
<Implementation><![CDATA[
	S ClassName=##class(%File).GetFilename(iFilename)
	I $ZCVT($P(ClassName,".",$L(ClassName,".")),"l")="xml"
	{
		S ClassName=$P(ClassName,".",1,$L(ClassName,".")-1)
	}
	F  
	{
		Q:##class(%Dictionary.CompiledClass).%ExistsId(ClassName)
		S ClassName=$P(ClassName,".",1,$L(ClassName,".")-1)
	}
	Q ClassName
]]></Implementation>
</Method>

<Method name="GetObjectVersion">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iSrcObject:SrcObject,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	#dim Version as %Integer = ""
	#dim OID as %ObjectIdentity = iSrcObject.GetObjectName()
	#dim ClassName as %String = $List(OID,2)
	#dim Namespace as %String = iSrcObject.File.Module.Namespace

	If Namespace'="" Set ThisNS=$ZNSpace ZN Namespace
	#dim VersionProp as %String = $ZObjClassMethod(ClassName,"%GetParameter","VERSIONPROPERTY")
	If VersionProp'=""
	{
		#dim Object as %Persistent = $system.OBJ.Open(ClassName,OID)
		Set Version=$ZObjProperty(Object,VersionProp)
		Set Object=""
	}
	If Namespace'="" ZN ThisNS

	Quit Version
]]></Implementation>
</Method>

<Method name="FindSourceSelection">
<Description>
Find the source selection for the given source object. This method is used
to speed up the retrievement of the source selection object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iSrcObject:SrcObject,&oStatus]]></FormalSpec>
<ReturnType>SourceSelection</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	Set ClassName=$List(iSrcObject.GetObjectName(),2)
	Quit:ClassName="" $$$NULLOREF
	#dim Module as Module = iSrcObject.File.Module
	#dim SS as ObjectSelection = $$$NULLOREF
	Set Key=""
	For  
	{
		Set SS = Module.SourceSelection.GetNext(.Key)
		Quit:Key=""
		If SS.Type=ClassName
		{
			Set oStatus=##class(SyncTool.GUI.ObjectSelection).ExpandSelection(Module.Namespace,SS.SQL,ClassName,.ExpandedSelection)
			If oStatus {Quit:$Data(ExpandedSelection(iSrcObject.GetObjectName()))}
			Else {Set SS=$$$NULLOREF Quit}
		}
	}
	Quit SS
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>
</Export>
