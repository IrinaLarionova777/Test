<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.SyncManager">
<Super>%Persistent</Super>
<TimeCreated>61551,61451.936116</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<Property name="Error">
<Description>
Holds a possible error happened during synchronization.</Description>
<Type>%Status</Type>
</Property>

<Property name="Tasks">
<Description>
Collection of tasks to run by the synchronization manager.</Description>
<Type>SyncTask</Type>
<Collection>array</Collection>
</Property>

<Property name="ImportedObjects">
<Description>
Holds the source objects imported during synchronization task(s).</Description>
<Type>ImportedObject</Type>
<Collection>array</Collection>
</Property>

<Property name="Collisions">
<Description>
Saves the files where collisions are found during synchronization task(s).</Description>
<Type>Collision</Type>
<Cardinality>children</Cardinality>
<Inverse>SyncManager</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="CountExported">
<Description>
Number of exported files.</Description>
<Type>%Integer</Type>
</Property>

<Property name="CountImported">
<Description>
Number of imported managed files.</Description>
<Type>%Integer</Type>
</Property>

<Property name="CountImportedUnmanaged">
<Description>
Number of imported unmanaged files.</Description>
<Type>%Integer</Type>
</Property>

<Method name="NewTasks">
<Description><![CDATA[
Create new tasks for the synchronization manager.
<pre>
iObjects    = Collection of objects. For each object a task is created.
iMethodName = Name of method (not class method) to call on one object instance.
iSequence   = The sequence number in which order the tasks are to be called.
              If many tasks with different sequence numbers are created, the
              synchronazition manager waits to call tasks until all tasks with
              previous sequence numbers are finished.
iExecute    = A COS expression that will be called before the method is started.
MethodArgs  = Arguments that will be passed to the method.
</pre>]]></Description>
<FormalSpec>iObjects:%ArrayOfObjects,iMethodName:%Dictionary.CacheIdentifier,iSequence:%Integer,iExecute:%String,MethodArgs...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Key=""
	For  
	{
		Set Object=iObjects.GetNext(.Key)
		Quit:Key=""
		Continue:Object.Type'=""
		Set Task=##class(SyncTask).%New()
		Set Task.ObjectID=Object.%Oid()
		Set Task.MethodName=iMethodName
		Set Task.Sequence=iSequence
		Set Task.OnCreateObjectAfter=iExecute
		Set ArgNr=""
		For  Set ArgNr=$Order(MethodArgs(ArgNr)) Quit:ArgNr=""  Do Task.Arguments.SetAt(MethodArgs(ArgNr),ArgNr)
		Set LastKey=..Tasks.Previous("")
		Do ..Tasks.SetAt(Task,LastKey+1)
	}
	Set Status=..%Save()
	If 'Status ZT
	Quit Status
]]></Implementation>
</Method>

<Method name="SetError">
<Description>
Saves an error in the synchronization manager.</Description>
<FormalSpec>iStatus:%Status</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Error=iStatus
	Quit ..%Save()
]]></Implementation>
</Method>

<Method name="SetErrorStatic">
<Description>
Static method for SetError()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iManagerID:%String,iStatus:%Status</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Lock +^SyncTool.SyncManager(iManagerID):10
	If '$Test Quit $system.Status.Error(5001,"Could not lock SyncManager with ID "_iManagerID)
	Set Manager=..%OpenId(iManagerID,,.Status)
	Quit:'Status Status
	Set Status=Manager.SetError(iStatus)
	Lock -^SyncTool.SyncManager(iManagerID)
	Quit Status
]]></Implementation>
</Method>

<Method name="GetTaskAndSetStarted">
<Description><![CDATA[
Return the next task that can be started and sets the state to "started".
<pre>
iManagerID = ID of a synchronization manager object.
oRun       = Return value if the task can be started or not.
oStatus    = Return status of this method
</pre>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iManagerID:%String,&oRun:%Boolean=0,&oStatus:%Status=$$$OK]]></FormalSpec>
<ReturnType>SyncTask</ReturnType>
<Implementation><![CDATA[
	Lock +^SyncTool.SyncManager(iManagerID):10
	If '$Test
	{
		Set oStatus=$system.Status.Error(5001,"Could not lock SyncManager with ID "_iManagerID)
		Quit $$$NULLOREF
	}
	Set Task=$$$NULLOREF
	Set RS=##class(%ResultSet).%New(..%ClassName(1)_":TasksToRun")
	Set oStatus=RS.Execute(iManagerID)
	If oStatus,RS.Next()
	{
		Set Task=##class(SyncTask).%OpenId(RS.Data("TaskID"))
		Set oRun=RS.Data("Run")

		If oRun
		{
			Set Task.StartedAt=$ZDateTime($Horolog,3)
			Set oStatus=Task.%Save()
		}
	}
	Lock -^SyncTool.SyncManager(iManagerID)

	Quit Task
]]></Implementation>
</Method>

<Method name="TaskSetFinished">
<Description>
Set the state of given task to "finished".</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iManagerID:%String,iTask:SyncTask</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Lock +^SyncTool.SyncManager(iManagerID):10
	If '$Test Quit $system.Status.Error(5001,"Could not lock SyncManager with ID "_iManagerID)
	Set iTask.FinishedAt=$ZDateTime($Horolog,3)
	Set Status=iTask.%Save()
	Lock -^SyncTool.SyncManager(iManagerID)
	Quit Status
]]></Implementation>
</Method>

<Query name="TasksToRun">
<Description>
A query used by GetTaskAndSetStarted() to find the startable tasks in the task queue</Description>
<Type>%Query</Type>
<FormalSpec>iManagerID:%Integer</FormalSpec>
<Parameter name="ROWSPEC" value="TaskID:%String,Run:%Boolean"/>
</Query>

<Method name="TasksToRunExecute">
<Description>
The execute method of query TasksToRun()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,iManagerID:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Manager=..%OpenId(iManagerID)
	Set qHandle=##class(%ResultSet).%New("%DynamicQuery:SQL")
	Set SQL="select Tasks->%ID from "_..%PackageName()_".SyncManager_Tasks"
		_" where SyncManager='"_$Select(Manager.Error'="":"dummy",1:iManagerID)_"'" ;Dummy ID so nothing will be found
		_ "order by Tasks->Sequence"
	Set Status=qHandle.Prepare(SQL)
	Quit:'Status Status
	Set Status=qHandle.Execute()
	Quit Status
]]></Implementation>
</Method>

<Method name="TasksToRunClose">
<Description>
The close method of query TasksToRun()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>TasksToRunExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TasksToRunFetch">
<Description>
The fetch method of query TasksToRun()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>TasksToRunExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Run=1
	If qHandle.Next()
	{
		While 1
		{
			Set Task=##class(SyncTask).%OpenId(qHandle.Data("ID"))
			Set PrevSeq=$Order(qHandle("Seq",Task.Sequence),-1)
			If PrevSeq'=""
			{
				If $List(qHandle("Seq",PrevSeq),1)>$List(qHandle("Seq",PrevSeq),3) Set Run=0
				If $List(qHandle("Seq",PrevSeq),2)'=$List(qHandle("Seq",PrevSeq),3) Set Run=0
			}
			Set $List(qHandle("Seq",Task.Sequence),1)=$ListGet($Get(qHandle("Seq",Task.Sequence)),1)+1
			Set $List(qHandle("Seq",Task.Sequence),2)=$ListGet($Get(qHandle("Seq",Task.Sequence)),2)+(Task.StartedAt'="")
			Set $List(qHandle("Seq",Task.Sequence),3)=$ListGet($Get(qHandle("Seq",Task.Sequence)),3)+(Task.FinishedAt'="")
			Quit:Task.StartedAt=""
			If 'qHandle.Next() Set AtEnd=1 Quit
		}
		If 'AtEnd Set Row=$ListBuild(qHandle.Data("ID"),Run)
	}
	Else
	{
		Set AtEnd=1
	}
	If AtEnd Set Row=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Test">
<Description>
Test method for query TasksToRun()</Description>
<ClassMethod>1</ClassMethod>
<PublicList>ManagerID</PublicList>
<Implementation><![CDATA[
	Set wd=##class(WorkingDirectory).%OpenId(1)
	Set Status=wd.SyncParallelized()
	If 'Status D $system.Status.DisplayError(Status) Q

	Set StartTask=""
	Write "-------------------------- nichts gelaufen",!
	Set RS=##class(%ResultSet).%New(..%ClassName(1)_":TasksToRun")
	Set Status=RS.Execute(ManagerID)
	If 'Status D $system.Status.DisplayError(Status) Q
	While RS.Next()
	{
		Set Task=##class(SyncTask).%OpenId(RS.Data("TaskID"))
		Write RS.Data("Run")," ",Task.Sequence," ",Task.MethodName," ",Task.StartedAt
			," ",Task.FinishedAt," ",##class(%Persistent).%Open(Task.ObjectID).SubDirectory,!
		
		If RS.Data("Run"),StartTask="" Set StartTask=Task
	}

	Set StartTask.StartedAt=$ZDT($H,3)
	Set Status=StartTask.%Save()
	If 'Status D $system.Status.DisplayError(Status) Q

	Set StartTask=""
	Write "-------------------------- ein Task gestartet",!
	Set RS=##class(%ResultSet).%New(..%ClassName(1)_":TasksToRun")
	Set Status=RS.Execute(ManagerID)
	If 'Status D $system.Status.DisplayError(Status) Q
	While RS.Next()
	{
		Set Task=##class(SyncTask).%OpenId(RS.Data("TaskID"))
		Write RS.Data("Run")," ",Task.Sequence," ",Task.MethodName," ",Task.StartedAt
			," ",Task.FinishedAt," ",##class(%Persistent).%Open(Task.ObjectID).SubDirectory,!
		
		If RS.Data("Run") Set Task.StartedAt=$ZDT($H,3) Set Status=Task.%Save() If 'Status D $system.Status.DisplayError(Status) ZT
	}

	Set StartTask=""
	Write "-------------------------- alle Tasks aus Sequence 1 gestartet",!
	Set RS=##class(%ResultSet).%New(..%ClassName(1)_":TasksToRun")
	Set Status=RS.Execute(ManagerID)
	If 'Status D $system.Status.DisplayError(Status) Q
	While RS.Next()
	{
		Set Task=##class(SyncTask).%OpenId(RS.Data("TaskID"))
		Write RS.Data("Run")," ",Task.Sequence," ",Task.MethodName," ",Task.StartedAt
			," ",Task.FinishedAt," ",##class(%Persistent).%Open(Task.ObjectID).SubDirectory,!
		
		;If RS.Data("Run") Set Task.StartedAt=$ZDT($H,3) Set Status=Task.%Save() If 'Status D $system.Status.DisplayError(Status) ZT
	}
	
	&sql(update SyncTask set finishedat=current_timestamp where sequence=1
	        and %ID in (select Tasks->%ID from SyncManager_Tasks where SyncManager=:ManagerID))

	Set StartTask=""
	Write "-------------------------- alle Tasks aus Sequence 1 beendet",!
	Set RS=##class(%ResultSet).%New(..%ClassName(1)_":TasksToRun")
	Set Status=RS.Execute(ManagerID)
	If 'Status D $system.Status.DisplayError(Status) Q
	While RS.Next()
	{
		Set Task=##class(SyncTask).%OpenId(RS.Data("TaskID"))
		Write RS.Data("Run")," ",Task.Sequence," ",Task.MethodName," ",Task.StartedAt
			," ",Task.FinishedAt," ",##class(%Persistent).%Open(Task.ObjectID).SubDirectory,!

		#;If RS.Data("Run") Set Task.StartedAt=$ZDT($H,3) Set Status=Task.%Save() If 'Status D $system.Status.DisplayError(Status) ZT
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CacheTemp.SyncTool.SyncManagerD</DataLocation>
<DefaultData>SyncManagerDefaultData</DefaultData>
<IdLocation>^CacheTemp.SyncTool.SyncManagerD</IdLocation>
<IndexLocation>^CacheTemp.SyncTool.SyncManagerI</IndexLocation>
<StreamLocation>^CacheTemp.SyncTool.SyncManagerS</StreamLocation>
<Data name="Collisions">
<Attribute>Collisions</Attribute>
<Structure>subnode</Structure>
<Subscript>"Collisions"</Subscript>
</Data>
<Data name="ImportedObjects">
<Attribute>ImportedObjects</Attribute>
<Structure>subnode</Structure>
<Subscript>"ImportedObjects"</Subscript>
</Data>
<Data name="SyncManagerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Error</Value>
</Value>
<Value name="3">
<Value>CountExported</Value>
</Value>
<Value name="4">
<Value>CountImported</Value>
</Value>
<Value name="5">
<Value>CountImportedUnmanaged</Value>
</Value>
</Data>
<Data name="Tasks">
<Attribute>Tasks</Attribute>
<Structure>subnode</Structure>
<Subscript>"Tasks"</Subscript>
</Data>
</Storage>
</Class>
</Export>
