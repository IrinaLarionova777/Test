<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.WorkingDirectory">
<Description>
Describes a working directory</Description>
<Super>%Persistent</Super>
<TimeCreated>60811,42785.988109</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
+------------+
| Change log |
+------------+

SyncTool 0.6:
+ (240309) Modulkompilierung anschauen. Ist irgendwie nicht durchgaengig
+ (240309) ExportNeeded von ObjectExport verbessern.
+ (250309) Export- und Import-Klassen zusammenfassen
+ (260309) Die Labels in der ZenPage verbessern (nicht eigenstaendige Komponenten)
+ (260309) Wenn SourceSelection verlassen wird, die SourceSelection-Summary aktualisieren.
+ (260309) Button "New Module" implementieren.
+ (270309) Ueberfluessige Klassen nach Zusammenfuehrung Export/Import entfernen.
+ (300309) In der StudioObjectSelection den Typ "add" und "remove" durch Dropdown-Box realisieren.
+ (310309) GUI ObjectSelection verbessern
  - DropDown fuer Klasse anhand SQL-Abfrage
  - Liste der GroupBy-Spalte bequemer eingeben - wenigstens validieren.
+ (170409) Make a sample of custom source objects
+ (260309) SourceSelection Edit-Button enablen, wenn neues Modul gespeichert wird.
  + (160409) weiterer Klick auf Edit funktioniert nicht, weil gespeichertes Modul in der 
    tablePane nicht selektiert ist.
+ (270409) Better Studio integration
+ (290409) Nicer ZEN GUI (more CSS)
+ (070309 Export/Import aus anderen Namespaces
  - Studio-Integration wird nicht moeglich sein!!!
+ (080509) In Klasse ObjectExportImport Methode ImportDeleted implementieren.
+ (110509) dynaGrid neue Zeile dynamisch ein-/ausblenden.
+ (270509) Compare-Methode von %File-Klasse benutzen.
+ (280509) Methoden IsSynchronized und HasToBeSynchronized implementieren
  und Methode SouceControl.Studio:UserAction ersetzen...
+ (040609) Wenn Source-Objekt aus Studio heraus geloescht wird, vorher ein Backup machen.
+ (040609) Im Studio Im- und Exportmenues einbauen.
+ (080609) Extern geloeschte Datei wird nicht in File-Klasse aufgenommen.
  D. h., wird immer wieder gelöscht.
+ (090609) Namespace-Selektion via Drop-Down-Box
+ (090609) Ermittlung des Targets fuer die Anwahl der SC-Verwaltung dynamisch gestalten
+ (160609) "Type" in Quellobjekt-Selektion nach "Selection type" umbenennen.
+ (160609) Bei Wechsel von Quellobjekttyp eine Meldung bringen, dass damit die Quellobjekt-
  Selektion gelöscht wird. Bei Bejahung diese auch löschen.
+ (160609) Namespace "" wird nicht gespeichert.
+ (160609) <UNDEFINED> bei Wechsel des "Selection type"
+ (190609) Bei Bearbeitung von Hochkommas in SQL-Statement in Quellobjekt-Selektion
  erscheint im IE &quot;
+ (250609) Andere Routinentypen (*.bas, *.mvb, *.mvi, *.inc, *.int) testen.
  - *.bas OK
  - *.inc OK
  - *.int OK
  - *.mvb OK
  - *.mvi laesst sich nicht importieren. Halte das fuer einen Cache-Bug.
  - Routinentypen bas, inc, int, mac noch ein Mal mit RoutineExportImport testen. - OK
+ (250609) In edit source selection die IDs von vorhandenen Eintraegen in versteckten Feldern
  mitschleppen und beim Speichern wieder benutzen.
+ (250609) In StudioObjectSelection Selection Type "add" automatisch eintragen.
+ (250609) In StudioObjectSelection die zugelassenen Routinentypen bei Eingabe validieren.
+ (290609) Preview in SourceSelection-Formularen abschaltbar machen.
+ (290609) In SourceSelection-Formularen die Ausrichtung der DynaGrid anpassen.
+ (010709) Beim Resizen des Fensers "Source selection" die enthaltenen Komponenten auch aendern.
  - Feinschliff mit mehr Selektion steht noch aus.
+ (020709) SameFile-Caching aus GlobalExportImport in ObjectExportImport einbauen.
+ (020709) Modul nach Speichern neu laden. Das aktualisiert die Anzeige der SourceSelection
+ (030709) Bezeichnungen in der UI benutzerfreundlicher gestaltet.
+ (030709) Wenn Working-Directory geändert wird, Seite neu laden.
+ (070709) Locking auf WD-Ebene eingebaut.
+ (090709) Dateien von Quellobjekten, die kein DateModified liefern, werden jetzt
  gehasht.
+ (240809) Geschwindigkeitsverbesserungen durch folgende Maßnahmen:
  - parallelisierer Sync-Task
  - Ein Sync-Vorgang mit einem einmaligen RefreshSelectedObjects
+ (240809) Statt Im- und Export-Buttons lieber einen Sync-Button 
  mit Anzeige moeglicher Konflikte (falls Objekt sowohl in Cache
  als auch per Datei geaendert wurde)? Dennoch braucht man als erweiterte
  Funktionalität auch die Möglichkeit, einzeln exportieren/importieren zu können.
+ (280809) Beim Import von nicht gemanageter Objekte Backup anlegen, wenn aktiviert.
+ (170909)
  Falls eine Datei ohne Pruefung auf Modifizierung oder eine neue Datei importiert 
  wird. Pruefen, ob
  ein Hash erzeugt werden soll. Der Hash muss aus einer exportierten Datei erfolgen!!!
  Damit soll ein Szenario eines Komplettimports dafuer sorgen, dass nicht gleich beim
  naechsten Sync- bzw. Exportvorgang alles wieder exportiert wird. Der Hash aus einer
  frisch exportieren Datei muss deshalb sein, weil sich das Format einer Datei in der
  Zwischenzeit geaendert haben kann und das soll nicht fuer einen weiteren Export sorgen.
  + (180909 RefreshSelectedObjects fuer den Fall mit Hash-Erzeugung)
    Feststellung beim Test: Eine neue Datei wird ueber ImportUnmanagedFiles() importiert
    dabei wird kein File-Objekt erzeugt, das den Hash speichern könnte. Demzufolge wird
    erst beim nachfolgenden Sync solch ein File-Objekt erzeugt, exportiert und Hash
    angelegt.
+ (210909) Folgendes Szenario mal testen:
  - Kontrolldaten von SyncTool löschen (File, SrcObject)
  - Export mit ^ECVSEXP
  - Danach muss ein Sync Konflikte für alle Dateien bringen?!
+ (290909) Nach Synchronisierung im Log Anzahl importierter/exportierter und nicht gemanageter
  importierter Dateien anzeigen.
+ (131009) Export/Import SyncTool classes automatically
+ (141009)
  Speichern nicht gemanageter Quellobjekte sehr langsam, wenn sehr viele
  Quellobjekte durch ExpandSelection getroffen werden.
  - Modulweise ausfuehren. Falls Quellobjekt im Modul getroffen wird, nur 
    fuer das betreffende Modul RefreshSelectedObjects() ausfuehren.
+ (221009) Fehlermeldung "^Global" does not exist in SyncTool.Custom.GUI.GlobalSelection
  in Warnung umwandeln.
+ (281009) Persistent class in XML files:
  + (221009) If a persistent class uses optimistic locking, there is an object version
    property. Use this to track changes.
  + (281009) If a class hasn't defined a manual IdKey but a GUID property use this
    to identify the objects. Manual IdKey is not needed in that case.
+ (041109) Export/Import Working directory definition automatically
  for integrity with other systems/co-workers
+ (051109) If a conflict is found diff the external file with the sources in temporary file.
  Only if the files are different, it's a real conflict. Otherwise ignore the conflict.
+ (191109) Wenn Metadaten-Synchronisation aktiviert ist, und zwei Module auf's gleiche
  Verzeichnis verweisen, werden im SyncToolMetaData-Verzeichnis zwei Dateien abgelegt.
  Hier muss man prüfen, wie sie eingelesen werden und notfalls das Einlesen verfeinern.
+ Documentation of methods/properties
+ (221209) Implement buttons "Keep all files" and "Keep all source objects" in Collisions.cls.
+ (100110) Manual.
+ (150110) remove debug code

SyncTool 0.7:
+ (130210) Implement method "ExportToTemporaryFile" and use it in ExportImportAbstract:Hash
  and File:Synchronize
+ (130210) Implement method "DeleteFile" to handle status correctly and use it everywhere
  a file is deleted instead of %File:Delete.
+ (150210) Works for Cache' 2009.1 or higher:
  Try to determine number of processors/cores dynamically and therefore job off 
  the number of parallelized sync jobs dynamically.
+ (120210) Export Globals in XML format.
  - GOF-Format is not suitable for versioning. File differentiates on each export
    and it's a binary file what makes it hard to make a diff on those files.
+ (280510) Check if saving the file hash could be done in File:Update method.
+ (070610) Regression tests to ensure correct functionality in future releases.
+ (070610) remove debug code
+ (070610) update manual

SyncTool 0.71:
+ (220610) Set SqlFieldName to _File in SyncTool.Collision:File
  --> Class didn't compile on some Cache versions

SyncTool 0.72:
+ (140710) The collision page would not load because of a wrong SQL statement.

+------------------+
| Planned features |
+------------------+

Further features in future releases:
- Map package names to subdirectories
- Implement a proper logging or history mechanism. Sometimes it's usefull to see 
  which files were imported or exported.
- Allow a diff view in the conflict GUI. Use an external diff program/library.
- Export and import Caché classes into a format as seen in Studio.
- Customize the import sequence of imported modules?!?!?
- Analyze code with ^%SYS.MONLBL to increase speed
- Manage backup files. Delete them after N days.
- Make a structured class for imported objects and don't use a simple Array.
- SyncTool.SrcObject:ObjectNameNormalize should be per File Manager.
  Maybe it is better to overwrite %NormalizeObject and implement it there.
- Im- and Export globals via GOF, GBL files?
- Im- and Export projects?
- Im- and Export OBJ-Code (possible for foreign code)?
- Compile-log with auto scroll to the end (already implemented for Sync.)
- Customize compiler flags
- Remote Working directories
- As part of this project create a Windows Explorer/gnome/KDE context
  menu to import files.
- YAML format for persistent objects? Very usefull for managing complex (persistent) 
  objects with a source control system. It also enables JSON for Cache'. Because JSON 
  is a subset of YAML.

Features for external source control GUI:
- CVS and/or SVN and/or GIT integration
  - In diesem Zuge wird man vom "File-Modus" absehen können.
    Es waere dann evtl. intuitiver, alle Source-Objekte aus dem Namespace aufzulisten
    und solche, die per SCM verwaltet werden, im SCM-Status ("added", "checked in",
    "modified", etc...) anzuzeigen. Source-Objekte, die nicht im SCM sind, werden als
    "unknown" angezeigt. Diesen Modus könnte man "Database-Modus" nennen. Allerdings 
    muss man dann überlegen, wie man persistente Objekte darstellt. Evtl. ist ein
    Mischbetrieb aus "File-Modus" und "Database-Modus" sinnvoll. Das heißt, man erzeugt
    eine Selektion fuer persistente Objekte und zeigt Pseudo-Dateien, die erst
    nach Hinzufuegen zum SCM exportiert werden. Source-Objekte im "Database-Modus" 
    muessen dann auch kein langwieriges "RefreshSelectedObjects" ausfuehren. Das heisst,
    die Synchronisation waere schneller.
  - Im Prinzip kann man den "Database-Modus" schon jetzt erreichen, indem man die
    einzelnen Source-Objekte zur Source-Selection ohne Jokerzeichen hinzufuegt. In der
    Liste der Source-Objekte muesste man dann noch weitere Stati einfuehren, um "exportierte"
    und "nicht exportierte" zu unterscheiden.
    Ein paar Ideen fuer diese Stati-Namen:
    - in working directory - in database
    - exported - not exported
    - prepared for SCM - "-"
  - To summarize this in English: There should be a flag whether selected source
    objects are exported immediately or exported if they are checked into the SCM.

*/
]]></Content>
</UDLText>

<Parameter name="VERSION">
<Default>0.72</Default>
</Parameter>

<Property name="Backup">
<Description>
Create backups of source objects resided in DB on import.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Callback">
<Description>
Instance of a class which implements callback methods to monitor 
long duration tasks (synchronization, import, export).</Description>
<Type>Callback</Type>
<Transient>1</Transient>
</Property>

<Property name="WorkingDirectory">
<Description>
The working directory itself.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Modules">
<Description>
Modules of working directory.</Description>
<Type>Module</Type>
<Cardinality>children</Cardinality>
<Inverse>WorkingDirectory</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="CompileClassName">
<Description>
Class name of the compile manager.</Description>
<Type>%Dictionary.CacheClassname</Type>
<InitialExpression>"SyncTool.Compile"</InitialExpression>
</Property>

<Property name="CompileClass">
<Description>
Instance of the compile manager.</Description>
<Type>Compile</Type>
<Transient>1</Transient>
</Property>

<Property name="SyncMetaData">
<Description>
If checked meta data of SyncTool will be synchronized with the filesystem.
Those meta files can be managed with a source control system to ensure that
all colleagues work with the same settings.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="Export">
<Description>
Export the source object defined in the working directory to the file system.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Lock +^SyncTool.WorkingDirectory("Export",..%Id()):10
	If '$Test Quit $system.Status.Error(5001,"Could not lock working directory "_..%Id())
	Set Status=$$$OK
	Set Key=""
	For  
	{
		Set Module=..Modules.GetNext(.Key)
		Quit:Key=""
		Continue:Module.Type'=""
		Set Status=Module.Export()
		Quit:'Status
	}
	Lock -^SyncTool.WorkingDirectory("Export",..%Id())
	Quit Status
]]></Implementation>
</Method>

<Method name="BackupByName">
<Description>
Create a backup of source object given in iObjectName</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.BackupByName begin"
	#ENDIF
	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)
	#IF $D(^SyncTool.Debug)
	Write !,"Source object normalized: ",iObjectName
	#ENDIF
	Set RS=##class(%ResultSet).%New(..%PackageName()_".SrcObject:FileByObjName")
	Set Status=RS.Execute(iObjectName)
	Quit:'Status Status
	While RS.Next()
	{
		Set File=##class(File).%OpenId(RS.Data("_File"),,.Status)
		Quit:'Status
		Set Status=File.BackupSrcObjects()
		Quit:'Status
	}
	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.BackupByName end"
	#ENDIF
	Quit Status
]]></Implementation>
</Method>

<Method name="ExportSrcObjectByName">
<Description>
Export source object given by iObjectName to the file system.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ExportSrcObjectByName begin"
	#ENDIF

	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)
	#IF $D(^SyncTool.Debug)
	Write !,"Source object normalized: ",iObjectName
	#ENDIF

	Set RS=##class(%ResultSet).%New(..%PackageName()_".SrcObject:FileByObjName")
	Set Status=RS.Execute(iObjectName)
	Quit:'Status Status
	While RS.Next()
	{
		Set File=##class(File).%OpenId(RS.Data("_File"),,.Status)
		Quit:'Status
		Set Status=File.Export()
		Quit:'Status
	}

	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ExportSrcObjectByName end"
	#ENDIF

	Quit Status
]]></Implementation>
</Method>

<Method name="ExportDeletedByName">
<Description>
Export the deletion of a source object given by iObjectName to the file system.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ExportDeletedByName begin"
	#ENDIF

	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)
	#IF $D(^SyncTool.Debug)
	Write !,"Source object normalized: ",iObjectName
	#ENDIF

	Set RS=##class(%ResultSet).%New(..%PackageName()_".SrcObject:FileByObjName")
	Set Status=RS.Execute(iObjectName)
	Quit:'Status Status
	While RS.Next()
	{
		Set File=##class(File).%OpenId(RS.Data("_File"),,.Status)
		Quit:'Status
		Set Status=File.Module.RefreshSelectedObjects()
		Quit:'Status
		Set Status=File.Export()
		Quit:'Status
	}

	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ExportDeletedByName end"
	#ENDIF

	Quit Status
]]></Implementation>
</Method>

<Method name="ImportSrcObjectByName">
<Description>
Import source object given by iObjectName from the corresponding file to the database.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ImportSrcObjectByName begin"
	#ENDIF

	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)

	Set RS=##class(%ResultSet).%New(..%PackageName()_".SrcObject:FileByObjName")
	Set Status=RS.Execute(iObjectName)
	Quit:'Status Status
	While RS.Next()
	{
		Set File=##class(File).%OpenId(RS.Data("_File"),,.Status)
		Quit:'Status
		Set Status=File.Import()
		Quit:'Status
	}

	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ImportSrcObjectByName end"
	#ENDIF

	Quit Status
]]></Implementation>
</Method>

<Method name="ImportNeededByName">
<Description>
Check if a corresponding file of a source object given by iObjectName needs
to be imported.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iObjectName:%String,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ImportNeededByName begin"
	#ENDIF

	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)

	Set ImportNeeded=0
	Set RS=##class(%ResultSet).%New(..%PackageName()_".SrcObject:FileByObjName")
	Set oStatus=RS.Execute(iObjectName)
	Quit:'oStatus 0
	While RS.Next()
	{
		Set File=##class(File).%OpenId(RS.Data("_File"),,.oStatus)
		Quit:'oStatus
		Set ImportNeeded=File.Module.ExportImportClass.ImportNeeded(File)
	}

	#IF $D(^SyncTool.Debug)
	Write !,"Source object: ",iObjectName," WorkingDirectory.ImportNeededByName end"
	#ENDIF

	Quit ImportNeeded
]]></Implementation>
</Method>

<Method name="RefreshSelectedObjects">
<Description>
Refresh the SyncTool administration data. Usually no direct use of this method
is needed.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status=$$$OK
	Set Key=""
	For  
	{
		Set Module=..Modules.GetNext(.Key)
		Quit:Key=""
		Set Status=Module.RefreshSelectedObjects()
		Quit:'Status
	}
	Quit Status
]]></Implementation>
</Method>

<Method name="ImportDir">
<Description><![CDATA[
<p>Import files of the working directory.</p>

<p>If iModified is true only modified files are imported. Otherwise SyncTool
will import all files.</p>

<p>oImportedObjects returns the names of source objects imported in a one dimensional
array</p>]]></Description>
<FormalSpec><![CDATA[iModified:%Boolean=1,&oImportedObjects]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Lock +^SyncTool.WorkingDirectory("ImportDir",..%Id()):10
	If '$Test Quit $system.Status.Error(5001,"Could not lock working directory "_..%Id())
	Set Status=$$$OK
	Set Key=""
	For  
	{
		Set Module=..Modules.GetNext(.Key)
		Quit:Key=""
		Continue:Module.Type'=""
		Kill ImportedObjects
		Set Status=Module.ImportDir(iModified,.ImportedObjects)
		Merge oImportedObjects=ImportedObjects
		Quit:'Status
	}
	Lock -^SyncTool.WorkingDirectory("ImportDir",..%Id())
	Quit Status
]]></Implementation>
</Method>

<Method name="ImportDirAndCompile">
<Description>
Same as ImportDir() but compileable source objects are compiled after the import.</Description>
<FormalSpec>iModified:%Boolean=1,iFlags:%String="k-d"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Lock +^SyncTool.WorkingDirectory("ImportDirAndCompile",..%Id()):10
	If '$Test Quit $system.Status.Error(5001,"Could not lock working directory "_..%Id())
	Set Status=..ImportDir(iModified,.ImportedObjects)
	If Status
	{
		Set CompileLogFile=""
		If ..Callback'=""
		{
			Set CompileLogFile=..CompileClass.GetOutputFile()
			Do ..Callback.Import("Compiling imported items.")
			Do ..Callback.SetCompileLogFile(CompileLogFile)
		}
		Set Status=..CompileClass.Compile(.ImportedObjects,iFlags,CompileLogFile)
	}
	Lock -^SyncTool.WorkingDirectory("ImportDirAndCompile",..%Id())
	Quit Status
]]></Implementation>
</Method>

<Method name="CompileClassNameSet">
<Description>
Setter method of property CompileClassName. It ensures that the instance of the
compile class (the CompileClass property) is set correctly.</Description>
<FormalSpec>iVal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set i%CompileClassName=iVal
	If iVal'="" Set ..CompileClass=$system.OBJ.New(iVal)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CompileClassGet">
<Description>
Getter method of property CompileClass. It's usually called by opening of the
working directory object.</Description>
<ReturnType>Compile</ReturnType>
<Implementation><![CDATA[
	If ..CompileClassName'="",i%CompileClass=$$$NULLOREF
	{
		Set i%CompileClass=$system.OBJ.New(..CompileClassName)
	}
	Quit i%CompileClass
]]></Implementation>
</Method>

<Method name="IsSynchronized">
<Description>
Returns if the source object given by iObjectName is managed by SyncTool.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iObjectName:%Binary,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)
	Set RS=##class(%ResultSet).%New(..%PackageName()_".SrcObject:FileByObjName")
	Set oStatus=RS.Execute(iObjectName)
	If 'oStatus Quit 0
	Quit RS.Next()
]]></Implementation>
</Method>

<Method name="HasToBeSynchronized">
<Description>
Returns if the source object given by iObjectName needs to be managed by SyncTool.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iObjectName:%Binary,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set iObjectName=##class(SrcObject).ObjectNameNormalize(iObjectName)
	Set Type=$Piece(iObjectName,".",$Length(iObjectName,"."))
	Set RS=##class(%ResultSet).%New("SyncTool.WorkingDirectory:Extent")
	Do RS.Execute()
	Set oStatus=$$$OK
	Set Return=0
	While RS.Next()
	{
		#dim WD as WorkingDirectory = ..%OpenId(RS.Get("ID"))
		Set ModuleKey=""
		For  
		{
			#dim Module as Module
			Set Module=WD.Modules.GetNext(.ModuleKey)
			Quit:ModuleKey=""
			Set SupportedTypes=Module.ExportImportClass.%GetParameter("SUPPORTEDTYPES")
			Continue:SupportedTypes=""
			If Type'="",(","_SupportedTypes_",")'[(","_Type_",") Continue
			Kill Objects
			Set oStatus=Module.ExpandSelection(.Objects)
			Quit:'oStatus
			If $Data(Objects(iObjectName)) Set Return=1 Quit
		}
		Quit:'oStatus
	}
	Quit Return
]]></Implementation>
</Method>

<Method name="SyncParallelized">
<Description>
Synchronize source objects in working directory by starting parallel running jobs.</Description>
<FormalSpec><![CDATA[&oManager:SyncManager]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#IF $system.Version.GetMajor()>2008
	Set Processes=##class(%SYSTEM.CPU).%New().nCores
	#ELSE
	Set Processes=2
	#ENDIF

	Lock +^SyncTool.WorkingDirectory("SyncParallelized",..%Id()):10
	If '$Test Quit $system.Status.Error(5001,"Could not lock working directory "_..%Id())
	Set Status=$$$OK
	Set oManager=##class(SyncManager).%New()
	Set Execute=""
	If $IsObject(..Callback)
	{
		Set Execute="Set Object.WorkingDirectory.Callback=##class("_..Callback.%ClassName(1)_").%New()"
			_" Set Object.WorkingDirectory.Callback.ParentJob="_$Job
	}
	Set Status=oManager.NewTasks(..Modules,"RefreshSelectedObjects",1,Execute)
	Quit:'Status Status
	Set Status=oManager.NewTasks(..Modules,"SyncByManager",2,Execute,oManager.%Id())
	Quit:'Status Status

	Set ManagerID=oManager.%Id()
	Kill oManager
	For I=1:1:Processes Job ##class(WorkingDirectory).SyncThread(ManagerID,I)

	#;Wait until SyncThreads are finished
	For  
	{
		Lock +^SyncTool.WorkingDirectory("SyncThread"):0
		If $Test Lock -^SyncTool.WorkingDirectory("SyncThread") Quit
		Hang .5
	}

	If ##class(SyncManager).ErrorGetStored(ManagerID)'="" Set Status=##class(SyncManager).ErrorGetStored(ManagerID)
 	If $IsObject(..Callback)
	{
		Do ..Callback.CreateLogEntry(##class(SyncManager).CountExportedGetStored(ManagerID)
			_" files exported, "_##class(SyncManager).CountImportedGetStored(ManagerID)
			_" managed files imported, "
			_##class(SyncManager).CountImportedUnmanagedGetStored(ManagerID)
			_" unmanaged files imported.")
		If Status Do ..Callback.CreateLogEntry("Finished synchronizing.")
		If 'Status Do ..Callback.CreateLogEntry("Finished with error(s).")
	}

	Set oManager=##class(SyncManager).%OpenId(ManagerID)
	Set Key=""
	For  
	{
		#dim ImportedObject as ImportedObject
		Set ImportedObject=oManager.ImportedObjects.GetNext(.Key)
		Quit:Key=""
		Set ImportedObjects(ImportedObject.Namespace,ImportedObject.ObjectName)=ImportedObject.Compilable
	}

	If Status,$Data(ImportedObjects)
	{
		Set CompileLogFile=""
		If $IsObject(..Callback)
		{
			Set CompileLogFile=..CompileClass.GetOutputFile()
			Do ..Callback.Import("Compiling imported items.")
			Do ..Callback.SetCompileLogFile(CompileLogFile)
		}
		Set Status=..CompileClass.Compile(.ImportedObjects,,CompileLogFile)
	}

	Lock -^SyncTool.WorkingDirectory("SyncParallelized",..%Id())
	Quit Status
]]></Implementation>
</Method>

<Method name="SyncThread">
<Description>
Implemention of one single job that handles the synchronization of SyncParallelized()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iManagerID:%Integer,iThreadNumber:%Integer</FormalSpec>
<PublicList>Object</PublicList>
<Implementation><![CDATA[
	New Object

	Lock +^SyncTool.WorkingDirectory("SyncThread",iThreadNumber):10
	If '$Test
	{
		Do ##class(SyncManager).SetErrorStatic(iManagerID,$system.Status.Error(5001,"Could not lock thread "_iThreadNumber))
		Quit
	}
	Set ^||ThreadNumber=iThreadNumber
	Set Status=$$$OK
	Do
	{
		#dim Task as SyncTask
		Set Task="" ;force to close the object, so it will be reread from disk
		Set Task=##class(SyncManager).GetTaskAndSetStarted(iManagerID,.Run,.Status)
		#;Set ^UARI($ZU(188),$J)=$LB(Task,$S($IsObject(Task):Task.%Id(),1:""),Run,Status)
		If Status,$IsObject(Task)
		{
			If Run
			{
				Set Object=##class(%Persistent).%Open(Task.ObjectID)
				Try
				{
					If Task.OnCreateObjectAfter'="" Xecute Task.OnCreateObjectAfter
					Set Argument=Task.Arguments.GetNext("")
					If Argument="" {Set Status=$ZObjMethod(Object,Task.MethodName)}
					Else {Set Status=$ZObjMethod(Object,Task.MethodName,Argument)}
					If Status Do ##class(SyncManager).TaskSetFinished(iManagerID,Task)
				}
				Catch Error
				{
					Do BACK^%ETN
					Set Status=Error.AsStatus()
				}
			}
			Else {Hang .1}
		}
		If 'Status
		{
			Do ##class(SyncManager).SetErrorStatic(iManagerID,Status)
		}
	} While $IsObject(Task) && Status
	Lock -^SyncTool.WorkingDirectory("SyncThread",iThreadNumber)
]]></Implementation>
</Method>

<Method name="ResolveConflicts">
<Description>
Resolve conflicts defined in the synchronization manager iManager.
Resolving conflicts means importing or exporting specific files.</Description>
<FormalSpec>iManager:SyncManager</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status=$$$OK
	Set Key=""
	For  
	{
		#dim Collision as Collision
		Set Collision=iManager.Collisions.GetNext(.Key)
		Quit:Key=""
		Set SubDir=Collision.File.Module.SubDirectory
		If Collision.Keep="File"
		{
			If $IsObject(..Callback)
			{
				Do ..Callback.CreateLogEntry("Importing "_$S(SubDir="":"",1:SubDir_"/")_Collision.File.Filename)
			}
			Kill ImpObj
			Set Collision.File.NewFile=1 ;Force hashing
			Set Status=Collision.File.Import(0,.ImpObj)
			If Status
			{
				Do Collision.File.Module.SetCompileableFlag(.ImpObj)
				If Collision.File.Module.Namespace=""
				{
					Merge ImportedObjects($ZNSpace)=ImpObj
				}
				Else
				{
					Merge ImportedObjects(Collision.File.Module.Namespace)=ImpObj
				}
			}
		}
		If Collision.Keep="SourceObject"
		{
			If $IsObject(..Callback)
			{
				Do ..Callback.CreateLogEntry("Exporting to "_$S(SubDir="":"",1:SubDir_"/")_Collision.File.Filename)
			}
			Set Status=Collision.File.Export("f")
		}
		Quit:'Status
		Set Collision=""
		Do iManager.Collisions.%UnSwizzleAt(Key)
	}

	If Status,$Data(ImportedObjects)
	{
		Set CompileLogFile=""
		If $IsObject(..Callback)
		{
			Set CompileLogFile=..CompileClass.GetOutputFile()
			Do ..Callback.Import("Compiling imported items.")
			Do ..Callback.SetCompileLogFile(CompileLogFile)
		}
		Set Status=..CompileClass.Compile(.ImportedObjects,,CompileLogFile)
	}

	Quit Status
]]></Implementation>
</Method>

<Method name="GetMyDir">
<Description>
Returns the directory of files which keeps the SyncTool itself.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim Dir as %String = ""
	#dim Key as %String = ""
	For  
	{
		#dim Module as Module = ..Modules.GetNext(.Key)
		Quit:Key=""
		If $Piece(Module.ExportImportClassName,".",2)="SCExportImport"
		{
			Set Dir=Module.Directory
			Quit
		}
	}
	Quit Dir
]]></Implementation>
</Method>

<Method name="ExportDebug">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set wd=##class(SyncTool.WorkingDirectory).%OpenId(1)
	Set wd.Callback=##class(SyncTool.GUI.Callback).%New()
	Set Status=wd.RefreshSelectedObjects()
	Write "Refresh status: ",Status,!
	Set Status=wd.Export()
	Write "Export status: ",$S('Status:$system.Status.GetErrorText(Status),1:Status),!
]]></Implementation>
</Method>

<Method name="ImportDebug">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set wd=##class(SyncTool.WorkingDirectory).%OpenId(1)
	Set Status=wd.RefreshSelectedObjects()
	Write "Refresh status: ",Status,!
	Set Status=wd.ImportDirAndCompile(,"k")
	Write "Import status: ",$S('Status:$system.Status.GetErrorText(Status),1:Status),!
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	#;synchronize meta data was activated and was previously not activated
	If ..SyncMetaData,'..SyncMetaDataGetStored(..%Id())
	{
		#dim MKey as %String = ""
		For  
		{
			#dim Module as Module = ..Modules.GetNext(.MKey)
			Quit:MKey=""
			Continue:Module.Type="SyncToolData"
			#dim MDModule as Module= Module.FindMetaDataModule()
			If '$IsObject(MDModule)
			{
				Set MDModule=Module.CreateMetaDataModule()
				Set Status=MDModule.%Save() ;needs to be saved here %Save() of working directory doesn't save new modules
			}
		}
	}

	#;synchronize meta data was deactivated and was previously activated
	If '..SyncMetaData,..SyncMetaDataGetStored(..%Id())
	{
		Set MKey = ""
		For  
		{
			Set Module = ..Modules.GetNext(.MKey)
			Quit:MKey=""
			Continue:Module.Type="SyncToolData"
			Set MDModule = Module.FindMetaDataModule()
			If $IsObject(MDModule)
			{
				#dim MDMPosition as %String = ..Modules.FindOref(MDModule)
				If MDMPosition'="" Do ..Modules.RemoveAt(MDMPosition)
				Set Status=MDModule.%Delete(MDModule.%Oid())
			}
		}
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.
[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set Status=$$$OK
	&sql(declare sql1 cursor for
	      select %id into :ModuleID
	        from _Module
	       where WorkingDirectory=$Piece($List(:oid),'||') and Type is null)
	&sql(open sql1)
	&sql(fetch sql1)
	While 'SQLCODE
	{
		Set Status=##class(Module).%DeleteId(ModuleID)
		Quit:'Status
		&sql(fetch sql1)
	}
	&sql(close sql1)
	Quit Status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SyncTool.WorkingDirD</DataLocation>
<DefaultData>WorkingDirectoryDefaultData</DefaultData>
<IdLocation>^SyncTool.WorkingDirD</IdLocation>
<IndexLocation>^SyncTool.WorkingDirI</IndexLocation>
<StreamLocation>^SyncTool.WorkingDirS</StreamLocation>
<Data name="WorkingDirectoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>WorkingDirectory</Value>
</Value>
<Value name="3">
<Value>CompileClassName</Value>
</Value>
<Value name="4">
<Value>Backup</Value>
</Value>
<Value name="5">
<Value>SyncMetaData</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
