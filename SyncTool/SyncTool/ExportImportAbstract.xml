<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.ExportImportAbstract">
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeCreated>61432,27381.717216</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<Parameter name="SOURCESELECTIONCLASS">
<Description>
A persistent class of type ObjectSelection which saves the selection of source objects.</Description>
</Parameter>

<Parameter name="SOURCEOBJECTSCOMPILEABLE">
<Description>
Information for the compile manager if the source objects managed by this class
are compilable.</Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Parameter name="DISPLAYNAME">
<Description>
The display name of the file manager used by the GUI.</Description>
<Type>STRING</Type>
<Default>Please overwrite</Default>
</Parameter>

<Parameter name="SUPPORTEDTYPES">
<Description>
Comma separated List of supported types of sourceobjects.</Description>
<Type>STRING</Type>
</Parameter>

<Method name="Export">
<Description><![CDATA[
The export method, that actually exports given source objects to a file.
<pre>
iFilename   = The filename to export to. Please note, filename could be a directory
              only. So a real filename needs to be determined and returned to the caller.
iSrcObjects = Array of SrcObject to export.
Flags       = Currently just "-d" is supported.
</pre>]]></Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&iFilename:%String,iSrcObjects:%ArrayOfObjects,Flags:%String="-d"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportDeleted">
<Description>
Export deleted source objects.
Usually only a flag is written to the file that is read on import.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Stream=##class(%FileCharacterStream).%New()
	Set Stream.Filename=iFilename
	Set Status=Stream.Write("***DELETED***")
	Quit:'Status Status
	Quit Stream.SaveStream()
]]></Implementation>
</Method>

<Method name="Objectname2Filename">
<Description>
Convert a given source object name to a filename.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%Binary,iSourceSelection:SourceSelection,iNamespace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit iObjectName
]]></Implementation>
</Method>

<Method name="ObjectExists">
<Description>
Check if the source object given by iObjectName exists in the database.</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%Binary,iNamespace:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $$$NO
]]></Implementation>
</Method>

<Method name="ExportNeeded">
<Description>
Checks if the given source objects are changed since last sync and need
to be exported.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iSrcObject:SrcObject,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Quit:iSrcObject.File.Filename="" $$$YES ;Source object was never exported
	Quit:'iSrcObject.File.FileExists() $$$YES ;File deleted?
	#dim ObjDateModified as %TimeStamp = ..GetObjectDateModified(iSrcObject,.oStatus)
	Quit:'oStatus $$$NO
	#dim SavedObjDateModified as %TimeStamp = iSrcObject.SrcObjectDateModified

	#dim ExpNeeded as %Boolean = "" ;If ExpNeeded="" start hashing in File class

	If ObjDateModified'=""||(SavedObjDateModified'="")
	{
		If SavedObjDateModified=""||(ObjDateModified="") {Set ExpNeeded=$$$YES}
		ElseIf ObjDateModified'=SavedObjDateModified {Set ExpNeeded=$$$YES}
		Else {Set ExpNeeded=$$$NO}
	}

	If ExpNeeded=""
	{
		#dim ObjVersion as %Integer = ..GetObjectVersion(iSrcObject,.oStatus)
		Quit:'oStatus $$$NO
		#dim SavedObjVersion as %Integer = iSrcObject.Version

		If ObjVersion'=""||(SavedObjVersion'="")
		{
			If SavedObjVersion=""||(ObjVersion="") {Set ExpNeeded=$$$YES}
			ElseIf ObjVersion'=SavedObjVersion {Set ExpNeeded=$$$YES}
			Else {Set ExpNeeded=$$$NO}
		}
	}

	Quit ExpNeeded
]]></Implementation>
</Method>

<Method name="GetObjectDateModified">
<Description>
Returns the date/timestamp the source object was modified on. This is needed
to track if the source object was changed since the last synchronization.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iSrcObject:SrcObject,&oStatus:%Status]]></FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	Quit ""
]]></Implementation>
</Method>

<Method name="GetObjectVersion">
<Description>
Returns the current version of the source object. This is needed
to track if the source object was changed since the last synchronization.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iSrcObject:SrcObject,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	Quit ""
]]></Implementation>
</Method>

<Method name="GetSSClassName">
<Description>
Returns the classname of the persistent class that holds source selection data.
This is a subclass of SyncTool.SourceSelection.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Status:%Status]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set Status=$$$OK
	Set SSClassName=..#SOURCESELECTIONCLASS
	Quit:SSClassName="none" ""
	If SSClassName=""
	{
		Set Status=$system.Status.Error(5001,"No source selection class given.")
	}
	ElseIf '##class(%Dictionary.CompiledClass).%ExistsId(SSClassName)
	{
		Set Status=$system.Status.Error(5001,"Given source selection class not found or not compiled.")
	}
	Quit SSClassName
]]></Implementation>
</Method>

<Method name="Import">
<Description>
Import the given file and return the names of the imported source objects.</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&oImportedObjects,iNamespace:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckDeleted">
<Description>
Returns true if file contains a delete flag.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&oStatus:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	Set Stream=##class(%FileCharacterStream).%New()
	Set Stream.Filename=iFilename
	Set Flag=Stream.Read(13,.oStatus)
	Quit:'oStatus 0
	Quit Flag="***DELETED***"
]]></Implementation>
</Method>

<Method name="ImportDeleted">
<Description>
This method is called if source objects are deleted as a cause of a delete
flag in the file.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iSrcObjects:%ArrayOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..DeleteSources(.iSrcObjects)
]]></Implementation>
</Method>

<Method name="DeleteSources">
<Description>
This method is called before an import is started to ensure that old sources objects
are wiped out of the database.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iSrcObjects:%ArrayOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Filename2Objectname">
<Description>
Create object names by the given file name.</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&oObjectNames]]></FormalSpec>
<Implementation><![CDATA[	Quit
]]></Implementation>
</Method>

<Method name="GetImportableFileMask">
<Description>
Get the mask of importable files in a directory.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iModule:Module</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "*"
]]></Implementation>
</Method>

<Method name="ImportNeeded">
<Description>
Check if a file has been changed and needs to be imported.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iFile:File</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Quit:iFile.Filename="" $$$NO ;Source objects were never exported
	Set FileDateModified=iFile.GetFileDateModified()
	Quit:FileDateModified="" $$$NO
	#;170809 begin
	#;File could have been restored. Therefore also "old" files need to be imported.
	#;If FileDateModified]iFile.FileDateModified,'..SummerTimeDiff(FileDateModified,iFile.FileDateModified) Quit $$$YES
	If FileDateModified'=iFile.FileDateModified,'..SummerTimeDiff(FileDateModified,iFile.FileDateModified) Quit $$$YES
	#;170809 end
	Quit $$$NO
]]></Implementation>
</Method>

<Method name="SummerTimeDiff">
<Description>
Returns if the difference of two given timestamps is exactly one hour and 
equates to the daylight saving time.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iVal1:%TimeStamp,iVal2:%TimeStamp</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If iVal1'="",iVal2="" Quit $$$NO
	If iVal1="",iVal2'="" Quit $$$NO
	Set Date1=$ZDateH($Piece(iVal1," "),3)
	Set Date2=$ZDateH($Piece(iVal2," "),3)
	Set Time1=$ZTimeH($Piece(iVal1," ",2),1)
	Set Time2=$ZTimeH($Piece(iVal2," ",2),1)
	If Date1=Date2,$ZAbs(Time1-Time2)=3600 Quit $$$YES
	If Date1-Date2=1,Time1+86400-Time2=3600 Quit $$$YES
	If Date2-Date1=1,Time2+86400-Time1=3600 Quit $$$YES
	Quit $$$NO
]]></Implementation>
</Method>

<Method name="GetFilesResultSet">
<Description>
Returns a resultset of %File:FileSet with all importable files by this file type
manager class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iModule:Module,&oStatus:%Status]]></FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	#dim FileMask as %String = ..GetImportableFileMask(iModule)
	Quit:FileMask="" $$$NULLOREF
	Set RS=##class(%ResultSet).%New("%File:FileSet")
	Set oStatus=RS.Execute(iModule.Directory,FileMask)
	Quit RS
]]></Implementation>
</Method>

<Method name="ValidateSourceSelection">
<Description>
Validate the given source selection. It is called by %OnValidateObject() of the
SourceSelection class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iSS:SourceSelection</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Hash">
<Description>
Hash the source objects and return a possible temporary file for further use
by SyncTool.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFile:File,&oCachedFile:%String,&oStatus]]></FormalSpec>
<ReturnType>%Binary</ReturnType>
<Implementation><![CDATA[
	/*
	Set oCachedFile=##class(Compile).GetTempDir()_"/Cache_"_$Job_"/"
	Set oCachedFile=##class(%File).NormalizeDirectory(oCachedFile)
	If '##class(%File).DirectoryExists(oCachedFile)
	{
		Set oStatus=##class(%File).CreateDirectoryChain(oCachedFile)
		Quit:'oStatus ""
	}
	Set oStatus=iFile.Module.ExportImportClass.Export(.oCachedFile,iFile.SrcObjects)
	*/
	Set oCachedFile=iFile.ExportToTemporaryFile(.oStatus)
	Quit:'oStatus ""
	Set Stream=##class(%FileBinaryStream).%New()
	Set Stream.Filename=oCachedFile
	Set Hash=$system.Encryption.SHA1HashStream(Stream)
	Quit Hash
]]></Implementation>
</Method>

<Method name="GetManageableSources">
<Description>
If no user defined source selection is implemented this method should return
an array of source objects that are managed by this file type manager class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iModule:Module,&oSelectedObjects]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $system.Status.Error(5003)
]]></Implementation>
</Method>

<Method name="FindSourceSelection">
<Description>
Find the source selection for the given source object. This method is used
to speed up the retrievement of the source selection object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iSrcObject:SrcObject,&oStatus]]></FormalSpec>
<ReturnType>SourceSelection</ReturnType>
<Implementation><![CDATA[
	Set oStatus=$$$OK
	Quit $$$NULLOREF
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* ;090410 We're not ready for that.
ClassMethod ObjectNameNormalize(%val As %String) As %String [ CodeMode = expression ]
{
%val
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
