<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.GUI.Callback">
<Description>
Callback class for monitoring backgroud tasks of SyncTool classes.</Description>
<Super>SyncTool.Callback</Super>
<TimeCreated>60941,26518.935335</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<Method name="OneLogEntryPerSecond">
<FormalSpec>iStatus:%String</FormalSpec>
<Implementation><![CDATA[
	Set TS=$ZHorolog
	If $Get(^||LastLogEntryOn)+1<TS
	{
		Do ..CreateLogEntry(iStatus)
		Set ^||LastLogEntryOn=TS
	}
]]></Implementation>
</Method>

<Method name="CreateLogEntry">
<FormalSpec>iStatus:%String</FormalSpec>
<Implementation><![CDATA[
	Set Job=$Job
	If ..ParentJob'="" Set Job=..ParentJob

	Set ThreadTxt=$Get(^||ThreadNumber)
	If ThreadTxt'="" Set ThreadTxt="Thread "_ThreadTxt_": "
	Lock +^CacheTemp.SyncTool.GUI(Job,"Log"):10
	Set LastLine=$Order(^CacheTemp.SyncTool.GUI(Job,"Log",""),-1)
	Set ^CacheTemp.SyncTool.GUI(Job,"Log",LastLine+1)=ThreadTxt_iStatus
	Lock -^CacheTemp.SyncTool.GUI(Job,"Log")
]]></Implementation>
</Method>

<Method name="RefreshSelectedItems">
<Description>
This method is called when selected items are refreshed</Description>
<FormalSpec>iStatus:%String</FormalSpec>
<Implementation><![CDATA[
	Do ..OneLogEntryPerSecond($Replace(iStatus,"||",", "))
	Kill ^CacheTemp.SyncTool.GUI($Select(..ParentJob:..ParentJob,1:$Job),"CompileLogFile")
	Do ##class(SyncTool.GUI.BusyIndicator).%SetBackgroundMethodStatus(iStatus)
	Quit
]]></Implementation>
</Method>

<Method name="Export">
<Description>
This method is called when items are exported to files</Description>
<FormalSpec>iStatus:%String</FormalSpec>
<Implementation><![CDATA[
	Do ..OneLogEntryPerSecond($Replace(iStatus,"||",", "))
	Kill ^CacheTemp.SyncTool.GUI($Select(..ParentJob:..ParentJob,1:$Job),"CompileLogFile")
	Do ##class(SyncTool.GUI.BusyIndicator).%SetBackgroundMethodStatus(iStatus)
	Quit
]]></Implementation>
</Method>

<Method name="Import">
<Description>
This method is called when files are imported</Description>
<FormalSpec>iStatus:%String</FormalSpec>
<Implementation><![CDATA[
	Do ..OneLogEntryPerSecond($Replace(iStatus,"||",", "))
	Kill ^CacheTemp.SyncTool.GUI($Select(..ParentJob:..ParentJob,1:$Job),"CompileLogFile")
	Do ##class(SyncTool.GUI.BusyIndicator).%SetBackgroundMethodStatus(iStatus)
	Quit
]]></Implementation>
</Method>

<Method name="SetCompileLogFile">
<Description>
This method is called before items are compiled. iFile contains the file name 
to which the compiler logs his output.</Description>
<FormalSpec>iFile:%String</FormalSpec>
<Implementation><![CDATA[
	Set ^CacheTemp.SyncTool.GUI($Select(..ParentJob:..ParentJob,1:$Job),"CompileLogFile")=iFile
	Quit
]]></Implementation>
</Method>
</Class>
</Export>
