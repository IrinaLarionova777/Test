<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.GUI.Main">
<Description>
Created using the page template: Column 2</Description>
<Super>%ZEN.Component.page</Super>
<TimeCreated>60904,61771.519608</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>SyncTool.GUI.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Main</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* style for title bar */
#title {
	background: #C5D6D6;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}
/* group on left-hand side */
#groupLeft {
	border-right: 1px solid black;
	background: #E0E0FF;
	height: 600px;
	width: 300px;
	overflow: auto;
}
/* group on right-hand side */
#groupRight {
	border-right: 1px solid black;
	background: #E0FFE0;
	height: 600px;
	overflow: auto;
}
.fieldSet {border-color:lightgrey;}
.button {color: white; background-color: blue;}
.copyright {font-size: 10pt;}
.versionText {font-size: 8pt;}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="SyncTool GUI">
<html id="title">SyncTool</html>
<menu id="MainMenu" layout="horizontal">
<menu id="WDMenu" layout="vertical" caption="Working directory">
<menuItem id="NewWDMenuItem" caption="New"
 link="JavaScript:zenPage.NewWD();"/>
<menuItem id="SaveWDMenuItem" caption="Save" link="JavaScript:zenPage.SaveWD();"/>
<menuItem id="DeleteWDMenuItem" caption="Delete"
 link="JavaScript:zenPage.ConfirmWDDeletion();" disabled="true"/>
</menu>
<menuItem id="SyncWDMenuItem" caption="Synchronize" link="JavaScript:zenPage.SyncWD();"
 disabled="true" image="SyncTool.GUI.Images.cls?x=synchronize"/>
<menu id="WDExtended" layout="vertical" caption="Extended">
<menuItem id="ExportWDMenuItem" caption="Export modified sources"
 link="JavaScript:zenPage.ExportWD();" disabled="true"/>
<menuItem id="ImportWDMenuItem" caption="Import modified files"
 link="JavaScript:zenPage.ImportWD(1);" disabled="true"/>
<menuItem id="ImportAllWDMenuItem" caption="Import all files"
 link="JavaScript:zenPage.ImportWD(0);" disabled="true"/>
</menu>
<menu id="Help" layout="vertical" caption="?">
<menuItem id="ManualMenuItem" caption="Manual" link=""/>
<menuItem id="AboutMenuItem" caption="About"
 link="JavaScript:zenPage.getComponentById('About').show();"/>
</menu>
</menu>
<!-- Test of csmenus
<csMenuBar id="MainMenu">
<csMenuBarItem id="WDMenu" layout="vertical" caption="Working directory">
<contextMenu>
<csMenuItem id="NewWDMenuItem" caption="New"
 onclick="zenPage.NewWD();"/>
<csMenuItem id="SaveWDMenuItem" caption="Save" onclick="zenPage.SaveWD();"/>
<csMenuItem id="DeleteWDMenuItem" caption="Delete"
 onclick="zenPage.ConfirmWDDeletion();" disabled="true"/>
</contextMenu>
</csMenuBarItem>
<csMenuBarItem id="SyncMenu" layout="vertical" caption="Synchronize">
<contextMenu>
<csMenuItem id="SyncWDMenuItem" caption="Synchronize" onclick="zenPage.SyncWD();"
 disabled="true" icon="SyncTool.GUI.Images.cls?x=synchronize"/>
</contextMenu>
</csMenuBarItem>
<csMenuBarItem id="WDExtended" layout="vertical" caption="Extended">
<contextMenu>
<csMenuItem id="ExportWDMenuItem" caption="Export modified sources"
 onclick="zenPage.ExportWD();" disabled="true"/>
<csMenuItem id="ImportWDMenuItem" caption="Import modified files"
 onclick="zenPage.ImportWD(1);" disabled="true"/>
<csMenuItem id="ImportAllWDMenuItem" caption="Import all files"
 onclick="zenPage.ImportWD(0);" disabled="true"/>
</contextMenu>
</csMenuBarItem>
<csMenuBarItem id="Help" layout="vertical" caption="?">
<contextMenu>
<csMenuItem id="ManualMenuItem" caption="Manual"/>
<csMenuItem id="AboutMenuItem" caption="About"
 onclick="zenPage.getComponentById('About').show();"/>
</contextMenu>
</csMenuBarItem>
</csMenuBar>
-->
<spacer height="3mm"/>
<vgroup labelPosition="left">
<select label="Working directory" name="WorkingDir" id="WorkingDir" size="1"
       sql="select ID,WorkingDirectory as Entry
              from SyncTool.WorkingDirectory"
       onchange="zenPage.LoadWD(zenThis.getValue());"
       controlStyle="width:430;"/>
<spacer height="1cm"/>
<hgroup labelPosition="left" label="Change working directory">
<text id="WorkingDirText" name="WorkingDirText"
 size="50" maxlength="250" controlStyle="width:430;"/>
<button caption="Search..." onclick="zenPage.selectDirectory();" />
</hgroup>
<select label="Compile manager" id="CompileClassName"
       size="1" showEmpty="false"
       queryClass="SyncTool.GUI.Main"
       queryName="SubclassOfAndSuper"
       controlStyle="width:430;">
<parameter value="SyncTool.Compile"/>
</select>
<checkbox id="WDBackup" caption="Backup objects"/>
<!--<spacer height="3mm" />-->
<checkbox id="WDSyncMetaData" caption="Synchronize meta data"/>
</vgroup>
<spacer height="3mm"/>
<fieldSet legend="Modules">
<hgroup>
<tablePane
    width="300px"
    id="Modules"
    maxRows="1000" 
    pageSize="100" 
    showZebra="true" 
    useSnapshot="false"
    showRowNumbers="true"
    showRowSelector="false"
    queryClass="SyncTool.Module"
    queryName="Modules"
    valueColumn="ID">
<parameter value="-1"/>
<column colName="ID" hidden="true"/>
<column header="Subdirectory" colName="SubDirectory"/>
<column header="" linkCaption="edit"
        link="javascript:zenPage.LoadModule('#(%query.ID)#')"/>
<column header="" linkCaption="delete"
        link="javascript:zenPage.ConfirmModuleDeletion('#(%query.ID)#')"/>
</tablePane>
<spacer width="5mm"/>
<vgroup labelPosition="left">
<text label="Subdirectory" name="SubDirectory" id="SubDirectory" size="50"
controlStyle="width:430;"/>
<select label="File type manager" name="ExportImportClassName"
        id="ExportImportClassName" size="1"
        queryClass="SyncTool.GUI.Main"
        queryName="SubclassOf"
        showEmpty="false"
        onchange="return zenPage.ExImClassNameChange();"
        controlStyle="width:430;">
<parameter value="SyncTool.ExportImportAbstract"/>
</select>
<hgroup label="Source selection" width="100%">
<html id="SourceSelection" width="384"
enclosingStyle="border-style:solid; border-width:1px; min-height:21px;"/>
<button id="SourceSelectionEdit" caption="edit" disabled="true"
 onclick="zenPage.EditSourceSelectionJS();" controlStyle="width:46;"/>
</hgroup>
<select label="Backup source objects" name="ModuleBackup" id="ModuleBackup" size="1"
        valueList="-1,0,1" controlStyle="width:430;"
        displayList="Use setting of working directory,No,Yes"
        showEmpty="false"/>
<text label="Backup subdirectory" name="ModuleBackupSubDir"
id="ModuleBackupSubDir" controlStyle="width:430;"/>
<select label="Namespace" name="Namespace" id="Namespace" size="1"
        queryClass="SyncTool.GUI.Main" showEmpty="false"
        queryName="NamespaceList" controlStyle="width:430;">
</select>
<spacer height="5mm" />
<hgroup>
<button caption="New module" onclick="zenPage.NewModule();" />
<button caption="Save module" onclick="zenPage.SaveModule();" />
</hgroup>
</vgroup>
</hgroup>
</fieldSet>
<modalGroup id="About" groupTitle="About SyncTool">
<html><p>SyncTool<br/>
<span class="versionText">Version #(%page.GetVersion())#</span></p>
<div class="copyright">
<p>Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)</p>

<p>Licensed under the Apache License, Version 2.0 (the "License");<br/>
you may not use this file except in compliance with the License.<br/>
You may obtain a copy of the License at</p>

<p style="padding-left: 50px;">
<a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank">http://www.apache.org/licenses/LICENSE-2.0</a>
</p>

<p>Unless required by applicable law or agreed to in writing, software<br/>
distributed under the License is distributed on an "AS IS" BASIS,<br/>
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>
See the License for the specific language governing permissions and<br/>
limitations under the License.</p>
</div>
</html>
</modalGroup>
</page>
]]></Data>
</XData>

<Method name="GetVersion">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ##class(SyncTool.WorkingDirectory).%GetParameter("VERSION")
]]></Implementation>
</Method>

<Method name="SaveWD">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set WDID=..%GetComponentById("WorkingDir").value
	#dim WD as SyncTool.WorkingDirectory
	If WDID'=""
	{
		Set WD=##class(SyncTool.WorkingDirectory).%OpenId(WDID)
		If WD.WorkingDirectory'=..%GetComponentById("WorkingDirText").value Set Reload=1
	}
	Else
	{
		Set WD=##class(SyncTool.WorkingDirectory).%New()
		Set Module=##class(SyncTool.Module).%New()
		Set Module.WorkingDirectory=WD
		Set Module.SubDirectory="SyncTool"
		Set Module.ExportImportClassName=$Piece(..%PackageName(),".")_".SCExportImport"
		/* ;071009
		Set SourceSelection=##class(SyncTool.StudioObjectSelection).%New()
		Set SourceSelection.Module=Module
		Set SourceSelection.Selection="SyncTool.*.cls"
		Set SourceSelection.Type="add"
		*/
		Set Reload=1
	}
	Set WD.WorkingDirectory=..%GetComponentById("WorkingDirText").value
	Set WD.CompileClassName=..%GetComponentById("CompileClassName").value
	Set WD.Backup=..%GetComponentById("WDBackup").value
	Set WD.SyncMetaData=..%GetComponentById("WDSyncMetaData").value
	Set Status=WD.%Save()
	If 'Status {&js<alert(#(..QuoteJS($system.Status.GetErrorText(Status)))#);>}
	If $Get(Reload)
	{
		Do ##class(%Net.URLParser).Parse(%request.URL,.Components)
		&js<var URL=#(..QuoteJS(..EscapeURL(%request.Data("pageclass",1)_".cls")_"?WDID="_WD.%Id()))#;
			window.location.href=URL;>
	}
]]></Implementation>
</Method>

<Method name="NewModule">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var Modules=zenPage.getComponentById("Modules");
	Modules.selectRow("");
	zenPage.LoadModule("");
]]></Implementation>
</Method>

<Method name="SaveModule">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#dim Module as SyncTool.Module

	Set WDID=..%GetComponentById("WorkingDir").value
	If WDID'=""
	{
		#;Set WD=##class(SyncTool.WorkingDirectory).%OpenId(WDID)
		Set SubDirectory=..%GetComponentById("SubDirectory").value
		#;300609 Set Module=##class(SyncTool.Module).OpenBySubDir(WD,SubDirectory)
		Set Module=##class(SyncTool.Module).%OpenId(..%GetComponentById("Modules").value)
		If Module=""
		{
			Set Module=##class(SyncTool.Module).%New()
			Do Module.WorkingDirectorySetObjectId(WDID)
		}
		Set Module.SubDirectory=SubDirectory
		Set Module.ExportImportClassName=..%GetComponentById("ExportImportClassName").value
		;250309
		;Set Module.ImportClassName=..%GetComponentById("ImportClassName").value
		;*** &js<alert("#(SubDirectory_", "_Module.%Id())#");>
		;120209
		;Set Module.ItemSelection=..Textarea2Array(..%GetComponentById("ItemSelection").value)
		;Set Module.ItemUnSelection=..Textarea2Array(..%GetComponentById("ItemUnSelection").value)
		Set Module.Backup=..%GetComponentById("ModuleBackup").value
		Set Module.BackupSubDir=..%GetComponentById("ModuleBackupSubDir").value
		Set Module.Namespace=..%GetComponentById("Namespace").value
		If Module.Namespace=-1 Set Module.Namespace=""
		Set Status=Module.%Save()
		If 'Status {&js<alert(#(##class(%CSP.Page).QuoteJS($system.Status.GetErrorText(Status)))#);>}
		Else
		{
			&js<var Modules=zenPage.getComponentById("Modules");
			var old = zenSynchronousMode;
			zenSynchronousMode = true;
			Modules.executeQuery();
			zenSynchronousMode = old;
			//zenPage.getComponentById("SourceSelectionEdit").setProperty("disabled",false);
			zenPage.LoadModule(#(..QuoteJS(Module.%Id()))#);
			Modules.selectRow(Modules.rowCount-1);>

			&sql(select count(*) into :SameSubDir
			       from SyncTool._Module
			      where WorkingDirectory=:WDID and SubDirectory=:SubDirectory)
			If SameSubDir>1
			{
				&js<alert("A module with subdirectory \"#(SubDirectory)#\" already exists.\nPlease make sure to use File Type Manager in those modules which handle different files.");>
			}
		}
	}
	Else {&js<alert("Please select a working directory or create a new one.");>}
]]></Implementation>
</Method>

<Method name="LoadWD">
<FormalSpec>iD</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	If $G(iD)'="",##class(SyncTool.WorkingDirectory).%ExistsId(iD)
	{
		Set wd=##class(SyncTool.WorkingDirectory).%OpenId(iD)
		#dim MyDir as %String = wd.GetMyDir()
		If MyDir'="",##class(SyncTool.Update).UpdateNeededFromDir(MyDir,.Status)
		{
			Set wd=""
			Do ##class(Update).StartUpdate(MyDir,..%PackageName()_".Main.cls?WDID="_iD)
		}
		Else
		{
			&js<
			zenPage.getComponentById("DeleteWDMenuItem").setDisabled(false);
			zenPage.getComponentById("ExportWDMenuItem").setDisabled(false);
			zenPage.getComponentById("ImportWDMenuItem").setDisabled(false);
			zenPage.getComponentById("ImportAllWDMenuItem").setDisabled(false);
			zenPage.getComponentById("SyncWDMenuItem").setDisabled(false);
			>
			/*
			&js<
			zenPage.getComponentById("DeleteWDMenuItem").setProperty("disabled",false);
			zenPage.getComponentById("ExportWDMenuItem").setProperty("disabled",false);
			zenPage.getComponentById("ImportWDMenuItem").setProperty("disabled",false);
			zenPage.getComponentById("ImportAllWDMenuItem").setProperty("disabled",false);
			zenPage.getComponentById("SyncWDMenuItem").setProperty("disabled",false);
			>
			*/
		}
	}
	Else
	{
		Set wd=##class(SyncTool.WorkingDirectory).%New()
		&js<
		zenPage.getComponentById("DeleteWDMenuItem").setDisabled(true);
		zenPage.getComponentById("ExportWDMenuItem").setDisabled(true);
		zenPage.getComponentById("ImportWDMenuItem").setDisabled(true);
		zenPage.getComponentById("ImportAllWDMenuItem").setDisabled(true);
		zenPage.getComponentById("SyncWDMenuItem").setDisabled(true);
		>
		/*
		&js<
		zenPage.getComponentById("DeleteWDMenuItem").setProperty("disabled",true);
		zenPage.getComponentById("ExportWDMenuItem").setProperty("disabled",true);
		zenPage.getComponentById("ImportWDMenuItem").setProperty("disabled",true);
		zenPage.getComponentById("ImportAllWDMenuItem").setProperty("disabled",true);
		zenPage.getComponentById("SyncWDMenuItem").setProperty("disabled",true);
		>
		*/
	}

	If $IsObject(wd)
	{
		&js<
		zenPage.getComponentById("WorkingDirText").setValue(#(##class(%CSP.Page).QuoteJS(wd.WorkingDirectory))#);
		zenPage.getComponentById("CompileClassName").setValue(#(##class(%CSP.Page).QuoteJS(wd.CompileClassName))#);
		zenPage.getComponentById("WDBackup").setValue(#(##class(%CSP.Page).QuoteJS(wd.Backup))#);
		zenPage.getComponentById("WDSyncMetaData").setValue(#(##class(%CSP.Page).QuoteJS(wd.SyncMetaData))#);
		zenPage.getComponentById("Modules").parameters[0].value="#(wd.%Id())#";
		zenPage.getComponentById("Modules").executeQuery();>

		Do ..LoadModule("")
	}
]]></Implementation>
</Method>

<Method name="LoadModule">
<FormalSpec>iD</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set SSSummary=""
	If $G(iD)'="",##class(SyncTool.Module).%ExistsId(iD)
	{
		Set Module=##class(SyncTool.Module).%OpenId(iD,,.Status)
		/* ;160609
		If 'Status {Set SSSummary=$system.Status.GetErrorText(Status)}
		Else 
		{
			Set SSClassName=Module.ExportImportClass.GetSSClassName(.Status)
			If 'Status {Set SSSummary=$system.Status.GetErrorText(Status)}
			Else
			{
				Set EditClass=$ZObjClassMethod(SSClassName,"GetEditClassName",.Status)
				If 'Status {Set SSSummary=$system.Status.GetErrorText(Status)}
				Else {Set SSSummary=$ZObjClassMethod(EditClass,"Summary",Module)}
			}
		}
		*/
		Set SSSummary=..GetSSSummary(iD)
	}
	Else
	{
		Set Module=##class(SyncTool.Module).%New()
	}
	&js<zenPage.getComponentById("SubDirectory").setValue(#(##class(%CSP.Page).QuoteJS(Module.SubDirectory))#);
		var ExImClassName=#(##class(%CSP.Page).QuoteJS(Module.ExportImportClassName))#;
		zenPage.getComponentById("ExportImportClassName").setValue(ExImClassName);
		zenPage.getComponentById("ExportImportClassName").setProperty("originalValue",ExImClassName);
		//250309
		//zenPage.getComponentById("ImportClassName").setValue(##class(%CSP.Page).QuoteJS(Module.ImportClassName));
		//120209
		//zenPage.getComponentById("ItemSelection").setValue(##class(%CSP.Page).QuoteJS(..Array2Textarea(Module.ItemSelection)))#);
		//zenPage.getComponentById("ItemUnSelection").setValue(##class(%CSP.Page).QuoteJS(..Array2Textarea(Module.ItemUnSelection)))#);
		zenPage.getComponentById("SourceSelectionEdit").setProperty("disabled",#($Select(Module.%Id()="":"true",1:"false"))#);
		zenPage.getComponentById("SourceSelection").setProperty("content",#(..QuoteJS(SSSummary))#);
		zenPage.getComponentById("ModuleBackup").setValue(#(##class(%CSP.Page).QuoteJS(Module.Backup))#);
		zenPage.getComponentById("ModuleBackupSubDir").setValue(#(##class(%CSP.Page).QuoteJS(Module.BackupSubDir))#);
		var Namespace=#(##class(%CSP.Page).QuoteJS(Module.Namespace))#;
		if (Namespace=="") Namespace=-1;
		zenPage.getComponentById("Namespace").setValue(Namespace);
	>
]]></Implementation>
</Method>

<Method name="NewWD">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	&js<
		var URL=#(..QuoteJS(..EscapeURL(%request.Data("pageclass",1)_".cls")))#;
		window.location.href=URL;
	>
]]></Implementation>
</Method>

<Method name="ConfirmWDDeletion">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set WDID=..%GetComponentById("WorkingDir").value
	If $Get(WDID)'="",##class(SyncTool.WorkingDirectory).%ExistsId(WDID)
	{
		&js<
		if (confirm("Delete working directory?"))
		{
			zenPage.DeleteWD("#(WDID)#");
			var URL=#(..QuoteJS(..EscapeURL(%request.Data("pageclass",1)_".cls")))#;
			window.location.href=URL;
		}>
	}
	Else {&js<alert("Please select a working directory.");>}
]]></Implementation>
</Method>

<Method name="DeleteWD">
<FormalSpec>iD</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	If $Get(iD)'="",##class(SyncTool.WorkingDirectory).%ExistsId(iD)
	{
		Set Status=##class(SyncTool.WorkingDirectory).%DeleteId(iD)
		If 'Status &js<alert(#(..QuoteJS($system.Status.GetErrorText(Status)))#);>
	}
]]></Implementation>
</Method>

<Method name="ConfirmModuleDeletion">
<FormalSpec>iD</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	If $G(iD)'="",##class(SyncTool.Module).%ExistsId(iD)
	{
		&js<
		if (confirm("Delete module?"))
		{
			var Status=zenPage.DeleteModule("#(iD)#");
			if (Status==1)
			{
				zenPage.getComponentById("Modules").executeQuery();
				zenPage.NewModule()
			}
		}>
	}
	Else {&js<alert("Please select a module.");>}
]]></Implementation>
</Method>

<Method name="DeleteModule">
<ClassMethod>1</ClassMethod>
<FormalSpec>iD</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set Status=$$$OK
	If $G(iD)'="",##class(SyncTool.Module).%ExistsId(iD)
	{
		Set Status=##class(SyncTool.Module).%DeleteId(iD)
	}
	Quit Status
]]></Implementation>
</Method>

<Method name="Array2Textarea">
<ClassMethod>1</ClassMethod>
<FormalSpec>iArray:%ArrayOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set String=""
	If iArray.Count()>0
	{
		Set String=iArray.GetAt(1)
		For I=2:1:iArray.Count()
		{
			Set String=String_$Char(10)_iArray.GetAt(I)
		}
	}
	Quit String
]]></Implementation>
</Method>

<Method name="Textarea2Array">
<ClassMethod>1</ClassMethod>
<FormalSpec>iText:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	Set Array=##class(%ArrayOfDataTypes).%New()
	Set ArrayPosition=1
	For I=1:1:$Length(iText,$Char(10))
	{
		If $Piece(iText,$Char(10),I)'=""
		{
			Set Entry=$Piece(iText,$Char(10),I)
			If $Extract(Entry,$Length(Entry))=$Char(13) Set $Extract(Entry,$Length(Entry))=""
			If Entry'=""
			{
				Do Array.SetAt(Entry,ArrayPosition)
				Set ArrayPosition=ArrayPosition+1
			}
		}
	}
	Quit Array
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* ;130809
/// Funktion kopiert vom System-Management-Portal
Method launchPopupWindow(
	page,
	features,
	pageName) [ Language = javascript ]
{
	if (features == null) {
		features = "status,scrollbars,resizable";
	}
	var wid = self.screen.width;
	var hgt = self.screen.height;
	wid = wid * 0.8;
	hgt = hgt * 0.8;
	var top = self.screen.height * 0.1;
	var left = self.screen.width * 0.1;
	var id = '';
	var questionmark = page.split("?");
	var url;
	if (questionmark.length > 1) {
		url = escape(questionmark[0]) + "?" + questionmark[1];
		url = url + "&" + id;
	} else {
		url = page + "?" + id;
	}
	if (pageName == null) {
		pageName = 'autopagePopup';
	}
	self.autopagePopupWindow = window.open(url,pageName,'left='+left+',top='+top+',width='+wid+',height='+hgt+(features==''?'':','+features));
	self.autopagePopupWindow.focus();
}
Method gotoBrowse(
	nsp,
	param) [ Language = javascript ]
{
	var remotefile = zenPage.getComponentById('WorkingDirText').getValue();
	//var nsp="#($ZNSPACE)#";
	var url = "/csp/sys/UtilFileSelect.csp?$NAMESPACE="+nsp+"&Dir=" + cspEncodeUTF8(remotefile) + "&" + param;
	return zenPage.launchPopupWindow(url);
}

Method gotoBrowse2(param) [ ZenMethod ]
{
	&js<
	function gotoBrowse3(param)
	{
		var remotefile = zenPage.getComponentById('WorkingDirText').getValue();
		var nsp="#($ZNSPACE)#";
		var url = "/csp/sys/UtilFileSelect.csp?$NAMESPACE="+nsp+"&Dir=" + cspEncodeUTF8(remotefile) + "&Wizard=Select&Wild=*&" + param;
		zenPage.launchPopupWindow(url);
	}
	var param="#(param)#";
	gotoBrowse3(param);
	>
}
*/
]]></Content>
</UDLText>

<Method name="selectDirectory">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.launchPopupWindow('%ZEN.Dialog.fileSelect.cls','FileSelectWindow',
		'status,scrollbars,resizable,width=660,height=500',{"showdirectoryonly":1});
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description>
This method is called when this page is resized.
In response to a resize, we use JavaScript to dynamically
resize the 2 main groups on this page.
You can modify this method to meet your needs.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	/*
	// find enclosing div for the title (if present) and get its height
	var title = zenPage.getComponentById('title');
	var divTitle = title ? title.getEnclosingDiv() : null;
	var hgtTitle = divTitle ? parseInt(divTitle.offsetHeight) : 0;
	// find the enclosing divs for the 2 groups
	var groupLeft = zenPage.getComponentById('groupLeft');
	var groupRight = zenPage.getComponentById('groupRight');
	var divgroupLeft = groupLeft ? groupLeft.getEnclosingDiv() : null;
	var divgroupRight = groupRight ? groupRight.getEnclosingDiv() : null;
	// find height of window
	var winHeight = zenGetWindowHeight();
	var winWidth = zenGetWindowWidth();
	// adjust the size of groups
	var widLeft = divgroupLeft ? parseInt(divgroupLeft.offsetWidth) : 0;
	var widRight = winWidth - widLeft;
	var hgt = winHeight - hgtTitle - 20;
	if (divgroupLeft) {
		divgroupLeft.style.height = hgt + 'px';
	}
	if (divgroupRight) {
		divgroupRight.style.height = hgt + 'px';
		divgroupRight.style.width = widRight + 'px';
	}
	*/
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	update = function(remotefile)
	{
		zenPage.getComponentById("WorkingDirText").setValue(remotefile);
	};
	zenPage.LoadWD(zenPage.getComponentById("WorkingDir").getValue());
]]></Implementation>
</Method>

<Method name="CreateCompileClassRS">
<FormalSpec>*SC:%Status,Info:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	Set SC=$$$OK
	Set RS=##class(%ResultSet).%New("SyncTool.GUI.Main:SubclassOfAndSuper")
	Set SC=RS.Prepare()
	Quit RS
]]></Implementation>
</Method>

<Method name="ExecuteCompileClassRS">
<FormalSpec>pRS:%Library.ResultSet,*tSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tSC=pRS.Execute("SyncTool.Compile")
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="SubclassOfAndSuper">
<Description>
Wrapper for the %Dictionary.CompiledClassQuery:SubclassOf query plus it returns the super class.</Description>
<Type>%Query</Type>
<FormalSpec>super:%String,initval:%String=""</FormalSpec>
<Parameter name="ROWSPEC" value="ClassName:%String,Name:%String"/>
</Query>

<Method name="SubclassOfAndSuperExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,super:%String,initval:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set RS=##class(%ResultSet).%New("%Dictionary.ClassDefinitionQuery:SubclassOf")
	Set Status=RS.Execute(super,initval)
	Quit:'Status Status
	Set qHandle=""
	Set qHandle(1)=super
	While RS.Next() {Set qHandle($Order(qHandle(""),-1)+1)=RS.Get("Name")}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SubclassOfAndSuperClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>SubclassOfAndSuperExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SubclassOfAndSuperFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>SubclassOfAndSuperExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle=$Order(qHandle(qHandle))
	If qHandle'=""
	{
		Set DisplayName=qHandle(qHandle)
		Set Parameter=##class(%Dictionary.ParameterDefinition).%OpenId(qHandle(qHandle)_"||DISPLAYNAME")
		If $IsObject(Parameter) Set DisplayName=Parameter.Default
		Set Row=$ListBuild(qHandle(qHandle),DisplayName)
	}
	Else
	{
		Set Row="",AtEnd=1
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportWD">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	/* ;130809
	Set WDID=..%GetComponentById("WorkingDir").value
	&js<zenPage.launchPopupWindow(zenLink('SyncTool.GUI.BusyIndicator.cls?Action=ExportWD&ID=#(WDID)#'),
		'Export working directory',
		'status,scrollbars,resizable,width=600,height=400');>
	Quit
	*/
	zenPage.launchPopupWindow(zenLink('SyncTool.GUI.BusyIndicator.cls'),
		'ExportWD',
		'status,scrollbars,resizable,width=600,height=400',
		{"Action":"ExportWD","ID":zenPage.getComponentById("WorkingDir").getValue()});
]]></Implementation>
</Method>

<Method name="ImportWD">
<FormalSpec>iModified:%Boolean=1</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	/* ;130809
	Set WDID=..%GetComponentById("WorkingDir").value
	&js<zenPage.launchPopupWindow(zenLink('SyncTool.GUI.BusyIndicator.cls?Action=ImportWD&ID=#(WDID)#&Modified=#(iModified)#'),
		'Import working directory',
		'status,scrollbars,resizable,width=600,height=400');>
	Quit
	*/
	zenPage.launchPopupWindow(zenLink('SyncTool.GUI.BusyIndicator.cls'),
		'ImportWD',
		'status,scrollbars,resizable,width=600,height=400',
		{"Action":   "ImportWD",
		 "ID":       zenPage.getComponentById("WorkingDir").getValue(),
		 "Modified": iModified});
]]></Implementation>
</Method>

<Method name="SyncWD">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.launchPopupWindow(zenLink('SyncTool.GUI.SyncDialog.cls'),
		'SyncronizeWD',
		'status,scrollbars,resizable,width=600,height=400',
		{"Action":"SyncWD","ID":zenPage.getComponentById("WorkingDir").getValue()});
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $Get(%request.Data("WDID",1))'=""
	{
		Set ..%GetComponentById("WorkingDir").value=%request.Data("WDID",1)
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EditSourceSelectionJS">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ModulesTable=zenPage.getComponentById("Modules");
	if (ModulesTable)
	{
		zenPage.EditSourceSelection(ModulesTable.value);
	}
]]></Implementation>
</Method>

<Method name="EditSourceSelection">
<FormalSpec>iModuleID</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set Module=##class(SyncTool.Module).%OpenId(iModuleID)
	If '$IsObject(Module.ExportImportClass)
	{
		&js<alert("Please select a file type manager class.");>
		Quit
	}
	Set SSClassName=Module.ExportImportClass.GetSSClassName(.Status)
	If 'Status
	{
		&js<alert(#(..QuoteJS($system.Status.GetErrorText(Status)))#);>
		Quit
	}
	If SSClassName=""
	{
		&js<alert("Source selection not needed/possible.");>
		Quit
	}

	Set EditClass=$ZObjClassMethod(SSClassName,"GetEditClassName",.Status)
	If 'Status
	{
		&js<alert(#(..QuoteJS($system.Status.GetErrorText(Status)))#);>
		Quit
	}

	&js<zenPage.launchPopupWindow(zenLink('#(EditClass)#.cls?ModuleID=#(iModuleID)#'),
		'EditSourceSelection',
		'status,scrollbars,resizable,width=800,height=400');>
]]></Implementation>
</Method>

<Method name="onPopupAction">
<FormalSpec>popupName,action,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (popupName=="EditSourceSelection" && action=="ok")
	{
		var Modules=zenPage.getComponentById("Modules");
		zenPage.LoadModule(Modules.getValue());
		zenPage.SynchronizeMetaDataModule(Modules.getValue());
	}
	if (popupName=="FileSelectWindow" && action=="ok" && value!="")
	{
		zenPage.getComponentById("WorkingDirText").setValue(value);
	}
	if (popupName=="SyncronizeWD" && action=="ok" && value.CollisionsFound)
	{
		zenPage.launchPopupWindow('SyncTool.GUI.Collisions.cls','Collisions',
			'status,scrollbars,resizable,width=660,height=500',{"ManagerID":value.ManagerID});
	}
	if (popupName=="Collisions" && action=="ok")
	{
		zenPage.launchPopupWindow(zenLink('SyncTool.GUI.SyncDialog.cls'),
			'ResolveConflicts',
			'status,scrollbars,resizable,width=600,height=400',
			{"Action":    "ResolveConflicts",
			 "ID":        zenPage.getComponentById("WorkingDir").getValue(),
			 "ManagerID": value.ManagerID});
	}
]]></Implementation>
</Method>

<Query name="NamespaceList">
<Type>%Query</Type>
<Parameter name="ROWSPEC" value="InternalName:%String,ExternalName:%String"/>
</Query>

<Method name="NamespaceListExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle=##class(%ResultSet).%New("%SYS.Namespace:List")
	Set Status=qHandle.Execute()
	Quit:'Status Status
	Set qHandle("start")=1
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="NamespaceListClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>NamespaceListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="NamespaceListFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>NamespaceListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $Data(qHandle("start"))
	{
		Set Row=$ListBuild(-1,"current Namespace")
		Kill qHandle("start")
		Quit $$$OK
	}
	If qHandle.Next()
	{
		Set Row=$ListBuild(qHandle.Data("Nsp"),qHandle.Data("Nsp"))
	}
	Else
	{
		Set AtEnd=1,Row=""
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExImClassNameChange">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ret=true;
	var Modules=zenPage.getComponentById("Modules");
	if (Modules.getValue()!="" && zenPage.CountSelection(Modules.getValue())>0)
	{
		if (confirm("This will delete the source selection!"))
		{
			zenPage.DeleteSelection(Modules.getValue());
			zenPage.getComponentById("SourceSelection").setProperty("content",zenPage.GetSSSummary(Modules.getValue()));
		}
		else
		{
			ret=false;
			var ExImClassName=zenPage.getComponentById("ExportImportClassName");
			ExImClassName.setValue(ExImClassName.getProperty("originalValue"));
		}
	}
	return ret;
]]></Implementation>
</Method>

<Method name="CountSelection">
<ClassMethod>1</ClassMethod>
<FormalSpec>iModuleID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set Module=##class(SyncTool.Module).%OpenId(iModuleID)
	Quit:'$IsObject(Module) 0
	Quit:'$IsObject(Module.SourceSelection) 0
	Quit Module.SourceSelection.Count()
]]></Implementation>
</Method>

<Method name="DeleteSelection">
<ClassMethod>1</ClassMethod>
<FormalSpec>iModuleID</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set Module=##class(SyncTool.Module).%OpenId(iModuleID,,.Status)
	Quit:'Status Status
	Do Module.SourceSelection.Clear()
	Quit Module.%Save()
]]></Implementation>
</Method>

<Method name="GetSSSummary">
<Description>
Get source selection summary</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>iModuleID</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set SSSummary=""
	Set Module=##class(SyncTool.Module).%OpenId(iModuleID,,.Status)
	If 'Status {Set SSSummary=$system.Status.GetErrorText(Status)}
	Else 
	{
		Set SSClassName=Module.ExportImportClass.GetSSClassName(.Status)
		If 'Status {Set SSSummary=$system.Status.GetErrorText(Status)}
		ElseIf SSClassName'=""
		{
			Set EditClass=$ZObjClassMethod(SSClassName,"GetEditClassName",.Status)
			If 'Status {Set SSSummary=$system.Status.GetErrorText(Status)}
			Else {Set SSSummary=$ZObjClassMethod(EditClass,"Summary",Module)}
		}
	}
	Quit SSSummary
]]></Implementation>
</Method>

<Query name="SubclassOf">
<Type>%Query</Type>
<FormalSpec>super:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ClassName:%String,Name:%String"/>
</Query>

<Method name="SubclassOfExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,super:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle=##class(%ResultSet).%New("%Dictionary.ClassDefinitionQuery:SubclassOf")
	Set Status=qHandle.Execute(super)
	Quit Status
]]></Implementation>
</Method>

<Method name="SubclassOfClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>SubclassOfExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SubclassOfFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>SubclassOfExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If qHandle.Next()
	{
		Set DisplayName=qHandle.Data("Name")
		Set Parameter=##class(%Dictionary.ParameterDefinition).%OpenId(qHandle.Data("Name")_"||DISPLAYNAME")
		If $IsObject(Parameter) Set DisplayName=Parameter.Default
		Set Row=$ListBuild(qHandle.Data("Name"),DisplayName)
	}
	Else
	{
		Set Row="",AtEnd=1
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SynchronizeMetaDataModule">
<FormalSpec>iModuleID</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set Module = ##class(SyncTool.Module).%OpenId(iModuleID)
	If $IsObject(Module)
	{
		#dim MDModule as SyncTool.Module = Module.FindMetaDataModule()
		If $IsObject(MDModule)
		{
			Set Status=MDModule.RefreshSelectedObjects()
			If Status Set Status=MDModule.Synchronize(,.Collisions)
			If 'Status
			{
				&js<alert(#(..QuoteJS($system.Status.GetErrorText(Status)))#);>
			}
			If $Data(Collisions)
			{
				&js<alert("Collisions found on synchronizing Module #(MDModule.SubDirectory)# (ID: #(MDModule.%Id())#)");>
			}
		}
	}
]]></Implementation>
</Method>
</Class>
</Export>
