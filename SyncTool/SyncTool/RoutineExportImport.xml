<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.RoutineExportImport">
<Description>
</Description>
<Super>ExportImport</Super>
<TimeCreated>60812,55263.863592</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Copyright 2009 Alexander Riemer (alex.riemer@gmx.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
]]></Content>
</UDLText>

<Parameter name="SUPPORTEDTYPES">
<Default>int,mac,inc,bas,mvb,mvi</Default>
</Parameter>

<Parameter name="DISPLAYNAME">
<Default>Flat files for routines</Default>
</Parameter>

<Method name="Export">
<Description><![CDATA[
Exports a routine to a plain text file<br>
<br>
Examples:
<example>
	;Exports the routine MyRoutine.mac to c:\dir\MyRoutine.mac
	Write ##class(SyncTool.RoutineExportImport).Routine("c:\dir\MyRoutine.mac")
	;
	;Exports the routine MyRoutine.mac to c:\dir\MyRoutine.mac
	Write ##class(SyncTool.RoutineExportImport).Routine("c:\dir\","MyRoutine.mac")
	;
	;Tries to determine the type of MyRoutine and exports the routine MyRoutine.xxx to c:\dir\MyFile.txt
	Write ##class(SyncTool.RoutineExportImport).Export("c:\dir\MyFile.txt","MyRoutine")
</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&iFilename:%String,iSrcObjects:%ArrayOfObjects,iFlags:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Q:$G(iFilename)="" $system.Status.Error(5008)

	I $D(iSrcObjects),$IsObject(iSrcObjects)
	{
		#dim SrcObject as SrcObject
		S SrcObject=iSrcObjects.GetNext("")
		I SrcObject.ObjectName'="" S Routine=SrcObject.GetObjectName()
		S Namespace=SrcObject.File.Module.Namespace
	}
	Else
	{
		S Routine=$G(iSrcObjects)
		I Routine="" S Routine=$O(iSrcObjects(""))
		S Namespace=""
	}
	I Routine="" S Routine=##class(%File).GetFilename(iFilename)
	S Extension=$ZCVT($P(Routine,".",$L(Routine,".")),"l")
	I ".int.mac.inc.bas.mvb.mvi."'[("."_Extension_".") ;No extension given. Try to guess one
	{
		F Extension="mac","int","bas","inc","mvb","mvi","" I Extension'="" Q:##class(%RoutineMgr).Exists(Routine_"."_Extension)
		I Extension'=""
		{
			S Routine=Routine_"."_Extension
			I Routine[##class(%File).GetFilename(iFilename)
			{
				S iFilename=##class(%File).GetDirectory(iFilename)
				I $TR($E(iFilename,$L(iFilename)),"\","/")'="/" S iFilename=iFilename_"/"
				S iFilename=iFilename_"/"_Routine
			}
		}
	}
	I $TR($E(iFilename,$L(iFilename)),"\","/")="/" ;Directory given
	{
		I Routine'="" S iFilename=iFilename_Routine
	}
	I Routine="" Q $system.Status.Error(5028)
	S Status=$$$OK
	I Namespace'="" S ThisNS=$ZNSpace ZN Namespace
	I '##class(%RoutineMgr).Exists(Routine) S Status=$system.Status.Error(5018,Routine)
	I Namespace'="" ZN ThisNS
	Q:'Status Status
	S $P(iFilename,".",$L(iFilename,"."))=$ZCVT($P(iFilename,".",$L(iFilename,".")),"l") ;File extension in low case

	#;Parameters are complete, export now
	I Namespace'="" ZN Namespace
	S RoutineObj=##class(%RoutineMgr).%OpenId(Routine)
	S Code=RoutineObj.Code
	#;D RoutineObj.%Open()
	While 'Code.AtEnd
	{
		Set Line($Increment(Line))=Code.ReadLine()
	}
	S RoutineObj=""
	I Namespace'="" ZN ThisNS

	#;Clear whitespace at end of routine
	F  S Line=$O(Line(""),-1) Q:Line=""  Q:$ZStrip(Line(Line),"<>W")'=""  K Line(Line)

	S FileObj=##class(%FileCharacterStream).%New()
	S FileObj.Filename=iFilename
	S Line=$O(Line(""))
	While Line'=""
	{
		S NextLine=$O(Line(Line))
		I NextLine="" {D FileObj.Write(Line(Line))}
		Else {D FileObj.WriteLine(Line(Line))}
		S Line=NextLine
	}

	S Status=FileObj.SaveStream()
	Q Status
]]></Implementation>
</Method>

<Method name="Objectname2Filename">
<ClassMethod>1</ClassMethod>
<FormalSpec>iObjectName:%Binary,iSourceSelection:SourceSelection,iNamespace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit iObjectName
]]></Implementation>
</Method>

<Method name="Import">
<Description><![CDATA[
Imports a routine from a plain file that was previously exported with ##class(SyncTool.RoutineExportImport).Export()<br>
<br>
Example:
<example>
	;Imports the file c:\dir\MyRoutine.mac into routine MyRoutine.mac and compiles the routine
	Write ##class(SyncTool.RoutineImport).Import("c:\dir\MyRoutine.mac",,1)
</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&ioRoutine="",iNamespace:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Q:$G(iFilename)="" $system.Status.Error(5008)
	Q:'##class(%File).Exists(iFilename) $system.Status.Error(5012,iFilename)

	S Routine=$G(ioRoutine)
	I Routine="" S Routine=$O(ioRoutine(""))
	I Routine="" S Routine=##class(%File).GetFilename(iFilename)
	I Routine="" Q $system.Status.Error(5028)
	I ".int.mac.bas.inc.mvb.mvi."'[("."_$ZCVT($P(Routine,".",$L(Routine,".")),"l")_".") Q $system.Status.Error(5028)

	K ioRoutine
	S ioRoutine(Routine)=""

	I iNamespace'="" S ThisNS=$ZNSpace ZN iNamespace
	S RoutineObj=##class(%RoutineMgr).%New(Routine)
	D RoutineObj.Code.Clear()
	S FileObj=##class(%FileCharacterStream).%New()
	S FileObj.Filename=iFilename
	S Status=RoutineObj.Code.CopyFrom(FileObj)
	I Status S Status=RoutineObj.%Save()
	S RoutineObj="",FileObj=""
	I iNamespace'="" ZN ThisNS
	#;060509 Q:'Status Status
	#;060509 I iCompile S Status=RoutineObj.Compile(iFlags)
	Q Status
]]></Implementation>
</Method>

<Method name="GetImportableFileMask">
<ClassMethod>1</ClassMethod>
<FormalSpec>iModule:Module</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "*."_$Replace(..#SUPPORTEDTYPES,",",";*.")
]]></Implementation>
</Method>

<Method name="Filename2Objectname">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[iFilename:%String,&oObjectNames]]></FormalSpec>
<Implementation><![CDATA[
	Set oObjectNames(iFilename)=""
	Quit
]]></Implementation>
</Method>

<Method name="ValidateSourceSelection">
<ClassMethod>1</ClassMethod>
<FormalSpec>iSS:SourceSelection</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status=$$$OK
	Set Type=$Piece(iSS.Selection,".",$Length(iSS.Selection,"."))
	If (","_..#SUPPORTEDTYPES_",")'[(","_Type_",")
	{
		Set Status=$system.Status.Error(5001,"Routine type "_Type_" is not supported.")
	}
	If Status Set Status=##super(iSS)
	Quit Status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>
</Export>
