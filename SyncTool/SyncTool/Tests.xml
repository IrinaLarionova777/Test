<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="SyncTool.Tests">
<Description>
Automated testing of SyncTool</Description>
<Super>%UnitTest.TestCase</Super>
<TimeCreated>61772,51638.498093</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Method OnBeforeAllTests() As %Status
{
	Quit $$$OK
}

/// Run by <B>RunTest</B> once after all test methods in the test class are run. Can be used to tear down a test environment that was set up by <B>OnBeforeAllTests</B> See example in <b>OnBeforeAllTests</b>. 
Method OnAfterAllTests() As %Status
{
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="Test0010CreateTestWD">
<Implementation><![CDATA[
	Set WD=##class(WorkingDirectory).%New()
	Set WD.WorkingDirectory=##class(%File).NormalizeDirectory(##class(Compile).GetTempDir()_"UnitTests/")

	Set Status=$$$OK
	/*
	If ##class(%File).DirectoryExists(WD.WorkingDirectory)
	{
		Set Status=$$$AssertTrue(..DelDir(WD.WorkingDirectory),"Delete working directory")
	}
	*/
	Set OldWDID=""
	&sql(declare WD cursor for
	      select %id into :OldWDID from WorkingDirectory
	       where WorkingDirectory like '%UnitTests%')
	&sql(open WD)
	&sql(fetch WD)
	While 'SQLCODE
	{
		Do $$$AssertStatusOK(..CleanUpTestData(OldWDID),"Cleanup for working directory ID "_OldWDID_" successful.")
		&sql(fetch WD)
	}
	&sql(close WD)

	If Status
	{
		If $$$AssertTrue(##class(%File).CreateDirectoryChain(WD.WorkingDirectory),"Create working directory")
		{
			If $$$AssertStatusOK(WD.%Save(),"Save working directory object")
			{
				Set ^||TestWDID=WD.%Id()
				Do $$$LogMessage("Working directory ID: "_WD.%Id())
			}
		}
	}
]]></Implementation>
</Method>

<Method name="Test0020CreateModule1">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Set Module=##class(Module).%New()
	Set Module.WorkingDirectory=WD
	Set Module.SubDirectory="StudioXML"
	Set Module.ExportImportClassName="SyncTool.ExportImport"
	Do $$$AssertStatusOK(Module.%Save(),"Save module object """_Module.Directory_"""")

	Set SourceSelection=##class(StudioObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.Selection="UnitTests.*.cls"
	Do $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.Selection_"""")

	Set SourceSelection=##class(StudioObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.Selection="UnitTests.*.mac"
	Do $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.Selection_"""")

	Set SourceSelection=##class(StudioObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.Selection="UnitTests.*.mvb"
	Do $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.Selection_"""")

	Set SourceSelection=##class(StudioObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.Selection="UnitTests.G*.gbl"
	Do $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.Selection_"""")
]]></Implementation>
</Method>

<Method name="Test0020CreateModule2">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Set Module=##class(Module).%New()
	Set Module.WorkingDirectory=WD
	Set Module.SubDirectory="Routines"
	Set Module.ExportImportClassName="SyncTool.RoutineExportImport"
	Do $$$AssertStatusOK(Module.%Save(),"Save module object """_Module.Directory_"""")

	Set SourceSelection=##class(StudioObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.Selection="UnitTests2.*.mac"
	Do $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.Selection_"""")

	Set SourceSelection=##class(StudioObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.Selection="UnitTests2.*.mvb"
	Do $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.Selection_"""")
]]></Implementation>
</Method>

<Method name="Test0020CreateModule3">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Set Module=##class(Module).%New()
	Set Module.WorkingDirectory=WD
	Set Module.SubDirectory="Objects"
	Set Module.ExportImportClassName="SyncTool.ObjectExportImport"
	Do $$$AssertStatusOK(Module.%Save(),"Save module object """_Module.Directory_"""")

	Set SourceSelection=##class(ObjectSelection).%New()
	Set SourceSelection.Module=Module
	Set SourceSelection.SQL="select %ID from UnitTests.TestClass"
	Set SourceSelection.Type="UnitTests.TestClass"
	If $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.SQL_"""")
	{
		Set %PersistentObjectSS=SourceSelection.%Id()
	}
]]></Implementation>
</Method>

<Method name="Test0030CreateTestData1">
<Implementation><![CDATA[
	Set ClassName="UnitTests.TestClass"
	If ##class(%Dictionary.ClassDefinition).%ExistsId(ClassName)
	{
		Do $$$AssertStatusOK(##class(%Dictionary.ClassDefinition).%DeleteId(ClassName),"Delete class """_ClassName_"""")
	}
	Set Class=##class(%Dictionary.ClassDefinition).%New()
	Set Class.Name=ClassName
	Set Class.Super="%Persistent,%XML.Adaptor"
	Set Class.ProcedureBlock=1
	Set Method=##class(%Dictionary.MethodDefinition).%New()
	Set Method.Name="TestMethod"
	Set Method.ClassMethod=1
	Do Method.Implementation.WriteLine(" Write ""Hello World (in a class)"",!")
	Set Method.parent=Class
	Set Prop1=##class(%Dictionary.PropertyDefinition).%New()
	Set Prop1.Name="Property1"
	Set Prop1.parent=Class
	Set Prop2=##class(%Dictionary.PropertyDefinition).%New()
	Set Prop2.Name="GUID"
	Set Prop2.Type="%XML.GUID"
	Set Prop2.Transient=1
	Do Prop2.Parameters.SetAt("ATTRIBUTE","XMLPROJECTION")
	Set Prop2.parent=Class
	Set Param=##class(%Dictionary.ParameterDefinition).%New()
	Set Param.Name="GUIDENABLED"
	Set Param.Default=1
	Set Param.parent=Class
	Do $$$AssertStatusOK(Class.%Save(),"Save class """_Class.Name_"""")
	Do $$$AssertStatusOK($system.OBJ.Compile(Class.Name),"Compile class """_Class.Name_"""")

	Set RoutineName="UnitTests.TestRoutine.mac"
	If ##class(%RoutineMgr).Exists(RoutineName)
	{
		Do $$$AssertStatusOK(##class(%RoutineMgr).Delete(RoutineName),"Delete routine """_RoutineName_"""")
	}
	Set Routine=##class(%RoutineMgr).%New(RoutineName)
	Do Routine.Code.Clear()
	Do Routine.Code.WriteLine(" Write ""Hello World (in a MAC routine)"",!")
	Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
	Kill Item
	Set Item(Routine.Name)=""
	Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")

	Set RoutineName="UnitTests.TestMVB.mvb"
	If ##class(%RoutineMgr).Exists(RoutineName)
	{
		Do $$$AssertStatusOK(##class(%RoutineMgr).Delete(RoutineName),"Delete routine """_RoutineName_"""")
	}
	Set Routine=##class(%RoutineMgr).%New(RoutineName)
	Do Routine.Code.Clear()
	Do Routine.Code.WriteLine("Print ""Hello World (in a MVB routine)""")
	Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
	Kill Item
	Set Item(Routine.Name)=""
	Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")

	If $Data(^UnitTests.Global)
	{
		Kill ^UnitTests.Global
		Do $$$AssertNotTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" killed")
	}
	Set ^UnitTests.Global(1)="Data in first node"
	Do $$$AssertTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" successfully set")
]]></Implementation>
</Method>

<Method name="Test0030CreateTestData2">
<Implementation><![CDATA[
	Set RoutineName="UnitTests2.TestRoutine.mac"
	If ##class(%RoutineMgr).Exists(RoutineName)
	{
		Do $$$AssertStatusOK(##class(%RoutineMgr).Delete(RoutineName),"Delete routine """_RoutineName_"""")
	}
	Set Routine=##class(%RoutineMgr).%New(RoutineName)
	Do Routine.Code.Clear()
	Do Routine.Code.WriteLine(" Write ""Hello World (in a MAC routine)"",!")
	Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
	Kill Item
	Set Item(Routine.Name)=""
	Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")

	Set RoutineName="UnitTests2.TestMVB.mvb"
	If ##class(%RoutineMgr).Exists(RoutineName)
	{
		Do $$$AssertStatusOK(##class(%RoutineMgr).Delete(RoutineName),"Delete routine """_RoutineName_"""")
	}
	Set Routine=##class(%RoutineMgr).%New(RoutineName)
	Do Routine.Code.Clear()
	Do Routine.Code.WriteLine("Print ""Hello World (in a MVB routine)""")
	Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
	Kill Item
	Set Item(Routine.Name)=""
	Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
]]></Implementation>
</Method>

<Method name="Test0030CreateTestData3">
<Implementation><![CDATA[
	Quit:'$$$AssertTrue(##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass"),"Test class exists")

	Do $$$AssertStatusOK(##class(UnitTests.TestClass).%DeleteExtent(),"Data of class ""UnitTests.TestClass"" deleted.")

	Set Instance=##class(UnitTests.TestClass).%New()
	Set Instance.Property1="some value"
	If $$$AssertStatusOK(Instance.%Save(),"Test data for class ""UnitTests.TestClass"" successfully saved.")
	{
		Set %GUIDvalue=Instance.GUID
	}
]]></Implementation>
</Method>

<Method name="Test0040SyncNewSourceObjects">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Do $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")

	Set File1=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File1=##class(%File).NormalizeDirectory(File1)_"UnitTests.TestClass.xml"
	Do $$$AssertTrue(##class(%File).Exists(File1),"File """_File1_""" was successfully exported.")

	Set File2=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File2=##class(%File).NormalizeDirectory(File2)_"UnitTests.TestRoutine.mac.xml"
	Do $$$AssertTrue(##class(%File).Exists(File2),"File """_File2_""" was successfully exported.")

	Set File3=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File3=##class(%File).NormalizeDirectory(File3)_"UnitTests.TestMVB.mvb.xml"
	Do $$$AssertTrue(##class(%File).Exists(File3),"File """_File3_""" was successfully exported.")

	Set File4=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File4=##class(%File).NormalizeDirectory(File4)_"UnitTests.Global.gbl.xml"
	Do $$$AssertTrue(##class(%File).Exists(File4),"File """_File4_""" was successfully exported.")

	Set File5=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File5=##class(%File).NormalizeDirectory(File5)_"UnitTests2.TestRoutine.mac"
	Do $$$AssertTrue(##class(%File).Exists(File5),"File """_File5_""" was successfully exported.")

	Set File6=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File6=##class(%File).NormalizeDirectory(File6)_"UnitTests2.TestMVB.mvb"
	Do $$$AssertTrue(##class(%File).Exists(File6),"File """_File6_""" was successfully exported.")

	Set File7=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Objects")
	Set File7=##class(%File).NormalizeDirectory(File7)
		_"UnitTests.TestClass."_##class(%Persistent).%GUID($LB("1","UnitTests.TestClass"))_".xml"
	Do $$$AssertTrue(##class(%File).Exists(File7),"File """_File7_""" was successfully exported.")
]]></Implementation>
</Method>

<Method name="Test0050ModifyTestData1">
<Implementation><![CDATA[
	Set Class=##class(%Dictionary.ClassDefinition).%OpenId("UnitTests.TestClass")
	Set Class.Description="Testdescription"
	Do $$$AssertStatusOK(Class.%Save(),"Modified class """_Class.Name_""" saved.")
	Do $$$AssertStatusOK($system.OBJ.Compile(Class.Name),"Compile class """_Class.Name_"""")

	Set RoutineName="UnitTests.TestRoutine.mac"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine(" #;some comment in a MAC routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}

	Set RoutineName="UnitTests.TestMVB.mvb"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine("!some comment in a MVB routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}

	If $$$AssertTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" exists.")
	{
		Set ^UnitTests.Global(1)="Modified data in first node"
		Do $$$AssertTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" successfully set")
	}
]]></Implementation>
</Method>

<Method name="Test0050ModifyTestData2">
<Implementation><![CDATA[
	Set RoutineName="UnitTests2.TestRoutine.mac"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine(" #;comment in MAC routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}

	Set RoutineName="UnitTests2.TestMVB.mvb"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine("!comment in MVB routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}
]]></Implementation>
</Method>

<Method name="Test0050ModifyTestData3">
<Implementation><![CDATA[
	Quit:'$$$AssertTrue(##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass"),"Test class exists")

	Set Instance=##class(UnitTests.TestClass).%OpenId(1)
	Set Instance.Property1="some modified value"
	Do $$$AssertStatusOK(Instance.%Save(),"Test data for class ""UnitTests.TestClass"" successfully modified.")
]]></Implementation>
</Method>

<Method name="Test0060SyncModifiedSrcObjects">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Do $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize modified source objects")

	Set File1=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File1=##class(%File).NormalizeDirectory(File1)_"UnitTests.TestClass.xml"
	If $$$AssertTrue(##class(%File).Exists(File1),"File """_File1_""" exists.")
	{
		Set Stream1=##class(%Stream.FileCharacter).%New()
		Do Stream1.LinkToFile(File1)
		Set SearchFor="Testdescription"
		Do $$$AssertTrue(Stream1.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File1_""" found.")
		Kill Stream1
	}

	Set File2=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File2=##class(%File).NormalizeDirectory(File2)_"UnitTests.TestRoutine.mac.xml"
	If $$$AssertTrue(##class(%File).Exists(File2),"File """_File2_""" exists.")
	{
		Set Stream2=##class(%Stream.FileCharacter).%New()
		Do Stream2.LinkToFile(File2)
		Set SearchFor="some comment in a MAC routine"
		Do $$$AssertTrue(Stream2.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File2_""" found.")
		Kill Stream2
	}

	Set File3=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File3=##class(%File).NormalizeDirectory(File3)_"UnitTests.TestMVB.mvb.xml"
	If $$$AssertTrue(##class(%File).Exists(File3),"File """_File3_""" exists.")
	{
		Set Stream3=##class(%Stream.FileCharacter).%New()
		Do Stream3.LinkToFile(File3)
		Set SearchFor="some comment in a MVB routine"
		Do $$$AssertTrue(Stream3.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File3_""" found.")
		Kill Stream3
	}

	Set File4=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File4=##class(%File).NormalizeDirectory(File4)_"UnitTests.Global.gbl.xml"
	If $$$AssertTrue(##class(%File).Exists(File4),"File """_File4_""" exists.")
	{
		Set Stream4=##class(%Stream.FileCharacter).%New()
		Do Stream4.LinkToFile(File4)
		Set SearchFor="Modified data in first node"
		Do $$$AssertTrue(Stream4.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File4_""" found.")
		Kill Stream4
	}

	Set File5=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File5=##class(%File).NormalizeDirectory(File5)_"UnitTests2.TestRoutine.mac"
	If $$$AssertTrue(##class(%File).Exists(File5),"File """_File5_""" exists.")
	{
		Set Stream5=##class(%Stream.FileCharacter).%New()
		Do Stream5.LinkToFile(File5)
		Set SearchFor="comment in MAC routine"
		Do $$$AssertTrue(Stream5.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File5_""" found.")
		Kill Stream5
	}

	Set File6=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File6=##class(%File).NormalizeDirectory(File6)_"UnitTests2.TestMVB.mvb"
	If $$$AssertTrue(##class(%File).Exists(File6),"File """_File6_""" exists.")
	{
		Set Stream6=##class(%Stream.FileCharacter).%New()
		Do Stream6.LinkToFile(File6)
		Set SearchFor="comment in MVB routine"
		Do $$$AssertTrue(Stream6.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File6_""" found.")
		Kill Stream6
	}

	Set File7=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Objects")
	Set File7=##class(%File).NormalizeDirectory(File7)
		_"UnitTests.TestClass."_##class(%Persistent).%GUID($LB("1","UnitTests.TestClass"))_".xml"
	If $$$AssertTrue(##class(%File).Exists(File7),"File """_File7_""" exists.")
	{
		Set Stream7=##class(%Stream.FileCharacter).%New()
		Do Stream7.LinkToFile(File7)
		Set Instance=##class(UnitTests.TestClass).%OpenId(1)
		Set SearchFor=Instance.Property1
		Do $$$AssertTrue(Stream7.FindAt(1,SearchFor) > -1,"String """_SearchFor_""" in File """_File7_""" found.")
		Kill Stream7
	}
]]></Implementation>
</Method>

<Method name="Test0070ModifyTestData1">
<Implementation><![CDATA[
	Hang 1 ;Ensure different timestamps in source objects

	Set Class=##class(%Dictionary.ClassDefinition).%OpenId("UnitTests.TestClass")
	Set Class.Description="Testdescription for conflict"
	Do $$$AssertStatusOK(Class.%Save(),"Modified class """_Class.Name_""" saved.")
	Do $$$AssertStatusOK($system.OBJ.Compile(Class.Name),"Compile class """_Class.Name_"""")

	Set RoutineName="UnitTests.TestRoutine.mac"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine(" #;some comment for conflict in a MAC routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}

	Set RoutineName="UnitTests.TestMVB.mvb"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine("!some comment for conflict in a MVB routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}

	If $$$AssertTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" exists.")
	{
		Set ^UnitTests.Global(1)="Modified data for conflict in first node"
		Do $$$AssertTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" successfully set")
	}
]]></Implementation>
</Method>

<Method name="Test0070ModifyTestData2">
<Implementation><![CDATA[
	Set RoutineName="UnitTests2.TestRoutine.mac"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine(" #;comment for conflict in MAC routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}

	Set RoutineName="UnitTests2.TestMVB.mvb"
	If $$$AssertTrue(##class(%RoutineMgr).Exists(RoutineName),"Routine """_RoutineName_""" exists.")
	{
		Set Routine=##class(%RoutineMgr).%OpenId(RoutineName)
		Do Routine.Code.MoveToEnd()
		Do Routine.Code.WriteLine("!comment for conflict in MVB routine")
		Do $$$AssertStatusOK(Routine.%Save(),"Save routine """_Routine.Name_"""")
		Kill Item
		Set Item(Routine.Name)=""
		Do $$$AssertStatusOK($system.OBJ.CompileList(.Item),"Compile routine """_Routine.Name_"""")
	}
]]></Implementation>
</Method>

<Method name="Test0070ModifyTestData3">
<Implementation><![CDATA[
	Quit:'$$$AssertTrue(##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass"),"Test class exists")

	Set Instance=##class(UnitTests.TestClass).%OpenId(1)
	Set Instance.Property1=Instance.Property1_" for conflict"
	Do $$$AssertStatusOK(Instance.%Save(),"Test data for class ""UnitTests.TestClass"" successfully modified.")
]]></Implementation>
</Method>

<Method name="Test0080ModifyFilesForConflict">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Hang 1 ;Ensure different timestamps in files

	Set File1=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File1=##class(%File).NormalizeDirectory(File1)_"UnitTests.TestClass.xml"
	If $$$AssertTrue(##class(%File).Exists(File1),"File """_File1_""" exists.")
	{
		Do $$$AssertStatusOK(..ReplaceInFile(File1,"Testdescription","Modified in file"))
		Do $$$AssertStatusOK(..FindInFile(File1,"Modified in file"),"File """_File1_""" successfully modified.")
	}

	Set File2=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File2=##class(%File).NormalizeDirectory(File2)_"UnitTests.TestRoutine.mac.xml"
	If $$$AssertTrue(##class(%File).Exists(File2),"File """_File2_""" exists.")
	{
		Do $$$AssertStatusOK(..ReplaceInFile(File2,"some comment in a MAC routine","comment modified in file"))
		Do $$$AssertStatusOK(..FindInFile(File2,"comment modified in file"),"File """_File2_""" successfully modified.")
	}

	Set File3=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File3=##class(%File).NormalizeDirectory(File3)_"UnitTests.TestMVB.mvb.xml"
	If $$$AssertTrue(##class(%File).Exists(File3),"File """_File3_""" exists.")
	{
		Do $$$AssertStatusOK(..ReplaceInFile(File3,"some comment in a MVB routine","comment modified in file"))
		Do $$$AssertStatusOK(..FindInFile(File3,"comment modified in file"),"File """_File3_""" successfully modified.")
	}

	Set File4=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File4=##class(%File).NormalizeDirectory(File4)_"UnitTests.Global.gbl.xml"
	If $$$AssertTrue(##class(%File).Exists(File4),"File """_File4_""" exists.")
	{
		Do $$$AssertStatusOK(..ReplaceInFile(File4,"Modified data in first node","data modified in file"))
		Do $$$AssertStatusOK(..FindInFile(File4,"data modified in file"),"File """_File4_""" successfully modified.")
	}

	Set File5=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File5=##class(%File).NormalizeDirectory(File5)_"UnitTests2.TestRoutine.mac"
	If $$$AssertTrue(##class(%File).Exists(File5),"File """_File5_""" exists.")
	{
		Do $$$AssertStatusOK(..AppendToFile(File5," #;new comment in file"))
		Do $$$AssertStatusOK(..FindInFile(File5,"#;new comment in file"),"File """_File5_""" successfully modified.")
	}

	Set File6=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File6=##class(%File).NormalizeDirectory(File6)_"UnitTests2.TestMVB.mvb"
	If $$$AssertTrue(##class(%File).Exists(File6),"File """_File6_""" exists.")
	{
		Do $$$AssertStatusOK(..AppendToFile(File6,"!new comment in file"))
		Do $$$AssertStatusOK(..FindInFile(File6,"!new comment in file"),"File """_File6_""" successfully modified.")
	}

	Set File7=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Objects")
	Set File7=##class(%File).NormalizeDirectory(File7)
		_"UnitTests.TestClass."_##class(%Persistent).%GUID($LB("1","UnitTests.TestClass"))_".xml"
	If $$$AssertTrue(##class(%File).Exists(File7),"File """_File7_""" exists.")
	{
		Do $$$AssertStatusOK(..ReplaceInFile(File7,"some modified value","value modified in file"))
		Do $$$AssertStatusOK(..FindInFile(File7,"value modified in file"),"File """_File7_""" successfully modified.")
	}
]]></Implementation>
</Method>

<Method name="Test0090SyncConflicts">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	Do $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize conflicts")

	Set ExpectedFiles("UnitTests.TestClass.xml")="SourceObject"
	Set ExpectedFiles("UnitTests.TestRoutine.mac.xml")="SourceObject"
	Set ExpectedFiles("UnitTests.TestMVB.mvb.xml")="SourceObject"
	Set ExpectedFiles("UnitTests.Global.gbl.xml")="SourceObject"
	Set ExpectedFiles("UnitTests2.TestRoutine.mac")="SourceObject"
	Set ExpectedFiles("UnitTests2.TestMVB.mvb")="SourceObject"
	Set Filename="UnitTests.TestClass."_##class(%Persistent).%GUID($LB("1","UnitTests.TestClass"))_".xml"
	Set ExpectedFiles(Filename)="File"

	Set Key=""
	For  
	{
		#dim Collision as Collision = SyncManager.Collisions.GetNext(.Key)
		Quit:Key=""
		#;Set FileArr(Collision.File.Filename)=Collision.File.%Id()
		If $$$AssertTrue($Data(ExpectedFiles(Collision.File.Filename)),"Collision in File """_Collision.File.Filename_"""")
		{
			Set Collision.Keep=ExpectedFiles(Collision.File.Filename)
			Do $$$AssertStatusOK(Collision.%Save(),"Modification of collision in file """_Collision.File.Filename_""" saved.")
		}
	}

	Do $$$AssertStatusOK(WD.ResolveConflicts(SyncManager),"Collisions resolved")
]]></Implementation>
</Method>

<Method name="Test0100DeleteTestData">
<Implementation><![CDATA[
	Quit:'$$$AssertTrue(##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass"),"Test class exists")

	Do $$$AssertStatusOK(##class(UnitTests.TestClass).%DeleteExtent(),"Test data in class ""UnitTests.TestClass"" deleted.")
]]></Implementation>
</Method>

<Method name="Test0110SyncDeletedSrcObjects">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	Do $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize conflicts")

	Set File7=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Objects")
	Set FilesToCheck(7)=##class(%File).NormalizeDirectory(File7)
		_"UnitTests.TestClass."_%GUIDvalue_".xml"

	Set ID=""
	For  
	{
		Set ID=$Order(FilesToCheck(ID))
		Quit:ID=""
		Set Filename=FilesToCheck(ID)
		If $$$AssertTrue(##class(%File).Exists(Filename),"File """_Filename_""" exists.")
		{
			If $$$AssertStatusOK(..FindInFile(Filename,"***DELETED***"),"File """_Filename_""" contains delete flag.")
			{
				Do $$$AssertStatusOK(##class(SyncTool.SourceSelection).%DeleteId(%PersistentObjectSS))
			}
		}
	}
]]></Implementation>
</Method>

<Method name="Test0120DeleteTestData1">
<Implementation><![CDATA[
	Set ClassName="UnitTests.TestClass"
	Do $$$AssertStatusOK(##class(%RoutineMgr).Delete(ClassName_".cls"),"Class """_ClassName_""" deleted.")

	Set RoutineName="UnitTests.TestRoutine.mac"
	Do $$$AssertTrue(##class(%RoutineMgr).Delete(RoutineName),"Routine """_RoutineName_""" deleted.")

	Set RoutineName="UnitTests.TestMVB.mvb"
	Do $$$AssertTrue(##class(%RoutineMgr).Delete(RoutineName),"Routine """_RoutineName_""" deleted.")

	Kill ^UnitTests.Global
	Do $$$AssertNotTrue($Data(^UnitTests.Global),"Global ""^UnitTests.Global"" deleted.")
]]></Implementation>
</Method>

<Method name="Test0120DeleteTestData2">
<Implementation><![CDATA[
	Set RoutineName="UnitTests2.TestRoutine.mac"
	Do $$$AssertTrue(##class(%RoutineMgr).Delete(RoutineName),"Routine """_RoutineName_""" deleted.")

	Set RoutineName="UnitTests2.TestMVB.mvb"
	Do $$$AssertTrue(##class(%RoutineMgr).Delete(RoutineName),"Routine """_RoutineName_""" deleted.")
]]></Implementation>
</Method>

<Method name="Test0130SyncDeletedSrcObjects">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	Do $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize conflicts")

	Set File1=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set FilesToCheck(1)=##class(%File).NormalizeDirectory(File1)_"UnitTests.TestClass.xml"

	Set File2=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set FilesToCheck(2)=##class(%File).NormalizeDirectory(File2)_"UnitTests.TestRoutine.mac.xml"

	Set File3=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set FilesToCheck(3)=##class(%File).NormalizeDirectory(File3)_"UnitTests.TestMVB.mvb.xml"

	Set File4=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set FilesToCheck(4)=##class(%File).NormalizeDirectory(File4)_"UnitTests.Global.gbl.xml"

	Set File5=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set FilesToCheck(5)=##class(%File).NormalizeDirectory(File5)_"UnitTests2.TestRoutine.mac"

	Set File6=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set FilesToCheck(6)=##class(%File).NormalizeDirectory(File6)_"UnitTests2.TestMVB.mvb"

	Set ID=""
	For  
	{
		Set ID=$Order(FilesToCheck(ID))
		Quit:ID=""
		Set Filename=FilesToCheck(ID)
		If $$$AssertTrue(##class(%File).Exists(Filename),"File """_Filename_""" exists.")
		{
			Do $$$AssertStatusOK(..FindInFile(Filename,"***DELETED***"),"File """_Filename_""" contains delete flag.")
		}
	}
]]></Implementation>
</Method>

<Method name="Test0140CreateTestfiles">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	/* ;200510
	#; zum schluss loeschen ...
	Set DocsExpected("UnitTests.TestClass2.cls")=""
	Set DocsExpected("UnitTests.TestRoutine2.mac")=""
	Set DocsExpected("UnitTests.TestMVB2.mvb")=""
	Set DocsExpected("UnitTests2.TestRoutine2.mac")=""
	Set DocsExpected("UnitTests2.TestMVB2.mvb")=""
	Set DocName=""
	For  
	{
		Set DocName=$Order(DocsExpected(DocName))
		Quit:DocName=""
		If ##class(%RoutineMgr).Exists(DocName)
		{
			Do $$$AssertStatusOK(##class(%RoutineMgr).Delete(DocName),"Routine/Class """_DocName_""" deleted.")
		}
	}
	If $Data(^UnitTests.Global2)
	{
		Kill ^UnitTests.Global2
		Do $$$AssertNotTrue($Data(^UnitTests.Global2),"Global ""^UnitTests.Global2"" killed.")
	}
	*/

	Set File1=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File1=##class(%File).NormalizeDirectory(File1)_"UnitTests.TestClass2.xml"
	Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsTestClass2New",File1),"New File """_File1_""" successfully created.")

	Set File2=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File2=##class(%File).NormalizeDirectory(File2)_"UnitTests.TestRoutine2.mac.xml"
	Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsTestRoutine2New",File2),"New File """_File2_""" successfully created.")

	Set File3=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File3=##class(%File).NormalizeDirectory(File3)_"UnitTests.TestMVB2.mvb.xml"
	Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsTestMVB2New",File3),"New File """_File3_""" successfully created.")

	Set File4=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File4=##class(%File).NormalizeDirectory(File4)_"UnitTests.Global2.gbl.xml"
	Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsGlobal2New",File4),"New File """_File4_""" successfully created.")

	Set File5=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File5=##class(%File).NormalizeDirectory(File5)_"UnitTests2.TestRoutine2.mac"
	Do $$$AssertStatusOK(..XDataFirstNodeToFile(..%ClassName(1)_"||UnitTests2TestRoutine2New",File5),"New File """_File5_""" successfully created.")

	Set File6=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Routines")
	Set File6=##class(%File).NormalizeDirectory(File6)_"UnitTests2.TestMVB2.mvb"
	Do $$$AssertStatusOK(..XDataFirstNodeToFile(..%ClassName(1)_"||UnitTests2TestMVB2New",File6),"New File """_File6_""" successfully created.")
]]></Implementation>
</Method>

<Method name="Test0150SyncNewFiles">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		If '$$$AssertNotTrue(SyncManager.Collisions.Count(),"Collisions found: "_SyncManager.Collisions.Count())
		{
			Set CollisionKey=""
			For  
			{
				#dim Collision as Collision =SyncManager.Collisions.GetNext(.CollisionKey)
				Quit:CollisionKey=""
				Do $$$LogMessage("Collision in file: "_Collision.File.File)
			}
		}

		Set DocsExpected("UnitTests.TestClass2.cls")=""
		Set DocsExpected("UnitTests.TestRoutine2.mac")=""
		Set DocsExpected("UnitTests.TestMVB2.mvb")=""
		Set DocsExpected("UnitTests2.TestRoutine2.mac")=""
		Set DocsExpected("UnitTests2.TestMVB2.mvb")=""
		Set DocName=""
		For  
		{
			Set DocName=$Order(DocsExpected(DocName))
			Quit:DocName=""
			Do $$$AssertTrue(##class(%RoutineMgr).Exists(DocName),"Routine/Class """_DocName_""" successfully imported.")
		}
		Do $$$AssertTrue($Data(^UnitTests.Global2),"Global ""^UnitTests.Global2"" successfully imported.")
	}
]]></Implementation>
</Method>

<Method name="Test0160CreateTestfile">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Do $$$AssertStatusOK(##class(UnitTests.TestClass2).%DeleteExtent(),"Objects of class ""UnitTests.TestClass2"" deleted.")

	Set File7=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Objects")
	Set File7=##class(%File).NormalizeDirectory(File7)
		_"UnitTests.TestClass2.F14B1092-5BF7-11DF-A9B7-000AE4CED980.xml"
	Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsObject2New",File7),"New File """_File7_""" successfully created.")
]]></Implementation>
</Method>

<Method name="Test0165AlterSourceSelection">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)
	Set WDID=WD.%Id()

	&sql(select %ID into :ModuleID from _Module
	      where WorkingDirectory=:WDID and SubDirectory='Objects')

	If $$$AssertTrue(ModuleID'="")
	{
		Set SourceSelection=##class(ObjectSelection).%New()
		Do SourceSelection.ModuleSetObjectId(ModuleID)
		Set SourceSelection.SQL="select %ID from UnitTests.TestClass2"
		Set SourceSelection.Type="UnitTests.TestClass2"
		If $$$AssertStatusOK(SourceSelection.%Save(),"Save source selection """_SourceSelection.SQL_"""")
		{
			Set %PersistentObjectSS=SourceSelection.%Id()
		}
	}
]]></Implementation>
</Method>

<Method name="Test0170SyncNewFile">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		Do $$$AssertTrue(##class(UnitTests.TestClass2).%ExistsId(1),"Object with ID 1 of type ""UnitTests.TestClass2"" successfully imported.")
	}
]]></Implementation>
</Method>

<Method name="Test0180ModifyTestfiles">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Hang 1 ;Ensure different timestamps for files

	Set DocsExpected("UnitTests.TestClass2.cls")=$lb("StudioXML","UnitTests.TestClass2.xml",0,"UnitTestsTestClass2Mod")
	Set DocsExpected("UnitTests.TestRoutine2.mac")=$lb("StudioXML","UnitTests.TestRoutine2.mac.xml",0,"UnitTestsTestRoutine2Mod")
	Set DocsExpected("UnitTests.TestMVB2.mvb")=$lb("StudioXML","UnitTests.TestMVB2.mvb.xml",0,"UnitTestsTestMVB2Mod")
	Set DocsExpected("UnitTests2.TestRoutine2.mac")=$lb("Routines","UnitTests2.TestRoutine2.mac",1,"UnitTests2TestRoutine2Mod")
	Set DocsExpected("UnitTests2.TestMVB2.mvb")=$lb("Routines","UnitTests2.TestMVB2.mvb",1,"UnitTests2TestMVB2Mod")
	Set DocName=""
	For  
	{
		Set DocName=$Order(DocsExpected(DocName))
		Quit:DocName=""
		If ##class(%RoutineMgr).Exists(DocName)
		{
			Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,$List(DocsExpected(DocName)))
			Set File=##class(%File).NormalizeDirectory(File)_$List(DocsExpected(DocName),2)
			If $List(DocsExpected(DocName),3)
			{
				Do $$$AssertStatusOK(..XDataFirstNodeToFile(..%ClassName(1)_"||"_$List(DocsExpected(DocName),4),File),"File """_$List(DocsExpected(DocName),2)_""" successfully modified.")
			}
			Else
			{
				Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||"_$List(DocsExpected(DocName),4),File),"File """_$List(DocsExpected(DocName),2)_""" successfully modified.")
			}
		}
	}
	If $Data(^UnitTests.Global2)
	{
		Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
		Set File=##class(%File).NormalizeDirectory(File)_"UnitTests.Global2.gbl.xml"
		Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsGlobal2Mod",File),"File ""UnitTests.Global2.gbl.xml"" successfully modified.")
	}
	If ##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass2")
		,##class(UnitTests.TestClass2).%ExistsId(1)
	{
		Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,"Objects")
		Set File=##class(%File).NormalizeDirectory(File)
			_"UnitTests.TestClass2.F14B1092-5BF7-11DF-A9B7-000AE4CED980.xml"
		Do $$$AssertStatusOK(..XDataToFile(..%ClassName(1)_"||UnitTestsObject2Mod",File),"File ""UnitTests.TestClass2.F14B1092-5BF7-11DF-A9B7-000AE4CED980.xml"" successfully modified.")
	}
]]></Implementation>
</Method>

<Method name="Test0190SyncModifiedFiles">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		If '$$$AssertNotTrue(SyncManager.Collisions.Count(),"Collisions found: "_SyncManager.Collisions.Count())
		{
			Set CollisionKey=""
			For  
			{
				#dim Collision as Collision =SyncManager.Collisions.GetNext(.CollisionKey)
				Quit:CollisionKey=""
				Do $$$LogMessage("Collision in file: "_Collision.File.File)
			}
		}

		Set ClassDef=##class(%Dictionary.ClassDefinition).%OpenId("UnitTests.TestClass2")
		Do $$$AssertTrue(ClassDef.Description["Some modified description in a new external file","Class ""UnitTests.TestClass"" imported successfully.")

		Set DocsExpected("UnitTests.TestRoutine2.mac")="some comment in a modified MAC routine"
		Set DocsExpected("UnitTests.TestMVB2.mvb")="some comment in a modified MVB routine"
		Set DocsExpected("UnitTests2.TestRoutine2.mac")="Comment in externally modified routine file"
		Set DocsExpected("UnitTests2.TestMVB2.mvb")="Comment in externally modified MVB routine file"
		Set DocName=""
		For  
		{
			Set DocName=$Order(DocsExpected(DocName))
			Quit:DocName=""
			If $$$AssertTrue(##class(%RoutineMgr).Exists(DocName),"Document """_DocName_""" exists.")
			{
				Set Dok=##class(%RoutineMgr).%OpenId(DocName)
				Do $$$AssertTrue(Dok.Code.FindAt(1,DocsExpected(DocName))>0,"Document """_DocName_""" imported successfully.")
			}
		}

		Do $$$AssertTrue(^UnitTests.Global2(1)="Modified data in first node","Global ""^UnitTests.Global2"" imported successfully.")

		Set RS=##class(%ResultSet).%New("%DynamicQuery:SQL")
		If $$$AssertStatusOK(RS.Prepare("select count(*) as Count from UnitTests.TestClass2"))
		{
			Do $$$AssertStatusOK(RS.Execute())
			If $$$AssertStatusOK(RS.Next())
			{
				If $$$AssertTrue(RS.Data("COUNT")=1)
				{
					Set Object=##class(UnitTests.TestClass2).%OpenId(2)
					Do $$$AssertTrue(Object.Property1="value in externally modified file")
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="Test0200ModifyTestfiles">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Hang 1 ;Ensure different timestamps for files

	Set DocsExpected($lb(2,"UnitTests.TestClass2"))=$lb("Objects","UnitTests.TestClass2.F14B1092-5BF7-11DF-A9B7-000AE4CED980.xml")
	Set DocName=""
	For  
	{
		Set DocName=$Order(DocsExpected(DocName))
		Quit:DocName=""
		Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,$List(DocsExpected(DocName)))
		Set File=##class(%File).NormalizeDirectory(File)_$List(DocsExpected(DocName),2)
		Do $$$AssertStatusOK(##class(ExportImport).ExportDeleted(File),"Set delete flag in file """_$List(DocsExpected(DocName),2)_"""")
	}
]]></Implementation>
</Method>

<Method name="Test0210SyncModFilesWithDelFlag">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		If '$$$AssertNotTrue(SyncManager.Collisions.Count(),"Collisions found: "_SyncManager.Collisions.Count())
		{
			Set CollisionKey=""
			For  
			{
				#dim Collision as Collision =SyncManager.Collisions.GetNext(.CollisionKey)
				Quit:CollisionKey=""
				Do $$$LogMessage("Collision in file: "_Collision.File.File)
			}
		}

		Set RS=##class(%ResultSet).%New("%DynamicQuery:SQL")
		If $$$AssertStatusOK(RS.Prepare("select count(*) as Count from UnitTests.TestClass2"))
		{
			Do $$$AssertStatusOK(RS.Execute())
			If $$$AssertStatusOK(RS.Next())
			{
				If $$$AssertTrue(RS.Data("COUNT")=0)
				{
					Do $$$AssertStatusOK(##class(SyncTool.SourceSelection).%DeleteId(%PersistentObjectSS))
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="Test0220ModifyTestfiles">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Hang 1 ;Ensure different timestamps for files

	Set DocsExpected("UnitTests.TestClass2.cls")=$lb("StudioXML","UnitTests.TestClass2.xml")
	Set DocsExpected("UnitTests.TestRoutine2.mac")=$lb("StudioXML","UnitTests.TestRoutine2.mac.xml")
	Set DocsExpected("UnitTests.TestMVB2.mvb")=$lb("StudioXML","UnitTests.TestMVB2.mvb.xml")
	Set DocsExpected("UnitTests2.TestRoutine2.mac")=$lb("Routines","UnitTests2.TestRoutine2.mac")
	Set DocsExpected("UnitTests2.TestMVB2.mvb")=$lb("Routines","UnitTests2.TestMVB2.mvb")
	Set DocsExpected("UnitTests.Global2.gbl")=$lb("StudioXML","UnitTests.Global2.gbl.xml")
	Set DocName=""
	For  
	{
		Set DocName=$Order(DocsExpected(DocName))
		Quit:DocName=""
		Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,$List(DocsExpected(DocName)))
		Set File=##class(%File).NormalizeDirectory(File)_$List(DocsExpected(DocName),2)
		Do $$$AssertStatusOK(##class(ExportImport).ExportDeleted(File),"Set delete flag in file """_$List(DocsExpected(DocName),2)_"""")
	}
]]></Implementation>
</Method>

<Method name="Test0230SyncModFilesWithDelFlag">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	#dim SyncManager as SyncManager
	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		If '$$$AssertNotTrue(SyncManager.Collisions.Count(),"Collisions found: "_SyncManager.Collisions.Count())
		{
			Set CollisionKey=""
			For  
			{
				#dim Collision as Collision =SyncManager.Collisions.GetNext(.CollisionKey)
				Quit:CollisionKey=""
				Do $$$LogMessage("Collision in file: "_Collision.File.File)
			}
		}

		Set DocsExpected("UnitTests.TestClass2.cls")=""
		Set DocsExpected("UnitTests.TestRoutine2.mac")=""
		Set DocsExpected("UnitTests.TestMVB2.mvb")=""
		Set DocsExpected("UnitTests2.TestRoutine2.mac")=""
		Set DocsExpected("UnitTests2.TestMVB2.mvb")=""
		Set DocName=""
		For  
		{
			Set DocName=$Order(DocsExpected(DocName))
			Quit:DocName=""
			Do $$$AssertNotTrue(##class(%RoutineMgr).Exists(DocName),"Document """_DocName_""" deleted.")
		}

		Do $$$AssertNotTrue($Data(^UnitTests.Global2),"Global ""^UnitTests.Global2"" deleted.")
	}
]]></Implementation>
</Method>

<Method name="Test0240DeleteManagedFile">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File=##class(%File).NormalizeDirectory(File)_"UnitTests.TestRoutine2.mac.xml"
	Do $$$AssertTrue(##class(%File).Delete(File),"File ""UnitTests.TestRoutine2.mac.xml"" deleted.")

	Do $$$AssertTrue(..IsFileManaged("UnitTests.TestRoutine2.mac.xml"),"File ""UnitTests.TestRoutine2.mac.xml"" is still managed.")

	#dim SyncManager as SyncManager
	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		If '$$$AssertNotTrue(SyncManager.Collisions.Count(),"Collisions found: "_SyncManager.Collisions.Count())
		{
			Set CollisionKey=""
			For  
			{
				#dim Collision as Collision =SyncManager.Collisions.GetNext(.CollisionKey)
				Quit:CollisionKey=""
				Do $$$LogMessage("Collision in file: "_Collision.File.File)
			}
		}

		Do $$$AssertNotTrue(..IsFileManaged("UnitTests.TestRoutine2.mac.xml"),"File ""UnitTests.TestRoutine2.mac.xml"" is not managed any more.")
	}
]]></Implementation>
</Method>

<Method name="Test0250UnManagedFileWithDelFlg">
<Implementation><![CDATA[
	Quit:'$$$AssertNotEquals($G(^||TestWDID),"","Working directory exists")
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)

	Set File=##class(%File).SubDirectoryName(WD.WorkingDirectory,"StudioXML")
	Set File=##class(%File).NormalizeDirectory(File)_"UnitTests.TestRoutine3.mac.xml"
	Do $$$AssertStatusOK(##class(ExportImport).ExportDeleted(File),"Set delete flag in file ""UnitTests.TestRoutine3.mac.xml""")

	Do $$$AssertNotTrue(..IsFileManaged("UnitTests.TestRoutine3.mac.xml"),"File ""UnitTests.TestRoutine3.mac.xml"" is not managed.")

	#dim SyncManager as SyncManager
	If $$$AssertStatusOK(WD.SyncParallelized(.SyncManager),"Synchronize new source objects")
	{
		If '$$$AssertNotTrue(SyncManager.Collisions.Count(),"Collisions found: "_SyncManager.Collisions.Count())
		{
			Set CollisionKey=""
			For  
			{
				#dim Collision as Collision =SyncManager.Collisions.GetNext(.CollisionKey)
				Quit:CollisionKey=""
				Do $$$LogMessage("Collision in file: "_Collision.File.File)
			}
		}

		Do $$$AssertTrue(..IsFileManaged("UnitTests.TestRoutine3.mac.xml"),"File ""UnitTests.TestRoutine3.mac.xml"" is now managed by SyncTool.")
	}
]]></Implementation>
</Method>

<Method name="Test9999DeleteTestWD">
<Description>
Cleanup</Description>
<Implementation><![CDATA[
	Set WDID=$G(^||TestWDID)
	Quit:'$$$AssertNotEquals(WDID,"","Working directory exists")

	#;the following two lines are just for debugging purposes
	#;Do ..DelDir("/tmp/UnitTestsSaved")
	#;Do $ZF(-1,"cp -a """_##class(WorkingDirectory).WorkingDirectoryGetStored(WDID)_""" /tmp/UnitTestsSaved")

	Do $$$AssertStatusOK(..CleanUpTestData(WDID))

	Kill ^||TestWDID
	Kill %GUIDvalue
	Kill %PersistentObjectSS
]]></Implementation>
</Method>

<Method name="CleanUpTestData">
<ClassMethod>1</ClassMethod>
<FormalSpec>iWDID=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status=$$$OK

	If iWDID'=""
	{
		Set Status=..DelDir(##class(WorkingDirectory).WorkingDirectoryGetStored(iWDID))
		Quit:'Status Status

		Set Status=##class(WorkingDirectory).%DeleteId(iWDID)
		Quit:'Status Status
	}

	If ##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass")
	{
		Set Status=##class(UnitTests.TestClass).%DeleteExtent()
		Quit:'Status Status
	}
	If ##class(%Dictionary.CompiledClass).%ExistsId("UnitTests.TestClass2")
	{
		Set Status=##class(UnitTests.TestClass2).%DeleteExtent()
		Quit:'Status Status
	}

	Set DocsExpected("UnitTests.TestClass.cls")=""
	Set DocsExpected("UnitTests.TestRoutine.mac")=""
	Set DocsExpected("UnitTests.TestMVB.mvb")=""
	Set DocsExpected("UnitTests2.TestRoutine.mac")=""
	Set DocsExpected("UnitTests2.TestMVB.mvb")=""
	Set DocsExpected("UnitTests.TestClass2.cls")=""
	Set DocsExpected("UnitTests.TestRoutine2.mac")=""
	Set DocsExpected("UnitTests.TestMVB2.mvb")=""
	Set DocsExpected("UnitTests2.TestRoutine2.mac")=""
	Set DocsExpected("UnitTests2.TestMVB2.mvb")=""
	Set DocName=""
	For  
	{
		Set DocName=$Order(DocsExpected(DocName))
		Quit:DocName=""
		If ##class(%RoutineMgr).Exists(DocName)
		{
			Set Status=##class(%RoutineMgr).Delete(DocName)
			Quit:'Status
		}
	}

	Kill ^UnitTests.Global,^UnitTests.Global2

	Quit Status
]]></Implementation>
</Method>

<Method name="Invoke">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set TestDir=##class(Compile).GetTempDir()
	Set TestSuiteDir=##class(%File).NormalizeDirectory(TestDir_"SyncToolTests/")
	Set Status=##class(%File).CreateDirectoryChain(TestSuiteDir)
	If 'Status Write "Directory "_TestSuiteDir_" could not be created." Quit

	Set Status=$system.OBJ.Export(..%ClassName(1)_".cls",TestSuiteDir_..%ClassName(1)_".xml")
	Quit:'Status

	Set ^UnitTestRoot=TestDir
	#;For  Quit:'$Data(^Debug)  Hang 1
	Do ##class(%UnitTest.Manager).RunTest(..%ClassName(1)_":"_..%ClassName(1),"/noload/norecursive")
]]></Implementation>
</Method>

<Method name="DelDir">
<ClassMethod>1</ClassMethod>
<FormalSpec>iDir:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#IF $$$isUNIX
	Do $ZF(-1,"rm -r """_##class(%File).NormalizeDirectory(iDir)_"""")
	#ENDIF

	#IF $$$isWINDOWS
	Do $ZF(-1,"rd /s /q """_##class(%File).NormalizeDirectory(iDir)_"""")
	#ENDIF

	Quit '##class(%File).DirectoryExists(iDir)
]]></Implementation>
</Method>

<Method name="ReplaceInFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>iFile:%String,iFrom:%String,iTo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set TmpFile=iFile_".tmp"
	Set TmpStream=##class(%Stream.FileCharacter).%New()
	Set Status=TmpStream.LinkToFile(TmpFile)
	Quit:'Status Status

	Set FStream=##class(%Stream.FileCharacter).%New()
	Set Status=FStream.LinkToFile(iFile)
	Quit:'Status Status
	While 'FStream.AtEnd
	{
		Set Line = FStream.ReadLine()
		If Line [ iFrom Set Line = $Replace(Line, iFrom, iTo)
		Set Status=TmpStream.Write(Line_TmpStream.LineTerminator)
		Quit:'Status
	}
	Quit:'Status Status

	Set Status=TmpStream.%Save()
	Kill TmpStream
	Quit:'Status Status
	Kill FStream
	Set OK=##class(%File).Delete(iFile)
	Quit:'OK $system.Status.Error(5001,"File """_iFile_""" could not be deleted.")
	Set OK=##class(%File).Rename(TmpFile,iFile)
	Quit:'OK $system.Status.Error(5001,"File """_TmpFile_""" could not be renamed.")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AppendToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>iFile:%String,iWhat:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set FStream=##class(%Stream.FileCharacter).%New()
	Set Status=FStream.LinkToFile(iFile)
	Quit:'Status Status
	Set Status=FStream.MoveToEnd()
	Quit:'Status Status
	Set Status=FStream.Write(FStream.LineTerminator_iWhat_FStream.LineTerminator)
	Quit:'Status Status
	Set Status=FStream.%Save()
	Quit Status
]]></Implementation>
</Method>

<Method name="FindInFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>iFile:%String,iWhat:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Stream=##class(%Stream.FileCharacter).%New()
	Set Status=Stream.LinkToFile(iFile)
	Quit:'Status Status
	Set Position=Stream.FindAt(1,iWhat)
	Quit:Position>0 $$$OK
	Quit $system.Status.Error(5001,"String """_iWhat_""" not found in """_iFile_"""")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* ;200510
ClassMethod FindInStream(
	iStream As %String,
	iWhat As %String) As %Status
{
	Set Position=iStream.FindAt(1,iWhat)
	Quit:Position>0 $$$OK
	Quit $system.Status.Error(5001,"String """_iWhat_""" not found in given stream.")
}
*/
]]></Content>
</UDLText>

<Method name="XDataToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>iXDataID:%String,iFile:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set XData=##class(%Dictionary.XDataDefinition).%OpenId(iXDataID)
	Set File=##class(%Stream.FileCharacter).%New()
	Set Status=File.LinkToFile(iFile)
	Quit:'Status Status
	Set Status=File.Write("<?xml version=""1.0"" encoding=""UTF-8""?>"_File.LineTerminator)
	Quit:'Status Status
	Set Status=File.CopyFrom(XData.Data)
	Quit:'Status Status
	Quit File.%Save()
]]></Implementation>
</Method>

<Method name="XDataFirstNodeToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>iXDataID:%String,iFile:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set XData=##class(%Dictionary.XDataDefinition).%OpenId(iXDataID)
	Set File=##class(%Stream.FileCharacter).%New()
	Set Status=File.LinkToFile(iFile)
	Quit:'Status Status
	While 'XData.Data.AtEnd
	{
		Set Line=XData.Data.ReadLine()
		Continue:Line="<Data>"
		Continue:Line="</Data>"
		Set Status=File.Write(Line_File.LineTerminator)
		Quit:'Status
	}
	Quit:'Status Status
	Quit File.%Save()
]]></Implementation>
</Method>

<Method name="IsFileManaged">
<ClassMethod>1</ClassMethod>
<FormalSpec>iFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:$G(^||TestWDID)=""
	Set WD=##class(WorkingDirectory).%OpenId(^||TestWDID)
	Set WDID=WD.%Id()

	&sql(select count(*) into :Count
	       from SyncTool._File
	      where FileName=:iFilename
	        and _Module->WorkingDirectory=:WDID)
	Quit Count>0
]]></Implementation>
</Method>

<XData name="UnitTestsTestClass2New">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Class name="UnitTests.TestClass2">
<Description>Some description in a new external file</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>61850,28308.492356</TimeCreated>

<Property name="GUID">
<Type>%XML.GUID</Type>
<Transient>1</Transient>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Property1"/>

<Method name="TestMethod">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[ Write "Hello World (in a class)",!
]]]]><![CDATA[></Implementation>
</Method>

<Parameter name="GUIDENABLED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^UnitTests.TestClass2D</DataLocation>
<DefaultData>TestClass2DefaultData</DefaultData>
<IdLocation>^UnitTests.TestClass2D</IdLocation>
<IndexLocation>^UnitTests.TestClass2I</IndexLocation>
<StreamLocation>^UnitTests.TestClass2S</StreamLocation>
<Data name="TestClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Property1</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
]]></Data>
</XData>

<XData name="UnitTestsTestClass2Mod">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Class name="UnitTests.TestClass2">
<Description>Some modified description in a new external file</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>61850,28308.492356</TimeCreated>

<Property name="GUID">
<Type>%XML.GUID</Type>
<Transient>1</Transient>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Property1"/>

<Method name="TestMethod">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[ Write "Hello World (in a class)",!
]]]]><![CDATA[></Implementation>
</Method>

<Parameter name="GUIDENABLED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^UnitTests.TestClass2D</DataLocation>
<DefaultData>TestClass2DefaultData</DefaultData>
<IdLocation>^UnitTests.TestClass2D</IdLocation>
<IndexLocation>^UnitTests.TestClass2I</IndexLocation>
<StreamLocation>^UnitTests.TestClass2S</StreamLocation>
<Data name="TestClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Property1</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
]]></Data>
</XData>

<XData name="UnitTestsTestRoutine2New">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Routine name="UnitTests.TestRoutine2" type="MAC" languagemode="0"><![CDATA[
 Write "Hello World (in a MAC routine)",!
]]]]><![CDATA[></Routine>
</Export>
]]></Data>
</XData>

<XData name="UnitTestsTestRoutine2Mod">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Routine name="UnitTests.TestRoutine2" type="MAC" languagemode="0"><![CDATA[
 Write "Hello World (in a MAC routine)",!
 #;some comment in a modified MAC routine
]]]]><![CDATA[></Routine>
</Export>
]]></Data>
</XData>

<XData name="UnitTestsTestMVB2New">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Document name="UnitTests.TestMVB2.mvb"><![CDATA[
Print "Hello World (in a MVB routine)"
]]]]><![CDATA[></Document></Export>
]]></Data>
</XData>

<XData name="UnitTestsTestMVB2Mod">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Document name="UnitTests.TestMVB2.mvb"><![CDATA[
Print "Hello World (in a MVB routine)"
!some comment in a modified MVB routine
]]]]><![CDATA[></Document></Export>
]]></Data>
</XData>

<XData name="UnitTestsGlobal2New">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Global>
<Node><Sub>^UnitTests.Global2</Sub>
<Node><Sub>1</Sub>
<Data>Data in first node</Data>
</Node>
</Node>
</Global>
</Export>
]]></Data>
</XData>

<XData name="UnitTestsGlobal2Mod">
<Data><![CDATA[
<Export generator="Cache" version="22">
<Global>
<Node><Sub>^UnitTests.Global2</Sub>
<Node><Sub>1</Sub>
<Data>Modified data in first node</Data>
</Node>
</Node>
</Global>
</Export>
]]></Data>
</XData>

<XData name="UnitTests2TestRoutine2New">
<Data><![CDATA[
<Data>
	Write "Hello World in externally created file.",!
</Data>
]]></Data>
</XData>

<XData name="UnitTests2TestRoutine2Mod">
<Data><![CDATA[
<Data>
	Write "Hello World in externally created file.",!
	#;Comment in externally modified routine file
</Data>
]]></Data>
</XData>

<XData name="UnitTests2TestMVB2New">
<Data><![CDATA[
<Data>
Print "Hello World in externally created file (MVB routine)."
</Data>
]]></Data>
</XData>

<XData name="UnitTests2TestMVB2Mod">
<Data><![CDATA[
<Data>
Print "Hello World in externally created file (MVB routine)."
!Comment in externally modified MVB routine file
</Data>
]]></Data>
</XData>

<XData name="UnitTestsObject2New">
<Data><![CDATA[
<Objects>
  <UnitTests.TestClass2 GUID="F14B1092-5BF7-11DF-A9B7-000AE4CED980">
    <Property1>value in externally created file</Property1>
  </UnitTests.TestClass2>
</Objects>
]]></Data>
</XData>

<XData name="UnitTestsObject2Mod">
<Data><![CDATA[
<Objects>
  <UnitTests.TestClass2 GUID="F14B1092-5BF7-11DF-A9B7-000AE4CED980">
    <Property1>value in externally modified file</Property1>
  </UnitTests.TestClass2>
</Objects>
]]></Data>
</XData>
</Class>
</Export>
