<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.StructClasses">
<Super>%RegisteredObject</Super>
<TimeCreated>62336,43326.333333</TimeCreated>

<Method name="createFileHTMLallClasses">
<Description>
Создается файл с ссылками на файлы по отдельным классам (отдельные файлы по каждому классу тоже создаются)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String</FormalSpec>
<Implementation><![CDATA[
 if $get(fileName)="" set fileName="structAllClasses.html"
 set file=..getPath()_"\"_fileName
 set f=##class(%File).%New(file)
 do f.Open("wsn")
 do ..writeHeader(.f, "All classes")
 // таблица со всеми классами
 Do f.WriteLine("<br />")
 Do f.WriteLine("  <table>") 
 Set result = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
  Do f.WriteLine("  <table>")
  Do result.Execute()
  While (result.Next()) {
	 set classname=result.Data("Name")
	 if $e(classname,1,4)'="User" continue
	 Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
	 if '$IsObject(classobj) continue
	 set sqlname=classobj.SqlTableName   
	 Do f.WriteLine("    <tr>")
	 Do f.WriteLine("      <td>")
	 Do f.WriteLine("         <a href="_..getNameFile(classname)_">"_classname_"( SQL: "_sqlname_" )"_"</a>")
	 Do f.WriteLine("      </td>")
	 Do f.WriteLine("      <td>")
	 Do f.WriteLine("      </td>")
	 Do f.WriteLine("    </tr>")
  }
  Do f.WriteLine("  </table>")

  do ..writeFooter(.f)
  do f.Close()
  
  Do result.Execute()
  While (result.Next()) {
	 set classname=result.Data("Name")
	 if $e(classname,1,4)'="User" continue
	 do ..createFileHTMLclass(classname,..getNameFile(classname), fileName )
  }
  
  quit
]]></Implementation>
</Method>

<Method name="createFileHTMLclass">
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String,fileName:%String,refMenu:%String=""</FormalSpec>
<Implementation><![CDATA[
 if $get(fileName)="" set fileName=..getNameFile(classname)
 set file=..getPath()_"\"_fileName
 set ref=$na(^||struct(classname))
 do ..getInfoAboutClass( classname, ref ) 
 if '$data(@ref) quit
 set f=##class(%File).%New(file)
 do f.Open("wsn")
 do ..writeHeader(.f, "Class "_classname_" ( SQL: "_$listget(@ref@("map"),1)_" )", refMenu )
 Do f.WriteLine("<br />")
 // таблица с основными глобалями
 set count=0
 set typemap="" 
 for {
	 set typemap=$order(@ref@("map",typemap)) if typemap="" quit
     set map="" 
     for {
    	 set map=$order(@ref@("map",typemap,map)) if map="" quit
    	 set count=count+1
     }
 }
 set flagPrintAchors=$select(count>1:1,1:0) 
 if flagPrintAchors=1 {
   Do f.WriteLine("  <table>")
   set typemap="" 
   for {
	 set typemap=$order(@ref@("map",typemap)) if typemap="" quit
     set map="" 
     for {
    	 set map=$order(@ref@("map",typemap,map)) if map="" quit
    	 set globname=$li(@ref@("map",typemap,map),1)
    	 ;if typemap="index" b  
    	 set globNameWithKeys=..getNameGlob($na(@ref@("map",typemap,map)))
    	 set key=typemap_map
    	  
    	 Do f.WriteLine("    <tr>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("         "_..getTypeMap(typemap))  ;$select(typemap="data":"Данные",1:"Индекс"))
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("         <a href=#"_key_">"_globNameWithKeys_" )"_"</a>")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("    </tr>")
     }
   }
   Do f.WriteLine("  </table>")
 }
 
 // ссылка на Relationships (которые в конце файла)
 if $data(@ref@("relationships")) {
	 if flagPrintAchors=0 Do f.WriteLine("  <table>")
	 	 Do f.WriteLine("    <tr>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("         "_"Relationships")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("         <a href=#Relationships>Relationships</a>")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("    </tr>")
	 if flagPrintAchors=0 Do f.WriteLine("  </table>")
 }
 
 // ссылка на SqlFields
 if $data(@ref@("Properties","sqlfields")) {
	 if flagPrintAchors=0 Do f.WriteLine("  <table>")
	 	 Do f.WriteLine("    <tr>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("         "_"SqlFields")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("         <a href=#SqlFields>SqlFields</a>")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("      <td>")
    	 Do f.WriteLine("      </td>")
    	 Do f.WriteLine("    </tr>")
	 if flagPrintAchors=0 Do f.WriteLine("  </table>")
 }
 
 // таблица с внутренними глобалями
 Do f.WriteLine("<br />")
 set typemap="" 
 for {
	 set typemap=$order(@ref@("map",typemap)) if typemap="" quit
     set map="" 
     for {
    	 set map=$order(@ref@("map",typemap,map)) if map="" quit
    	 set globname=$li(@ref@("map",typemap,map),1)
    	 set globNameWithKeys=..getNameGlob($na(@ref@("map",typemap,map)))
    	 set key=typemap_map 
    	 Do f.WriteLine("<br />")
    	 Do f.WriteLine("<a name="""_key_"""><b>"_..getTypeMap(typemap)_" "_globNameWithKeys_" )"_"</b></a>")
    	 ;if typemap="index" if $d(@ref@("map",typemap,map,"properties")) b  
    	 set flagPrintAchors=0
    	  set node=""
    	 for {
	    	 set node=$order(@ref@("map",typemap,map,"properties",node)) if node="" quit
	    	 if $tr(node,$c(1,2),"")'="root" set flagPrintAchors=1 quit
    	 }
    	 if flagPrintAchors=1 {
	      Do f.WriteLine("  <table>")
    	  set node=""
    	  for {
	    	 set node=$order(@ref@("map",typemap,map,"properties",node)) if node="" quit
	    	 set nodep=$tr(node,$c(1)_$c(2),"")
	    	 set key2=key_$tr(nodep,"""","")
    	     Do f.WriteLine("    <tr>")
    	     Do f.WriteLine("      <td>")
    	     Do f.WriteLine("         "_"<a href=#"_key2_"><b>"_globNameWithKeys_$select(nodep="root":"",1:","_nodep)_" )"_"</b></a>")
    	     Do f.WriteLine("      </td>")
        	 Do f.WriteLine("      <td>")
             Do f.WriteLine("      </td>")
    	     Do f.WriteLine("    </tr>")
    	  }
    	  Do f.WriteLine("  </table>")
    	 }
    	 else {
	      Do f.WriteLine("  <br />")	 
    	 }
       	    	 
    	 set node=""
    	 for {
	    	 set node=$order(@ref@("map",typemap,map,"properties",node)) if node="" quit
	    	 set nodep=$tr(node,$c(1)_$c(2),"")
	    	 set key2=key_$tr(nodep,"""","")
	    	 Do f.WriteLine("<br />")
    	     Do f.WriteLine($select(flagPrintAchors=1:"<a name="""_key2_""">",1:"")_"<b>"_globNameWithKeys_$select(nodep="root":"",1:","_nodep)_" )"_"</b>"_$select(flagPrintAchors=1:"</a>",1:""))
    	     Do f.WriteLine("    <table>")
    	     set piece=""
    	     for {
	    	     set piece=$order(@ref@("map",typemap,map,"properties",node,piece)) if piece="" quit
	       	     Do f.WriteLine("      <tr>")
    	         Do f.WriteLine("        <td>")
    	         Do f.WriteLine("           "_piece)
    	         Do f.WriteLine("        </td>")
            	 Do f.WriteLine("        <td>")
            	 set recprop=@ref@("map",typemap,map,"properties",node,piece)
            	 Do f.WriteLine("           "_$lg(recprop,1)_" (propertyname="_$lg(recprop,3)_", sqlfieldnumber="_$lg(recprop,5)_")")
                 Do f.WriteLine("        </td>")
    	         Do f.WriteLine("      </tr>")
    	     }
    	     Do f.WriteLine("    </table>")
    	 }
     }
 }
 Do f.WriteLine("  </table>")

 // Таблица с полями sql (PLIST)
 Do f.WriteLine("<br />")
 Do f.WriteLine("<a name=SqlFields><b>SqlFields</b></a>")
 Do f.WriteLine("    <table>")
 set npp=""
 for {
	 set npp=$order(@ref@("Properties","sqlfields",npp),1,recprop) if npp="" quit
	 Do f.WriteLine("      <tr>")
     Do f.WriteLine("        <td>")
     Do f.WriteLine("           "_npp)
     Do f.WriteLine("        </td>")
     Do f.WriteLine("        <td>")
     Do f.WriteLine("           "_recprop)
     Do f.WriteLine("        </td>")
     Do f.WriteLine("      </tr>")
 }
 Do f.WriteLine("    </table>")

  // таблица с relationships
 if $data(@ref@("relationships")) {
    Do f.WriteLine("<br />")
    Do f.WriteLine("<a name=Relationships><b>Relationships</b></a>")
    Do f.WriteLine("    <table>")
    set bind="" 
    for {
	    set bind=$order(@ref@("relationships",bind)) if bind="" quit
	    set rec=^(bind)
	    set classRef=$lg(rec,1)
	    Do f.WriteLine("      <tr>")
    	Do f.WriteLine("        <td>")
    	Do f.WriteLine("           "_bind)
    	Do f.WriteLine("        </td>")
        Do f.WriteLine("        <td>")
        Do f.WriteLine("           <a href="_$tr(classRef,".","_")_".html>"_classRef_"</a>")
        Do f.WriteLine("        </td>")
    	Do f.WriteLine("      </tr>")
    } 
    Do f.WriteLine("    </table>")
 }

 do ..writeFooter(.f)
 do f.Close()
 quit
]]></Implementation>
</Method>

<Method name="getNameGlob">
<ClassMethod>1</ClassMethod>
<FormalSpec>ref:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 set globname=$li(@ref,1)
   	 set nameGlob0=globname_"( "
     set subscript="",nameGlob=nameGlob0
     for {
	    	 set subscript=$order(@ref@("subscripts",subscript)) if subscript="" quit
	    	 set nameGlob=nameGlob_$select(nameGlob'=nameGlob0:", ",1:"")_$li(@ref@("subscripts",subscript),1)
    	 }
    quit nameGlob
]]></Implementation>
</Method>

<Method name="getTypeMap">
<ClassMethod>1</ClassMethod>
<FormalSpec>typemap:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  quit $select(typemap="data":"Data",1:"Index")
]]></Implementation>
</Method>

<Method name="writeHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&f:%File,title:%String,refMenu:%String]]></FormalSpec>
<Implementation><![CDATA[
 Do f.WriteLine("<html>")
 Do f.WriteLine("<head>")
 Do f.WriteLine("  <meta http-equiv=""Content-Type"" content=""text/html; charset=windows-1251"" /> ")
 if $get(refMenu)'="" Do f.WriteLine("<a href="_refMenu_">All classes<a/>")
 if $get(title)'="" Do f.WriteLine("<h1><b>"_title_"</b></h1>")
 
 Do f.WriteLine("</head>")
 Do f.WriteLine("<body>")
 quit
]]></Implementation>
</Method>

<Method name="writeFooter">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&f:%File]]></FormalSpec>
<Implementation><![CDATA[
 Do f.WriteLine("</body>")
 Do f.WriteLine("</html>")
 quit
]]></Implementation>
</Method>

<Method name="getInfoAboutClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String,ref:%String</FormalSpec>
<Implementation><![CDATA[
	 Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
	 if '$IsObject(classobj) quit
	 if $get(ref)="" set ref=$na(^||struct(classname))
	 kill @ref
	 
	 do ..getPropertiesSimple(classobj,$name(@ref@("Properties")))
	 set @ref@("map")=$lb(classobj.SqlTableName)
	 Set keystorobj="" set mapCounter=0
	 For  {
			Set storobj=classobj.Storages.GetNext(.keystorobj) if keystorobj="" Quit
			If '$IsObject(storobj) Continue
			set mapCounterData=0
			set keymap=""
			for {
				set map=storobj.SQLMaps.GetNext(.keymap) if keymap="" quit
				set mapname=map.Name
				set maptype=map.Type 
				if maptype="data" set mapCounterData=mapCounterData+1 if mapCounterData>1 continue  
				set globName=map.Global
				set @ref@("map",maptype,mapname)=$lb(globName)
				set keysubscript=""
				for {
					set subscript=map.Subscripts.GetNext(.keysubscript) if keysubscript="" quit
					set subscriptNum=subscript.Name
				    if subscript="" continue 
				    set @ref@("map",maptype,mapname,"subscripts",subscriptNum)=$lb(subscript.Expression)
				}
				set keymapdata=""
				for {
					set mapdata=map.Data.GetNext(.keymapdata) if keymapdata="" quit
					set piece=mapdata.Piece
					set node=mapdata.Node
					set namefield=mapdata.Name
					set fieldinfo=""
					if namefield'="" {
						set fieldinfo=$get(@ref@("Properties","index",namefield))
					}
					if node'="" set node=$c(2)_""""_$tr(node,"""","")_"""" ;$select(node=+node:""""_node_"""",1:node)
					if node="" set node=$c(1)_"root"
					;if piece'="",node="" {
				    ;		set @ref@("map",maptype,mapname,"properties","0root",piece)=$lb(mapdata.Name,mapdata.Delimiter)	
					;}
					if piece="",node'="" {
						set @ref@("map",maptype,mapname,"properties",node)=$lb(mapdata.Name,mapdata.Delimiter)	
					}
					if piece'="",node'="" {
						set @ref@("map",maptype,mapname,"properties",node,piece)=$lb(mapdata.Name,mapdata.Delimiter,$lg(fieldinfo,2),$lg(fieldinfo,4),$lg(fieldinfo,5))	
					}
				}
			}    
	 }
	 do ..getRelationships(classname, $na(@ref@("relationships")) )
]]></Implementation>
</Method>

<Method name="getPropertiesSimple">
<Description>
Получение массива обыкновенных свойств (не связей)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>classobj:%Dictionary.ClassDefinition,ref:%String</FormalSpec>
<Implementation><![CDATA[
	#dim propobj As %Dictionary.PropertyDefinition
	 if '$IsObject(classobj) quit
	 ;kill @ref
  	 Set keypropobj="",npp=0 
	 For  {
			Set propobj=classobj.Properties.GetNext(.keypropobj) if keypropobj="" Quit
			set relationship=propobj.Relationship
			if relationship continue
			;if classname="User.EPVisitNumber" b    
			set name=propobj.Name
			set type=propobj.Type
			set sqlfieldname=propobj.SqlFieldName
			set sqlcolumnnum=propobj.SqlColumnNumber
		    set @ref@(name)=$lb(propobj.%Id(),name,type,sqlfieldname,sqlcolumnnum) 
		    if sqlfieldname'="" {
			    set @ref@("index",sqlfieldname)=$lb(propobj.%Id(),name,type,sqlfieldname,sqlcolumnnum) 
		    }
		    if sqlcolumnnum'="" set @ref@("sqlfields",sqlcolumnnum)=sqlfieldname
	 }
]]></Implementation>
</Method>

<Method name="getRelationships">
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String,ref:%String</FormalSpec>
<Implementation><![CDATA[
	 Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
	 if '$IsObject(classobj) quit
	 ;kill @ref
  	 Set keypropobj="",npp=0 
	 For  {
			Set propobj=classobj.Properties.GetNext(.keypropobj) if keypropobj="" Quit
			set relationship=propobj.Relationship
			if 'relationship continue
			;if classname="User.EPVisitNumber" b    
			set name=propobj.Name
			set type=propobj.Type
			set cardinality=propobj.Cardinality
			if cardinality'="children" continue
			set classRef=""
			if $IsObject(##class(%Dictionary.ClassDefinition).%OpenId("User."_type)) set classRef="User."_type
			if $IsObject(##class(%Dictionary.ClassDefinition).%OpenId(type)) set classRef=type
			if classRef="" continue
			set @ref@(name)=$lb(classRef) 
			do ..getRelationships(classRef, $na(@ref@(name)) )
			;set npp=npp+1
			;set @ref@(npp)=$lb(name,classRef) 
			;do ..getRelationships(classRef, $na(@ref@(npp)) )	
	 }
]]></Implementation>
</Method>

<Method name="getNameFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String</FormalSpec>
<Implementation><![CDATA[  quit $tr(classname,".","_")_".html"
]]></Implementation>
</Method>

<Method name="getPath">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set path="c:\doc\structTest"
	if '##class(%File).Exists(path) do ##class(%File).CreateDirectoryChain(path) 
	quit path
]]></Implementation>
</Method>

<Method name="Inds">
<Description>
список всех индексов
do Inds^WebER()
pGbl - глобал результатов
pPkg - пакет классов
pClear - чистить глобал результатов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFile,pPkg</FormalSpec>
<Implementation><![CDATA[
	#dim filestream As %FileCharacterStream
	
	if $G(pFile)="" quit
	if $G(pPkg)="" set pPkg = "WebER"
	
	if ##class(%File).Exists(pFile) {
		do ##class(%File).Delete(pFile)
	}
	set:pPkg'["." pPkg = pPkg_"." 
	Write !,"Сбор всех индексов в "_pPkg_"*"
	&sql(DECLARE cInds CURSOR FOR
		select ID, Name 
			into :id, :classname
		from %Dictionary.CompiledClass
		where ID %STARTSWITH :pPkg and ClassType='persistent'	
 	)
    
    set filestream=##class(%FileCharacterStream).%New()
    set filestream.Filename=pFile
	&sql(OPEN cInds)
	for {
		&sql(FETCH cInds)
		quit:SQLCODE
		continue:$E(id,1,$L(pPkg))'=pPkg
		do ..CurInd(filestream,id, classname)
		
	}
    
	&sql(CLOSE cInds)
	do filestream.SaveStream()
	do filestream.%Close()
	Write !,"Все, см. "_pFile
]]></Implementation>
</Method>

<Method name="CurInd">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileStream:%FileCharacterStream,pId,pClassName</FormalSpec>
<Implementation><![CDATA[
	&sql(DECLARE cCurInd CURSOR FOR
		select Name,IdKey,Properties,_Unique,Data
			into :Name,:IdKey,:Properties,:Uniq,:Data
		from %Dictionary.IndexDefinition
		where parent = :pId
 	)

	&sql(OPEN cCurInd)
	&sql(FETCH cCurInd)
	While (SQLCODE = 0) {
		do pFileStream.WriteLine("ClassName="_pClassName_", IndexName="_Name_", IdKey="_IdKey_", Unique="_Uniq_", Data="_Data_", Properties="_Properties)
		&sql(FETCH cCurInd)
	}
	    
	&sql(CLOSE cCurInd)
	
	// индексы, которые описаны в map
	set ref=$na(^||struct(pClassName))
    do ..getInfoAboutClass(pClassName, ref ) 
    set typemap="" 
   for {
	 set typemap=$order(@ref@("map",typemap)) if typemap="" quit
	 if typemap'="index" continue
     set map="" 
     for {
    	 set map=$order(@ref@("map",typemap,map)) if map="" quit
    	 set globname=$li(@ref@("map",typemap,map),1)
    	 set globNameWithKeys=..getNameGlob($na(@ref@("map",typemap,map)))
    	 do pFileStream.WriteLine("ClassName="_pClassName_", IndexGlob="_globNameWithKeys)
     }
   }
   
 quit
]]></Implementation>
</Method>
</Class>
</Export>
