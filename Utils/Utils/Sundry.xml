<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.Sundry">
<Super>%RegisteredObject</Super>
<TimeCreated>63019,54574.469467</TimeCreated>

<Method name="exportAllroutines">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<Implementation><![CDATA[
	kill items,itemsCls
 set rtn=""
 for {
	 set rtn=$order(^rINC(rtn)) if rtn="" quit
	 if ..ExcludeRoutine(rtn,"inc") continue
	 set items(rtn_".inc")=""
	 // write !,rtn_".inc" r aaa
	 
 }
 set rtn=""
 for {
	 set rtn=$order(^rMAC(rtn)) if rtn="" quit
	 if ..ExcludeRoutine(rtn,"mac") continue
	 set items(rtn_".mac")=""
	 ///write !,rtn_".mac" r aaa
 }
 set rtn=""
 for {
	 set rtn=$order(^ROUTINE(rtn)) if rtn="" quit
	 if $data(^rMAC(rtn)) continue
	 if ..ExcludeRoutine(rtn,"int") continue
	 set items(rtn_".int")=""
	 //write !,rtn_".int" r aaa
 }
 	
 do ..CreateFileWithRoutines("c:\temp\all_routines.xml",.items)
 
 // экспорт всех классов
 &sql(DECLARE cClasses CURSOR FOR
		select ID,Name 
			into :id,:classname
		from %Dictionary.ClassDefinition
 	)

	&sql(OPEN cClasses)
	for {
		&sql(FETCH cClasses)
		quit:SQLCODE
		if classname'="" set itemsCls(classname)=""
	}
    
	&sql(CLOSE cClasses)
	
	do ..CreateFileWithRoutines("c:\temp\all_class.xml",.itemsCls)
]]></Implementation>
</Method>

<Method name="ExcludeRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRoutineName:%String,pRoutineType:%String</FormalSpec>
<Implementation><![CDATA[
	if $extract(pRoutineName,1)="%" quit 1
    if $extract(pRoutineName,1,3)="Ens" quit 1
    if $extract(pRoutineName,1,5)="CSPX." quit 1
    if $extract(pRoutineName,1,8)="Activate" quit 1
    if $extract(pRoutineName,1,8)="CacheSql" quit 1
    quit 0
]]></Implementation>
</Method>

<Method name="CreateFileWithRoutines">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String,items:%String</FormalSpec>
<Implementation><![CDATA[
 try {
	  if ##class(%File).Exists(fileName) do ##class(%File).Delete(fileName)
	  kill errorlog
	  write !,"Export if file "_fileName
      do $System.OBJ.Export(.items,fileName,"",.errorlog)
      if $data(errorlog) zw errorlog
 } catch(exception) {
	  do $system.OBJ.DisplayError(exception.AsStatus())
 }
  quit
]]></Implementation>
</Method>

<Method name="FindReports1">
<Description>
Получить список названий отчетов по списку программ для отчетов 
pStringRoutines - список программ для отчетов через $c(0)
do ##class(Utils.Sundry).FindReports1(...)
s str="PRTCLNRUS02"_$c(0)_"PRTCLNRUS05"_$c(0)_"PRTCLNRUS07"_$c(0)_"PRTCLNRUS13"_$c(0)_"PRTCLNRUS13c"_$c(0)_"PRTCLNRUS30"_$c(0)_"PRTCLNRUS34"_$c(0)_"PRTCLNRUS35"_$c(0)_"PRTCLNRUS40"_$c(0)_"PRTCLNRUS44"_$c(0)_"PRTCLNRUS48"_$c(0)_"PRTCLNRUS13birlab"_$c(0)_"PRTCLNRUS05birlab"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStringRoutines:%String</FormalSpec>
<Implementation><![CDATA[
 	kill ^||vsp
 	set id=""
 	for {
	 	set id=$order(^TTAB("REPORT-GENERIC",id),1,rec) if id="" quit
	 	set routine=$piece(rec,"\",1) if routine="" continue
	 	set namereport=$piece(rec,"\",9)
	 	set idmenu=$piece(rec,"\",4)
	 	set namemenu="" if idmenu'="" set namemenu=$piece($get(^TTAB("CTPG",idmenu)),"\",1)
	 	if ($c(0)_pStringRoutines_$c(0))[($c(0)_routine_$c(0)) {
		 	write !,routine," ",namereport," (",namemenu,")"
	 	}
 	}
]]></Implementation>
</Method>

<Method name="UpLoadRoutineReports">
<Description>
Выгрузить часть программ для создания отчетов в файлы (каждую программу в отдельный файл)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDir:%String</FormalSpec>
<Implementation><![CDATA[
 	if ($get(pDir)'="")&&(##class(%File).DirectoryExists(pDir)=0) {
	 	do ##class(%File).CreateDirectory(pDir)
 	}
 	set id=""
 	for {
	 	set id=$order(^TTAB("REPORT-GENERIC",id),1,rec) if id="" quit
	 	set routine=$piece(rec,"\",1) if routine="" continue
	 	if $piece(rec,"\",8)'="ReportVB.clsStart" continue
	 	set namereport=$piece(rec,"\",9)
	 	kill items
	 	if $data(^rMAC(routine)) {
		 	set items(routine_".mac")=""
	 	} elseif $data(^ROUTINE(routine)) {
		 	set items(routine_".int")=""
	 	}
	 	do ..CreateFileWithRoutines(pDir_"\"_routine_".xml",.items)
 	}
]]></Implementation>
</Method>

<Method name="TestDateTime">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	w $zd($h),", ",$zd($h,1),", ",$zd($h,2),", ",$zd($h,3),", ",$zd($h,4),", ",$zd($h,5),", ",$zd($h,6),", ",$zd($h,7),", ",$zd($h,8),", ",$zd($h,9),", ",$zd($h,10),", ",$zd($h,11),", ",$zd($h,12),", ",$zd($h,13),", ",$zd($h,14),", ",$zd($h,15),", ",$zd($h,16),", ",$zd($h,17)
	quit
]]></Implementation>
</Method>
</Class>
</Export>
