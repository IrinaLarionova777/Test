<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.TransferL69L2012">
<Super>%RegisteredObject</Super>
<TimeCreated>62759,53353.091537</TimeCreated>

<Method name="TransHOSHospitalPatients">
<Description>
Для перевода дополнительных полей из User.HOSHospitalPatients в User.HOSHospitalPatientsExtra</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set r="\"	//^THOS( {HOS_HospitalDataBase.HOS_HospitalCode_DR}, "PATIENT", {HOSP_DebtorNumber}, {HOSP_Visit} )
  set hosp=""
  for {
	  set hosp=$order(^THOS(hosp)) if hosp="" quit
	  set debtor=""
	  for {
		  set debtor=$order(^THOS(hosp,"PATIENT",debtor)) if debtor="" quit
		  set visit=""
		  for {
			  set visit=$order(^THOS(hosp,"PATIENT",debtor,visit),1,record) if visit="" quit
			  if $data(^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")) continue
			  set EPVISExtra1=$piece(record,"\",33)
			  set EPVISPriorityCodeDR=$piece(record,"\",34)
			  set EPVISLanguageDR=$piece(record,"\",35)
			  set EPVISDateOfCollection=$piece(record,"\",36)
			  set EPVISTimeOfCollection=$piece(record,"\",37)
			  set EPVISExtra2=$piece(record,"\",38)
			  set EPVISExtra3=$piece(record,"\",39)
			  set EPVISExtra4=$piece(record,"\",40)
			  set EPVISExtra5=$piece(record,"\",41)
			  set EPVISExtra6=$piece(record,"\",42)
			  set EPVISExtra7=$piece(record,"\",43)
			  set rec=EPVISExtra1_r_EPVISPriorityCodeDR_r_EPVISLanguageDR_r_EPVISDateOfCollection_r_EPVISTimeOfCollection
			  set rec=rec_r_EPVISExtra2_r_EPVISExtra3_r_EPVISExtra4_r_EPVISExtra5_r_EPVISExtra6_r_EPVISExtra7
			  if $tr(rec,r,"")="" continue
			  w !,hosp," ",debtor," ",visit   
			  set ^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")=rec
			  for ii=33:1:43 set $piece(^THOS(hosp,"PATIENT",debtor,visit),r,ii)=""
			  //w !,deptor,"",visit
		  }
	  }
  }
]]></Implementation>
</Method>

<Method name="vr1">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set r="\"	//^THOS( {HOS_HospitalDataBase.HOS_HospitalCode_DR}, "PATIENT", {HOSP_DebtorNumber}, {HOSP_Visit} )
  set hosp=""
  for {
	  set hosp=$order(^THOS(hosp)) if hosp="" quit
	  set debtor=""
	  for {
		  set debtor=$order(^THOS(hosp,"PATIENT",debtor)) if debtor="" quit
		  set visit=""
		  for {
			  set visit=$order(^THOS(hosp,"PATIENT",debtor,visit),1,record) if visit="" quit
			  if '$data(^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")) continue
			  w !,hosp," ",debtor," ",visit
			  w !,$get(^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra"))
			  //set rec=^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")
			  //if $tr(rec,r,"")="" kill ^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra") w !,hosp," ",debtor," ",visit
		  }
	  }
  }
]]></Implementation>
</Method>

<Method name="ChangeDLLreports">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set id=""
  for {
	  set id=$order(^TTAB("REPORT-GENERIC",id),1,record) if id="" quit
	  if $piece(record,"\",8)'="CLNSPARM007.clsSTART" continue
	  set $piece(^TTAB("REPORT-GENERIC",id),"\",8)="ReportVB.clsStart"
  }
  
  if $piece($get(^TTAB("REPORT-GENERIC","PANEL")),"\",1)="LVBVIS2" { 
     set $piece(^TTAB("REPORT-GENERIC","PANEL"),"\",1)="LVBVIS2panel"
  }
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// запись в локать local (rusw) таблицы table ("CP1251PRN") (должна быть уже загружена со своими subtable) и прикрепление ее для работы с принтером

]]></Content>
</UDLText>

<Method name="editLocaleRusW">
<ClassMethod>1</ClassMethod>
<FormalSpec>locale,table</FormalSpec>
<Implementation><![CDATA[
	zn "%SYS"
	if $get(locale)="" set locale="rusw"
	if $get(table)="" set table="CP1251PRN"
	
	s objloc=##class(Config.NLS.Locales).%OpenId(locale)
	// add table
	s string=$lb(table,"Unicode","Unicode",table) 
	set sc=objloc.XLTTables.SetAt(string,"CP1251PRN")
	If (##class(%SYSTEM.Status).IsError(sc)) {
         Do $System.OBJ.DisplayError(sc)
    }
    Else 
    { 
         Write !,"Таблица "_table_" добавлена к локали "_locale_" успешно."
    }
    
    // bind with printer 
	//set objloc.TranPrinter=table  //s $li(^SYS("NLS","LocalesD","rusw"),21)=table
	
	// save changes
	set sc=objloc.%Save()
    If (##class(%SYSTEM.Status).IsError(sc)) {
         Do $System.OBJ.DisplayError(sc)
    }
    Else 
    { 
         Write !,"Локаль "_locale_" сохранена успешно."
    } 
    
	// compile locale
	set sc=##class(Config.NLS.Locales).Compile(locale)
	If (##class(%SYSTEM.Status).IsError(sc)) {
         Do $System.OBJ.DisplayError(sc)
    }
    Else 
    { 
         Write !,"Локаль "_locale_" скомпилирована успешно."
    }
]]></Implementation>
</Method>

<Method name="EditCTPAT">
<Description>
Редактирование справочника типов пациентов User.CTPatientType, ^TTAB(“CTPAT”) (по-русски)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   	kill ^TTAB("CTPAT")
   	set ^TTAB("CTPAT","E")="Экстренный\\Y\"
   	set ^TTAB("CTPAT","GP")="Терапевт\\Y\"
   	set ^TTAB("CTPAT","N")="Амбулаторный\\Y\"
   	set ^TTAB("CTPAT","O")="Другое\\Y\"
   	set ^TTAB("CTPAT","P")="Первичный\\Y\"
   	set ^TTAB("CTPAT","Y")="Стационарный\Y\Y\"
   	quit
]]></Implementation>
</Method>

<Method name="RunLVBCOM80">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set timeFrom=+$piece($h,",",2)
	// 31 d ##Class(User.BBPPackDetails).%BuildIndices()
	// 84 d ##Class(User.EPVisitNumber).%BuildIndices()
	// 124 d ##Class(User.BBAntibodyRegister).%BuildIndices()
	for i=31,84,124 kill ^CF("CONV",i)
	do ^LVBCOM80
	
	set timeTo=+$piece($h,",",2)
	write !,"Длительность ",timeTo-timeFrom," секунд"
	
	do ..RebuildIndices()
]]></Implementation>
</Method>

<Method name="RebuildIndices">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set timeFrom=+$piece($h,",",2)

	// 1 - изменение типа   индекс по $lb("$$ALPHAUP({CTCN_Description})") -> $lb("{CTCN_ALPHAUPDescription}") - надо сначала заполнть поле
	// 2 - появился новый индекс 
 //1: 	User.BBAntibodyRegister.clsnext subscript - LVB80	 	 
 //2:  	User.BBPPackDetails.cls 	 - LVB80	 
 //3:  	User.CTBBBloodGroupNeonatalXM.cls - не будем ничего делать (изменения типа 1)	 	 
 //4:  	User.CTContract.cls - не будем ничего делать (изменения типа 1) 	 	 
 //5:  	User.CTDoctor.cls - не будем ничего делать (изменения типа 1) 	 	 
 //6:  	User.CTPostCode.cls - не будем ничего делать (изменения типа 1) 	 
 //7:  	User.CTPrintDestination.cls   - не будем ничего делать (property CTPD_Device_DR-> CTPD_Device)	 	 
 //8:  	User.CTRefLabTestSets.cls- не будем ничего делать (индекс был и теперь нет) 	 	 
 //9:  	User.CTState.cls - см ниже	 	 
 //10:  	User.CTStorageContainers.cls см ниже	 
 //11:  	User.CTSuperSet.cls - не будем ничего делать (изменения типа 1) 	 	 
 //12:  	User.CTTestCode.cls- не будем ничего делать (изменения типа 1) 	 
 //13:  	User.CTTestCodeRangesAA.cls - само сработает в LVBCOM80133	 
 //14:  	User.CTTestSet.cls- не будем ничего делать (изменения типа 1)  	 	 
 //15:  	User.CTUserLocation.clsnext subscript не будем ничего делать (новые поля и на них индексы)	 	 
 //16:  	User.CTVBProject.cls - не будем ничего делать (изменения типа 1)  	 	 
 //17:  	User.CTVBProjectFields.cls- не будем ничего делать (изменения типа 1)  	 	 
 //18:  	User.EPVisitNumber.cls - LVB80 	 	 
 //19:  	User.EPVisitTestSet.cls - не будем ничего делать (новые поля и на них индексы)		 	 
 //20:  	User.EPVisitTestSetBBRequired.cls- не будем ничего делать 	 ? 	 
 //21:  	User.EPVisitTestSetData.cls- не будем ничего делать 	(почему то в LVBCOM80154 k ^TEPIi("InstrumentDT")) 	 
 //22:  	User.EPVisitTestSetQueue.cls- не будем ничего делать	 	 
 //23:  	User.HIHistDBVABlockOrder.cls - не будем ничего делать (QC) 	 	 
 //24:  	User.HOSHospitalPatients.cls - не будем ничего делать 	 	 
 //25:  	User.MIFMachineQC.cls - само сработает в LVBCOM80151 	 	 
 //26:  	User.OLDResults.cls - не будем ничего делать (у нас нет)	 	 
 //27:  	User.SSLanguage.cls - не будем ничего делать (изменения типа 1)	 	 
 //28:  	User.SSUser.cls - не будем ничего делать (изменения типа 1)	  	 	 
 //29:  	User.SSVBExecutables.cls - не будем ничего делать (изменения типа 1)	  	 
 //30:  	User.SSVBMessageTranslation.cls - не будем ничего делать (изменения типа 1)	 	 	 
 //31:  	User.SSVBMessages.cls - не будем ничего делать (изменения типа 1)	 	 	 
 //32:  	User.STStorageContainerPos.cls- не будем ничего делать	 	 
 //33:  	User.TSNOSNOMED.cls- не будем ничего делать
 	d ##Class(User.BBAntibodyRegister).%BuildIndices()
	
	write !,"User.CTState"
	d ##Class(User.CTState).%BuildIndices()
	
	write !,"User.CTStorageContainers"
	d ##Class(User.CTStorageContainers).%BuildIndices()
    
    /// В LVBCOM80154 k ^TEPIi("InstrumentDT") Поэтому вообще нет индексов на данные EPVisitTestSetData, пришедшие из версии 6.9 =>
    /// пересчет куба по EPVisitTestSetData не учитывает эти записи
    write !,"User.EPVisitTestSetData"
	d ##Class(User.EPVisitTestSetData).%BuildIndices()
	
	set timeTo=+$piece($h,",",2)
	write !,"Длительность ",timeTo-timeFrom," секунд"
]]></Implementation>
</Method>

<Method name="DopVBE">
<Description>
Создание дополнительных элементов в таблице User.SSVBExecutables (по поводу прав на дополнительный функционал в Trak)
делать не на ходу </Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   set ^SS("SSVBE","100001")="TCLEx^Дополнительный функционал в TrakCareLab^TCLEx^N^^"
   
   s ^SS("SSVBE","100001","SSVBO",1)="BI_DeepSee^Отчеты BI DeepSee"
   s ^SS("SSVBE","100001","SSVBO",2)="Tune_BI_DeepSee^Настройка отчетов BI DeepSee"
   s ^SS("SSVBE","100001","SSVBO",3)="Tune_TrakReports^Настройка отчетов Trak"
   s ^SS("SSVBE","100001","SSVBO",4)="Tune_Printers_Client^Настройка принтеров (дополн.)"
   
   set ok=##class(User.SSVBExecutables).%PurgeIndices()
   if 'ok {
	   do $System.OBJ.DisplayError(ok)
   }
   kill ^SS("SSVBE","0","Desc")
   kill ^SS("SSVBE","0","Executable")
   
   set ok=##class(User.SSVBExecutables).%BuildIndices()
   if 'ok {
	   do $System.OBJ.DisplayError(ok)
   }
]]></Implementation>
</Method>

<Method name="FindAmbuscade">
<Description>
Эксперимент показал (и тект программы %RIMF подтвердил), что при восстановлении obj удаляется int, но не удаляется mac.
Функция для поиска программ, где есть mac, но нет Int
Удаление только mac программы w ##class(%Library.Routine).Delete("LVBCOM01.MAC",1)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set prog="" 
 for {
	 set prog=$order(^rMAC(prog)) if prog="" quit
	 if '$data(^ROUTINE(prog)) w !,prog
 }
]]></Implementation>
</Method>
</Class>
</Export>
