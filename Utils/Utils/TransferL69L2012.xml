<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.TransferL69L2012">
<Super>%RegisteredObject</Super>
<TimeCreated>62759,53353.091537</TimeCreated>

<Method name="TransHOSHospitalPatients">
<Description>
Для перевода дополнительных полей из User.HOSHospitalPatients в User.HOSHospitalPatientsExtra
Для Бурденко</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set r="\"	//^THOS( {HOS_HospitalDataBase.HOS_HospitalCode_DR}, "PATIENT", {HOSP_DebtorNumber}, {HOSP_Visit} )
  set hosp=""
  for {
	  set hosp=$order(^THOS(hosp)) if hosp="" quit
	  set debtor=""
	  for {
		  set debtor=$order(^THOS(hosp,"PATIENT",debtor)) if debtor="" quit
		  set visit=""
		  for {
			  set visit=$order(^THOS(hosp,"PATIENT",debtor,visit),1,record) if visit="" quit
			  if $data(^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")) continue
			  set EPVISExtra1=$piece(record,"\",33)
			  set EPVISPriorityCodeDR=$piece(record,"\",34)
			  set EPVISLanguageDR=$piece(record,"\",35)
			  set EPVISDateOfCollection=$piece(record,"\",36)
			  set EPVISTimeOfCollection=$piece(record,"\",37)
			  set EPVISExtra2=$piece(record,"\",38)
			  set EPVISExtra3=$piece(record,"\",39)
			  set EPVISExtra4=$piece(record,"\",40)
			  set EPVISExtra5=$piece(record,"\",41)
			  set EPVISExtra6=$piece(record,"\",42)
			  set EPVISExtra7=$piece(record,"\",43)
			  set rec=EPVISExtra1_r_EPVISPriorityCodeDR_r_EPVISLanguageDR_r_EPVISDateOfCollection_r_EPVISTimeOfCollection
			  set rec=rec_r_EPVISExtra2_r_EPVISExtra3_r_EPVISExtra4_r_EPVISExtra5_r_EPVISExtra6_r_EPVISExtra7
			  if $tr(rec,r,"")="" continue
			  w !,hosp," ",debtor," ",visit   
			  set ^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")=rec
			  for ii=33:1:43 set $piece(^THOS(hosp,"PATIENT",debtor,visit),r,ii)=""
			  //w !,deptor,"",visit
		  }
	  }
  }
]]></Implementation>
</Method>

<Method name="vr1">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set r="\"	//^THOS( {HOS_HospitalDataBase.HOS_HospitalCode_DR}, "PATIENT", {HOSP_DebtorNumber}, {HOSP_Visit} )
  set hosp=""
  for {
	  set hosp=$order(^THOS(hosp)) if hosp="" quit
	  set debtor=""
	  for {
		  set debtor=$order(^THOS(hosp,"PATIENT",debtor)) if debtor="" quit
		  set visit=""
		  for {
			  set visit=$order(^THOS(hosp,"PATIENT",debtor,visit),1,record) if visit="" quit
			  if '$data(^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")) continue
			  w !,hosp," ",debtor," ",visit
			  w !,$get(^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra"))
			  //set rec=^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra")
			  //if $tr(rec,r,"")="" kill ^THOS(hosp,"PATIENT",debtor,visit,"ClientExtra") w !,hosp," ",debtor," ",visit
		  }
	  }
  }
]]></Implementation>
</Method>

<Method name="ChangeDLLreports">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set id=""
  for {
	  set id=$order(^TTAB("REPORT-GENERIC",id),1,record) if id="" quit
	  if $piece(record,"\",8)'="CLNSPARM007.clsSTART" continue
	  set $piece(^TTAB("REPORT-GENERIC",id),"\",8)="ReportVB.clsStart"
  }
  
  if $piece($get(^TTAB("REPORT-GENERIC","PANEL")),"\",1)="LVBVIS2" { 
     set $piece(^TTAB("REPORT-GENERIC","PANEL"),"\",1)="LVBVIS2panel"
  }
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// запись в локать local (rusw) таблицы table ("CP1251PRN") (должна быть уже загружена со своими subtable) и прикрепление ее для работы с принтером

]]></Content>
</UDLText>

<Method name="editLocaleRusW">
<ClassMethod>1</ClassMethod>
<FormalSpec>locale,table</FormalSpec>
<Implementation><![CDATA[
	zn "%SYS"
	if $get(locale)="" set locale="rusw"
	if $get(table)="" set table="CP1251PRN"
	
	s objloc=##class(Config.NLS.Locales).%OpenId(locale)
	// add table
	s string=$lb(table,"Unicode","Unicode",table) 
	set sc=objloc.XLTTables.SetAt(string,"CP1251PRN")
	If (##class(%SYSTEM.Status).IsError(sc)) {
         Do $System.OBJ.DisplayError(sc)
    }
    Else 
    { 
         Write !,"Таблица "_table_" добавлена к локали "_locale_" успешно."
    }
    
    // bind with printer 
	//set objloc.TranPrinter=table  //s $li(^SYS("NLS","LocalesD","rusw"),21)=table
	
	// save changes
	set sc=objloc.%Save()
    If (##class(%SYSTEM.Status).IsError(sc)) {
         Do $System.OBJ.DisplayError(sc)
    }
    Else 
    { 
         Write !,"Локаль "_locale_" сохранена успешно."
    } 
    
	// compile locale
	set sc=##class(Config.NLS.Locales).Compile(locale)
	If (##class(%SYSTEM.Status).IsError(sc)) {
         Do $System.OBJ.DisplayError(sc)
    }
    Else 
    { 
         Write !,"Локаль "_locale_" скомпилирована успешно."
    }
]]></Implementation>
</Method>

<Method name="EditCTPAT">
<Description>
Редактирование справочника типов пациентов User.CTPatientType, ^TTAB(“CTPAT”) (по-русски)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   	kill ^TTAB("CTPAT")
   	set ^TTAB("CTPAT","E")="Экстренный\\Y\"
   	set ^TTAB("CTPAT","GP")="Терапевт\\Y\"
   	set ^TTAB("CTPAT","N")="Амбулаторный\\Y\"
   	set ^TTAB("CTPAT","O")="Другое\\Y\"
   	set ^TTAB("CTPAT","P")="Первичный\\Y\"
   	set ^TTAB("CTPAT","Y")="Стационарный\Y\Y\"
   	quit
]]></Implementation>
</Method>

<Method name="RunLVBCOM80">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set timeFrom=+$piece($h,",",2)
	// 31 d ##Class(User.BBPPackDetails).%BuildIndices()
	// 84 d ##Class(User.EPVisitNumber).%BuildIndices()
	// 124 d ##Class(User.BBAntibodyRegister).%BuildIndices()
	for i=31,84,124 kill ^CF("CONV",i)
	do ^LVBCOM80
	
	set timeTo=+$piece($h,",",2)
	write !,"Длительность ",timeTo-timeFrom," секунд"
	
	// В версии 6.9 часто не записывался код прибора в EPVisitTestSetData, в 2012 работает корректно
    // Утилита для заполнения поля VISTD_Machine_DR в EP_VisitTestSetData в эпизодах, созданных в версии 6.9, из всех имеющихся источников информауии 
	do ##class(TCLEx.Utils.Repair).RepairMachineDR()
	
	//
	do ..RebuildIndices()
]]></Implementation>
</Method>

<Method name="RebuildIndices">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set timeFrom=+$piece($h,",",2)

	// 1 - изменение типа   индекс по $lb("$$ALPHAUP({CTCN_Description})") -> $lb("{CTCN_ALPHAUPDescription}") - надо сначала заполнть поле
	// 2 - появился новый индекс 
 //1: 	User.BBAntibodyRegister.clsnext subscript - LVB80	 	 
 //2:  	User.BBPPackDetails.cls 	 - LVB80	 
 //3:  	User.CTBBBloodGroupNeonatalXM.cls - не будем ничего делать (изменения типа 1)	 	 
 //4:  	User.CTContract.cls - не будем ничего делать (изменения типа 1) 	 	 
 //5:  	User.CTDoctor.cls - не будем ничего делать (изменения типа 1) 	 	 
 //6:  	User.CTPostCode.cls - не будем ничего делать (изменения типа 1) 	 
 //7:  	User.CTPrintDestination.cls   - не будем ничего делать (property CTPD_Device_DR-> CTPD_Device)	 	 
 //8:  	User.CTRefLabTestSets.cls- не будем ничего делать (индекс был и теперь нет) 	 	 
 //9:  	User.CTState.cls - см ниже	 	 
 //10:  	User.CTStorageContainers.cls см ниже	 
 //11:  	User.CTSuperSet.cls - не будем ничего делать (изменения типа 1) 	 	 
 //12:  	User.CTTestCode.cls- не будем ничего делать (изменения типа 1) 	 
 //13:  	User.CTTestCodeRangesAA.cls - само сработает в LVBCOM80133	 
 //14:  	User.CTTestSet.cls- не будем ничего делать (изменения типа 1)  	 	 
 //15:  	User.CTUserLocation.clsnext subscript не будем ничего делать (новые поля и на них индексы)	 	 
 //16:  	User.CTVBProject.cls - не будем ничего делать (изменения типа 1)  	 	 
 //17:  	User.CTVBProjectFields.cls- не будем ничего делать (изменения типа 1)  	 	 
 //18:  	User.EPVisitNumber.cls - LVB80 	 	 
 //19:  	User.EPVisitTestSet.cls - не будем ничего делать (новые поля и на них индексы)		 	 
 //20:  	User.EPVisitTestSetBBRequired.cls- не будем ничего делать 	 ? 	 
 //21:  	User.EPVisitTestSetData.cls- не будем ничего делать 	(почему то в LVBCOM80154 k ^TEPIi("InstrumentDT")) 	 
 //22:  	User.EPVisitTestSetQueue.cls- не будем ничего делать	 	 
 //23:  	User.HIHistDBVABlockOrder.cls - не будем ничего делать (QC) 	 	 
 //24:  	User.HOSHospitalPatients.cls - не будем ничего делать 	 	 
 //25:  	User.MIFMachineQC.cls - само сработает в LVBCOM80151 	 	 
 //26:  	User.OLDResults.cls - не будем ничего делать (у нас нет)	 	 
 //27:  	User.SSLanguage.cls - не будем ничего делать (изменения типа 1)	 	 
 //28:  	User.SSUser.cls - не будем ничего делать (изменения типа 1)	  	 	 
 //29:  	User.SSVBExecutables.cls - не будем ничего делать (изменения типа 1)	  	 
 //30:  	User.SSVBMessageTranslation.cls - не будем ничего делать (изменения типа 1)	 	 	 
 //31:  	User.SSVBMessages.cls - не будем ничего делать (изменения типа 1)	 	 	 
 //32:  	User.STStorageContainerPos.cls- не будем ничего делать	 	 
 //33:  	User.TSNOSNOMED.cls- не будем ничего делать
 	d ##Class(User.BBAntibodyRegister).%BuildIndices()
	
	write !,"User.CTState"
	d ##Class(User.CTState).%BuildIndices()
	
	write !,"User.CTStorageContainers"
	d ##Class(User.CTStorageContainers).%BuildIndices()
    
    /// В LVBCOM80154 k ^TEPIi("InstrumentDT") Поэтому вообще нет индексов на данные EPVisitTestSetData, пришедшие из версии 6.9 =>
    /// пересчет куба по EPVisitTestSetData не учитывает эти записи
    write !,"User.EPVisitTestSetData"
	d ##Class(User.EPVisitTestSetData).%BuildIndices()
	
	set timeTo=+$piece($h,",",2)
	write !,"Длительность ",timeTo-timeFrom," секунд"
]]></Implementation>
</Method>

<Method name="DopVBE">
<Description>
Создание дополнительных элементов в таблице User.SSVBExecutables (по поводу прав на дополнительный функционал в Trak)
делать не на ходу </Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   set ^SS("SSVBE","100001")="TCLEx^Дополнительный функционал в TrakCareLab^TCLEx^N^^"
   
   s ^SS("SSVBE","100001","SSVBO",1)="BI_DeepSee^Отчеты BI DeepSee"
   s ^SS("SSVBE","100001","SSVBO",2)="Tune_BI_DeepSee^Настройка отчетов BI DeepSee"
   s ^SS("SSVBE","100001","SSVBO",3)="Tune_TrakReports^Настройка отчетов Trak"
   s ^SS("SSVBE","100001","SSVBO",4)="Tune_Printers_Client^Настройка принтеров (дополн.)"
   
   set ok=##class(User.SSVBExecutables).%PurgeIndices()
   if 'ok {
	   do $System.OBJ.DisplayError(ok)
   }
   kill ^SS("SSVBE","0","Desc")
   kill ^SS("SSVBE","0","Executable")
   
   set ok=##class(User.SSVBExecutables).%BuildIndices()
   if 'ok {
	   do $System.OBJ.DisplayError(ok)
   }
]]></Implementation>
</Method>

<Method name="FindAmbuscade">
<Description>
Эксперимент показал (и тект программы %RIMF подтвердил), что при восстановлении obj удаляется int, но не удаляется mac.
Функция для поиска программ, где есть mac, но нет Int
Удаление только mac программы w ##class(%Library.Routine).Delete("LVBCOM01.MAC",1)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 kill ^vr("compile")
 set prog="" 
 for {
	 set prog=$order(^rMAC(prog)) if prog="" quit
	 if $data(^ROUTINE(prog)) continue
	 if '$d(^rOBJ(prog)) continue
	 w !,prog
	 kill list set list(prog_".MAC")=""
	 set ok=$system.OBJ.CompileList(.list,"cuk",.error)
	 s ^vr("compile",prog)=""
	 r aaa 
 }
]]></Implementation>
</Method>

<Method name="DoExtraForBion">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ^SS("REPORT-GENERIC","CLNRUS55")="Отчет о ТАТ^^^^Y"
	set ^TTAB("REPORT-GENERIC","CLNRUS55")="PRTCLNRUS55\\\LRUS\N\N\Y\ReportVB.clsStart\Отчет о ТАТ"
	set ^SS("REPORT-GENERIC","RPTSTAT1")="RPTSTAT1^^^^Y"
	set ^TTAB("REPORT-GENERIC","RPTSTAT1")="\\\LRUS\N\N\Y\PRTCLNRUS.clsStart\Кол-во наборов тестов по пользователям"
	; 05
	; CLNRUS05BI - выключен 
	kill ^SS("REPORT-GENERIC","CLNRUS05BI")
	kill ^TTAB("REPORT-GENERIC","CLNRUS05BI")
	; переносим CLNRUS05A->CLNRUS05 (CLNRUS05 был выключен)
	if $data(^TTAB("REPORT-GENERIC","CLNRUS05A")) {
		kill ^SS("REPORT-GENERIC","CLNRUS05")
	    kill ^TTAB("REPORT-GENERIC","CLNRUS05")
	    merge ^SS("REPORT-GENERIC","CLNRUS05")=^SS("REPORT-GENERIC","CLNRUS05A")
	    merge ^TTAB("REPORT-GENERIC","CLNRUS05")=^TTAB("REPORT-GENERIC","CLNRUS05A")
	}
	set ^TTAB("REPORT-GENERIC","CLNRUS05")="PRTCLNRUS05birlab\\\STN\N\N\Y\ReportVB.clsStart\Деятельность лаборатории (по плательщикам)"
	set ^SS("REPORT-GENERIC","CLNRUS05")="Деятельность лаборатории (по п^^^^Y"
	kill ^SS("REPORT-GENERIC","CLNRUS05A")
	kill ^TTAB("REPORT-GENERIC","CLNRUS05A")
	; 13
	; CLNRUS13BI - выключен 
	kill ^SS("REPORT-GENERIC","CLNRUS13BI")
	kill ^TTAB("REPORT-GENERIC","CLNRUS13BI")
	; CLNRUS13A - выключен 
	kill ^SS("REPORT-GENERIC","CLNRUS13A")
	kill ^TTAB("REPORT-GENERIC","CLNRUS13A")
	; переносим CLNRUS13B->CLNRUS13 (обы были выключены, на CLNRUS13 - PRTCLNRUS13 - старая программа)
	if $data(^TTAB("REPORT-GENERIC","CLNRUS13B")) {
		kill ^SS("REPORT-GENERIC","CLNRUS13")
	    kill ^TTAB("REPORT-GENERIC","CLNRUS13")
	    merge ^SS("REPORT-GENERIC","CLNRUS13")=^SS("REPORT-GENERIC","CLNRUS13B")
	    merge ^TTAB("REPORT-GENERIC","CLNRUS13")=^TTAB("REPORT-GENERIC","CLNRUS13B")
	}
	set ^TTAB("REPORT-GENERIC","CLNRUS13")="PRTCLNRUS13birlab\\\STN\N\N\Y\ReportVB.clsStart\Статистика по д/н/м/к/г"
	set ^SS("REPORT-GENERIC","CLNRUS13")="Статистика по д/н/м/к/г^^^^Y"
	kill ^SS("REPORT-GENERIC","CLNRUS13B")
	kill ^TTAB("REPORT-GENERIC","CLNRUS13B")
	
	// ^CF
	//set ^CF("SM",1)="\\lissrv2\LAB\Results^\\lissrv2\LAB\Results\tiff^N^^BION 2012^TrakCare LAB 2012^\\lissrv2\LAB\Errors^N^?^2^\\lissrv2\LAB\Results\template^N^\\lissrv2\LAB\Results^\\lissrv2\LAB\Results^^T^N^^^^^^19^^MAIN^\\lissrv2\LAB\Reports^\\lissrv2\LAB\Results^bion^5^\\lissrv2\Lab\Results^\\lissrv2\Lab\Results^15^Y^\\lissrv2\Lab\Results^^^3^^0,2,5,8,16,17,3,4,6,7,9,10,11,12,13,1,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,37^\\lissrv2\LAB\Results^^^^^^N^^^^N^^"
	set ^CF("SM",1)="\\10.2.1.245\LAB\Results^\\10.2.1.245\LAB\Results\tiff^N^^BION 2012^TrakCare LAB 2012^\\10.2.1.245\LAB\Errors^N^?^2^\\10.2.1.245\LAB\Results\template^N^\\10.2.1.245\LAB\Results^\\10.2.1.245\LAB\Results^^T^N^^^^^^19^^MAIN^\\10.2.1.245\LAB\Reports^\\10.2.1.245\LAB\Results^bion^5^\\10.2.1.245\Lab\Results^\\10.2.1.245\Lab\Results^15^Y^\\10.2.1.245\Lab\Results^^^3^^0,2,5,8,16,17,3,4,6,7,9,10,11,12,13,1,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,37^\\10.2.1.245\LAB\Results^^^^^^N^^^^N^^"
    set ^CF("SM",1,"KEY")="20,15,N,5^1^BION^6C1F3DF8EB6AD3419F41114010B^63551"
	
	// ^Settings
	set ^Settings("DRP","PCLResultClassName")="TCLEx.Report.PCLBion"
    set ^Settings("DRP","ZenResultClassName")="TCLEx.Report.ZenBion"
    set ^Settings("WordToPdf","pathToSumatraPDF")="C:\Program Files\SumatraPDF"
    
    set ^Settings("server","pathFileJasperTemplate")="S:\Bion\Shares\Lab\java"
    set ^Settings("server","pathTempFile")="S:\Bion\Shares\Lab\java\temp"
    set ^Settings("server","pathWorkJasper")="S:\Bion\Shares\Lab\java"
    set ^Settings("server","urlWeb")="http://lissrv2:57772/csp/bion/"
    
    // доступ к отчетам - включить
    s ^Settings("server","SecurityAccessToreport")=1
    
    // DRP
    s ^Settings("DRP","ZenResultClassName")="TCLEx.Report.ZenBion"
    s ^Settings("DRP","PCLResultClassName")="TCLEx.Report.PCLBion"

    do ..setUsersReportGroups()
]]></Implementation>
</Method>

<Method name="getUsersReportGroups">
<Description>
Список пользователей и групп отчетов, к ним привязанных
Список пользователей и групп отчетов, к ним привязанных</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ok=1
	try {
		kill ^||vsp
		set usercode=""
		for {
			set usercode=$order(^SSU("SSUSR",1,usercode)) if usercode="" quit
			set userobj = ##class(User.SSUser).%OpenId(usercode)
            if '$IsObject(userobj) set ok=$system.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось идентифицировать пользователя с кодом "_usercode),ok) quit 
            set userGroupobj=userobj.SSUSRGroup 
            set userGroupId="" if $IsObject(userGroupobj) set userGroupId=userGroupobj.%Id()  
            set grp=""
            for {
	           set userReportGroupobj=userobj.ChildSSUserReportGroup.GetNext(.grp) if grp="" quit 
	           set userReportGroup =  userReportGroupobj.SURPRepGroupDR
	           set userReportGroupCode="" if $IsObject(userReportGroup) set userReportGroupCode=userReportGroup.CTPGCode
	           write !,usercode," ",userReportGroupCode," ",$piece($get(^TTAB("CTPG",userReportGroupCode)),"\",1)
	           if userGroupId'="" {
		           write !,"Группа пользователей"," ",userGroupId," ",$piece($get(^SSU("SSGRP",userGroupId)),"^",1)
		           set ^||vsp(userGroupId,usercode)=$get(^||vsp(userGroupId,usercode))_","_userReportGroupCode
		           if $get(^||vsp(userGroupId))="" set ^||vsp(userGroupId)=$piece($get(^SSU("SSGRP",userGroupId)),"^",1)
	           }
            }
		}
		set usercode=""
		for {
			set usercode=$order(^SSU("SSUSR",1,usercode)) if usercode="" quit
			set userobj = ##class(User.SSUser).%OpenId(usercode)
            if '$IsObject(userobj) set ok=$system.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось идентифицировать пользователя с кодом "_usercode),ok) quit 
            set userGroupobj=userobj.SSUSRGroup 
            set userGroupId="" if $IsObject(userGroupobj) set userGroupId=userGroupobj.%Id()  
            
            if (userGroupId'="")&&($data(^||vsp(userGroupId)))&&('$data(^||vsp(userGroupId,usercode))) {
	            set ^||vsp(userGroupId,usercode)=""
	            if $get(^||vsp(userGroupId))="" set ^||vsp(userGroupId)=$piece($get(^SSU("SSGRP",userGroupId)),"^",1)
            }
        }
	} catch(e) { set ok=e.AsStatus() }
	if 'ok write !!,$system.Status.GetErrorText(ok)
	w !!!
	zw ^||vsp
]]></Implementation>
</Method>

<Method name="setUsersReportGroups">
<Description>
Назначение прав доступа всем группам пользователей для всех отчетов, кроме некоторых (бион)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ok=1
	try {
		kill ^TTABex("BindUserGroupReport")
		kill ^||vsp
		set strExclude=",CLNRUS05,CLNRUS13,CLNRUS13c,CLNRUS09,CLNRUS38,CLNRUS13C,"
		set usercode=""
		for {
			set usercode=$order(^SSU("SSUSR",1,usercode)) if usercode="" quit
			set userobj = ##class(User.SSUser).%OpenId(usercode)
            if '$IsObject(userobj) set ok=$system.Status.AppendStatus($$$ERROR($$$GeneralError,"Не удалось идентифицировать пользователя с кодом "_usercode),ok) quit 
            set userGroupobj=userobj.SSUSRGroup 
            set userGroupId="" if $IsObject(userGroupobj) set userGroupId=userGroupobj.%Id() 
            if (userGroupId'="")&&('$data(^||vsp("usergroup",userGroupId))) set ^||vsp("usergroup",userGroupId)=""
		}
        set report=""
        for {
	            set report=$order(^TTAB("REPORT-GENERIC",report)) if report="" quit
	            if ($extract(report,1,6)'="CLNRUS")&&(report'="RPTSTAT1") continue
	            set ^||vsp("report",report)=""
        }
        set usergroup=""
        for {
	            set usergroup=$order(^||vsp("usergroup",usergroup)) if usergroup="" quit
	            set report=""
	            for {
		            set report=$order(^||vsp("report",report)) if report="" quit
		            if (strExclude[(","_report_","))&&(usergroup'=1) continue
		            set ^TTABex("BindUserGroupReport",usergroup,report)=1
	            }
		}
	} catch(e) { set ok=e.AsStatus() }
	if 'ok write !!,$system.Status.GetErrorText(ok)
]]></Implementation>
</Method>
</Class>
</Export>
