<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.InstallTrak">
<Super>%RegisteredObject</Super>
<TimeCreated>63049,65055.220197</TimeCreated>

<Method name="IstallTrak">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String,pCacheDir:%String</FormalSpec>
<Implementation><![CDATA[
	if ($get(pWorkFolder)="")||($get(pNamespace)="")||($get(pCacheDir)="") {
		set ok=..GetPaths(.pWorkFolder,.pNamespace,.pCacheDir)
	}
	
	if $get(pWorkFolder)="" {
		set stringError="Не указана рабочая папка для установки Trak. Установка прервана."
		set pWorkFolder="c:\"
		do ..LogEvents(pWorkFolder,"",$$$ERROR($$$GeneralError,stringError))
	}
	if $get(pNamespace)="" {
		set stringError="Не указана область для установки Trak. Установка прервана."
		do ..LogEvents(pWorkFolder,"",$$$ERROR($$$GeneralError,stringError))
	}
	
	if $get(pCacheDir)="" {
		set stringError="Не указан путь к Cache. Установка прервана."
		do ..LogEvents(pWorkFolder,"",$$$ERROR($$$GeneralError,stringError))
	}
	
	set pWorkFolder=$tr(pWorkFolder,"/","\")
	if $e(pWorkFolder,$length(pWorkFolder))'="\" set pWorkFolder=pWorkFolder_"\"
	
	set pCacheDir=$tr(pCacheDir,"/","\")
	if $e(pCacheDir,$length(pCacheDir))'="\" set pCacheDir=pCacheDir_"\"
	
	set serverName=$piece(##class(%Library.Function).IPAddresses(),",",1)
	if serverName="" {
		set serverName="localhost"
	}
	
	// для тестирования : если уже существует файл с логом установки, то удалить его
	Set file=pWorkFolder_"intalltrak.log"
	if ##class(%File).Exists(file) {
		set ok=##class(%File).Delete(file)
	}
	
	// Создание баз данных, области и маппингов 
    do ..LogEvents(pWorkFolder,"-----------------Создание баз данных, области и маппингов------------------------------")
    do ..CreateDatabases(pWorkFolder,pNamespace) 
    
    // Установка некоторых параметров Cache (например, выключение использования длинных строк)
    do ..LogEvents(pWorkFolder,"-----------------Установка некоторых параметров Cache (например, выключение использования длинных строк)---------------")
    do ..SetCacheSettings(pWorkFolder,pNamespace)
    
    // Изменение параметров безопасности Cache
    do ..LogEvents(pWorkFolder,"-----------------Изменение параметров безопасности Cache---------------")
    do ..SetSecuritySettings(pWorkFolder,pNamespace,pCacheDir)
    
    zn pNamespace  
    
    // Загрузка апдейтов в системную область (focall)
    do ..LogEvents(pWorkFolder,"-----------------Загрузка апдейтов в системную область (focall)------------------------------")
    do ..LoadSystemUpdate(pWorkFolder,pNamespace,pCacheDir)
    
    // Загрузка апдейтов в рабочую область pNamespace (Backup.*)
    do ..LogEvents(pWorkFolder,"-----------------Загрузка апдейтов в рабочую область pNamespace (Backup.*)----------------------------")
    do ..LoadUpdate(pWorkFolder,pNamespace)
        
    // Создание пользователя report (for call from jasper)
    do ..LogEvents(pWorkFolder,"-----------------Создание пользователя report (for call from jasper)--------------------------")
	do ..CreateUser(pWorkFolder)   
		   
	//Create and tune java gateway, create proxy java calasses
	do ..LogEvents(pWorkFolder,"-----------------Создание java gateway и создание прокси-классов----------------")
	do ..InstallJavaGateway(pWorkFolder,pNamespace)
	
	// Установка всех Settings for TCLEx и пр.
	do ..LogEvents(pWorkFolder,"-----------------Установка всех Settings for TCLEx и пр.-----------------------")
	do ..Settings(pWorkFolder,pNamespace,serverName)
		
	// Пути TrakCareLab
	do ..LogEvents(pWorkFolder,"-----------------Установка настроек Trak------------------------------")
	set ok=..TrakSettings(pWorkFolder,pNamespace,serverName)
	do ..LogEvents(pWorkFolder,"Установка настроек Trak",ok)

    // Для работы клиента на сервере
    
	// Изменения в labtrak.ini
	do ..LogEvents(pWorkFolder,"-----------------Изменения в labtrak.ini------------------------------")
	do ..ChangeLabTrakIniFile(pWorkFolder,pNamespace,serverName)

    // Установки минимального ключа Trak ("L2012",1,0,0,"31/12/2015","TEST","N")
    do ..LogEvents(pWorkFolder,"-----------------Установки минимального ключа Trak---------------------")
    set ^CF("SM",1,"KEY")="1,0,N,0^6^TEST^88553DF8D7A563616333627E3^63917" 		   
    
    // Настройка задачи backup
    do ..LogEvents(pWorkFolder,"-----------------Настройка задачи backup-----------------------------")
    set ok=..BackUpSettings(pWorkFolder,pNamespace)
    do ..LogEvents(pWorkFolder,"Настройка задачи backup",ok)
    
    // Надо сделать настройку RenderServer !!!
    
    
    quit
]]></Implementation>
</Method>

<Method name="CreateDatabases">
<Description>
Создание баз данных, области и маппингов </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set nameDBapp=pNamespace_"app"
	set nameDBdata=pNamespace_"data"
	set nameDBnojrnl=pNamespace_"nojrnl"
	
	zn "%SYS"
	
	// app
	set nameDB=nameDBapp
	set dirDB=pWorkFolder_"db\"_pNamespace_"app"
	set ok=..CreateDB(pWorkFolder,nameDB,dirDB,0)
	do ..LogEvents(pWorkFolder,"Создание база данных для программ "_nameDB_" в "_dirDB,ok)
    
    // data
	set nameDB=nameDBdata
	set dirDB=pWorkFolder_"db\"_pNamespace_"data"
	set ok=..CreateDB(pWorkFolder,nameDB,dirDB,0)
	do ..LogEvents(pWorkFolder,"Создание база данных для данных "_nameDB_" в "_dirDB,ok)
	
    // data no journal
	set nameDB=nameDBnojrnl
	set dirDB=pWorkFolder_"db\"_pNamespace_"nojrnl"
	set ok=..CreateDB(pWorkFolder,nameDB,dirDB,1)
	do ..LogEvents(pWorkFolder,"Создание база данных для нежурналируемых данных "_nameDB_" в "_dirDB,ok)
	
	     
    // namespace
    
    // Проверка, не существует ли уже такой namespace
    //set objns=##Class(Config.Namespaces).Open(pNamespace)
    if ##Class(Config.Namespaces).Exists(pNamespace) {
	    set stringError="Namespace "_pNamespace_" уже существует. Проверьте его настройки!"
	    do ..LogEvents(pWorkFolder,stringError) //,$$$ERROR($$$GeneralError,stringError))
	    quit
    }
    
    // create namespase
    kill Properties
    set Properties("Globals")=nameDBdata
    set Properties("Routines")=nameDBapp
    set ok=##Class(Config.Namespaces).Create(pNamespace,.Properties)
    do ..LogEvents(pWorkFolder,"Создание области "_pNamespace,ok)
    
    // map for ensemble
    //do ##class(%CSP.UI.System.ExpResultPage).EnableEnsNamespace(pNamespace,"")
    Set ok = ##class(%Library.EnsembleMgr).EnableNamespace(pNamespace,1)
    do ..LogEvents(pWorkFolder,"Создание mappings for Ensemble",ok)
    
    // map ^SS
    kill Properties
	set Properties("Database")=nameDBapp
	set ok=##Class(Config.MapGlobals).Create(pNamespace,"SS",.Properties,,1)
	do ..LogEvents(pWorkFolder,"Создание map ^SS --> "_nameDBapp,ok)

    // map ^TMP*
    kill Properties
	set Properties("Database")=nameDBnojrnl
	set ok=##Class(Config.MapGlobals).Create(pNamespace,"TMP*",.Properties,,1)
	do ..LogEvents(pWorkFolder,"Создание map ^TMP* --> "_nameDBnojrnl,ok)

    // map ^PR*
    kill Properties
	set Properties("Database")=nameDBnojrnl
	set ok=##Class(Config.MapGlobals).Create(pNamespace,"PR*",.Properties,,1)
	do ..LogEvents(pWorkFolder,"Создание map ^PR* --> "_nameDBnojrnl,ok)
	
	quit
]]></Implementation>
</Method>

<Method name="CreateDB">
<Description>
Создание базы данных на основе уже существующего файла cache.dat</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNameDB:%String,pDirDB:%String,pFlagNoJournal:%Boolean</FormalSpec>
<Implementation><![CDATA[
	if $get(pFlagNoJournal)="" set pFlagNoJournal=0
	set ok=$$$OK
	set namespaceold=$zu(5)
	zn "%SYS"
	try {
		
		if ##Class(Config.Databases).Get(pNameDB) {
		    do ..LogEvents(pWorkFolder,"База данных "_pNameDB_" уже существует")
		    set ok=1
		    quit
		}
	    if $extract($tr(pDirDB,"/","\"),$length(pDirDB))'="\" set pDirDB=pDirDB_"\"
	    
	    if '##class(%File).Exists(pDirDB_"cache.dat") {
		    set stringError="Файла cache.dat в "_pDirDB_" не существует"
		    set ok=$$$ERROR($$$GeneralError,stringError)
		    do ..LogEvents(pWorkFolder,"",ok)
		    quit
	    }
	    
	    //set ok=##class(Config.Configuration).AddDatabase(pNameDB,pDirDB) //deprecated
	    kill Properties
	    Set Properties("Directory")=pDirDB
	    Set ok = ##Class(Config.Databases).Create(pNameDB,.Properties)
		do ..LogEvents(pWorkFolder,"Создание база данных "_pNameDB_" в "_pDirDB_" (##class(Config.Configuration).AddDatabase)",ok)
		
		if (ok=1)&&(pFlagNoJournal=1) {
		    Set db=##Class(SYS.Database).%OpenId(pDirDB)	
		    if '$IsObject(db) {
		        set stringError="Error d ##Class(SYS.Database).%OpenId(pDirDB)"
		        set ok=$$$ERROR($$$GeneralError,stringError)
		        do ..LogEvents(pWorkFolder,"",ok)
		        quit
		    } else {
			    set ok=db.DisableJournaling()
			    do ..LogEvents(pWorkFolder,"Выключение журналирования для базы данных "_pNameDB_": "_pDirDB,ok)
		    }
		}
		/* см. %CSP.UI.Portal.Dialog.DatabaseWizard
		} Else {
			Set JournalState = ##class(%Library.JournalState).MenuToLogical(pProxy.GlobalJournalState)
			Set tSC = ##class(SYS.Database).CreateDatabase(Directory,Size,BlockSize,pProxy.Encrypted,pProxy.Resource,JournalState,pProxy.MirrorDBName,pProxy.MirrorSetName)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 			Set Properties("Directory") = Directory
			#; Handle if we have dismounted then deleted the database at the O/S level,
			#; but the CPF entry still exists with the same directory, then recreate the DB only
			If ##Class(Config.Databases).Exists(DBName,.Obj) {
				If Obj.Directory '= ##class(%File).ComputeFullDBDir(Directory) {
					Set tSC = ##Class(Config.Databases).Create(DBName,.Properties)
					If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
				}
			} Else {
				Set tSC = ##Class(Config.Databases).Create(DBName,.Properties)
				If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
			}
		} */
	
	    /*
	
	    Set db=##Class(SYS.Database).%OpenId(pDirDB)
	    if '$IsObject(db) {
		    set stringError="Файла cache.dat в "_pDirDB_" не существует"
		    set ok=$$$ERROR($$$GeneralError,stringError)
		    do ..LogEvents(pWorkFolder,"",ok)
		    quit
	    } else {	
	        set ok=db.%Save()
	        do ..LogEvents(pWorkFolder,"Создание база данных в "_pDirDB_" (##Class(SYS.Database).%Save())",ok)
	        if 'ok quit
		    kill Properties
		    set Properties("Directory")=pDirDB
		    set ok=##Class(Config.Databases).Create(pNameDB,.Properties)
		    do ..LogEvents(pWorkFolder,"Создание база данных "_pNameDB_": "_pDirDB_" (##Class(Config.Databases).Create)",ok)
		    if 'ok quit
	        if (pFlagNoJournal=1) {
			    set ok=db.DisableJournaling()
			    do ..LogEvents(pWorkFolder,"Выключение журналирования для базы данных "_pNameDB_": "_pDirDB,ok)
		    }
	    } */
    } catch exception { 
        set ok=exception.AsStatus()
        do ..LogEvents(pWorkFolder,"Создание база данных "_$get(pNameDB)_": "_$get(pDirDB),ok)
    }
    if $get(namespaceold)'="" {
	     zn namespaceold 	
    } 	
    quit ok
]]></Implementation>
</Method>

<Method name="CreateUser">
<Description>
 Создание пользователя report (for call from jasper)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String</FormalSpec>
<PublicList>stringTables,userName</PublicList>
<Implementation><![CDATA[
	
	kill errors
	set status=$$$OK
    try {
	    set namespace=$zu(5)
        zn "%SYS"
	    set userName="report"
	    if ##class(Security.Users).Exists(userName) $$$ThrowOnError(##class(Security.Users).Delete(userName))
	    set ok=##class(Security.Users).Create(userName,,userName)
	    do ..LogEvents(pWorkFolder,"Создание пользователя "_userName,ok)
	    zn namespace 
	    // for all tables from schema User grant SELECT
	    /*
	    kill errors,add
	    set schema=""
	    For  {
	        set schema=$order(^oddSQL(schema)) q:schema=""
	        continue:$E(schema,1,7)'="SQLUser"
	        set table=""
	        For  {
	            set table=$o(^oddSQL(schema,table)) q:table=""
	            set data = $G(^oddSQL(schema,table))
	            continue:data=""
	            set tab = $P($li(data,6),",",2)
	            set add(tab)=""
	        }
	    }

        set stringTables=""
        set table = ""
	    for {
		    set table = $Order(add(table))
		    quit:table=""
		    set stringTables=stringTables_$select(stringTables'="":",",1:"")_table
	    }
	    */
	    
	    DO $SYSTEM.Security.Login("_SYSTEM","SYS")
	    
	    //&sql(GRANT SELECT,EXECUTE ON :stringTables TO :userName)
	    &sql(GRANT SELECT ON * TO report)
        if $get(SQLCODE) {
	        set stringError="Не удалось дать доступ SELECT ко всем таблицам пользователю "_userName_":"_SQLCODE
	        do ..LogEvents(pWorkFolder,"Доступ SELECT ко всем таблицам",$$$ERROR($$$GeneralError,stringError))
        }  
	    else {
		    do ..LogEvents(pWorkFolder,"Доступ SELECT ко всем таблицам для пользователя "_userName,1)
	    }
	    &sql(GRANT EXECUTE ON * TO report)
        if $get(SQLCODE) {
	        set stringError="Не удалось дать доступ EXECUTE ко всем таблицам пользователю "_userName_":"_SQLCODE
	         do ..LogEvents(pWorkFolder,"Доступ EXECUTE ко всем таблицам",$$$ERROR($$$GeneralError,stringError))
        }
        else {
		    do ..LogEvents(pWorkFolder,"Доступ EXECUTE ко всем таблицам для пользователя "_userName,1)
	    }
         
	} catch exception { 
        do ..LogEvents(pWorkFolder,"Создание пользователя report.",exception.AsStatus())
    }

  quit
]]></Implementation>
</Method>

<Method name="Settings">
<Description>
Настройки Settings for TCLEx</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String,pServerName:%String</FormalSpec>
<Implementation><![CDATA[
   
      //рабочая папка для jasper
       set path=pWorkFolder_"Lab\java"
	   set ^Settings("server","pathWorkJasper")=path 
	   do ..LogEvents(pWorkFolder,"Определена рабочая папка для JasperReports")
	   do ..LogEvents(pWorkFolder,"set ^Settings(""server"",""pathWorkJasper"")="_path)
	   
	   // путь , где лежат шаблоны jasper-отчетов
	   set path=pWorkFolder_"Lab\java"
	   set ^Settings("server","pathFileJasperTemplate")=path
	   do ..LogEvents(pWorkFolder,"Определена рабочая папка для шаблонов")
	   do ..LogEvents(pWorkFolder,"^Settings(""server"",""pathFileJasperTemplate"")="_path)
	   
	   // путь к временным файлам отчетов
	   set tempdir=pWorkFolder_"Lab\java\temp"
	   if '##class(%File).Exists(tempdir) {
		   set ok=##class(%File).CreateDirectory(tempdir)
		   do ..LogEvents(pWorkFolder,"Создание папки "_tempdir,ok)
	   }
	   set ^Settings("server","pathTempFile")=tempdir
	   do ..LogEvents(pWorkFolder,"Определена папка для временных файлов "_tempdir)
	   do ..LogEvents(pWorkFolder,"set ^Settings(""server"",""pathTempFile"")="_tempdir)
	   
	   // web url
	   set url="http://"_pServerName_":"_..GetWebServerPort()_"/csp/"_pNamespace_"/" 
	   set ^Settings("server","urlWeb")=url
	   do ..LogEvents(pWorkFolder,"Определен URL для web "_url)
	   do ..LogEvents(pWorkFolder,"^Settings(""server"",""urlWeb"")="_url)

	   // security access to reports and group of records - on/off
	   set ^Settings("server","SecurityAccessToreport")=0
	   do ..LogEvents(pWorkFolder,"Проверка прав пользователя на доступ к отчетам выключен")
	   do ..LogEvents(pWorkFolder,"^Settings(""server"",""SecurityAccessToreport"")=0")
	   
	   // формат файла отчетов - для финансовых отчетов
	   // список возможных форматов отчетов для JasperWrap.settings
	   do ##class(JasperWrap.JasperReportTune).fillFormats()
	   do ..LogEvents(pWorkFolder,"Определены возможные форматы для Jasper отчетов")
	   
	   // текущий формат
	   set ^Settings("server","formatJasperReport")="pdf"
	   do ..LogEvents(pWorkFolder,"Установлен формат для jasper отчетов по умолчанию - pdf")
	   
	   //установки для fop (для zen reports)
	   set value="C:\fop-1.0\fop.xconf"
	   //set value=pWorkFolder_"fop-1.0\fop.xconf"
	   Set ^%SYS("zenreport","transformerconfig")=value
	   do ..LogEvents(pWorkFolder,"Сделана установка для работы fop: ")
	   do ..LogEvents(pWorkFolder,"Set ^%SYS(""zenreport"",""transformerconfig"")="""_value_"""")
	   set value="C:\fop-1.0\fop.bat"
	   //set value=pWorkFolder_"fop-1.0\fop.bat"
	   Set ^%SYS("zenreport","transformerpath")=value
	   do ..LogEvents(pWorkFolder,"Сделана установка для работы fop: ")
	   do ..LogEvents(pWorkFolder,"^%SYS(""zenreport"",""transformerpath"")="""_value_"""")
	   
	   quit
]]></Implementation>
</Method>

<Method name="GetWebServerPort">
<Description>
WebServerPort</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set webServerPort=""
	try {
       set ns=$zu(5)
       zn "%SYS"
       set confobj=##class(Config.Startup).Open()
       if $IsObject(confobj) set webServerPort=confobj.WebServerPort
       zn ns
	} catch (exception) {
		set webServerPort=57772
	}
 quit webServerPort
]]></Implementation>
</Method>

<Method name="InstallJavaGateway">
<Description>
Создание и запуск java gateway, create proxy java calasses</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String</FormalSpec>
<Implementation><![CDATA[
	
    do ..LogEvents(pWorkFolder,"Настройка java gateway.")
	set ok=..CreateGateway(pWorkFolder,.gateway,.port)
	do ..LogEvents(pWorkFolder,"Создание java gateway "_$get(gateway)_" port="_$get(port),ok)   
	if 'ok quit
	
	set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
    if '$IsObject(jvm) {
	    do ..LogEvents(pWorkFolder,"Incorrect Java GateWay configuration !")
	    quit
    }
  	// запуск шлюза, если он не запущен
	If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
		set ok=##class(%Net.Remote.Service).StartGateway(gateway)
		do ..LogEvents(pWorkFolder,"Старт java gateway "_$get(gateway)_" port="_$get(port),ok)
	}
	
	// create proxy java calasses
	set ok=..CreateProxyJavaClasses(pWorkFolder,gateway)
	do ..LogEvents(pWorkFolder,"Создание proxy java calasses для вспомогательных функций из java",ok)
]]></Implementation>
</Method>

<Method name="CreateGateway">
<Description>
Создать JDBC gateway</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWorkFolder:%String,&pGateway:%String,&port:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  	   
  try {
	  do ..LogEvents(pWorkFolder,"Настройка java gateway.")
	  
	  set pGateway=""
	  if ##class(%Dictionary.CompiledMethod).%ExistsId("JasperWrap.JasperReportTune||getNameGateway") {
		  set pGateway=##class(JasperWrap.JasperReportTune).getNameGateway() ;set gateway="test"
	  } else {
		  set pGateway="JasperGate"
	  }
	  set port=""
	  if ##class(%Dictionary.CompiledMethod).%ExistsId("JasperWrap.JasperReportTune||getPortJasperGateway") {
	     set port=##class(JasperWrap.JasperReportTune).getPortJasperGateway() 
	  } else {
		  set port=7777
	  }
	  
	set objgateway=##class(%Net.Remote.ObjectGateway).%OpenId(pGateway)
	// Если такой gateway существует, то останавливаем его и удаляем
	if $IsObject(objgateway) {
		if objgateway.GatewayState(port)=1 {
			set ok=##class(%Net.Remote.Service).StopGateway(pGateway)
			do ..LogEvents(pWorkFolder,"Остановка gateway "_pGateway,ok)
		}
		set ok=##class(%Net.Remote.ObjectGateway).%DeleteId(pGateway)
		do ..LogEvents(pWorkFolder,"Удаление gateway "_pGateway,ok)
	}
	//проверка, нет ли еще gateway с портом 7777
	s rs=##class(%ResultSet).%New("%Net.Remote.ObjectGateway:ByGateway")
	set ok=rs.Execute() 
	do ..LogEvents(pWorkFolder,"Проверка, нет ли уже gateway с портом "_port,ok)
	set existPort=0,name="" 
	for { 
	   if 'rs.Next() quit
	   if rs.Get("Port")=port set existPort=1 set name=rs.Get("Name") quit
	}
	if existPort=1 {
		do ..LogEvents(pWorkFolder,"Уже существует gateway, который слушает порт "_port_". Настройка gateway не закончена!!!")
		quit
	}
	// create gateway
	set objgate = ##class(%Net.Remote.ObjectGateway).%New()
	set objgate.Name=pGateway
	set objgate.Type=1  ;Java
	set objgate.Port=port
	set objgate.Server="127.0.0.1"
	set objgate.JavaHome=..JavaHome()
	set objgate.HeartbeatInterval=0 //Number of seconds between each communication with the Java Gateway to check whether it is active. When enabled, the minimum value is 5 seconds and the maximum value is 3600 seconds (1 hour). The default is 10 seconds. A value of 0 disables this feature.
	set objgate.HeartbeatFailureAction="" //Action to take if the Java Gateway goes into a failure state. Setting it to Restart (default) causes the Java Gateway to restart. Setting it to Alert generates an alert entry in the Event Log. This is independent of the Alert on Error setting. 
	set ok=..GetClassPath(pWorkFolder,.classpath)
	do ..LogEvents(pWorkFolder,"Создание Classpath ",ok)
	if classpath'="" { 
	    set objgate.ClassPath=classpath
	    do ..LogEvents(pWorkFolder,"Classpath ="""_classpath_"""")
	    set ok=objgate.%ValidateObject()
	    do ..LogEvents(pWorkFolder,"Validate object gateway",ok)
	    set ok=objgate.%Save()
	    do ..LogEvents(pWorkFolder,"Save object gateway",ok)
    }
	   
    // запуск шлюза, если он не запущен
    /*
	set ok=##class(%Net.Remote.Service).StartGateway(objgate)
	do ..LogEvents(pWorkFolder,"Start object gateway",ok)
	*/
		
   } catch exception { 
      Set ok=exception.AsStatus()
      do ..LogEvents(pWorkFolder,"Install gateway. Error: ",ok)
  }
    
  quit ok
]]></Implementation>
</Method>

<Method name="GetClassPath">
<Description>
Сохдать строку classpath по всем файлам jar в указанной директории</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWorkFolder:%String,&pClasspath:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK set pClasspath=""
	try {
		set pPathJar=pWorkFolder_"\Lab\java\jar"
 	    //if $get(pPathJar)="" $$$ThrowOnError($$$ERROR($$$GeneralError,"Не указан путь к jar библиотекам"))
 	    if '##class(%File).Exists(pPathJar) $$$ThrowOnError($$$ERROR($$$GeneralError,"Путь "_pPathJar_" не существует"))
	    set pathWorkJasper=pWorkFolder_"\Lab\java"
	    if pathWorkJasper="" $$$ThrowOnError($$$ERROR($$$GeneralError,"Не определен pClasspath для JasperGateway"))
	    if '##class(%File).Exists(pathWorkJasper) $$$ThrowOnError($$$ERROR($$$GeneralError,"Путь "_pathWorkJasper_" не существует"))
        set pClasspath=pathWorkJasper
	    SET file=$ZSEARCH(pPathJar_"\*.jar")
        WHILE file'="" {
	       set pClasspath=pClasspath_";"_file   
           SET file=$ZSEARCH("")
        }
	}
    Catch exception
	{
	    Set ok=exception.AsStatus()
	    set pClasspath=""
	}
	quit ok
]]></Implementation>
</Method>

<Method name="CreateProxyJavaClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pGateway:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  // открываем gateway	
  set ok=$$$OK
  try {
	 kill import
	 
	 for dir="jasper","jodconverter","pdfbox","utils" {
		 SET file=$ZSEARCH(pWorkFolder_"Lab\java\isc\"_dir_"\*.class")
         WHILE file'="" {
           set import($increment(import))="isc."_dir_"."_$piece($piece(file,"\",$l(file,"\")),".",1,$l(file,".")-1)
           SET file=$ZSEARCH("")   
         }
	 } 
	
	 set import($increment(import))="java.util.HashMap"
	 set import($increment(import))="java.util.Date"
	 set import($increment(import))="java.lang.Long"
	 set import($increment(import))="java.lang.Float"
	 set import($increment(import))="java.lang.Integer"
	 set import($increment(import))="java.lang.String"
	 set import($increment(import))="java.util.ArrayList"
	 
	  
	set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(pGateway)
	set port=jvm.Port
	;set i=0
	;set import($increment(i))="java.util.HashMap"
	;set import($increment(i))="java.util.Date"
	;set import($increment(i))="java.lang.Long"
	;set import($increment(i))="java.lang.Float"
	;set import($increment(i))="java.lang.Integer"
	;set import($increment(i))="java.lang.String"
	//set import($increment(i))="isc.jasper.JasperFacade"
	//set import($increment(i))="isc.jasper.JasperFacadeDop"
	//set import($increment(i))="isc.jasper.Func"
	;set import($increment(i))="isc.jodconverter.jodconverterFacade"
	;set import($increment(i))="isc.pdfbox.PdfboxFacade"
	;set import($increment(i))="isc.utils.processUtils"
	;set import($increment(i))="isc.utils.MergePDF"
		
	set i="" for {
		set i=$o(import(i)) if i="" quit  
	    set ok=##class(%Net.Remote.Java.JavaGateway).%ExpressImport(import(i), port) 
	    do ..LogEvents(pWorkFolder,"Create proxy class for "_import(i),ok)
	}
  } catch(exception) {
	    If $ZERROR["<ZJGTW>" {
            Set stringError=$get(%objlasterror)
            set ok=$$$ERROR($$$GeneralError,stringError)
            do ..LogEvents(pWorkFolder,"Create proxy classes",ok)
            } 
		else {
		    Set ok=exception.AsStatus()
		    do ..LogEvents(pWorkFolder,"Create proxy classes",ok)
		}
	}
    
  quit ok
]]></Implementation>
</Method>

<Method name="JavaHome">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set javahome=""
	try {
	   set cmd="cmd.exe /k echo %JAVA_HOME%"	
	   open cmd:("QR")
	   use cmd read javahome
	   use 0
	   close cmd
	} catch {
		use 0
		close cmd
	}
	if javahome="%JAVA_HOME%" s javahome=""
	quit javahome
]]></Implementation>
</Method>

<Method name="LoadUpdate">
<Description>
Загрузить все файлы *.xml from pWorkFolder\install\download</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pGateway:%String</FormalSpec>
<Implementation><![CDATA[
 try {
	 set file=$ZSEARCH(pWorkFolder_"install\download\*.xml")
	  while file'="" {
		  set filename=##class(%File).GetFilename(file)
		  if $extract(filename,1)'="%" {
			  set ok=$system.OBJ.Load(file,"c")
              do ..LogEvents(pWorkFolder,"Загрузка файла "_file_" в область "_$zu(5),ok)
		  }
          set file=$ZSEARCH("")
     }
 } catch(exception) {
	    Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,$select($get(file)'="":"Загрузка файла "_file_" в область "_$zu(5),1:"Загрузка апдейтов"),ok)
 }
 quit
]]></Implementation>
</Method>

<Method name="LoadSystemUpdate">
<Description>
Загрузить все файлы %*.xml from pWorkFolder\install\download в системную область
Перед загрузкой сделать базу данных cachelib read/write, потом сделать ее readonly</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String,pCacheDir:%String</FormalSpec>
<Implementation><![CDATA[
 try {
	 set namespace=$zu(5)
	 zn "%SYS"
	 set first=1
	 set file=$ZSEARCH(pWorkFolder_"install\download\%*.xml")
     while file'="" {
	     // Если есть апдейты в системную область, то делаем cachelib read/write
	     if first=1 {
		     set first=0
		     set pathCachelib=pCacheDir_"mgr\cachelib\"
		     Set db=##Class(SYS.Database).%OpenId(pathCachelib)
		     if $IsObject(db) {
			    if db.ReadOnly=1 {
				    set db.ReadOnly=0
				    set ok=db.%Save()
				    do ..LogEvents(pWorkFolder,"База данных cachelib ("_pathCachelib_"). Снятие флага ReadOnly ",ok) 
			    }
		     }
		     else {
			    do ..LogEvents(pWorkFolder,"Не удалось получить объект База данных cachelib ("_pathCachelib_").",ok)  
		     }
		     
	     }
         set ok=$system.OBJ.Load(file,"c")
         do ..LogEvents(pWorkFolder,"Загрузка файла "_file_" в область "_$zu(5),ok)
         set file=$ZSEARCH("")
     }
     if first=0 {
	         set pathCachelib=pCacheDir_"mgr\cachelib\"
		     Set db=##Class(SYS.Database).%OpenId(pathCachelib)
		     if $IsObject(db) {
			    if db.ReadOnly=0 {
				    set db.ReadOnly=1
				    set ok=db.%Save()
				    do ..LogEvents(pWorkFolder,"База данных cachelib ("_pathCachelib_"). Установка флага ReadOnly ",ok) 
			    }
		     }
		     else {
			    do ..LogEvents(pWorkFolder,"Не удалось получить объект База данных cachelib ("_pathCachelib_").",ok)  
		     }
     }
     zn namespace
     
 } catch(exception) {
	    Set ok=exception.AsStatus()
	    if $get(namespace) zn namespace
		do ..LogEvents(pWorkFolder,$select($get(file)'="":"Загрузка файла "_file,1:"Загрузка апдейтов"),ok)
 }
 
 quit
]]></Implementation>
</Method>

<Method name="TrakSettings">
<Description>
Настройки по умолчанию для Trak</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pGateway:%String,pServerName:%String</FormalSpec>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	set mainpath=""
	if $get(pServerName)'="" set mainpath="\\"_pServerName_"\Lab\"
	else   if $get(pWorkFolder)'=""  set mainpath=pWorkFolder_"Lab\"
	if mainpath="" {
		set ok=$$$ERROR($$$GeneralError,"Не указан ни ip сервера, ни рабочая папка")
		quit
	}
	set $piece(^CF("SM",1),"^",1)=mainpath_"Results"               //CFSM_PathtoDocumentServer
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathtoDocumentServer="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",2)=mainpath_"Results\tiff"          //CFSM_PathToImagesServer
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToImagesServer="_mainpath_"Results\tiff",ok)
	set $piece(^CF("SM",1),"^",7)=mainpath_"\Errors"               //CFSM_PathToErrorFileServer 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToErrorFileServer="_mainpath_"Errors",ok)
	set $piece(^CF("SM",1),"^",11)=mainpath_"Results\template"     //CFSM_PathToTemplateServer
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToTemplateServer="_mainpath_"Results\template",ok)
	set $piece(^CF("SM",1),"^",13)=mainpath_"Results"              //CFSM_PathToImportEpisodes 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToImportEpisodes="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",14)=mainpath_"Results"              //CFSM_PathToVoiceFileServer 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToVoiceFileServer="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",26)=mainpath_"Reports"              //CFSM_PathToReportsLocal
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToReportsLocal="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",27)=mainpath_"Results"              //CFSM_PathToReportsFax 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToReportsFax="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",30)=mainpath_"Results"              //CFSM_PathToEDIFilesIn 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToEDIFilesIn="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",31)=mainpath_"Results"              //CFSM_PathToEDIFilesOut 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToEDIFilesOut="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",34)=mainpath_"Results"              //CFSM_PathToReportsFaxCache 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToReportsFaxCache="_mainpath_"Results",ok)
	set $piece(^CF("SM",1),"^",40)=mainpath_"Results"              //CFSM_PathToQCReport 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFSM_PathToQCReport="_mainpath_"Results",ok)
	//выключить клиентские программы $Piece($Get(^CF("SM",1)),"^",28)
	set $piece(^CF("SM",1),"^",28)=""                      //CFLAB_TestEntryType 
	do ..LogEvents(pWorkFolder,"Установка параметра по умолчанию CFLabTrak.CFLAB_TestEntryType=""""",ok)
	} catch exception { 
      Set ok=exception.AsStatus()
      do ..LogEvents(pWorkFolder,"Установка параметров по умолчанию для Trak: ",ok)
  }
  quit ok
]]></Implementation>
</Method>

<Method name="SetCacheSettings">
<Description>
Установка необходимых параметров безопасности</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pGateway:%String</FormalSpec>
<Implementation><![CDATA[
    
    try {
	     set namespace=$zu(5)
	     zn "%SYS"
	     // Выключить использование длинных строк
	     /*
	     set ok=##class(Config.Miscellaneous).Get(.Properties)
	     do ..LogEvents(pWorkFolder,"Получение параметров cache Config.Miscellaneous",ok)
	     if (Properties("EnableLongStrings")=1) {
		     kill Properties
		     set Properties("EnableLongStrings")=0
		     set ok=##class(Config.Miscellaneous).Modify(.Properties)
		     do ..LogEvents(pWorkFolder,"Изменение параметров cache Config.Miscellaneous: EnableLongStrings=0",ok)
	     } else {
		     do ..LogEvents(pWorkFolder,"Нужные настройки уже установлены в cache.")
	     }
         */
	     
	     zn namespace 
	     
    } catch(exception) {
	    if $get(namespace) zn namespace
	    Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Установка параметров Cache",ok)
    }
    quit
]]></Implementation>
</Method>

<Method name="SetSecuritySettings">
<Description>
Установка необходимых параметров безопасности</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String,pCacheDir:%String</FormalSpec>
<Implementation><![CDATA[
    
    try {
	    set namespace=$zu(5)
	    zn "%SYS"
	    
	    // CacheDirect for VisM (должно быть включено и должен быть включен неавторизованный доступ)
	     set ok=##class(Security.Services).Get("%Service_CacheDirect",.Properties)
	     do ..LogEvents(pWorkFolder,"Получение параметров %Service_CacheDirect",ok)
	     if (Properties("Enabled")'=0)||(Properties("AutheEnabled")'=64) {
		     kill Properties
		     set Properties("Enabled")=1
		     set Properties("AutheEnabled")=64   
		     set ok=##class(Security.Services).Modify("%Service_CacheDirect",.Properties)
		     do ..LogEvents(pWorkFolder,"Изменение параметров %Service_CacheDirect",ok)
	     }
	     
	     // Для UnknownUser надо назначить роль %All
	     set userobj=##class(Security.Users).%OpenId("unknownuser")
	     if '$IsObject(userobj) {
		     do ..LogEvents(pWorkFolder,"Не удалось найти пользователя UnknownUser")
	     } else {
		     if 'userobj.Roles.Find("%All") {
		         set ok=userobj.AddRoles("unknownuser","%All")
		         do ..LogEvents(pWorkFolder,"Назначение пользователю UnknownUser роли %All",ok)
		     } else {
			     do ..LogEvents(pWorkFolder,"У пользователя UnknownUser уже назначена роль %All")   
		     }
	     }
	     
	     // Сделать базу cachelib read only
	     set pathCachelib=pCacheDir_"mgr\cachelib\"
		 Set db=##Class(SYS.Database).%OpenId(pathCachelib)
		 if $IsObject(db) {
		    if db.ReadOnly=0 {
				    set db.ReadOnly=1
				    set ok=db.%Save()
				    do ..LogEvents(pWorkFolder,"База данных cachelib ("_pathCachelib_"). Установка флага ReadOnly=1 ",ok) 
			}
		 }  
		 else {
			    do ..LogEvents(pWorkFolder,"Не удалось получить объект База данных cachelib ("_pathCachelib_").",ok)  
		 }
	     
	    zn namespace
	     
    } catch(exception) {
	    if $get(namespace) zn namespace
	    Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Установка параметров безопасности",ok)
    }
    quit
]]></Implementation>
</Method>

<Method name="LogEvents">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pMessage:%String,pStatus:%Status</FormalSpec>
<Implementation><![CDATA[
	//if $get(pWorkFolder)="" set pWorkFolder=
	
	write !,pMessage
	
	Set file=pWorkFolder_"intalltrak.log"
	Set stream=##class(%FileCharacterStream).%New()
	Set stream.TranslateTable="CP1251"  
	Set stream.Filename=file
	Set ok=stream.MoveToEnd()
	If ok Set ok=stream.WriteLine(pMessage)
	if ($get(pStatus)'="") {
		if pStatus Set ok=stream.WriteLine("Успешно")
	    else  Set ok=stream.WriteLine($system.Status.GetErrorText(pStatus))
	}
	If ok Set ok=stream.SaveStream()
	If 'ok Quit
	Set stream=""
]]></Implementation>
</Method>

<Method name="ChangeLabTrakIniFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String,pServerName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set fileTrakIni=pWorkFolder_"Lab\install\labtrak.ini.txt"
	    set fileTrakIniNew=pWorkFolder_"Lab\install\labtrakNew.ini.txt"
	    if ##class(%File).Exists(fileTrakIniNew) {
		   set ok=##class(%File).Delete(fileTrakIniNew)
		   do ..LogEvents(pWorkFolder,"Удаление файла "_fileTrakIniNew,ok)
		   if 'ok quit
	    }
	    if ##class(%File).Exists(fileTrakIni) {
		   Set stream2=##class(%FileCharacterStream).%New()
	       Set stream2.Filename=fileTrakIniNew
	       Set stream2.TranslateTable="CP1251"
	       do stream2.Clear()
	       
		   Set stream1=##class(%FileCharacterStream).%New()
	       Set stream1.Filename=fileTrakIni
	       Set stream1.TranslateTable="CP1251"
 	       While 'stream1.AtEnd {
		      Set line=stream1.ReadLine()
		      //if line="" continue
		      if $extract(line,1,7)="TRAKSVR" {
			     set line="TRAKSVR=\\"_pServerName_"\lab"   
		      }
		      //01=CN_IPTCP:lab2012[1972]
		      if line["CN_IPTCP" {
			     set line="01=CN_IPTCP:"_pServerName_"[1972]"
		      } 
		      //gNameSpace
		      if $extract(line,1,10)="gNameSpace" {
			     set line="gNameSpace="_pNamespace
		      }
		      do stream2.WriteLine(line)
 	       }
 	       Set ok=stream2.SaveStream()
 	       do ..LogEvents(pWorkFolder,"Сохранение "_fileTrakIniNew,ok)
	       kill stream1,stream2
	       set ok=##class(%File).Delete(fileTrakIni)
	       do ..LogEvents(pWorkFolder,"Удаление файла "_fileTrakIni,ok)
	       set ok=##class(%File).Rename(fileTrakIniNew,fileTrakIni)
	       do ..LogEvents(pWorkFolder,"Переименование файла "_fileTrakIniNew_" в "_fileTrakIni,ok)
	       
	       // Копирование файла в папку c:\windows
	       
	    }
	} catch(exception) {
		Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Изменения в Labtrak.ini",ok)
		kill stream1,stream2
	}
    quit ok
]]></Implementation>
</Method>

<Method name="BackUpSettings">
<Description>
Настройка задачи backup</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		// Изменения в ini файле BackupSettings.ini
		set ok=..ChangeBackupIniFile(pWorkFolder,pNamespace)
		do ..LogEvents(pWorkFolder,"Изменения в ini файле BackupSettings.ini",ok)
		
		//Создание объекта задачи для менеджера задач - BackUpRunner
		set ok=..CreateTaskBackUp(pWorkFolder,pNamespace)
		do ..LogEvents(pWorkFolder,"Создание объекта задачи для менеджера задач - BackUpRunner",ok)
		
		// Запуск BackupSettings.exe - создание объекта Backup.Settings с настройкой путей и прочее
		//set ok=$zf(-1,pWorkFolder_"\Lab\BackUp\Settings\BackupSettings.exe")
		//do ..LogEvents(pWorkFolder,"Запуск BackupSettings.exe - создание объекта Backup.Settings с настройкой путей и прочее (через zf(-1))",ok)
		
	} catch(exception) {
		Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Настройка BackUp",ok)
	}
	
	quit ok
]]></Implementation>
</Method>

<Method name="ChangeBackupIniFile">
<Description>
Изменения в ini файле BackupSettings.ini</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set fileTrakIni=pWorkFolder_"Lab\BackUp\Settings\BackupSettings.ini"
	    set fileTrakIniNew=pWorkFolder_"Lab\BackUp\Settings\BackupSettingsNew.ini"
	    if ##class(%File).Exists(fileTrakIniNew) {
		   set ok=##class(%File).Delete(fileTrakIniNew)
		   do ..LogEvents(pWorkFolder,"Удаление файла "_fileTrakIniNew,ok)
		   if 'ok quit
	    }
	    if ##class(%File).Exists(fileTrakIni) {
		   Set stream2=##class(%FileCharacterStream).%New()
	       Set stream2.Filename=fileTrakIniNew
	       Set stream2.TranslateTable="CP1251"
	       do stream2.Clear()
	       
		   Set stream1=##class(%FileCharacterStream).%New()
	       Set stream1.Filename=fileTrakIni
	       Set stream1.TranslateTable="CP1251"
 	       While 'stream1.AtEnd {
		      Set line=stream1.ReadLine()
		      //if line="" continue
		      if line["NameSpace=" {
			     set line="NameSpace="_pNamespace
		      }
		      do stream2.WriteLine(line)
 	       }
 	       Set ok=stream2.SaveStream()
 	       do ..LogEvents(pWorkFolder,"Сохранение "_fileTrakIniNew,ok)
	       kill stream1,stream2
	       set ok=##class(%File).Delete(fileTrakIni)
	       do ..LogEvents(pWorkFolder,"Удаление файла "_fileTrakIni,ok)
	       set ok=##class(%File).Rename(fileTrakIniNew,fileTrakIni)
	       do ..LogEvents(pWorkFolder,"Переименование файла "_fileTrakIniNew_" в "_fileTrakIni,ok)
	    } else {
		    do ..LogEvents(pWorkFolder,"Нет файла "_fileTrakIni)
	    }
	} catch(exception) {
		Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Изменения в BackupSettings.ini",ok)
		kill stream1,stream2
	}
    quit ok
]]></Implementation>
</Method>

<Method name="CreateTaskBackUp">
<Description>
Создание объекта задачи для менеджера задач - BackUp</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String,pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try {
	Set obj=""
	Set id=##Class(%SYS.Task).FindId("BackupRunner")
	If id'="" Set obj=##Class(%SYS.Task).%OpenId(id)
	If '$IsObject(obj) {
		Set obj=##Class(%SYS.Task).%New()
		Set obj.Name="BackupRunner"
		Set obj.Description="Запуск BackUp"
		Set obj.TaskClass="Backup.Task"
		Set obj.NameSpace=pNamespace
		set obj.Priority=2 // High
	}

	Set obj.DailyFrequency=obj.DailyFrequencyDisplayToLogical("Once")
	Set obj.DailyFrequencyTime=""
	Set obj.DailyIncrement=""
	Set obj.DailyStartTime=$ZTH("02:00:00")
	Set obj.DailyEndTime=""
	
	Set ok=obj.%Save()
	do ..LogEvents(pWorkFolder,"Сохранение объекта в task manager -  задачи backupRunner",ok)
	
  } catch(exception) {
		Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Изменения в BackupSettings.ini",ok)
  }
  quit ok
]]></Implementation>
</Method>

<Method name="GetPaths">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pWorkFolder:%String,&pNamespace:%String,&pCacheDir:%String]]></FormalSpec>
<Implementation><![CDATA[
	set ok=$$$OK
	set pWorkFolder=$get(pWorkFolder)
	set pCacheDir=$get(pCacheDir)
	set pNamespace=$get(pNamespace)
	try {
		set fileVals=$zu(12)_"vals.txt"
	    
	    if '##class(%File).Exists(fileVals) {
		    set stringError="Не существует файл "_fileVals
		    set ok=$$$ERROR($$$GeneralError,stringError)
		    write stringError,!
		    quit
	    }
	    if ##class(%File).Exists(fileVals) {
		   Set stream=##class(%FileCharacterStream).%New()
	       Set stream.Filename=fileVals
	       Set stream.TranslateTable="CP1251"
	       
 	       While 'stream.AtEnd {
		      Set line=stream.ReadLine()
		      if line="" continue
		      set pCacheDir=$zstrip($piece(line,",",1),"<>W")
		      set pWorkFolder=$zstrip($piece(line,",",2),"<>W")
		      set pNamespace=$zstrip($piece(line,",",4),"<>W")
	          quit
 	       }
 	       write !,"pWorkFolder=",pWorkFolder,!
 	       write "pCacheDir=",pCacheDir,!
 	       write "pNamespace=",pNamespace,!
 	       
 	       kill stream
	       //set ok=##class(%File).Delete(fileVals)
	       //do ..LogEvents(pWorkFolder,"Удаление файла "_fileVals,ok)
	    }
	} catch(exception) {
		Set ok=exception.AsStatus()
		do ..LogEvents(pWorkFolder,"Получение параметров из файла "_$get(fileVals),ok)
		kill stream1,stream2
	}
    quit ok
]]></Implementation>
</Method>

<Method name="ChangeSystemClasses">
<Description>
Изменения в системных классах - отменяется (уже не надо !!!)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWorkFolder:%String</FormalSpec>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set methodid="%ZEN.Report.Display.document||%DrawPageToXSLFO"
		if '##class(%Dictionary.CompiledMethod).%ExistsId(methodid) {
		   set stringError="Не удалось изменить метод в системном классе "_methodid
	       do ..LogEvents(pWorkFolder,stringError,$$$ERROR($$$GeneralError,stringError))
	       quit
		}
		set methodobj=##class(%Dictionary.MethodDefinition).%OpenId(methodid)	
        if '$IsObject(methodobj) {
	       set stringError="Не удалось изменить метод в системном классе "_methodid
	       do ..LogEvents(pWorkFolder,stringError,$$$ERROR($$$GeneralError,stringError))
        } else {
	       
	       kill codestrings
	       set i=0
	       set codestrings($i(i))="	 //!!!"
	       set codestrings($i(i))="	// Если заполнено свойство method, то вызываем этот метод и выходим "
	       set codestrings($i(i))="	If ..method'="" {"
	       set codestrings($i(i))="		Set XSL2=$zobjmethod(%report,..method,4)"
	       set codestrings($i(i))="		If $IsObject(XSL2) {"
	       set codestrings($i(i))="			Do XSL2.Rewind()"
	       set codestrings($i(i))="			Do XSL.CopyFrom(XSL2)"
	       set codestrings($i(i))="		}"
	       set codestrings($i(i))="		Quit $$$OK	"
	       set codestrings($i(i))="	}"
	       set codestrings($i(i))="	 //!!!"
	       
	       set stream=##class(%Stream.TmpCharacter).%New()
	       set k=""
	       for {
		       set k=$order(codestrings(k)) if k="" quit
		       set ok1=stream.WriteLine(codestrings(k))
		       do ..LogEvents(pWorkFolder,"stream.WriteLine ",ok1)
		       if 'ok1 set ok=ok1 quit 
	       }
	       if ok {
		      set ok1=stream.CopyFrom(methodobj.Implementation)
		      do ..LogEvents(pWorkFolder,"stream.CopyFrom",ok1)
		      if ok1 {
			     set methodobj.Implementation=stream
			     set ok1=methodobj.%Save()
			     do ..LogEvents(pWorkFolder,"methodobj.%Save()",ok1) 
			     set ok1=methodobj  
		      }   
	       }
        }
	} catch(exception) {
		 Set ok=exception.AsStatus()
		 do ..LogEvents(pWorkFolder,"Изменения в системных классах",ok)
	}
	quit
]]></Implementation>
</Method>

<Method name="ExportInstallRoutine">
<Description>
do ##class(Utils.InstallTrak).ExportInstallRoutine()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir:%String</FormalSpec>
<Implementation><![CDATA[
  if $get(dir)="" set dir="c:\work\trakdistr\install\download\"
  try {
	  if $get(dir)="" write !,"Введите директорию, где создавать файлы" quit
	  set dir=$tr(dir,"/","\")
      set dir=dir_$select($extract(dir,$length(dir))'="\":"\",1:"")
      
	  // выгрузка файлов для установки системы
      kill items
      set items("Utils.InstallTrak.CLS")=""
      //set items("Utils.StartInstallTrak.INT")=""
      set fileName=dir_"prginstalltrak.xml"  
      do ..CreateFileWithRoutines(fileName,.items)
      
      
  } catch(exception) {
	  do $system.OBJ.DisplayError(exception.AsStatus())
  }
 quit
]]></Implementation>
</Method>

<Method name="CreateFileWithRoutines">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String,items:%String</FormalSpec>
<Implementation><![CDATA[
 try {
	  if ##class(%File).Exists(fileName) do ##class(%File).Delete(fileName)
	  kill errorlog
	  write !,"Export if file "_fileName
      do $System.OBJ.Export(.items,fileName,"",.errorlog)
      if $data(errorlog) zw errorlog
 } catch(exception) {
	  do $system.OBJ.DisplayError(exception.AsStatus())
 }
  quit
]]></Implementation>
</Method>
</Class>
</Export>
