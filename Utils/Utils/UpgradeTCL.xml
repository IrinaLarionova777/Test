<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.UpgradeTCL">
<Super>%RegisteredObject</Super>
<TimeCreated>63103,59481.383603</TimeCreated>

<Method name="LoadProgs">
<Description>
Загрузка всех программ из файлов rtn из заданной директории (включая вложенные директории)
Если программа уже есть в базе данных, то не загружаем ее</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDir:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		if ##class(%File).DirectoryExists(pDir) {
		       Set rs=##class(%ResultSet).%New("%File:FileSet")
	           $$$ThrowOnError(rs.Execute(pDir,"*.*"))  
               While rs.%Next() {
	              set dir=$zcvt(rs.GetData(1),"U")
	              set name=$piece(dir,"\",$length(dir,"\"))
	              if (name="LVB")||(name="SS")||(name="MVB")||(name="MIF")||(name="LBACK")||(name="AT")||(name="LHOSP") {
		             Set rs1=##class(%ResultSet).%New("%File:FileSet")
		             $$$ThrowOnError(rs1.Execute(dir,"*.*"))  
		             While rs1.%Next() {
			             set prgname=rs1.GetData(1)
			              if ..ProgExists(prgname) {
				              continue
			              }
			              //set ok=$system.OBJ.Load(prgname,"c")
			              set ok=1
			              w !,"Загрузка "_prgname_" :"_ok
		             }
		             kill rs1
	              }
               }
              
               kill rs
               
	    }
	    
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="ProgExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProgName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set prog=$piece(pProgName,"\",$length(pProgName,"\"))
	set prog=$piece(prog,".",1,$length(prog,".")-1)
	if $data(^rMAC(prog)) quit 1
	if $data(^rINC(prog)) quit 1
	if $data(^ROUTINE(prog)) quit 1
	if '$data(^rOBJ(prog)) quit 1  // если программа и не была загружена, то не загружаем
	quit 0
]]></Implementation>
</Method>

<Method name="WriteCourierInPatientLocation">
<Description>
Прописать курьера в PatientLocation</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCourier:%String</FormalSpec>
<Implementation><![CDATA[
	if $get(pCourier)="" {
		write !,"Нада задать код курьера" 
		quit
	}
	set pl=""
	for {
		set pl=$order(^TTAB("RH",pl),1,rec) if pl="" quit
		set $piece(rec,"\",44)="Y"  // CTHOS_PrintEnabled
		set $piece(rec,"\",12)=pCourier  // CTHOS_CourierRun_DR
		set $piece(rec,"\",9)=1  // CTHOS_NoOfCopies
		set $piece(rec,"\",10)="I"  // CTHOS_PrintFormat_DR
		set ^TTAB("RH",pl)=rec
	}
]]></Implementation>
</Method>

<Method name="WritePrintFormatInPatientLocation">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPrintFormat:%String</FormalSpec>
<Implementation><![CDATA[
	if $get(pPrintFormat)="" {
		write !,"Нада задать код формата печати" 
		quit
	}
	if '$data(^TTAB("PF",pPrintFormat)) {
		write !,"Нет такого формата печати" 
		quit
	}
	set pl=""
	for {
		set pl=$order(^TTAB("RH",pl),1,rec) if pl="" quit
		set $piece(^TTAB("RH",pl),"\",10)=pPrintFormat // CTHOS_PrintFormat_DR
		//b  
	}
]]></Implementation>
</Method>

<Method name="TestSpecimen">
<Description>
Проверить, записан лт тип материала и тип контейнера у набота тестов и , если нет, то попробовать записать их</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set ts=""
 for {
	 set ts=$o(^TTAB("TS",ts)) if ts="" quit
	 set specimen=##class(TCLEx.Function.TestSet).DefaultSpecimen(ts)
	 if specimen="" {
		  w !,ts
		  set ok=$$open^LVBCTTSY(ts,"","","","","","","","","")
			if $$close^LVBCTTSY()
	 }
 }
 quit
]]></Implementation>
</Method>

<Method name="DeleteTestSets">
<Description>
Удаление наборов тестов прямо в глобалях
Все Relationships в ^TTAB("TS")</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set testset=""
	for {
		set testset=$order(^TTAB("TS",testset)) if testset="" quit
		set pp=$extract(testset,1,2)
		if (pp'="B0")&&(pp'="B1")&&(pp'="B2") continue
		// почему-то не работает - ошибка -415 Fatal error occurred within the SQL filer  
		//set sqlcode=$$delete^LVBCTTS(testset)
		set ok=..DeleteTestSet(testset)
		write !,testset," ",ok
	}
]]></Implementation>
</Method>

<Method name="DeleteTests">
<Description>
Удаление тестов прямо в глобалях
Все Relationships в ^TTAB("TS")</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set test=""
	for {
		set test=$order(^TTAB("TC",test)) if test="" quit
		set pp=$extract(test,1,2)
		if (pp'="B0")&&(pp'="B1")&&(pp'="B2") continue
		// почему-то не работает - ошибка -415 Fatal error occurred within the SQL filer  
		//set sqlcode=$$delete^LVBCTTC(test)
		set ok=..DeleteTest(test)
		write !,test," ",ok
	}
]]></Implementation>
</Method>

<Method name="DeleteTestSet">
<Description>
Удаление наборов тестов прямо в глобалях
Все Relationships в ^TTAB("TS")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestSet:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try {	
		set rec=$get(^TTAB("TS",pTestSet))
		// удаление индексов
		set seqnum=$piece(rec,"\",42),dep=$extract(pTestSet,1)
		set depseqnum=$piece($get(^TTAB("DEP",dep)),"\",15)
		set cumulativegroup=$piece(rec,"\",41)
		set nationnumber=$piece(rec,"\",31)
		set synonym=$piece(rec,"\",2)
		set departmentSequence=$$CT049^at45(dep)
		if cumulativegroup'="" b  
		set ALPHAUPSynonym=$$ALPHAUP^SSUTIL4(synonym)
		if seqnum'="" kill ^TTABi("DEP-TS",dep,seqnum,pTestSet) 
		if departmentSequence'="" kill ^TTABi("TS",departmentSequence,seqnum,pTestSet)
		if cumulativegroup'="" kill ^TTAB("GR",cumulativegroup,"TS",pTestSet) 
		if nationnumber'="" kill ^TTABii("TS","NationalNumber",nationnumber,pTestSet) 
		if ALPHAUPSynonym'="" kill ^TTAB("SY",ALPHAUPSynonym,"TS",pTestSet) 
		kill ^TTAB("TS",pTestSet)

  } catch(e) { set ok=e.AsStatus() }
  quit ok
]]></Implementation>
</Method>

<Method name="DeleteTest">
<Description>
Удаление тестов прямо в глобалях
Все Relationships в ^TTAB("TS")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTest:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try {	
		set rec=$get(^TTAB("TC",pTest))
		// удаление индексов
		set desc=$piece(rec,"\",2)
		set ALPHAUPDesc=$$ALPHAUP^SSUTIL4(desc)
		set NationalNumber=$piece(rec,"\",16)
		set ALPHAUPNationalNumber=$$ALPHAUP^SSUTIL4(NationalNumber)
		set NationalNumberLong=$piece(rec,"\",18)
		set ALPHAUPNationalNameLong=$$ALPHAUP^SSUTIL4(NationalNumberLong)
		set NationalNumberShort=$piece(rec,"\",17)
		set ALPHAUPNationalNameShort=$$ALPHAUP^SSUTIL4(NationalNumberShort)
		set synonym=$piece(rec,"\",12)
		set ALPHAUPSynonym=$$ALPHAUP^SSUTIL4(synonym)
		if ALPHAUPDesc'="" kill ^TTABi("TC","Description",ALPHAUPDesc,pTest) 
		if ALPHAUPNationalNumber'="" kill ^TTABi("TC","NNC",ALPHAUPNationalNumber,pTest) 
		if ALPHAUPNationalNameLong'="" kill ^TTABi("TC","NNL",ALPHAUPNationalNameLong,pTest) 
		if ALPHAUPNationalNameShort'="" kill ^TTABi("TC","NNS",ALPHAUPNationalNameShort,pTest)
		if ALPHAUPSynonym'="" kill ^TTAB("SY",ALPHAUPSynonym,"TC",pTest)  
		kill ^TTAB("TC",pTest)

  } catch(e) { set ok=e.AsStatus() }
  quit ok
]]></Implementation>
</Method>
</Class>
</Export>
