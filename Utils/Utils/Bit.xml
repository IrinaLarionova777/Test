<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Utils.Bit">
<Super>%RegisteredObject</Super>
<TimeCreated>62810,47319.722384</TimeCreated>

<Method name="DecimalToBit">
<Description>
Перевод десятичного числа в двоичное </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dec:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set bit=""
    set len=$length(dec)
    for i=1:1 {
	   set digitbit=dec#(2**i)\(2**(i-1))
	   set bit=digitbit_bit
	   if dec-..BitToDecimal(bit)'>0 quit
    }
    quit bit
]]></Implementation>
</Method>

<Method name="BitToDecimal">
<Description>
Перевод двоичного числа в десятичное</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set dec=0
    set len=$length(bit)
    for i=len:-1:1 {
       set pp=$extract(bit,i)
       if pp=1 set dec=dec+(pp*(2**(len-i)))   
    }
    quit dec
]]></Implementation>
</Method>

<Method name="BitToBitString">
<Description>
Перевод битового числа в битовую строку Cache</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set bitstr=""
    set len=$length(bit)
    for i=1:1:$length(bit) {
	   set $bit(bitstr,i)=$extract(bit,i)
	}
    quit bitstr
]]></Implementation>
</Method>

<Method name="BitStringToBit">
<Description>
Перевод битовой строки Cache в строку с битовым числом </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bitstr:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set bit=""
    for i=1:1:$bitcount(bitstr) {
	   set bit=bit_$bit(bitstr,i)
	}
    quit bit
]]></Implementation>
</Method>

<Method name="BitAND">
<Description><![CDATA[
Операция AND (&) между двумя строками с битовыми числами]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit1:%String,bit2:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set bitanswer=""
 set max=$length(bit1)
 set len=$length(bit2) if len>max set max=len
 set bit1=$translate($j(bit1,max)," ","0")
 set bit2=$translate($j(bit2,max)," ","0")
 for i=1:1:max {
	 set pp1=$extract(bit1,i)
	 set pp2=$extract(bit2,i)
	 set $extract(bitanswer,i)=$select((pp1=1)&&(pp2=1):1,1:0)
 }
 quit bitanswer
]]></Implementation>
</Method>

<Method name="BitOR">
<Description>
Операция OR (|) между двумя строками с битовыми числами</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit1:%String,bit2:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set bitanswer=""
 set max=$length(bit1)
 set len=$length(bit2) if len>max set max=len
 set bit1=$translate($j(bit1,max)," ","0")
 set bit2=$translate($j(bit2,max)," ","0")
 for i=1:1:max {
	 set pp1=$extract(bit1,i)
	 set pp2=$extract(bit2,i)
	 set $extract(bitanswer,i)=$select((pp1=0)&&(pp2=0):0,1:1)
 }
 quit bitanswer
]]></Implementation>
</Method>

<Method name="BitXOR">
<Description>
Операция XOR (^) между двумя строками с битовыми числами</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit1:%String,bit2:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set bitanswer=""
 set max=$length(bit1)
 set len=$length(bit2) if len>max set max=len
 set bit1=$translate($j(bit1,max)," ","0")
 set bit2=$translate($j(bit2,max)," ","0")
 for i=1:1:max {
	 set pp1=$extract(bit1,i)
	 set pp2=$extract(bit2,i)
	 set $extract(bitanswer,i)=$select(((pp1=0)&&(pp2=0))||((pp1=1)&&(pp2=1)):0,1:1)
 }
 quit bitanswer
]]></Implementation>
</Method>

<Method name="BitNOT">
<Description>
Операция NOT(~) к строке с битовым числом</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set bitanswer=""
 set len=$length(bit) 
 for i=1:1:len {
	 set pp=$extract(bit,i)
	 set $extract(bitanswer,i)=$select(pp=1:0,1:1)
 }
 quit bitanswer
]]></Implementation>
</Method>

<Method name="ShiftRight">
<Description>
Сдвиг вправо строки с битовым числом bit num раз</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bit:%String,num:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 if $get(num)="" set num=1
 set bitanswer=bit
 set len=$length(bit)-1
 for i=1:1:num {
	 for j=len:-1:1 set $extract(bitanswer,j+1)=$extract(bitanswer,j) 
	 set $extract(bitanswer,1)="0"
 }
 quit bitanswer
]]></Implementation>
</Method>

<Method name="ShiftRightBitString">
<Description>
Сдвиг вправо битовой строки Cache num раз</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bitstr:%String,num:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 if $get(num)="" set num=1
 set bitanswer=bitstr
 set len=$bitcount(bitstr)-1
 for i=1:1:num {
	 for j=len:-1:1 set $bit(bitanswer,j+1)=$bit(bitanswer,j) 
	 set $bit(bitanswer,1)="0"
 }
 quit bitanswer
]]></Implementation>
</Method>

<Method name="BitLogicAdjust">
<Description><![CDATA[
Запуск $bitlogic(bit1 operation bit2) между двумя битовыми строками Cache 
с предварительным выравниванием по длине bit1 and bit2 $tr($j(...,len)," ","0")
если просто использовать, например, 
set bit1=##class(Utility.Bit).BitToBitString("110000")
set bit2=##class(Utility.Bit).BitToBitString("1111111111111111")
set answer=$bitlogic(bit1 ^ bit2)
w ##class(Utility.Bit).BitStringToBit(answer) -> 0011111111111111
а надо "110000" -> "0000000000110000"
0000000000110000 ^ 1111111111111111 = 1111111111001111 ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bitstr1:%String,bitstr2:%String,operation:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set bitanswer=""
 set bit1=..BitStringToBit(bitstr1)
 set bit2=..BitStringToBit(bitstr2)
 
 if operation="&" {
	 set bitanswer=..BitAND(bit1,bit2) 
 }
 elseif operation="|" {
	 set bitanswer=..BitOR(bit1,bit2) 
 }
 elseif operation="^" {
	 set bitanswer=..BitXOR(bit1,bit2) 
 }
 
 quit ..BitToBitString(bitanswer)
]]></Implementation>
</Method>
</Class>
</Export>
