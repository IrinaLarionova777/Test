<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24" zv="Cache for Windows (x86-64) 2010.2.5 (Build 902U)" ts="2012-09-12 18:47:19">
<Class name="JasperWrap.Application">
<Description>
JasperWrap.Application</Description>
<Super>%ZEN.application</Super>
<TimeChanged>62712,66017.538428</TimeChanged>
<TimeCreated>62712,63580.824332</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
Это имя этого приложения.</Description>
<Default>JasperWrapApplication</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
Это URL главной стартовой страницы этого приложения.</Description>
</Parameter>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">

body {
	font-family: "lucida sans unicode";
}

/* style for title bar */
#title,#titleFormForFaceReport {
	background: #C5D6D6;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}
#formGroup,#formGroupForFaceReport {
	background: #C0C0C0;
	border: 1px solid darkblue;
}
#hospital {
	background: #C0C0C0;
	border: 1px solid darkblue;
}
#yellowLabel {
	background: #80FF60;
	border: 1px solid darkblue;
}
label {
	background: #80FF60;
	border: 1px solid darkblue;
	padding: 5px;	

}

</style>
]]></Data>
</XData>
</Class>


<Class name="JasperWrap.JasperReportTune">
<Super>%RegisteredObject</Super>
<TimeChanged>62712,64534.557886</TimeChanged>
<TimeCreated>62712,64225.196694</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//URL for JDBC

]]></Content>
</UDLText>

<Method name="getConnectURL">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 set ns=$zu(5)
 set portSuperServer=..getPortSuperServer()
 quit "jdbc:Cache://127.0.0.1:"_portSuperServer_"/"_ns_"/?username=report&password=report"
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//Port superserver

]]></Content>
</UDLText>

<Method name="getPortSuperServer">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set portSuperServer=""
	try {
       set ns=$zu(5)
       zn "%SYS"
       set confobj=##class(Config.Startup).Open()
       if $IsObject(confobj) set portSuperServer=confobj.DefaultPort
       zn ns
	} catch (exception) {
		set portSuperServer=1972
	}
 quit portSuperServer
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//WebServerPort

]]></Content>
</UDLText>

<Method name="getWebServerPort">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set webServerPort=""
	try {
       set ns=$zu(5)
       zn "%SYS"
       set confobj=##class(Config.Startup).Open()
       if $IsObject(confobj) set webServerPort=confobj.WebServerPort
       zn ns
	} catch (exception) {
		set webServerPort=57772
	}
 quit webServerPort
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//путь к шаблонам jasper отчетов

]]></Content>
</UDLText>

<Method name="getPathFileJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[ quit $get(^Settings("server","pathFileJasperTemplate"),..getDirJasper())
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//путь к рабочей папке Jasper

]]></Content>
</UDLText>

<Method name="getDirJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit $get(^Settings("server","pathWorkJasper"),"c:\work\jasper")
]]></Implementation>
</Method>

<Method name="getNameGateway">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit "JasperGate"
]]></Implementation>
</Method>

<Method name="getPortJasperGateway">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit "7777"
]]></Implementation>
</Method>

<Method name="getTypeFileReport">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit $get(^Settings("server","formatJasperReport"),"pdf")
]]></Implementation>
</Method>

<Method name="getPathFileJar">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit ..getDirJasper()_"\jar"
]]></Implementation>
</Method>

<Method name="fillFormats">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set defaultFormat=$get(^Settings("server","formatJasperReport"))
 kill ^Settings("server","formatJasperReport")
 for i="pdf","xls","docx","xlsx","xml","html","rtf","odt" { set ^Settings("server","formatJasperReport",i)="" }
 if defaultFormat'="" set ^Settings("server","formatJasperReport")=defaultFormat
]]></Implementation>
</Method>

<Query name="queryFormats">
<Description>
Query all departments from refTmp</Description>
<Type>%Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="format:%String"/>
</Query>

<Method name="queryFormatsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if '$data(^Settings("server","formatJasperReport")) do ..fillFormats()
  	set $li(qHandle,1)=""
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryFormatsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryFormatsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryFormatsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryFormatsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set item=$listget(qHandle,1)
	set item=$order(^Settings("server","formatJasperReport",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryFormats">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("JasperWrap.JasperReportTune:queryFormats")
  do rset.Execute()
  while rset.Next() { 
     w !,rset.Data("format")
  }	
  do rset.Close()
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.closepage">
<Description>
Created using the page template: Default
промежуточная страница между JasperWrap.genReportJasper и JasperWrap.downloadFile
одна кнопка - Возобновление работы отчета</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62712,65827.892354</TimeChanged>
<TimeCreated>62712,63355.928682</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>JasperWrap.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>closepage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">
<form id="forma" name="forma" width="100%" >
<vgroup align="left" width="100%">
<spacer height="10"/>
<!--<label align="center" value="Данное окно можно закрыть" />-->
<hidden id="url" value="" />  <!-- url для возврата  -->
<!--<hidden id="fileReport" value="" />   файл с отчетом, который надо открыть  -->
<button caption="Возобновление работы окна" align="left" onclick="zenPage.returnToPreviousPage();" /> 
<!--<button id="goto" name="goto"  hidden="true" caption="goto" align="center" onclick="zenPage.goto();" />-->
<!--//<timer ontimeout='document.getElementById("goto").click();'  timeout="100" />-->
<timer ontimeout='zenPage.goto();'  timeout="100" />
<textarea id="texterror" hidden="true"  rows="10" width="100%" />
</vgroup>
</form>

</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//set %page.%GetComponentById("fileReport").value=%request.Get("file")
	//set reportKey=%request.Get("reportKey")
	//set user=%request.Get("user")
	set curUser="",reportKey=""
	if $IsObject(%session) {
		if $data(%session.Data("curUser")) set curUser=%session.Data("curUser")
        if $data(%session.Data("reportKey")) set reportKey=%session.Data("reportKey")
        set idReport=""
        if $data(%session.Data("idReport")) set idReport=$get(%session.Data("idReport")) 
        if idReport'="" {
	        set recReport=$get(^TMPinnerUseVariableJasperReport(idReport))
	        if +recReport=3 {
		        if $get(%page)'=""&&($IsObject(%page)) {
		            set objtexterror=%page.%GetComponentById("texterror")
		            if $IsObject(objtexterror) {
		               set %page.%GetComponentById("texterror").value=$piece(recReport,$char(1),2)
		               set %page.%GetComponentById("texterror").hidden=0
		            }
		        }   
		          
	        }
        }
	}
	if curUser'=""&&(reportKey'="") {
	      set %page.%GetComponentById("url").value=##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.genReportJasper.cls"_"?user="_curUser_"&fileJRXML="_reportKey_".jrxml"_"&reportKey="_reportKey
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="onLoadForm">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	/*
	var url=document.location.href;
	zenPage.getComponentById('url').setProperty('value',url);
	*/
]]></Implementation>
</Method>

<Method name="returnToPreviousPage">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var url=zenPage.getComponentById('url').getProperty('value');
	if ((url != null)&&(url != ''))	{ 
	   document.location.href=url;  
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// открыть окно с отчетом

]]></Content>
</UDLText>

<Method name="goto">
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set idReport="",fileReport=""
    if ($get(%session)'="")&&($IsObject(%session)) {
	    set idReport=$get(%session.Data("idReport"))
	    set fileReport=$get(%session.Data("fileReport"))
    }
    if idReport'=""&&(fileReport'="") {
	    set statusSession=$piece($get(^TMPinnerUseVariableJasperReport(idReport)),$char(1),1)
	    //s ^test(111,"cccc")=$get(^TMPinnerUseVariableJasperReport(idReport))
	   if statusSession=1 {
	      &js<zenPage.gotoPage("JasperWrap.downloadFile.cls");>
	   }
	   else  {
	     do ##class(JasperWrap.closepage).endSession() // закончить сессию
	   }
    }
]]></Implementation>
</Method>

<Method name="endSession">
<Description>
закончить сессию</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  if ($get(%session)'="")&&($IsObject(%session)) {
	    set idReport=$get(%session.Data("idReport"))
        if idReport'="" {
	        kill ^TMPinnerUseVariableJasperReport(idReport)
        }
        set fileReport=$get(%session.Data("fileReport"))
        if fileReport'="" {
              if ##class(%File).Exists(fileReport) do ##class(%File).Delete(fileReport)
        }
        set %session.EndSession=1
  }
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// открыть окно с отчетом

]]></Content>
</UDLText>

<Method name="gotoOld">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var fileReport=zenPage.getComponentById('fileReport').getProperty('value');
	if ((fileReport != null)&&(fileReport != '')) { 
	    zenPage.gotoPage("JasperWrap.downloadFile.cls?file="+fileReport);
	}
]]></Implementation>
</Method>

<Method name="getURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileReport:%String,reportKey:%String,user:%String</FormalSpec>
<Implementation><![CDATA[
	quit ##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.closepage.cls"
  //quit ##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.closepage.cls?file="_fileReport_"&reportKey="_$get(reportKey)_"&user="_$get(user)
  //set ^test(111,"getURL")="file="_fileReport_"&reportKey="_$get(reportKey)_"&user="_$get(user)
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.downloadFile">
<Description>
Пример вызова http://localhost:21026/csp/DATA/"_getURL(fileReport)</Description>
<Super>%CSP.Page</Super>
<TimeChanged>62712,63675.475845</TimeChanged>
<TimeCreated>62712,63414.718626</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($get(%session)'="")&&($IsObject(%session)) {
		Set %session.Data("status")=0 
        set idReport=$get(%session.Data("idReport"))
	    set fileReport=$get(%session.Data("fileReport"))
	    //set ^test(111,$i(^test(111)))=fileReport
        if (idReport="")||(fileReport="")||($piece($get(^TMPinnerUseVariableJasperReport(idReport)),$char(1),1)'=1) {
           Set %session.Data("status") = 1
        }
        else {
           Set file=##class(%File).%New()
           Set file.Name = fileReport
           Set sc=file.Open("ruK\RAW\")
           If sc'=1 {
              Set %session.Data("status")=2
           }
           Set %session.Data("file")=file
           Set filename=file.GetFilename(fileReport)
        }
        if %session.Data("status")=0 {
           // если не указать content-disposition, то в зависимости от настроек браузера
           //do %response.SetHeader("content-disposition", "attachment;filename="""_filename_""";") //// тогда pdf файл открывается Acrobat reader
           //do %response.SetHeader("content-disposition", "inline")  // тогда pdf файл открывается встроенным плагином
           // do %response.SetHeader("content-disposition", "inline;filename="_filename_";")
           //S %response.ContentType="APPLICATION/OCTET-STREAM"
           set typefile=$piece(fileReport,".",$length(fileReport,".")) if typefile="" set typefile="pdf"
           set typefile=$select((typefile="xls")||(typefile="xlsx"):"ms-excel",1:typefile)
           if typefile'="pdf" do %response.SetHeader("content-disposition", "attachment;filename="""_filename_""";") // тогда файл открывается приложением соответсвующим 
           //set ^test(111,"typefile")=typefile
           S %response.ContentType="application/"_typefile
           //set %response.ContentType="application/vnd.google.safebrowsing-update"
           ;S ^%z.log($I(^%z.log))="content type octet-stream"
        }
	}
 Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 if %session.Data("status")=0 {
   S file=%session.Data("file")
   ;S ^%z.log($I(^%z.log))="file object"_f
   do {
     S len=32767
     S data=file.Read(.len)
     ;S idlog=$I(^%z.log)   
     ;S ^%z.log(idlog)="read len="_len_", data len="_$L(data)_"..AtEnd="_f.AtEnd     
     W data
   }
   while ( 'file.AtEnd )
   //s ^test(111,"file")=file.Name
   set fileName=file.Name
   do file.Close()
   //set ok=##class(%File).Delete(fileName)
   //s ^test(111,"okdeletefile")=ok
   //s ^test(111,"existfile")=##class(%File).Exists(fileName)
 }
 
 do ##class(JasperWrap.closepage).endSession() // закончить сессию
 Quit 1
]]></Implementation>
</Method>

<Method name="getURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileReport:%String</FormalSpec>
<Implementation><![CDATA[
	quit ##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.downloadFile.cls"
  ;quit "/csp/"_$$getCSP^Settings.Report()_"/JasperWrap.downloadFile.cls?file="_fileReport
  //quit ##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.downloadFile.cls?file="_fileReport
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.genReportJasper">
<Description>
Класс для системы связки cache с jasperreports
Генерации окна запроса параметров для отчета - рисование мордочки 
предполагается %request: 
             user (пользователь),
             reportKey (ключ в $get(^TTAB("REPORT-GENERIC",reportKey)) (Trak)) (не обязательный, нужен только для Заголовка отчета из настроек Trak),
             fileJRXML - имя файла (без пути) с расширением .jrxml
Отчеты типа medium - для них сделаны свои мордочки - должны вызываться напрямую в getReportURL^TCLEx.ReportVB() (для этого в классификаторе Настройке отчетов - долженбыть указан класс zen- .cls </Description>
<Super>JasperWrap.genReportJasper0</Super>
<TimeChanged>62712,64748.116232</TimeChanged>
<TimeCreated>62712,63138.372209</TimeCreated>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	 
	$$$ThrowOnError(##super())
	
	set title="" 
    if $IsObject(%session) {
	       if $data(%session.Data("title")) set title=%session.Data("title")
    }
    // title
    set ctrlTitle=%page.%GetComponentById("titleFormForFaceReport")
    if title '= "",$IsObject(ctrlTitle) {
       set ctrlTitle.content=$zcvt(title,"O","HTML")
    }
    elseif $IsObject(ctrlTitle) {
	   set ctrlTitle.hidden=1 
    }
    
    set form= %page.%GetComponentById("formGroupForFaceReport")
    
    // формирование элементов экрана по описанию
    $$$ThrowOnError(..runCreatePage()) 
    
    // кнопка Печать
    Set spacer = ##class(%ZEN.Component.spacer).%New()
    Set spacer.height=10
    do form.%AddChild(spacer)  
    Set button = ##class(%ZEN.Component.button).%New()
    Set button.align="center"
    Set button.caption="Печать"
    Set button.onclick="zenPage.startRptClient()"
    Do form.%AddChild(button)
    Set spacer = ##class(%ZEN.Component.spacer).%New()
    Set spacer.height=10
    Do form.%AddChild(spacer)
 
  } catch(exception) 
  {
	   set ok=exception.AsStatus()	
  } 
  quit ok
]]></Implementation>
</Method>

<Method name="runCreatePage">
<ClassMethod>1</ClassMethod>
<PublicList>ctrl</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	set row="",maxWidthLabel=0 
    for {
	  set row=$order(%session.Data("params","layout",row)) if row="" quit 
      set rec=$get(%session.Data("params","layout",row))
      set description=$listget(rec,2),len=$length(description)    
	  if len>maxWidthLabel set maxWidthLabel=len
    } 
    set maxWidthLabel=(maxWidthLabel*10)_"px"
     	   
    set form= %page.%GetComponentById("formGroupForFaceReport")
    set layoutRow=##class(%ZEN.Component.vgroup).%New()
    ;set layoutRow.cellSize="" ;"same" ;"stretch"
    do form.%AddChild(layoutRow) 
    set row="",width=(1000-maxWidthLabel)_"px",size=+width*0.15\1
    for {
	      set row=$order(%session.Data("params","layout",row)) if row="" quit 
	      Set spacer = ##class(%ZEN.Component.spacer).%New()
          Set spacer.height="1px"
          do layoutRow.%AddChild(spacer) 
	      set layoutCol=##class(%ZEN.Component.hgroup).%New()
	      ;set layoutCol.cellSize="" ;"same" ;"stretch"
	      do layoutRow.%AddChild(layoutCol) 
	      set rec=$get(%session.Data("params","layout",row))
 	      set controlName=$listget(rec,1)
 	      set description=$listget(rec,2)
 	      //Label 
 	      set layoutV=##class(%ZEN.Component.vgroup).%New()
	      set layoutV.width=maxWidthLabel
	      set nameLayout="layoutV"_row
	      set layoutV.id=nameLayout
	      do layoutCol.%AddChild(layoutV)
	      set ctrl=##class(%ZEN.Component.label).%New()
	      set ctrl.id="Label"_row
	      set ctrl.value=description
	      set ctrl.width=maxWidthLabel
	       
	      do layoutV.%AddChild(ctrl) 
	      // 
	      set rec=%session.Data("params","par",controlName)
	      set typeControl=$listget(rec,1)
	      set initValue=$listget(rec,3)
		  set layoutV=##class(%ZEN.Component.vgroup).%New()
	      set layoutV.width=width
	      do layoutCol.%AddChild(layoutV)
	
	      kill ctrl set ctrl=""
	      // Text   ----------------------------------------
	      if typeControl="text" {
		      set ctrl=..getText(controlName, initValue, rec, size)
	     	  do layoutV.%AddChild(ctrl)  
	      }
	      // DateText   ------------------------------------ 
	      if typeControl="datetext" {
	    	  set ctrl=..getDateText(controlName, initValue, rec)
	    	  do layoutV.%AddChild(ctrl)  
	      }
	      // CheckBox  -------------------------------------
	      if typeControl="checkbox" {
		       set ctrl=..getCheckBox(controlName, initValue, rec)
               do layoutV.%AddChild(ctrl)  
	      }
	      // RadioButton  ----------------------------------
	      if typeControl="radiobutton" {
		      do ..getRadioButton(controlName, initValue, rec, layoutV )
	      } 
	      // ComboBox  ----------------------------------
	      if typeControl="combobox" {
		      set ctrl=..getComboBox(controlName, initValue, rec, size )
	   	      do layoutV.%AddChild(ctrl)
	   	      ;Do %page.%SetValueById(controlName,initValue)

	      }
	       // ListBox  ----------------------------------
	       if typeControl="listbox" {
		      set ctrl=..getListBox(controlName, initValue, rec, width)
	   	      do layoutV.%AddChild(ctrl)
	      }
	      // Table  -------------------------------------
	      if typeControl="table"  
	         {
		      set ctrl=..getTable(controlName, initValue, rec, width , .ctrlNavigator)
	   	      if $IsObject(ctrlNavigator) do layoutV.%AddChild(ctrlNavigator)
	   	      do layoutV.%AddChild(ctrl)
	   	      ;s ^test(111,"hhhfff")=ctrl
	   	      ;do ctrl.executeQuery()
		      ; 	      set key1=%session.SessionId,key2=ctrl.snapshotId,key3=ctrl.index 
			  ;s ^test(111,"hhh222")=$data(^CacheTemp.zenData(key1,key2,key3,"data")) 
	         }  
		 
          // onchange
	       // добавление обработчика onchange (данный элемент par является параметром для другого элемента)
	       if $IsObject(ctrl),$data(%session.Data("params","bindparam",controlName)) {
		      set parChange="",stringCompChange=""
		      for {
			     set parChange=$order(%session.Data("params","bindparam",controlName,parChange)) if parChange="" quit
			     set stringCompChange=stringCompChange_$select(stringCompChange'="":",",1:"")_parChange
		      }
		      if stringCompChange'="" Set ctrl.onchange="zenPage.changeParam('"_ctrl.id_"','"_stringCompChange_"');" 
	       }
	       
	       //свойства , которые опредедлил пользователь
	       if $IsObject(ctrl) {
	          set prop=""
	          for {
		          set prop=$order(%session.Data("params","par",controlName,"property",prop)) if prop="" quit
		          set value=$get(%session.Data("params","par",controlName,"property",prop)) if value="" continue
		          set classname=$piece(ctrl,"@",2) if classname="" continue 
		          if ##class(JasperWrap.Function.general).testIsProperty(classname, prop) {
			          set $property(ctrl,prop)=value
		          } 
	          }
	       }
	       
	       Set spacer = ##class(%ZEN.Component.spacer).%New()
	       Set spacer.width=5
           do layoutCol.%AddChild(spacer)    
	  }
   } catch(exception) 
   {
	   set ok=exception.AsStatus()	
   } 
   quit ok
]]></Implementation>
</Method>

<Method name="getText">
<ClassMethod>1</ClassMethod>
<FormalSpec>controlName:%String,initValue:%String,rec:%String,width:%String</FormalSpec>
<ReturnType>%ZEN.Component.text</ReturnType>
<Implementation><![CDATA[
    set ctrl=##class(%ZEN.Component.text).%New()
	set ctrl.id=controlName
	set ctrl.name=controlName
	set ctrl.value=initValue 
	set ctrl.size=width
	quit ctrl
]]></Implementation>
</Method>

<Method name="getDateText">
<ClassMethod>1</ClassMethod>
<FormalSpec>controlName:%String,initValue:%String,rec:%String</FormalSpec>
<ReturnType>%ZEN.Component.dateText</ReturnType>
<Implementation><![CDATA[
  set classname="WebER.Zen.calendar"
  set classobj=##class(%Dictionary.CompiledClass).%OpenId(classname) 
  if $IsObject(classobj) {
       set ctrl=##class(WebER.Zen.calendar).%New()
  } 
  else {
       set ctrl=##class(%ZEN.Component.dateText).%New()
  }
  set ctrl.id=controlName
  set ctrl.name=controlName
  set ctrl.format="DMY"
  set ctrl.monthList="Январь,Февраль,Март,Апрель,Май,Июнь,Июль,Август,Сентябрь,Октябрь,Ноябрь,Декабрь"
  if $get(initValue)'="" set ctrl.value=..transDate(initValue) 
  quit ctrl
]]></Implementation>
</Method>

<Method name="getCheckBox">
<ClassMethod>1</ClassMethod>
<FormalSpec>controlName:%String,initValue:%String,rec:%String</FormalSpec>
<ReturnType>%ZEN.Component.checkbox</ReturnType>
<Implementation><![CDATA[

  set ctrl=##class(%ZEN.Component.checkbox).%New()
  set ctrl.id=controlName
  set ctrl.name=controlName
  set ctrl.caption=""
  set ctrl.value=$select((initValue=1)||($zcvt(initValue,"U")="TRUE"):1,1:0) 
  quit ctrl
]]></Implementation>
</Method>

<Method name="getRadioButton">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[controlName:%String,initValue:%String,rec:%String,&layoutV:%ZEN.Component.vgroup]]></FormalSpec>
<PublicList>%page</PublicList>
<Implementation><![CDATA[
 	          ;set rs=##class(%ZEN.Component.radioSet).%New()
	    	  ;set rs.id=controlName
	    	  ;set rs.name=controlName
	    	  if $IsObject(layoutV) {
	         	  set key="",num=0
	        	  for {
		        	 set key=$order(%session.Data("params","par",controlName,"data",key)) if key="" quit
		        	 set text=$get(%session.Data("params","par",controlName,"data",key))
		        	 set ctrl=##class(%ZEN.Component.radioButton).%New()
		        	 set num=num+1  
		        	 set ctrl.id=controlName_num
		        	 set ctrl.name=controlName
		        	 set ctrl.caption=$select(text'="":text,1:key)
		        	 set ctrl.optionValue=key
		        	 if key=initValue set ctrl.value=key ;,rs.value=key 
		        	 do layoutV.%AddChild(ctrl)
	    	      }
	    	      ;do %page.%AddChild(rs)
	    	  }
]]></Implementation>
</Method>

<Method name="getComboBox">
<ClassMethod>1</ClassMethod>
<FormalSpec>controlName:%String,initValue:%String,rec:%String,width:%String</FormalSpec>
<PublicList>%page</PublicList>
<ReturnType>%ZEN.Component.abstractComboBox</ReturnType>
<Implementation><![CDATA[
	          set sql=$get(%session.Data("params","par",controlName,"property","sql"))
   		      // если задан sql 
              if sql'="" {
	             Set ctrl = ##class(%ZEN.Component.dataCombo).%New()
                 Set ctrl.sql=sql
	             ;set ctrl.auxColumn=1
	             Set ctrl.valueColumn=1 
                 Set ctrl.displayColumns=2
                 set ctrl.editable=1  
                 ;set ctrl.dataBinding="QUrlOperationId"
	             if initValue'="" set ctrl.value=initValue
	             ;set ctrl.cached=1
	             set param=""
	             for {
		            set param=$order(%session.Data("params","par",controlName,"bind",param)) if param="" quit
		            set nameParam=$get(%session.Data("params","par",controlName,"bind",param)) 
		            set objParam= ##class(%ZEN.Auxiliary.parameter).%New()
                    Set objParam.id="param"_controlName_nameParam
                    Do ctrl.parameters.Insert(objParam)
                    Do %page.%AddComponent(objParam)
	             }
              }
              // если просто данные лежат в @refParam@("par",controlName,node) 
              else {
	              Set ctrl = ##class(%ZEN.Component.combobox).%New()
                  do ctrl.options.Clear()
                  set node="",index=1
	              for {
		             set node=$order(%session.Data("params","par",controlName,"data",node)) if node="" quit
		             set value=$get(%session.Data("params","par",controlName,"data",node)) if value="" continue
		             Set opt = ##class(%ZEN.Auxiliary.option).%New()
		             set opt.value=node
		             set opt.text=value
		             Do %page.%AddComponent(opt)
		             Do ctrl.options.Insert(opt)
		             if node=initValue set ctrl.selectedIndex=index set ctrl.value=value 
		             set index=index+1
		             kill opt
	              }
              }
              Set ctrl.id=controlName
              Set ctrl.name=controlName
              Set ctrl.size=width
              set ctrl.dropdownWidth=ctrl.width
              Set ctrl.unrestricted=1
              Set ctrl.editable=1
              quit ctrl
]]></Implementation>
</Method>

<Method name="getListBox">
<ClassMethod>1</ClassMethod>
<FormalSpec>controlName:%String,initValue:%String,rec:%String,width:%String</FormalSpec>
<PublicList>%page</PublicList>
<ReturnType>%ZEN.Component.abstractListBox</ReturnType>
<Implementation><![CDATA[
	          set sql=$get(%session.Data("params","par",controlName,"property","sql"))
		      // если задан sql 
              if sql'="" {
	             Set ctrl = ##class(%ZEN.Component.dataListBox).%New()
                 Set ctrl.sql=sql
	             ;Set ctrl.valueColumn=1
                 ;Set ctrl.displayColumns="2"
                 set ctrl.maxRows=50000
                 ;set ctrl.listHeight=$select(+height'=0:height,1:60)
                 ;set ctrl.listWidth=width
                 if initValue'="" set ctrl.value=initValue
                 set param=""
	             for {
		            set param=$order(%session.Data("params","par",controlName,"bind",param)) if param="" quit
		            set nameParam=$get(%session.Data("params","par",controlName,"bind",param)) 
		            set objParam= ##class(%ZEN.Auxiliary.parameter).%New()
                    Set objParam.id="param"_controlName_nameParam
                    Do ctrl.parameters.Insert(objParam)
                    Do %page.%AddComponent(objParam)
	             } 
              }
              // если просто данные лежат в @refParam@("par",controlName,node) 
              else {
	              ;Set ctrl = ##class(%ZEN.Component.listBox).%New()
	              Set ctrl = ##class(WebER.Zen.listBox).%New()
                  do ctrl.options.Clear()
                  set node="",index=0
	              for {
		             set node=$order(%session.Data("params","par",controlName,"data",node)) if node="" quit
		             set value=$get(%session.Data("params","par",controlName,"data",node)) if value="" continue
		             Set opt = ##class(%ZEN.Auxiliary.option).%New()
		             set opt.value=node
		             set opt.text=value
		             if node=initValue  set ctrl.value=node,ctrl.text=value set ctrl.selectedIndex=index ;s ^test(111,"sellb1")=initValue_" "_index_" "_node_" "_value
		             set index=index+1
		             Do ctrl.options.Insert(opt)
		             Do %page.%AddComponent(opt)
		             kill opt
	              }
              }
              Set ctrl.id=controlName
              Set ctrl.name=controlName
              Set ctrl.listWidth=width
              ;set ctrl.width="100%"
              set ctrl.listHeight=200
              quit ctrl
]]></Implementation>
</Method>

<Method name="getTable">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[controlName:%String,initValue:%String,rec:%String,width:%String,&ctrlNavigator:%ZEN.Component.tableNavigatorBar]]></FormalSpec>
<PublicList>%page</PublicList>
<ReturnType>%ZEN.Component.tablePane</ReturnType>
<Implementation><![CDATA[
		      set sql=$get(%session.Data("params","par",controlName,"property","sql"))
	    	  set flagMultiSelect=+$get(%session.Data("params","par",controlName,"property","multiSelect"))
		
	    	  set ctrl=##class(%ZEN.Component.tablePane).%New()
	    	  set ctrl.id=controlName
	    	  set ctrl.name=controlName
	    	  ;set ctrl.width="100%" ;width
	    	  ;set ctrl.bodyHeight=height
	    	  set ctrl.pageSize=15 
	    
	    	  if sql'="" {
		    	  set ctrl.sql=sql
		    	  set param=""
	              for {
		            set param=$order(%session.Data("params","par",controlName,"bind",param)) if param="" quit
		            set nameParam=$get(%session.Data("params","par",controlName,"bind",param))
		            set objParam= ##class(%ZEN.Auxiliary.parameter).%New()
                    Set objParam.id="param"_controlName_nameParam
                    Do ctrl.parameters.Insert(objParam)
                    Do %page.%AddComponent(objParam)
	             } 
	    	  }
	    	  else  {
	    	      set ctrl.queryClass="JasperWrap.genReportJasper"
	    	      set ctrl.queryName="queryList"
	    	      set ctrl.valueColumn="node"
	    	      set par = ##class(%ZEN.Auxiliary.parameter).%New()
	    	      set par.value=controlName
	    	      do ctrl.parameters.Insert(par)
	    	      Do %page.%AddComponent(par)
	    	  }
	    	
	    	  set numcol=""
			  for {
				        set numcol=$order(%session.Data("params","par",controlName,"column",numcol)) if numcol="" quit
				        set rec=$get(%session.Data("params","par",controlName,"column",numcol)),colName=$lg(rec,1) if colName="" continue
				        set coldata=$lg(rec,2),colheader=$piece(coldata,"^",1)
				        set colwidth=$piece(coldata,"^",2) if colwidth="" set colwidth=0
				        set column=##class(%ZEN.Auxiliary.column).%New()
	    	            set column.colName=colName
	    	            if +colwidth'=0 set column.width=colwidth ;s ^test(111,"rrr",controlName,"column",numcol)=colwidth
	    	            set column.header=colheader
	    	            do ctrl.columns.Insert(column)
	    	            Do %page.%AddComponent(column)	 
			  }    
	    	    
	    	  set ctrl.multiSelect=flagMultiSelect
	    	  set ctrl.useSnapshot=1
	    	  Set ctrl.showRowSelector=0
	    	  ;set ctrl.width=width ;"100%"
	    	  ;set ctrl.controlStyle="table-layout: fixed; width: "_width_";"
	    	  if flagMultiSelect=1 {
	    	    set ctrl.onselectrow="zenPage.rowSelected(zenThis);"
                set ctrl.onmultiselect="zenPage.changeRowStyle(zenThis);"
                set ctrl.onupdate="zenPage.updatePagingInfo(zenThis);"
	    	  }
	          ;if $get(initValue)'="" {
		          ;do ctrl.executeQuery(0)
		          ;set key1=%session.SessionId,key2=ctrl.snapshotId,key3=ctrl.index 
			      ;s ^test(111,"hhh0")=$data(^CacheTemp.zenData(key1,key2,key3,"data")) 
		          set ctrl.value=initValue
	          ;}
	    	  	    	  
	    	  ;tableNavigator
	    	  set ctrlNavigator=""
		      Set ctrlNavigator = ##class(%ZEN.Component.tableNavigatorBar).%New()
              Set ctrlNavigator.msgFound="Всего:"
              Set ctrlNavigator.msgOf="из"
              Set ctrlNavigator.msgPage="Страница:"
              Set ctrlNavigator.tablePaneId=controlName
              set ctrlNavigator.width="100%" ;ctrl.width ;width
	    	  	    	   
	    	  quit ctrl
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// обработка initValue для даты

]]></Content>
</UDLText>

<Method name="transDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>dateInit:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>datevalue</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 // по умолчанию будет текущая дата 
 if $get(dateInit)="" quit $zdate(+$h,3) // если не определено начальное значение даты, то текущая ??
 
  // t- current date
 if dateInit="t" quit $zdate(+$h,3)
 // t-delta
 set delta=+$piece(dateInit,"t-",2)
 if delta'=0 quit $zdate($h-delta,3) 
 // t+delta
 set delta=+$piece(dateInit,"t+",2)
 if delta'=0 quit $zdate($h+delta,3)
 // если число, то считаем, что это дата
 if +dateInit=dateInit quit $zdate(dateInit,3) 

 new datevalue
 set datevalue=""
 if dateInit'="" {
	 xecute "set datevalue="_dateInit
 }
 /*
 // если начинается с $$ или ##, то считаем, что задана функция для инициализации даты и звпускаем ее
 set pp=$extract(dateInit,1,2)
 // вызов программы с проверкой существования программы и метки в ней
 if $extract(pp,1)="$" {
	 // не бубу проверять - все на совести пользователя, так как там может быть что-то типа w $$FirstDateOfMonthH^KSUTIL1($$PreviousMonth^KSUTIL1($$CurrentMonth^KSUTIL1()))
	 set programname=$piece($piece($piece(dateInit,"$$",2),"(",1),"^",2)
	 if programname'=""&&(##class(%Library.Routine).Exists(programname_".OBJ")) {
		 set okExecute=1
		 set labelname=$piece($piece(dateInit,"$$",2),"^",1)
		 if labelname'="" {
			 if ##class(%Library.Routine).Exists(programname_".MAC") {
			    if ##class(%Library.Routine).%OpenId(programname_".MAC").FindAt(-1,labelname)=-1 set okExecute=0
			 }
			 elseif ##class(%Library.Routine).Exists(programname_".INT") {
			    if ##class(%Library.Routine).%OpenId(programname_".INT").FindAt(-1,labelname)=-1 set okExecute=0
			 }
		 }
		 if okExecute=1 {
			 xecute "set datevalue="_dateInit
		 }
	 }
 }
 //вызов метода класса с проверкой, существует ли класс и методв нем
 if (pp="##")||($extract(dateInit,12)="$classmethod") {
     set classname=$select(pp="##":$piece($piece(dateInit,"class(",2),")",1),1:$piece($piece(dateInit,"$classmethod(",2),",",1))
     if classname'="" {
	     set classobj=##class(%Dictionary.CompiledClass).%OpenId(classname) 
	     if $IsObject(classobj) {
	         set methodname=$select(pp="##":$piece($piece(dateInit,").",2),"(",1),1:$piece($piece(dateInit,"$classmethod(",2),",",2))
		     if methodname'=""&&(classobj.Methods.FindObjectId(classname_"||"_methodname)) {
			         xecute "set datevalue="_dateInit
		     }
		 }
     }
 }
 */
 if datevalue'="" quit datevalue
 quit $zdate(+$h,3)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//compParam - компонент, в котором меняется значение параметра

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//compChange - компонент, в котором sql запрос с параметром

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//имя параметра = 'param'+compChange+compParam

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// для bind

]]></Content>
</UDLText>

<Method name="changeParam">
<FormalSpec>compParam,compChange</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//alert"compParam="+compParam+" compChange="+compChange);
	param=this.getComponentById(compParam);
	//alert(param.getValue());
	this.getComponentById('param'+compChange+compParam).setProperty('value',param.getValue());
    //this.getComponentById(compChange).refreshContents();
    zenPage.getComponentById(compChange).executeQuery();
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// для подсветки выбранных записей при multiselect=1

]]></Content>
</UDLText>

<Method name="rowSelected">
<FormalSpec>table</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	   //alert(table.findElement("tr_1").value);
        table.selectRow(-1);
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// для подсветки выбранных записей при multiselect=1

]]></Content>
</UDLText>

<Method name="changeRowStyle">
<FormalSpec>table</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
        var list = table.selectedRows.split(',');
        //alert("table="+table.name);
        //alert("table.selectedRows="+table.selectedRows);
        var rowCount=(table.currPage)*table.pageSize;
        var rowst=(table.currPage-1)*table.pageSize;
        //alert("list="+list+ " rowCount="+rowCount);

        for (var i = rowst; i < rowCount; i++) {
                var tr = table.findElement("tr_" + (i-rowst));
                 if (tr==null) {break;}
                 //alert("list[i]="+list[i]);
                if (list[i]!=null && list[i]!='') 
                {
	                tr.style.backgroundColor="#00FFFF" //"yellow" //"#5050F0" //"#E0E0E0" //"#00FFFF"; 
	                //alert("tr111="+list[i]);
	            }
                else {
	                tr.style.backgroundColor="";
	            }
        }
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// для подсветки выбранных записей при multiselect=1

]]></Content>
</UDLText>

<Method name="updatePagingInfo">
<FormalSpec>table</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[       this.changeRowStyle(table);
]]></Implementation>
</Method>

<Query name="queryList">
<Description>
Query для элементов с typeElement = comboox,listbox,table без sql</Description>
<Type>%Query</Type>
<FormalSpec>controlName:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="node:%String,value:%String"/>
</Query>

<Method name="queryListExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,controlName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $li(qHandle,1)=""
  	set $li(qHandle,2)=controlName
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryListFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set controlName=$listget(qHandle,2)
	if controlName="" set Row="",AtEnd=1 quit $$$OK
	set item=$listget(qHandle,1)
	set item=$order(%session.Data("params","par",controlName,"data",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(Row,2)=$get(%session.Data("params","par",controlName,"data",item))
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryListClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.genReportJasper0">
<Description>
Класс для системы связки cache с jasperreports
Генерации окна запроса параметров для отчета - разбор описания параметров в файле jrxml, инициализация данных в %session, формирование элементов modalGroup для progressBar
предполагается %request: 
             user (пользователь),
             reportKey (ключ в $get(^TTAB("REPORT-GENERIC",reportKey)) (Trak)) (не обязательный, нужен только для Заголовка отчета из настроек Trak),
             fileJRXML - имя файла (без пути) с расширением .jrxml
Отчеты типа medium - для них сделаны свои мордочки - должны вызываться напрямую в getReportURL^TCLEx.ReportVB() (для этого в классификаторе Настройке отчетов - долженбыть указан класс zen- .cls </Description>
<Super>JasperWrap.reportJasperAbstract</Super>
<TimeChanged>62712,64705.608093</TimeChanged>
<TimeCreated>62712,63204.019493</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//#C0C0C0;#FFFFFF;

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//#9966FF;#6633FF;

]]></Content>
</UDLText>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

.general {
	background-color: #6633FF;
	<!--border:none;-->
}
.selected {
	background-color: #9966FF;
	<!--border:none;-->
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page height="100%" id="page" xmlns="http://www.intersystems.com/zen" title=""  onclick="zenPage.cancelEventWhenProgressBar();" xmlns:WebER="WebER" xmlns:ZenExt="ZenExt">  
<form id="mainFormForFaceReport" 
	width="50%" 
	layout="vertical"
	labelPosition="top"
	cellStyle="padding: 3px;" 
	align="center"
	>
<html id="titleFormForFaceReport">Заголовок</html>
<vgroup id="formGroupForFaceReport" align="center">
<!--<spacer height="10" />
<button align="center" caption="Печать" onclick="zenPage.startRptClient()" />
<spacer height="10" />-->
</vgroup>

</form>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	
	$$$ThrowOnError(..initSessionData())	
	
    $$$ThrowOnError(..getGlobFormParams())
    
    $$$ThrowOnError(..createModalGroupServer())
    
 } catch(exception) 
  {
	   set ok=exception.AsStatus()	
  } 
  quit ok
]]></Implementation>
</Method>

<Method name="initSessionData">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	 set user="" 
	 if $data(%request.Data("user")) set user=%request.Get("user") 
	 if user="" set user="demo"
	 if $IsObject(%session) set %session.Data("curUser")=user
	
	 set fileJRXML=""
	 if $data(%request.Data("fileJRXML")) set fileJRXML=%request.Get("fileJRXML") 
	 //if fileJRXML="" set fileJRXML="report22.jrxml"  
	 if $IsObject(%session) set %session.Data("fileJRXML")=fileJRXML
	 
	 set reportKey=""
	 if $data(%request.Data("reportKey")) set reportKey=%request.Get("reportKey") 
	 if $IsObject(%session) set %session.Data("reportKey")=reportKey
	 
	 set title=""
	 if reportKey'="" set title=$piece($get(^TTAB("REPORT-GENERIC",reportKey)),"\",9)
	 if $IsObject(%session) set %session.Data("title")=title 
	 
  } catch(exception) 
  {
	   set ok=exception.AsStatus()	
  } 
  quit ok
]]></Implementation>
</Method>

<Method name="getGlobFormParams">
<ClassMethod>1</ClassMethod>
<PublicList>ref</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK,refParam=""	
  try
  {	
       set fileJRXML="",title="" 
       if $IsObject(%session) {
	       if $data(%session.Data("fileJRXML")) set fileJRXML=%session.Data("fileJRXML")
	       if $data(%session.Data("title")) set title=%session.Data("title")
       }
  
	   kill params
	   $$$ThrowOnError(..getParamsFromJasper(##class(JasperWrap.JasperReportTune).getPathFileJasper()_"\"_fileJRXML,.params))
	   
	   $$$ThrowOnError(..dopFormParamsJasper(.params,fileJRXML,title))
  
  }
  Catch exception
  {		    
      Set ok=exception.AsStatus()
  }
     
 quit ok
]]></Implementation>
</Method>

<Method name="getParamsFromJasper">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[fileJasper:%String,&params:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $get(fileJasper)="" Quit $$$ERROR($$$GeneralError,"Не указан файл jasper шаблона")	
	
 // gateway
  set gateway=##class(JasperWrap.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")

  //m ^test(111,"params before")=params
  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port))
		Try
		{
            set paramslist=##class(isc.jasper.JasperFacadeDop).getParameters(jgw, fileJasper)
            
            kill vsp
            set c1=$char(1),c2=$char(2)
            set len=paramslist.size()
            set num=0
            //специально два раза проход
            for i=0:1:len-1 {
	            set rec=paramslist.get(i)
	            set name=$piece(rec,c1,1) 
	            if name="" continue
	            set let8=$extract(name,1,8)
	            //данные для узелка "data" пока пропускаем
	            if let8=("D"_c2_"a"_c2_"t"_c2_"a"_c2)||(let8="B"_c2_"i"_c2_"n"_c2_"d"_c2)||(let8="C"_c2_"o"_c2_"l"_c2_"u"_c2)||(let8="P"_c2_"r"_c2_"o"_c2_"p"_c2)||(let8="T"_c2_"y"_c2_"p"_c2_"y"_c2) continue
	            set num=num+1
	            set type=$piece(rec,c1,2)
	            if '((type="text")!(type="datetext")!(type="checkbox")!(type="listbox")!(type="combobox")!(type="table")!(type="radiobutton")) continue
                set value=$listbuild(name)
	            for j=2:1:$length(rec,c1) {
	                set $li(value,j)=$piece(rec,c1,j)
	            }
	            set params(num)=value
	            set vsp(name)=num_"^"_type
            }
            for i=0:1:len-1 {
	            set rec=paramslist.get(i)
	            set name=$piece(rec,c1,1) if name="" continue
	            set let8=$extract(name,1,8) if let8="" continue
                //данные для узелка "data"
	            if let8=("D"_c2_"a"_c2_"t"_c2_"a"_c2) {
		           set name=$extract(name,9,$length(name))
		           if $data(vsp(name)) {
			           set num=$piece(vsp(name),"^",1)
			           set key=$piece(rec,c1,2)
			           set key=$extract(key,6,$length(key))
			           if key'="" set params(num,"data",key)=$piece(rec,c1,3)   
		           }       
	            }
	            elseif let8=("B"_c2_"i"_c2_"n"_c2_"d"_c2) {
		           set name=$extract(name,9,$length(name))
		           if $data(vsp(name)) {
		               set num=$piece(vsp(name),"^",1) 
			           set key=$piece(rec,c1,2)
			           set key=+$extract(key,6,$length(key))
			           if key'=0 set params(num,"bind",key)=$piece(rec,c1,3)   
		           }       
	            }
	            elseif let8=("C"_c2_"o"_c2_"l"_c2_"u"_c2) {
		           set name=$extract(name,9,$length(name))
		           if $data(vsp(name)) {
		               set num=$piece(vsp(name),"^",1) 
			           set key=$piece(rec,c1,2)
			           set key=$extract(key,8,$length(key))
			           if key'="" set params(num,"column",$i(params(num,"column")))=$lb(key,$piece(rec,c1,3))  
		           }       
	            }
	            elseif let8=("P"_c2_"r"_c2_"o"_c2_"p"_c2) {
		           set name=$extract(name,9,$length(name))
		           if $data(vsp(name)) {
		               set num=$piece(vsp(name),"^",1) 
		               set type=$piece(vsp(name),"^",2) 
			           set key=$piece(rec,c1,2)
			           set value=$piece(rec,c1,3)
			           if (key'="")&&(value'="") {
			              set params(num,"property",key)=value
			           } 
		           }       
	            }
	            // специальное свойство - тип отчета (pdf, xsl,...) - не параметр
	            elseif let8=("T"_c2_"y"_c2_"p"_c2_"e"_c2) {
		           set name=$extract(name,9,$length(name))
		           if $extract(name,1,6)="format" {
		               set value=$piece(rec,c1,2) 
		               if value'="" {
			               set num=num+1
			               set params(num)=$listbuild("fffornatReloadReport",value)
			           } 
		           }       
	            }
            }
          // m ^test(111,"params after")=params
		}
		Catch exception
		{
			If $ZERROR["<ZJGTW>" {
		       Set result=$get(%objlasterror)
            } 
		    else {
		       Set result=exception.AsStatus()
		    }
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
	}
	Catch exception
	{
	    If $ZERROR["<ZJGTW>" {
            Set result=$get(%objlasterror)
            } 
		else {
		    Set result=exception.AsStatus()
		}
	}
  quit result
]]></Implementation>
</Method>

<Method name="dopFormParamsJasper">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&params,fileJRXML:%String,title:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 set ref=$name(^||vsp) k @ref 
 try {
	    
   kill %session.Data("params")
   set formatReport=""
   set i="" 
   for  {
	   set i=$order(params(i)) if i="" quit
	   set rec=params(i)
	   set par=$listget(rec,1)
	   set typeControl=$listget(rec,2)
	   if par="fffornatReloadReport" set formatReport=typeControl kill params(i) continue // format Report
       set %session.Data("params","layout",i)=$listbuild(par,$listget(rec,3))
	   set recnew=$lb("")
	   for k=2:1:$ll(rec) set $li(recnew,k-1)=$listget(rec,k)
	   kill %session.Data("params","par",par)
	   merge %session.Data("params","par",par)=params(i)
	   set %session.Data("params","par",par)=recnew
	   ;if $data(params(i,"data")) merge %session.Data("params","par",par,"data")=params(i,"data")
	   ;if $data(params(i,"bind")) merge %session.Data("params","par",par,"bind")=params(i,"bind")
	   ;if $data(params(i,"property")) merge %session.Data("params","par",par,"property")=params(i,"property")
	 
   }
   if formatReport="" set formatReport="pdf"
   if '$data(^Settings("server","formatJasperReport",formatReport)) set formatReport="pdf"
   set %session.Data("params","par")=$listbuild(title,fileJRXML,formatReport)

      //удаляем несуществующие	и неправильные элементы
   $$$ThrowOnError(..verifyParams()) 
   
   //параметры
   set par="" kill %session.Data("params","bindparam")
   for {
	  set par=$order(%session.Data("params","par",par)) if par="" quit
      set numparam=""
      for {
			 set numparam=$order(%session.Data("params","par",par,"bind",numparam)) if numparam="" quit
			 set param=$get(%session.Data("params","par",par,"bind",numparam))
			 if '$data(%session.Data("params","par",param)) continue
			 set %session.Data("params","bindparam",param,par)=""
      }
   }   
      
   k @ref
   //m ^test(111,"ppp")=%session.Data("params") 
  
 } 
 catch(exception)
 {
    	 set ok=exception.AsStatus()
 }
 kill @ref 
 quit ok
]]></Implementation>
</Method>

<Method name="verifyParams">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
   //удаляем несуществующие	и неправильные элементы
   ;m ^test(111,"before verify")=%session.Data("params") 
   set par="" 
   for  {
	   set par=$order(%session.Data("params","par",par)) if par="" quit
	   set rec=$get(%session.Data("params","par",par))
	   set type=$listget(rec,1)
	   //проверка типа
	   if '((type="text")||(type="datetext")||(type="checkbox")||(type="listbox")||(type="combobox")||(type="table")||(type="radiobutton")) {
		   kill %session.Data("params","par",par) 
		   continue
	   }
	   // проверка bind
	   if (type'="listbox")&(type'="combobox")&(type'="table")&($data(%session.Data("params","par",par,"bind"))) kill %session.Data("params","par",par,par,"bind")
	   
	   set sql="" if $data(%session.Data("params","par",par,"property","sql")) set sql=$get(%session.Data("params","par",par,"property","sql")) 
	   if (sql="")!(sql'["?") kill %session.Data("params","par",par,"bind")
	   
	   set numparam="" 
	   for {
			 set numparam=$order(%session.Data("params","par",par,"bind",numparam)) if numparam="" quit
			 set param=$get(%session.Data("params","par",par,"bind",numparam))
			 if param="" kill %session.Data("params","par",par,"bind",numparam) continue
			 if '$data(%session.Data("params","par",param)) kill %session.Data("params","par",par,"bind",numparam)
	   }
	   
	   // построение columns и valueColumn для table если не определено
	   if type="table" {
	     if sql'="" {
		   $$$ThrowOnError(..getFieldsSQL(sql,.fields))
		   set valueColumn=$get(%session.Data("params","par",par,"property","valueColumn"))
		   if valueColumn="" {
		        set valueColumn=$order(fields("")) if valueColumn'="" set valueColumn=fields(valueColumn)
		        set %session.Data("params","par",par,"property","valueColumn")=valueColumn
		   }
		   if '$data(%session.Data("params","par",par,"column")) {
			   set fildsCount=$order(fields(""),-1)
			   set flagEqualWidth=1 if fildsCount=2 set flagEqualWidth=0
			   set width=100 if +fildsCount'=0 set width=$select(flagEqualWidth=0:100-30\(fildsCount-1),1:100\fildsCount)
			   set field="",num=0
			   for {
				  set field=$order(fields(field)) if field="" quit
				  set colName=fields(field) if colName="" continue
				  set num=num+1 
				  set wcol=width if colName=valueColumn set wcol=30 
				  set %session.Data("params","par",par,"column",num)=$lb(colName," ^"_wcol_"%")   
			   }
		   } 
	     }
	     else {
		   set valueColumn=$get(%session.Data("params","par",par,"property","valueColumn"))
		   if valueColumn="" {
		        set %session.Data("params","par",par,"property","valueColumn")="node"
		   }
		   if '$data(%session.Data("params","par",par,"column")) {
     		   set %session.Data("params","par",par,"column",1)=$lb("node"," ^30%")
     		   set %session.Data("params","par",par,"column",2)=$lb("value"," ^70%")   
		   } 
	     }
	   } 
   }
   ;m ^test(111,"after verify")=%session.Data("params") 
 } 
 catch(exception)
 {
    	 set ok=exception.AsStatus()
 }
 quit ok
]]></Implementation>
</Method>

<Method name="createModalGroupServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	 set vgroup=%page.%GetComponentById("formGroupForFaceReport")
	 if $IsObject(vgroup) {
		 set modalGroup=##class(%ZEN.Component.modalGroup).%New()
		 set modalGroup.id="%jasperInnerProgressModalGroup"
		 
		 // для хранения текущего подсвеченного элемента
		 set texthidden=##class(%ZEN.Component.text).%New()
         Set texthidden.id="%jasperInnerCurrColumn"
         Set texthidden.hidden=1
         Set texthidden.value="%jasperInnerColumn1"
         Do modalGroup.%AddChild(texthidden)
         
         // для хранения текущего направления движения подсвеченного элемента ("r"-вправо, "l"-влево)
         set texthidden=##class(%ZEN.Component.text).%New()
         Set texthidden.id="%jasperInnerCurrDirection"
         Set texthidden.hidden=1
         Set texthidden.value="r"
         Do modalGroup.%AddChild(texthidden)
         
         // для хранения текущего статуса modalGroup ("n" - невидима, "y"- Видима)
         set texthidden=##class(%ZEN.Component.text).%New()
         Set texthidden.id="%jasperInnerFlagModalGroup"
         Set texthidden.hidden=1
         Set texthidden.value="n"
         Do modalGroup.%AddChild(texthidden)
         
         // для хранения кол-ва вызовов по таймеру (каждые 10 вызовов проверка состояния отчета)
         set texthidden=##class(%ZEN.Component.text).%New()
         Set texthidden.id="%jasperInnerCalls"
         Set texthidden.hidden=1
         Set texthidden.value="1"
         Do modalGroup.%AddChild(texthidden)

	     Set spacer = ##class(%ZEN.Component.spacer).%New()
         Set spacer.height=10
         do modalGroup.%AddChild(spacer)
    
         Set text = ##class(%ZEN.Component.label).%New()
         set text.value="Подождите, пожалуйста. Отчет формируется."
         do modalGroup.%AddChild(text)

	     Set spacer = ##class(%ZEN.Component.spacer).%New()
         Set spacer.height=10
         do modalGroup.%AddChild(spacer)

	     set hgroup=##class(%ZEN.Component.hgroup).%New()
	     set hgroup.id="%jasperTableProgressBar"
	     set hgroup.align="center"
	              
	     for i=1:1:10 {
             Set text = ##class(%ZEN.Component.spacer).%New()
             Set text.id="%jasperInnerColumn"_i
             set text.width=30
             set text.height=10
             set text.enclosingClass=$select(i=1:"selected",1:"general")
             do hgroup.%AddChild(text)
          }
          
          /*
          // пробовала titleBox
 	     for i=1:1:10 {
             Set text = ##class(%ZEN.Component.titleBox).%New()
             Set text.id="%jasperInnerColumn"_i
             set text.titleStyle="width:10;height:5;background-color:"_$select(i=1:"#9966FF;",1:"#6633FF;")
             //set text.enclosingStyle //.controlClass=$select(i=1:"selected",1:"general")
             //set text.controlClass=$select(i=1:"selected",1:"general")
             do hgroup.%AddChild(text)
          }
          // пробовала text
	     for i=1:1:10 {
             Set text = ##class(%ZEN.Component.text).%New()
             Set text.id="%jasperInnerColumn"_i
             set text.size="3"
             //set text.height=10
             set text.controlClass=$select(i=1:"selected",1:"general")
             set text.value="aaaa"
             do hgroup.%AddChild(text)
          }*/
          
         do modalGroup.%AddChild(hgroup)
         
         /*
         // вот бы вставить маленький экран с вращающейся девушкой 
         set image=##class(%ZEN.Component.image).%New()
         set image.src="file:///c:/temp/gerla.gif"
         set image.width=100
         set image.height=200
         do modalGroup.%AddChild(image)
         */
    
	     Set spacer = ##class(%ZEN.Component.spacer).%New()
         Set spacer.height=10
         do modalGroup.%AddChild(spacer)
         
         set buttonCancel=##class(%ZEN.Component.button).%New()
         set buttonCancel.id="%jasperInnerButtonCancel"
         set buttonCancel.caption="Отмена"
         set buttonCancel.align="center"
         set buttonCancel.onclick="zenPage.cancelReport();"
         do modalGroup.%AddChild(buttonCancel)
         
         Set spacer = ##class(%ZEN.Component.spacer).%New()
         Set spacer.height=10
         do modalGroup.%AddChild(spacer)
    
         Do vgroup.%AddChild(modalGroup) 
	 } 
	 
  } catch(exception) 
  {
	   set ok=exception.AsStatus()	
  } 
  quit ok
]]></Implementation>
</Method>

<Method name="getFieldsSQL">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sql:%String,&fields:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK kill fields
	if $get(sql)="" quit ok
	try {
        set sqlUp=$zcvt(sql,"U")
        set str=$piece(sqlUp,"SELECT",2)
	    set str=$piece(str,"FROM",1)
	    set num=0
	    for i=1:1:$length(str,",") {
	       set ff=$piece(str,",",i)
	       set ff=$piece(ff,"AS",1)
	       set ff=$tr($zstrip(ff,"<>"," "),"""'","")
	       set field=""
	       if ff'="" {
		       set pp=$find(sqlUp,ff)
		       if pp'=0 set field=$extract(sql,pp-$length(ff),pp-1)
	       }
	       if field'="" set num=num+1 set fields(num)=field 
	    }
	} 
	catch(exception)
    {
    	 set ok=exception.AsStatus()
    }
 quit ok
]]></Implementation>
</Method>

<Method name="cancelEventWhenProgressBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
//	alert("ttt");
 flagModalGroup=zen('%jasperInnerFlagModalGroup');
 if ((flagModalGroup!=undefined)&&(flagModalGroup!=null)) {
      if (flagModalGroup.value=="y") {
         //release mouse up
         var trap=document.getElementById('zenMouseTrap');
         if (trap) {
            trap.onmouseup=""
         }
      } 	 
}
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.progressReport">
<Super>%ZEN.Component.page</Super>
<TimeChanged>62712,65362.582418</TimeChanged>
<TimeCreated>62712,65335.661635</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>JasperWrap.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>progressReport</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

.general {
	background-color: #C0C0C0;
}
.selected {
	background-color: #FFFFFF;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">
<!--<text hidden="true" id="currColumn" value="column1"/>
<timer id="mytimer" ontimeout='zenPage.changeProgressBar();'  timeout="150"      />
<form id="forma" name="forma" >
</form>-->

</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set texthidden=##class(%ZEN.Component.text).%New()
    Set texthidden.id="currColumn"
    Set texthidden.hidden=1
    Set texthidden.value="column1"
    Do %page.%AddChild(texthidden)
    Set timer = ##class(%ZEN.Component.timer).%New()
    Set timer.id="mytimer"
    Set timer.ontimeout="zenPage.changeProgressBar();"
    Set timer.timeout=150
	Do %page.%AddChild(timer)
	
	set vgroup=##class(%ZEN.Component.vgroup).%New()
	set vgroup.align=1 //center
	
	Set spacer = ##class(%ZEN.Component.spacer).%New()
    Set spacer.height=10
    do vgroup.%AddChild(spacer)
    
    Set text = ##class(%ZEN.Component.label).%New()
    set text.value="Подождите, пожалуйста. Отчет формируется."
    do vgroup.%AddChild(text)

	Set spacer = ##class(%ZEN.Component.spacer).%New()
    Set spacer.height=10
    do vgroup.%AddChild(spacer)

	set hgroup=##class(%ZEN.Component.hgroup).%New()
	set hgroup.align="center"
    for i=1:1:10 {
       Set text = ##class(%ZEN.Component.text).%New()
       Set text.id="column"_i
       set text.size="5mm"
       set text.controlClass=$select(i=1:"selected",1:"general")
       do hgroup.%AddChild(text)
    }
    do vgroup.%AddChild(hgroup)
    
	Set spacer = ##class(%ZEN.Component.spacer).%New()
    Set spacer.height=10
    do vgroup.%AddChild(spacer)
    
    //set form=%page.%GetComponentById("forma")
    //do form.%AddChild(vgroup)
    do %page.%AddChild(vgroup) 
     
    quit $$$OK
]]></Implementation>
</Method>

<Method name="testReportOver">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 set idReport=""
 if $IsObject(%session) set idReport=%session.SessionId
 set return=""
 if idReport="" {
	 &js<alert("Потерян контекст. Отчет не сформирован.");>
	 quit 1
 } 
 else {
	 quit +$get(^TMPinnerUseVariableJasperReport(idReport))
 }
]]></Implementation>
</Method>

<Method name="changeProgressBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	/*if (zenPage.testReportOver()==1) {
	//	window.close();
	}*/
    var curr=document.getElementById("currColumn").childNodes[0].value;
    var next=1;
    var length=10;
  for (i=1; i<length+1; i++) {
     if (curr=="column"+i) {
       if (i==length) {
           next=1;
       }
       else {
           next=i+1;
       }
       //alert(document.getElementById("column"+i).childNodes[0].getAttribute("class"));
       //.setAttribute("class", "className");
       document.getElementById("column"+i).childNodes[0].setAttribute("class","general");
       //alert(document.getElementById("column"+i).childNodes[0].controlClass);
       document.getElementById("column"+next).childNodes[0].setAttribute("class","selected");
       document.getElementById("currColumn").childNodes[0].value="column"+next;
       //alert(document.getElementById("currColumn").childNodes[0].value);
       break;
     }
  }
  var t=window.setTimeout("zenPage.changeProgressBar()",150); 
  //alert(document.getElementById("mytimer"));
  //document.getElementById("timer").setTimeout("changeProgressBar()",150);
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.reportJasperAbstract">
<Description>
Класс для системы связки cache с jasperreports
обработка нажатия кнопки "Печать" (ClientMethod startRptClient()) - формирование файла с отчетом, прогрессбар, возможность прервать формирование отчета</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62712,65573.19142</TimeChanged>
<TimeCreated>62712,63270.746124</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>JasperWrap.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Start creating of report on client - call startRptServer()

]]></Content>
</UDLText>

<Method name="startRptClient">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//проверка параметров
	var proxy = zenPage.getParamsServer();
	var err = proxy.flagError
	var message=proxy.message
	if ((message != '') && (message != null)) alert(message.replace("^","\n"));
	if (err==0) {
		var proxy2 = zenPage.startRptServer();
		var err2 = proxy2.flagError
	    var message2=proxy2.message
	    if ((message2 != '') && (message2 != null)) alert(message2.replace("^","\n"));
	    if (err2==0) {
		    zenPage.startProgressBar();  
	    }
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// здесь нужен dom html

]]></Content>
</UDLText>

<Method name="getParamsServer">
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.flagError=0
    set proxy.message=""
    try {
	  kill params
	  $$$ThrowOnError(..getParams(.params))
       // if there is class Report.Jasper.(name of report) and in it there is method Validate, call it and test answer
      set ok=..isMetodValidate(.params)
      if +ok=0 $$$ThrowOnError($$$ERROR($$$GeneralError,$piece(ok,$char(0),2)))
    } catch(exception) {
	     set proxy.flagError=1
	     set proxy.message = $System.Status.GetErrorText(exception.AsStatus())
    }
    quit proxy
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Start creating of report on server

]]></Content>
</UDLText>

<Method name="startRptServer">
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.flagError=0
    set proxy.message=""
    try {
	    set idReport=""
	    if ($get(%session)'="") {
		    set idReport=$translate($zts,",","") //%session.SessionId
		    set %session.Data("idReport")=idReport
	    }
	    if idReport="" {
		    set proxy.flagError=1
            set proxy.message="Потерян контекст. Отчет не создан."
		    quit 
	    }
	    /*
	    if $piece($get(^TMPinnerUseVariableJasperReport(idReport)),$char(1),1)=2 {  // cancel report
	         set proxy.flagError=1
	         quit 
	    }*/
	    kill ^TMPinnerUseVariableJasperReport(idReport)
	
    	//формат отчета
	    set repFormat=$listget(%session.Data("params","par"),3)
	    if $get(repFormat)="" set repFormat="pdf"
	    // файл отчета
	    $$$ThrowOnError(..getFileReport(repFormat,.fileReport))
	    set %session.Data("fileReport")=fileReport
        // файл с jasper шаблоном 
 	    $$$ThrowOnError(..getFileJasper(.fileJasper))
    	//params
        set params=""
        set par=""
        for {
	       set par=$order(%session.Data("paramsItog","par",par)) if par="" quit
	       set value=$get(%session.Data("paramsItog","par",par))
	       if value'="" {
		       set params=params_$select(params'="":$char(3),1:"")_par_$char(4)_value
	       }
        }
        if fileReport'=""&&(repFormat'="")&&(fileJasper'="") { 
	       job ##class(JasperWrap.reportJasperAbstract).createReport(idReport,fileReport,repFormat,fileJasper,params)
        }
	} catch(exception) {
		 set textError=$System.Status.GetErrorText(exception.AsStatus())
	     set proxy.flagError=1
	     set proxy.message = textError
	     if $get(idReport)'="" set $piece(^TMPinnerUseVariableJasperReport(idReport),r,1)="3"_$char(1)_textError
    }
    quit proxy
]]></Implementation>
</Method>

<Method name="createReport">
<ClassMethod>1</ClassMethod>
<FormalSpec>idReport:%String,fileReport:%String,repFormat:%String,fileJasper:%String,stringParams:%String</FormalSpec>
<Implementation><![CDATA[
	try {
		kill ^TMPinnerUseVariableJasperReport(idReport)
	    set r=$char(1)
	    //формат отчета
	    if $get(repFormat)="" set repFormat="pdf"
        //params
        kill params
        for i=1:1:$length(stringParams,$char(3)) {
	        set pp=$piece(stringParams,$char(3),i)
	        set par=$piece(pp,$char(4),1)
	        set value=$piece(pp,$char(4),2)
	        if par'="",value'="" {
		       set params(par)=value
	        }
        }
        if $piece($get(^TMPinnerUseVariableJasperReport(idReport)),$char(1),1)=2 quit // cancel report
        // form report
        set ^TMPinnerUseVariableJasperReport(idReport)=0
        //h 15
        set ok = ..startRptFacade(fileReport, .params, fileJasper, repFormat)
        if ('$data(^TMPinnerUseVariableJasperReport(idReport)))||($piece($get(^TMPinnerUseVariableJasperReport(idReport)),$char(1),1)=2) { // cancel report или уже убита сессия
            if ##class(%File).Exists(fileReport) do ##class(%File).Delete(fileReport)
            kill ^TMPinnerUseVariableJasperReport(idReport)
	        quit  
        }
	    set ^TMPinnerUseVariableJasperReport(idReport)=$select('ok:3,1:1)_r_$select('ok:$System.Status.GetErrorText(ok),1:"")

	} catch(exception) {
		if $get(idReport) {
			set ^TMPinnerUseVariableJasperReport(idReport)=3_$char(1)_$System.Status.GetErrorText(exception.AsStatus())
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="getUrlProgressBar">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	quit ##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.progressReport.cls"
]]></Implementation>
</Method>

<Method name="getUrlClosePage">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	quit ##class(JasperWrap.settings).getNodeSettings("server","urlWeb")_"JasperWrap.closepage.cls"
	//set fileReport="" if $IsObject(%session) if $data(%session.Data("fileReport")) set fileReport=%session.Data("fileReport")
	//set curUser="" if $IsObject(%session) if $data(%session.Data("curUser")) set curUser=%session.Data("curUser")
    //set reportKey="" if $IsObject(%session) if $data(%session.Data("reportKey")) set reportKey=%session.Data("reportKey") 
	//quit ##class(JasperWrap.closepage).getURL(fileReport,reportKey,curUser)
]]></Implementation>
</Method>

<Method name="getFileReport">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[repFormat:%String,&fileReport:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set fileReport="",ret=$$$OK
	try {
         set fileName=..getFileName()
         set curUser="" if ($get(%session)'="")&&($IsObject(%session)) if $data(%session.Data("curUser")) set curUser=%session.Data("curUser")
         $$$ThrowOnError(##class(JasperWrap.settings).getPathFileReportGroup(.pathFileReport,curUser))
         if $get(repFormat)="" set repFormat=##class(JasperWrap.JasperReportTune).getTypeFileReport() 
         set fileReport=pathFileReport_"\"_fileName_"."_repFormat
         set n=1
         for {
             if '##class(%File).Exists(fileReport) quit
             set fileReport=pathFileReport_"\"_fileName_n_"."_repFormat
             set n=n+1
         }
	} catch(exception) 
	{
	   set ret=exception.AsStatus()	
	} 
	quit ret
]]></Implementation>
</Method>

<Method name="getFileName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set name=""
	if 
	 if $data(%session.Data("fileJRXML")) set name=%session.Data("fileJRXML") set name=$piece(name,".",1,$length(name,".")-1)
	quit name
]]></Implementation>
</Method>

<Method name="getFileJasper">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&fileJasper:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set fileJasper="",ret=$$$OK
	try {
		 set fileName=..getFileName()
         set filePath=##class(JasperWrap.JasperReportTune).getPathFileJasper()
         if fileName'="",filePath'="" set fileJasper=filePath_"\"_fileName_".jasper"
	} catch(exception) 
	{
	   set ret=exception.AsStatus()	
	} 
	quit ret
]]></Implementation>
</Method>

<Method name="getParams">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&params:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill params 
	kill %session.Data("paramsItog")
	set ret=$$$OK
	try {
         if ($get(%session)="")||('$IsObject(%session)) $$$ThrowOnError($$$ERROR($$$GeneralError,"Нет указана глобаль с параметрами для стартовой формы"))
         set par=""
         for {
	       set par=$order(%session.Data("params","par",par)) if par="" quit
	       set rec=$get(%session.Data("params","par",par))
	       set controlType=$listget(rec,1) 
		   if (controlType="")!(controlType="Label")!(controlType="form") continue
		   set ctrl=%page.%GetComponentByName(par) 
		   if '$IsObject(ctrl) continue
		   
		   set value="",text=""
		  		   		   
		   if (controlType="text") {
			   set value=ctrl.value  
			   //set params(par)=value  
		   }
		   elseif (controlType="datetext") {
			    set value=ctrl.value 
			    if value="" set value=$zdate($h)
			    set value=##class(JasperWrap.Function.general).getDateTimeLong($zdh($tr(value,"-",""),8))_$char(1)_"Date" 
			    //set params(par)=##class(JasperWrap.Function.general).getDateTimeLong($zdh($tr(value,"-",""),8))_$char(1)_"Date" //set ^test(1,$i(^test(1)))=params(par)_"?"_value
		        ;set params(par_"Display")=$zd(value,4)
		   }
		   elseif (controlType="checkbox") {
			    set value=ctrl.value 
			    //set params(par)=value
		   }
		   elseif (controlType="radiobutton") {
			    set value=ctrl.value 
			    //set params(par)=value
		   }
		   elseif (controlType="combobox") {
			    set text="",value=""
			    set class=ctrl.%ClassName()
			    if class="combobox" {
					set index=ctrl.selectedIndex
			        if index'="",index'=-1 {
				        set opt=ctrl.options.GetAt(index)
				        if $IsObject(opt) {
				           set value=opt.value
				           set text=opt.text
				        }
			        }
			    }
			    if class="dataCombo" {
     			      set value=ctrl.value
     			      if text=""!(text=value) set text=ctrl.%GetDisplayValue(value)
     			      ;if ctrl.sqlLookup'=""&&(value'="") set text=ctrl.%GetDisplayValue(value)
				      ;else  set text=ctrl.text
			    }        
			    //set params(par)=value
		        //set params(par_"Display")=text
		   }
		   elseif (controlType="listbox") {
			 set text="",value=""
			    set class=ctrl.%ClassName()
			    if class="listbox" {
					set index=ctrl.selectedIndex
			        if index'="",index'=-1 {
				        set opt=ctrl.options.GetAt(index)
				        if $IsObject(opt) {
				           set value=opt.value
				           set text=opt.text
				        }
			        }
			    }
			    if class="dataListBox" {
     			      set value=ctrl.value
     			      set text=ctrl.text
     			      if text=""!(text=value) set text=ctrl.%GetDisplayValue(value)
     			      ;if ctrl.sqlLookup'=""&&(value'="") set text=ctrl.%GetDisplayValue(value)
				      ;else  set text=ctrl.text
			    }        
			   // set params(par)=value
		       // set params(par_"Display")=text
		   }
		   elseif (controlType="table") {
			        set index=ctrl.selectedIndex
			        if ctrl.sql'="" {
				        set flagMultiSelect=ctrl.multiSelect
				        if flagMultiSelect=1 {
					       set value=ctrl.selectedRows
					       set text="",key1=%session.SessionId,key2=ctrl.snapshotId,key3=ctrl.index 
					       set c0=$char(0),c1=$char(1) ;set c0=",",c1="^" 
					       for i=1:1:$length(value,",") {
						       set val=$piece(value,",",i) if val="" continue
						       set rec=$get(^CacheTemp.zenData(key1,key2,key3,"data",i)) set len=$listlength(rec)
						       ;s ^tesst(111,"ii",i)=rec
						       set txt="" for j=2:1:len set txt=txt_$select(txt'="":c1,1:"")_$listget(rec,j)
						       set text=text_$select(text'="":c0,1:"")_txt
					       } 
					       set value=$zstrip(value,"<>=",",") 
				        }
				        else {
				           set rec=$lb("")
				           if index'=""&(index>0) set rec=$get(^CacheTemp.zenData(%session.SessionId,ctrl.snapshotId,ctrl.index,"data",index))
				           set value=$listget(rec,1)
				           set len=$listlength(rec)
				           set text="" if len>1 set text=$listget(rec,2,len)
				           ;if value'="" set text=$get(@globParamsForm@("par",par,value))
				           ;^CacheTemp.zenData(%session.SessionId,..snapshotId
				           ;set ^test(111,"%session.SessionId")=%session.SessionId
				           ;set ^test(111,par,"ctrl.snapshotId")=ctrl.snapshotId
				           ;m ^test(111,par,"data")=^CacheTemp.zenData(%session.SessionId,ctrl.snapshotId)
				        }
			        }
			        else {
				        set value=ctrl.value
				        set text="" if value'="" set text=$get(%session.Data("params","par",par,"data",value))
			        }
			    //set params(par)=value
		        //set params(par_"Display")=text
		   }
		   if value'="" {
			   set params(par)=value
			   set %session.Data("paramsItog","par",par)=value
		   }
		   if text'="" {
			   set params(par_"Display")=text
			   set %session.Data("paramsItog","par",par_"Display")=text
		   }
	    }
	 //m ^test(111,"params")=params
     
	} catch(exception) 
	{
	   set ret=exception.AsStatus()	
	} 
	quit ret
]]></Implementation>
</Method>

<Method name="isMetodValidate">
<Description>
if there is class Report.Jasper.(name of report) and in it there is method Validate, call it and test answer
method Validate() must return string: 1/0(ok/error)_$char(0)_message about error
output: 1/0(ok/error)_$char(0)_message about error</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&params:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   set ok=1
   // if there is class Report.Jasper.(name of report) and in it there is method Validate, call it and test answer
    set fileName=..getFileName()
    if fileName'="" {
	    set classname="Report.Jasper."_fileName
	    Set classobj = ##class(%Dictionary.CompiledClass).%OpenId(classname)
	    if $IsObject(classobj) {
		    Set classobj = ##class(%Dictionary.ClassDefinition).%OpenId(classname)
		    if $IsObject(classobj) { 
		        set methodname="Validate"
		        Set key=""
	            For  {
		            set methodobj=classobj.Methods.GetNext(.key) if key="" Quit
			        if methodobj.Name'=methodname continue
			        set ret=$classmethod(classname,methodname,.params)
			        if +ret=1 {
				        set ok=1
				        //для того чтобы можно было в методе Validate подменить значения параметров 
				        set params=""
                        set par=""
                        for {
	                        set par=$order(%session.Data("paramsItog","par",par)) if par="" quit
	                        if $data(params(par)) {
		                       set %session.Data("paramsItog","par",par)=$get(params(par)) 
	                        }
                        }
			        }
			        else {
				        set message=$piece(ret,$char(0),2)
				        if message="" set message=ret
				        set ok="0"_$char(0)_message
			        }
	            }
		    }
	    }
    }
    quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// modalGroup для создания progressbar во время формирования отчета

]]></Content>
</UDLText>

<Method name="startProgressBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	modalgroup=zen('%jasperInnerProgressModalGroup'); //document.getElementById('progressModalGroup');
	if (modalgroup==null) {
	  var modalgroup=this.createComponent('modalGroup');
	  modalgroup.setProperty('id','%jasperInnerProgressModalGroup'); 
	
	  /*
	  // для хранения текущего подсвеченного элемента
	  var texthidden=this.createComponent('hidden');
      texthidden.setProperty('id','%jasperInnerCurrColumn');
      texthidden.setProperty('value','%jasperInnerColumn1');
      modalgroup.addChild(texthidden);
    
      // для хранения текущего направления движения подсвеченного элемента ("r"-вправо, "l"-влево)
      var texthidden=this.createComponent('hidden');
      texthidden.setProperty('id','%jasperInnerCurrDirection');
      texthidden.setProperty('value','r');
      modalgroup.addChild(texthidden);
      */
	
	  // для хранения текущего статуса modalGroup ("n" - невидима, "y"- Видима)
      var texthidden=this.createComponent('hidden');
      texthidden.setProperty('id','%jasperInnerFlagModalGroup');
      texthidden.setProperty('value','n');
      modalgroup.addChild(texthidden);
	
	  //для хранения кол-ва вызовов по таймеру (каждые 10 вызовов проверка состояния отчета)
      var texthidden=this.createComponent('hidden');
      texthidden.setProperty('id','%jasperInnerCalls');
      texthidden.setProperty('value','0');
      modalgroup.addChild(texthidden);

	  var vgroup=this.createComponent('vgroup');
	  modalgroup.addChild(vgroup);
	
      var text=this.createComponent('label');
      text.setProperty('value','Подождите, пожалуйста. Отчет формируется.');
      vgroup.addChild(text);

      /*
	  var hgroup=this.createComponent('hgroup');
	  for (i=1; i<11; i++)  {
         var text = this.createComponent('spacer');
         text.setProperty('id','%jasperInnerColumn'+i);
         text.setProperty('width','30');
         text.setProperty('height','10');
         if (i==1) { text.setProperty('enclosingClass','selected'); } // не работает почему-то 
         else  {text.setProperty('enclosingClass','general'); }      // не работает почему-то 
         hgroup.addChild(text);
      }
      vgroup.addChild(hgroup);
      */
    
      var buttonCancel=this.createComponent('button');
      buttonCancel.setProperty('id','%jasperInnerButtonCancel');
      buttonCancel.setProperty('caption','Отмена');
      buttonCancel.setProperty('align','center');
      buttonCancel.setProperty('onclick','zenPage.cancelReport();');
      vgroup.addChild(buttonCancel);
	}
    flagModalGroup=zen('%jasperInnerFlagModalGroup');
    if ((flagModalGroup!=undefined)&&(flagModalGroup!=null)) {
           zenSetProp('%jasperInnerFlagModalGroup','value','y'); 
    } 
    modalgroup.show();
    
    var timerProgressBar=window.setTimeout("zenPage.changeProgressBar()",500);
    //var t2=window.setTimeout("zenPage.testReportState()",1000);
]]></Implementation>
</Method>

<Method name="changeProgressBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (document.getElementById("%jasperInnerButtonCancel")) {  // все уже загрузилось
  
     var qcalls=parseInt(document.getElementById("%jasperInnerCalls").childNodes[0].value);
     qcalls=qcalls+1;
     if (qcalls>5) {
	     qcalls=1;
	     document.getElementById("%jasperInnerCalls").childNodes[0].value=qcalls.toString(); 
     	 if (zenPage.testReportOver()==1) {
            zenPage.stopProgressBar(); 
            return; 
     	 }
     }
     document.getElementById("%jasperInnerCalls").childNodes[0].value=qcalls.toString(); 
  
     var currobj=document.getElementById("%jasperInnerCurrColumn")
     if (currobj != null) {
        var curr=document.getElementById("%jasperInnerCurrColumn").childNodes[0].value;
        var currDirection=document.getElementById("%jasperInnerCurrDirection").childNodes[0].value;
        if (currDirection=="") { currDirection='r'; }
        //alert("curr="+curr+" currDirection="+currDirection);

        var next=1;
        var length=10;
        for (i=1; i<length+1; i++) {
           if (curr=="%jasperInnerColumn"+i) {
             if ((i>1)&&(currDirection=='l')) {
                 next=i-1;
                 if (next==1) { document.getElementById("%jasperInnerCurrDirection").childNodes[0].value='r'; }
             }
             else {
                 next=i+1;
                 if (next==length) { document.getElementById("%jasperInnerCurrDirection").childNodes[0].value='l'; }
             }
          
             document.getElementById("%jasperInnerColumn"+i).setAttribute("style","background-color:#6633FF;"); //'#6633FF';");
             document.getElementById("%jasperInnerColumn"+next).setAttribute("style","background-color:#9966FF;"); //'#9966FF';");
             //document.getElementById("%jasperInnerColumn"+i).childNodes[0].setAttribute("class","general");
             //document.getElementById("%jasperInnerColumn"+next).childNodes[0].setAttribute("class","selected");
          
             //document.getElementById("%jasperInnerColumn"+i).parentNode.bgColor="#6633FF";
             //document.getElementById("%jasperInnerColumn"+next).parentNode.bgColor="#9966FF";
          
             //alert(document.getElementById("%jasperInnerColumn"+i).getAttribute("id")); //.nodeName
             //document.getElementById("%jasperInnerColumn"+i).setAttribute("class","general");
             //document.getElementById("%jasperInnerColumn"+next).setAttribute("class","selected");
    
             document.getElementById("%jasperInnerCurrColumn").childNodes[0].value="%jasperInnerColumn"+next;
             break;
           }
        }
     }
  }
  timerProgressBar=window.setTimeout("zenPage.changeProgressBar()",100);
]]></Implementation>
</Method>

<Method name="testReportState">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (zenPage.testReportOver()==1) {
        zenPage.stopProgressBar(); 
        return; 
  }
  t2=window.setTimeout("zenPage.testReportState()",1000);
]]></Implementation>
</Method>

<Method name="testReportOver">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 set idReport=""
 if ($get(%session)'="")&&($IsObject(%session)) set idReport=$get(%session.Data("idReport"))
 if idReport="" {
	 &js<alert("Потерян контекст. Отчет не сформирован.");>
	 quit 1
 } 
 else {
	 //&js<alert("sss");>
	 quit $select(+$get(^TMPinnerUseVariableJasperReport(idReport))'=0:1,1:0)
 }
]]></Implementation>
</Method>

<Method name="stopProgressBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
        zenPage.endModal();
        flagModalGroup=zen('%jasperInnerFlagModalGroup');
        if ((flagModalGroup!=undefined)&&(flagModalGroup!=null)) {
           flagModalGroup.value="n"; 
        } 
	    var urlClosePage = zenPage.getUrlClosePage();
		if (urlClosePage != "") {
				zenPage.gotoPage(urlClosePage);
		}
]]></Implementation>
</Method>

<Method name="cancelReport">
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 set idReport=""
 if ($get(%session)'="")&&($IsObject(%session)) set idReport=$get(%session.Data("idReport"))
 if idReport'="" {
	 set ^TMPinnerUseVariableJasperReport(idReport)="2"_$char(1)_"Формирование отчета прервано"
	 &js< zenPage.stopProgressBar(); >
 }
]]></Implementation>
</Method>

<Method name="OnEndSession">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 //	s ^test(22222,$i(^test(22222)))="endsession "_$h
 if ($get(%session)'="")&&($IsObject(%session)) {
	    set idReport=$get(%session.Data("idReport"))
        if idReport'="" {
	        kill ^TMPinnerUseVariableJasperReport(idReport)
        }
        set fileReport=$get(%session.Data("fileReport"))
        if fileReport'="" {
              if ##class(%File).Exists(fileReport) do ##class(%File).Delete(fileReport)
        }
  }
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set fileName="report19"
	// fileReport
	do ##class(JasperWrap.settings).getPathFileReportGroup(.pathFileReport)
    set repFormat="pdf"
    set fileReport=pathFileReport_"\"_fileName_"."_repFormat
    w !,"fileReport="_fileReport
    //params
    kill params 
    set params("DateFrom")=##class(JasperWrap.Function.general).getDateTimeLong($zdh(20110120,8))_$char(1)_"Date" 
    set params("DateTo")=##class(JasperWrap.Function.general).getDateTimeLong($zdh(20120120,8))_$char(1)_"Date"
    set params("ExternalLab2")=1
    set params("ExternalLab3")=1
    set params("ExternalLab5")=1
    w !,"params="
    zw params
    //fileJasper
    set filePath=##class(JasperWrap.JasperReportTune).getPathFileJasper()
    if fileName'="",filePath'="" set fileJasper=filePath_"\"_fileName_".jasper" 
    w !,"fileJasper="_fileJasper
    set debug=1
    //set ok = ..startRptFacade(fileReport, .params, fileJasper, repFormat, debug)
    set ok=..startRptNew("isc.jasper.JasperFacade", "executeAndSave", fileReport, .params, repFormat, fileJasper, 1, debug )
    w !!,ok
]]></Implementation>
</Method>

<Method name="startRptFacade">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[fileReport:%String,&params:%String,fileJasper:%String,repFormat:%String="pdf"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  quit ..startRptNew("isc.jasper.JasperFacade", "executeAndSave", fileReport, .params, repFormat, fileJasper, 1)
]]></Implementation>
</Method>

<Method name="startRptNew">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[nameClass:%String,nameMethod:%String,fileReport:%String,&params:%String,repFormat:%String="pdf",fileJasper:%String,flagCallFacade:%String,debug:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   //удаление файла отчета, если существует
  if ##class(%File).Exists(fileReport)&&('##class(%File).Delete(fileReport)) {
	   Quit $$$ERROR($$$GeneralError,"Файл "_fileReport_" занят другим приложением")
  }

 // открываем gateway
  set gateway=##class(JasperWrap.JasperReportTune).getNameGateway() 
  if gateway="" Quit $$$ERROR($$$GeneralError,"Не указан gateway")
  
  set jvm = ##class(%Net.Remote.ObjectGateway).%OpenId(gateway)
  if '$IsObject(jvm) Quit $$$ERROR($$$GeneralError,"Incorrect Java GateWay configuration !")

  Set result=$$$OK
  Try
	{
		; запуск шлюза, если он не запущен
		If $$$ISERR(##class(%Net.Remote.Service).PingGateway(jvm.Port,jvm.Server,jvm.InitializationTimeout)) {
			$$$ThrowOnError(##class(%Net.Remote.Service).StartGateway(gateway))
		}	
	
		Set jgw=##class(%Net.Remote.Gateway).%New()
		; подключение к шлюзу
		$$$ThrowOnError(jgw.%Connect(jvm.Server,jvm.Port))
		Try
		{
			set paramsHashMap = ##class(java.util.HashMap).%New(jgw)
			s node="" 
			;m ^test(111,"ppp ppp")=params
	        for {
	            s node=$order(params(node)) if node="" quit
	            s value=$piece(params(node),$char(1),1)
	            set typeParam=$piece(params(node),$char(1),2)
	            if typeParam="Date" {
		            //set ^test(3,$i(^test(3)))=node_"="_value
		            set valueDate=##class(java.util.Date).%New(jgw) do valueDate.setTime(value)  
		            //set ^test(2,$i(^test(2)))=node_"="_$select(typeParam="Date":valueDate,1:value)
	            }
	            do paramsHashMap.put(node,$select(typeParam="Date":valueDate,1:value))
	        }
			//формирование отчета
            set connectURL = ##class(JasperWrap.JasperReportTune).getConnectURL()
            
           if $get(flagCallFacade)=1 
           {
	           //set debugBool=##class(java.lang.Boolean).%New(jgw)
	           //set debugBool=$select($get(debug)=1: "true",1:"false") 
	           set debug=$select($get(debug)=1:"1",1:"0")
	           do $classmethod(nameClass,nameMethod,jgw,connectURL,fileJasper,repFormat,paramsHashMap,fileReport,debug)
           }
           else  
           {
	           if $get(fileJasper)'="" do paramsHashMap.put("fileJasper",fileJasper)
	           do $classmethod(nameClass,nameMethod,jgw,connectURL,fileReport,paramsHashMap,repFormat)
           }
           ;executeAndSave(String connString, String fileName, String repFormat, Map params, String targetFileName, "0")
           // do ##class(isc.jasper.rptEpisodePCL).startReport(jgw,connectURL, fileReport, paramsHashMap, $na(@refTmp@("result")),repFormat) 
            //do ##class(isc.jasper.rptEpisodePCL2).startReport(jgw, connectURL, fileReport, paramsHashMap, $na(@refTmp@("result")),repFormat) 
  
		}
		Catch exception
		{
            If $ZERROR["<ZJGTW>" {
		       set %objlasterror=$get(%objlasterror)
		       if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			       set result=%objlasterror
		       }  else {
			       Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		       }
            } 
		    else {
		        Set result=exception.AsStatus()
		     }
		}
		; отключение от шлюза
		Do jgw.%Disconnect()
	}
	Catch exception
	{
            If $ZERROR["<ZJGTW>" {
		       set %objlasterror=$get(%objlasterror)
		       if ##class(%SYSTEM.Status).IsError(%objlasterror) {
			       set result=%objlasterror
		       }  else {
			       Set result=$$Error^%apiOBJ(5001,$ZERROR)  //$$Error^%apiOBJ(5001,$get(%objlasterror))
		       }
            } 
		    else {
		        Set result=exception.AsStatus()
		    }

	}
  quit result
]]></Implementation>
</Method>
</Class>


<Class name="JasperWrap.settings">
<Description>
Created using the page template: Заголовок страницы</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62712,65608.918251</TimeChanged>
<TimeCreated>62712,63749.706333</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>JasperWrap.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
//zenPage.setPathWorkJasper(zenThis)

]]></Content>
</UDLText>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">

body {
	font-family: "lucida sans unicode";
}

/* style for title bar */
#title {
	background: #C5D6D6;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}
#formGroup {
	background: #C0C0C0;
	border: 1px solid darkblue;
}
#hospital {
	background: #C0C0C0;
	border: 1px solid darkblue;
}

</style>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
//,"server","pathFileJasperTemplate")

]]></Content>
</UDLText>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen">
<form id="myform" 
	width="60%" 
	layout="vertical"
	labelPosition="top"
	cellStyle="padding: 3px;" 
	align="center"
	>
	<!--
<locatorBar id="locator">
<locatorLink caption="Меню" href="JasperWrap.menu.cls" />
</locatorBar>-->
<html id="title">Настройки для работы отчетов</html>

<vgroup id="formGroup" title="Настройки для работы отчетов" width="100%">

   <spacer height="10" width="100%"/>
   <hgroup align="left" > 
      <label value="Рабочая папка для работы jasper отчетов " />
      <spacer width="10"/>
      <text id="pathWorkJasper" name="pathWorkJasper" /> 
   </hgroup>
   
    <hgroup align="left"> 
      <label value="Путь, где лежат файлы xxx.jrxml,xxx.jasper и картинки " />
      <spacer width="10"/>
      <text id="pathFileJasperTemplate" name="pathFileJasperTemplate" size="50"/> 
   </hgroup>  
   
   <hgroup align="left"> 
      <label value="Путь для временных файлов отчетов" />
      <spacer width="10"/>
      <text id="pathTempFile" name="pathTempFile" size="50"/> 
   </hgroup>  

   <hgroup align="left"> 
      <label value="URL для web" />
      <spacer width="10"/>
      <text id="urlWeb" name="urlWeb" size="100"/> 
   </hgroup>  

   <hgroup align="left"> 
     <spacer height="25"/>
     <label value="Формат печати для финансовых отчетов " align="center" />
     <spacer width="10"/>
     <dataCombo id="formatJasperReport" 
       name="formatJasperReport"
       columnName="Формат"
       queryClass="JasperWrap.JasperReportTune" 
       queryName="queryFormats"
	   dropdownWidth="450"
	   editable="false"
	   required="false"
	   buttonCaption="Выберите формат"
	   onchange="zenPage.setValueParam(zenThis);"
	   displayColumns="1"
	   choiceColumn="1"
	   auxColumn="1"
	   valueColumn="1" 
    />
  </hgroup>
      <button id="save" caption="Сохранить" onclick="zenPage.saveData(zenPage)"  align="center"/>
 </vgroup>

</form>
</page>
]]></Data>
</XData>

<Method name="%OnBeforeCreatePage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if '$data(^Settings("server","formatJasperReport")) do ##class(JasperWrap.JasperReportTune).fillFormats()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $IsObject(%page) {
		for id="pathWorkJasper","pathFileJasperTemplate","pathTempFile","urlWeb","formatJasperReport" {
		    set ctrl=%page.%GetComponentById(id) 
		    if $IsObject(ctrl) {
			    set value=%page.getNodeSettings("server", id)
			    if id="urlWeb"&&(value="") set value=..getUrlWebDefault() do ..setNodeSettings("server", "urlWeb", value)
			    set ctrl.value=value
		    }
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="setValueParam">
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var nodeMain="server";
	var node=ctrl.getProperty("name");
	if ((nodeMain==null)||(nodeMain=="")||(node==null)||(node=="")) return;
	var value=ctrl.getValue();
	if ((value != null)&&(value != this.getNodeSettings(nodeMain, node))) this.setNodeSettings(nodeMain, node, value);
]]></Implementation>
</Method>

<Method name="getNodeSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>nodeMain:%String,node:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	if $get(nodeMain)="" set nodeMain="server"
	quit $select($get(node)'="":$get(^Settings(nodeMain,node)),1:"")
]]></Implementation>
</Method>

<Method name="setNodeSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>nodeMain:%String,node:%String,value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	if $get(nodeMain)="" set nodeMain="server"
	set ^Settings(nodeMain,node)=value 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="saveData">
<ClassMethod>1</ClassMethod>
<FormalSpec>page:%ZEN.Component.page</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		if $IsObject(page) {
	       kill vr
	       for id="pathWorkJasper","pathFileJasperTemplate","pathTempFile","urlWeb","formatJasperReport" set vr(id)=""
	       set id=""
	       for {
	         set id=$order(vr(id)) if id="" quit
	         set ctrl=page.%GetComponentById(id) 
		     if '$IsObject(ctrl) continue
		     set value=page.%GetValueById(id)
		     if value="" continue 
		     set ^Settings("server",id)=value 
	       }
	       &js<alert("Данные сохранены успешно");>
		}
		
	} catch(exception) {
		Set ok=exception.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="getUrlWebDefault">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 ;set portSuperServer=##class(JasperWrap.JasperReportTune).getPortSuperServer()
 set webServerPort=##class(JasperWrap.JasperReportTune).getWebServerPort()
 quit "http://localhost:"_webServerPort_"/csp/"_$zu(5)_"/"
]]></Implementation>
</Method>

<Method name="getCSP">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 quit "data"
 //quit "bion"
]]></Implementation>
</Method>

<Method name="getPathFileReportGroup">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pathFileReport:%String,USER:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set res=$$$OK,pathFileReport=""
	try {
	       set pathFileReport=##class(JasperWrap.settings).getNodeSettings("server","pathTempFile")   ;"//lissrv/lab/temp/reports" ;"C:\BION\lab\temp\Reports"
	       if pathFileReport="" $$$ThrowOnError($$$ERROR($$$GeneralError,"В настройках не указан путь к временным файлам"))
	       if $get(USER)'="" set pathFileReport=pathFileReport_"\"_USER
	       if '##class(%File).Exists(pathFileReport) do ##class(%File).CreateDirectoryChain(pathFileReport)
	} 
	catch(exception)
	{
	      set res=exception.AsStatus()	
	}
	quit res
]]></Implementation>
</Method>
</Class>


<Routine name="TCLEx.VBReport" type="INT" languagemode="0" timestamp="62692,40181"><![CDATA[

 ; return URL for running report
getReportURL()
 set msgError="",url=""
 try {
     set reportKey=$$getReportKey()
     if reportKey="" set msgError="Не удалось идентифицировать отчет" quit
     
     set user=$$getUser()
     if user="" set msgError="Не удалось идентифицировать пользователя" quit
     
     set recReport=$get(^TTAB("REPORT-GENERIC",reportKey))
     set reportGroup=$piece(recReport,"\",4) 
     if reportGroup="" set msgError="Не удалось идентифицировать группу пользователя" quit
          
     set userobj = ##class(User.SSUser).%OpenId(user)
     if '$IsObject(userobj) set msgError="Не удалось идентифицировать пользователя" quit
     set grp="",ok=0
     ;for {
	 ;    set userReportGroupobj=userobj.ChildSSUserReportGroup.GetNext(.grp) if grp="" quit 
	 ;    set userReportGroup =  userReportGroupobj.SURPRepGroupDR
	 ;    if reportGroup=userReportGroup set ok=0 quit 
     ;}
     ;if ok=0 set msgerror="Для пользователя "_user_" данный отчет не доступен."
     set ok=1
     set reportRoutine=$piece(recReport,"\",1)
     ;if reportRoutine="" set msgError="Не указана программа для формирования отчета" quit
     
     set fileJRXML=##class(Report.JasperReportTune).getPathFileJasper()_"\"_reportKey_".jrxml"
     if ##class(%File).Exists(fileJRXML) 
     {
	     set url=##class(ReportZEN.settings).getNodeSettings("server","urlWeb")_"ReportZEN.genReportJasper.cls"_"?user="_user_"&fileJRXML="_reportKey_".jrxml"_"&reportKey="_reportKey
	     ;set url=$$getURLhttp^Settings.Report()_"ReportZEN.genReportJasper.cls"_"?user="_user_"&fileJRXML="_reportKey_".jrxml"_"&reportKey="_reportKey
     }
     
     else  
     {
	     if $$existClass(reportKey,.nameClass) set url=##class(ReportZEN.settings).getNodeSettings("server","urlWeb")_nameClass_".cls"_"?user="_user_"&reportKey="_reportKey 
	     ;if $$existClass(reportKey,.nameClass) set url=$$getURLhttp^Settings.Report()_nameClass_".cls"_"?user="_user_"&reportKey="_reportKey 
     }  
     if reportKey="CLNRUS50" set url=##class(ReportZEN.settings).getNodeSettings("server","urlWeb")_reportRoutine_"?user="_user  
     ;if reportRoutine["cls" set url=$$getURLhttp^Settings.Report()_reportRoutine_"?user="_user if 1
     ;else  set url=$$getURLhttp^Settings.Report()_"ReportZEN.genRpt.cls"_"?user="_user_"&reportRoutine="_reportRoutine
 } 
 catch(e) {
     set msgError=$ZERROR	
 }
 if msgError'="" set url=""
 if url="",msgError="" set msgError="Нет найден шаблон отчета "_$get(fileJRXML)
 quit url_$char(1)_msgError
 ;
 ; return reportKey
getReportKey()
 quit $get(^TMP("REPORTSPB",$j))
 ;
 ; return user
getUser()
 quit $get(^TMP("USER",$j)) 
 ;
existClass(reportKey,nameClass) 
 set name=$zcvt(reportKey,"U"),ok=0,nameClass=""
 kill find
 set node=""
 for {
   set node=$order(^oddDEF(node)) if node="" quit
   if $zcvt(node,"U")=name set find(node)="" 
 }
 set node=$order(find(""))
 if node'="",node=$order(find(""),-1) set ok=1,nameClass=node
 
 quit ok
	
	
 
  
]]></Routine>
</Export>
