<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="%ZEN.Report.Display.document">
<Description><![CDATA[
The &lt;document&gt; tag is used at the top-level to specify dimensions and
styling for the report. The dimensions only affect the PDF report.]]></Description>
<Super>childrenNode</Super>
<System>4</System>
<TimeCreated>60428,44669.228105</TimeCreated>

<Property name="height">
<Description>
Specifies the height of the document.</Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"11in"</InitialExpression>
</Property>

<Property name="width">
<Description>
Specifies the width of the document.</Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"8.5in"</InitialExpression>
</Property>

<Property name="marginLeft">
<Description>
Specifies the left margin width of the document.</Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"1.25in"</InitialExpression>
</Property>

<Property name="marginRight">
<Description>
Specifies the right margin width of the document.</Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"1.25in"</InitialExpression>
</Property>

<Property name="marginTop">
<Description>
Specifies the top margin of the document. This does not include the
space left for the header.</Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"1in"</InitialExpression>
</Property>

<Property name="marginBottom">
<Description>
Specifies the bottom margin of the document. This does not include the
space left for the footer.</Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"1in"</InitialExpression>
</Property>

<Property name="headerHeight">
<Description><![CDATA[
Specifies the amount of room available for the contents of the &lt;pageheader&gt; tag.]]></Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="footerHeight">
<Description><![CDATA[
Specifies the amount of room available for the contents of the &lt;pagefooter&gt; tag.]]></Description>
<Type>%ZEN.Datatype.length</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="referenceOrientation">
<Description>
value of reference-orientation in XSL-FO region-body</Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="size">
<Description>
size attribute on fo:simple-page-master</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="margin">
<Description>
margin attribute on fo:simple-page-master</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="ifxpath">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="ifexpression">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Properties of fo:region-before

]]></Content>
</UDLText>

<Property name="regionBefore">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Properties of fo:region-after

]]></Content>
</UDLText>

<Property name="regionAfter">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Properties of fo:region-start

]]></Content>
</UDLText>

<Property name="regionStart">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Properties of fo:region-end

]]></Content>
</UDLText>

<Property name="regionEnd">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// extent property 

]]></Content>
</UDLText>

<Property name="regionBeforeExtent">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// extent property 

]]></Content>
</UDLText>

<Property name="regionAfterExtent">
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// display-align property 

]]></Content>
</UDLText>

<Property name="regionBeforeDisplayAlign">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"inherit"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// display-align property 

]]></Content>
</UDLText>

<Property name="regionAfterDisplayAlign">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"after"</InitialExpression>
</Property>

<Property name="regionAfterColor">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="regionBeforeColor">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="method">
<Description>
!!! Добавлено свойство method для возможности формирования FOP описания программно</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// extent property 

]]></Content>
</UDLText>

<Property name="orientation">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"portrait"</InitialExpression>
<Parameter name="VALUELIST" value=",portrait,landscape,none"/>
</Property>

<Method name="%DrawPageToXSLFO">
<Description>
Renders the dimensinos of the page for a PDF report.</Description>
<FormalSpec><![CDATA[&context:%String,&XSL:%GlobalCharacterStream,delay:%GlobalCharacterStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 //!!!
	// Если заполнено свойство method, то вызываем этот метод и выходим 
	If ..method'="" {
		Set XSL2=$zobjmethod(%report,..method,4)
		If $IsObject(XSL2) {
			Do XSL2.Rewind()
			Do XSL.CopyFrom(XSL2)
		}
		Quit $$$OK	
	}
	//!!!
		
	if ..orientation="portrait" Set:..referenceOrientation="" ..referenceOrientation=0
	if ..orientation="landscape" Set:..referenceOrientation="" ..referenceOrientation=90 
	Do XSL.WriteLine("           <fo:simple-page-master master-name='main'")
	if ..size'="" Do XSL.WriteLine("            size='"_..size_"'")
	if ..margin="" Do XSL.WriteLine("            margin-right='"_..marginRight_"'")
	if ..margin="" Do XSL.WriteLine("            margin-left='"_..marginLeft_"'")
	if ..margin="" Do XSL.WriteLine("            margin-top='"_..marginTop_"'")
	if ..margin="" Do XSL.WriteLine("            margin-bottom='"_..marginBottom_"'")
	if ..margin'="" Do XSL.WriteLine("            margin='"_..margin_"'")
	Do XSL.WriteLine("            reference-orientation='"_..referenceOrientation_"'")
	Do XSL.WriteLine("            page-width='"_..width_"' page-height='"_..height_"'>")
	Do XSL.WriteLine("             <fo:region-body margin-bottom='"_..footerHeight_"' margin-top='"_..headerHeight_"'/>")
	;if ..referenceOrientation="" 
	;if ..orientation="portrait" Do XSL.WriteLine("             <fo:region-body margin-bottom='"_..footerHeight_"' margin-top='"_..headerHeight_"' reference-orientation='"_..referenceOrientation_"'/>")
	;if ..orientation="landscape" Do XSL.WriteLine("             <fo:region-body margin-bottom='"_..footerHeight_"' margin-top='"_..headerHeight_"' reference-orientation='"_..referenceOrientation_"'/>")
	;if ..orientation="landscape" Do XSL.WriteLine("             <fo:region-body margin-bottom='"_..marginLeft_"' margin-top='"_..marginRight_"' margin-right='"_..footerHeight_"' margin-left='"_..headerHeight_"' reference-orientation='"_..referenceOrientation_"'/>")
	if (..orientation="landscape") {
		// try to calculate extents
		Set marginsum=""
		if ((..regionBeforeExtent="")||(..regionAfterExtent="")) {
			if (..margin'="") {
				Set marginlength = ..toMilimeters(..margin)
				if (marginlength'="") {
					Set marginsum = 2 * marginlength
				} 
			}
			else {
				Set marginlength1 = ..toMilimeters(..marginBottom)
				Set marginlength2 = ..toMilimeters(..marginTop)
				if (marginlength1'="" && marginlength2'="") {
					Set marginsum = marginlength1 + marginlength2
				}
			}
			Set heightmm=..toMilimeters(..height)
			;if ..regionBeforeExtent="",heightmm'="",marginsum'="" {
			;	Set ..regionBeforeExtent = (heightmm-marginsum)_"mm"
			;}
			;if ..regionAfterExtent="",heightmm'="",marginsum'="" {
			;	Set ..regionAfterExtent = (heightmm-marginsum)_"mm"
			;}
			;if ..regionBeforeExtent="",heightmm'="",marginsum'="" {
			;	Set ..regionBeforeExtent = ..headerHeight
			;}
			;if ..regionAfterExtent="",heightmm'="",marginsum'="" {
			;	Set ..regionAfterExtent = ..footerHeight
			;}

	}
		
	}
	;if ..orientation="landscape" if ..regionBeforeExtent="" quit $$$ERROR($$$GeneralError,"In landscape mode set ..regionBeforeExtent to the difference between the height and both the top and bottom margin")
	;if ..orientation="landscape" if ..regionAfterExtent="" quit $$$ERROR($$$GeneralError,"In landscape mode set ..regionAfterExtent to the difference between the height and both the top and bottom margin")
	Set:..regionBeforeExtent="" ..regionBeforeExtent="0.0pt"
	Set:..regionAfterExtent="" ..regionAfterExtent="0.0pt"
	Do XSL.WriteLine("       		 <fo:region-before extent='"_..regionBeforeExtent_"' display-align='"_..regionBeforeDisplayAlign_"'"_$s(..regionBeforeColor'="":"  background-color='"_..regionBeforeColor_"'",1:"")_" />")
	Do XSL.WriteLine("       		 <fo:region-after extent='"_..regionAfterExtent_"' display-align='"_..regionAfterDisplayAlign_"'"_$s(..regionAfterColor'="":"  background-color='"_..regionAfterColor_"'",1:"")_" />")
	Do XSL.WriteLine("            </fo:simple-page-master>")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%DrawStyleToXSLFO">
<Description><![CDATA[
Outputs the style information contained in its &lt;class&gt; children
for a PDF report.]]></Description>
<FormalSpec><![CDATA[&context:%String,&XSL:%GlobalCharacterStream,delay:%GlobalCharacterStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Generate attribute sets from classes
	Set sc=$$$OK
	d ..tagChildren()	
	Set attsets=##class(%Stream.GlobalCharacter).%New()
	Set includes=##class(%Stream.GlobalCharacter).%New()
	
	Set i=..children.Next("")
	While i'="" {
		Set child=..children.GetAt(i)
		d ..updateFromTemplate(.child)		
		Set child.parent=$$$THIS
		Set child.xpath=..parent.xpath
		#;s ^foobar($i(^foobar),0,"tag")=child.tag
		#;s ^foobar($i(^foobar),0,"classname")=child.%ClassName(1)
		If child.tag="class" {
			Set sc=child.%DrawToXSLFO(.context,.attsets,.delay)
			#;s ^foobar($i(^foobar))="drawing xslfo class"
		} ElseIf child.tag="xslinclude" {
			Set sc=child.%DrawToXSLFO(.context,.includes,.delay)
		} ElseIf (child.tag="template") {
			Set sc=child.%DrawToXSLFO(.context,.attsets,.delay)
		} ElseIf child.%Extends("%ZEN.Report.Display.composite") {
			Set sc=child.%DrawToXSLFO(.context,.attsets,.delay)
		}

		Quit:$$$ISERR(sc)
		Set i=..children.Next(i)
	}
	Do XSL.CopyFrom(includes)
	Do XSL.CopyFrom(attsets)
	Quit sc
]]></Implementation>
</Method>

<Method name="%DrawStyleToHTML">
<Description><![CDATA[
Outputs the style information contained in its &lt;class&gt; children
for an HTML report.]]></Description>
<FormalSpec><![CDATA[&context:%String,&XSL:%GlobalCharacterStream,delay:%GlobalCharacterStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Generate attribute sets from classes
	Set sc=$$$OK
	d ..tagChildren()
	Set CSS=##class(%Stream.GlobalCharacter).%New()
	Set includes=##class(%Stream.GlobalCharacter).%New()

	Set i=..children.Next("")
	While i'="" {
		Set child=..children.GetAt(i)
		d ..updateFromTemplate(.child)		
		Set child.parent=$$$THIS
		Set child.xpath=..parent.xpath
		If child.tag="class" {
			Set sc=child.%DrawToHTML(.context,.CSS,.delay)
		} ElseIf child.tag="cssinclude" {
			Set sc=child.%DrawToHTML(.context,.includes,.delay)
		} ElseIf child.tag="template" {
			Set sc=child.%DrawToHTML(.context,.CSS,.delay)
		} ElseIf child.%Extends("%ZEN.Report.Display.composite") {
			Set sc=child.%DrawToHTML(.context,.CSS,.delay)
		}
		Quit:$$$ISERR(sc)
		Set i=..children.Next(i)
	}

	Do XSL.CopyFrom(includes)
	// we must not generate style tag if CSS is empty because Microsoft Explorer
	// has problem with SAXON output of empty style tags as <style type='text/css'/>
	if (CSS.SizeGet()'=0) {
		Do XSL.WriteLine("<style type='text/css'>")
		Do XSL.CopyFrom(CSS)
		Do XSL.WriteLine("</style>")
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="toMilimeters">
<ClassMethod>1</ClassMethod>
<FormalSpec>length:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// A <number> followed by length units.  Length units are pt, pc in, cm, mm, px, em 
	// (points, picas, inches, centimeters, milimeters, pixels and em-box size)
	Set suffix = $e(length,$L(length)-1,$L(length)) // last two characters
	Set num=$e(length,1,$L(length)-2)
	Set result=$s(suffix="pt":num*127.0/360.0,suffix="pc":num*12.0*127.0/360.0,suffix="in":num*25.4,suffix="cm":10.0*num,suffix="mm":num,suffix="px":"",suffix="em":"",1:"")
	Quit result
]]></Implementation>
</Method>
</Class>


<Class name="%ZEN.Report.Display.focall">
<Description>
Include generated XSLT from another report in this report</Description>
<Super>node</Super>
<System>4</System>
<TimeCreated>61775,35519.946</TimeCreated>

<Property name="method">
<Description>
Name of method that returns an XML stream to include</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Method name="%DrawToXSLFO">
<FormalSpec><![CDATA[&context:%String,&XSL:%GlobalCharacterStream,delay:%GlobalCharacterStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ..%BeginDrawFo(.context,.XSL,.delay)
	Set sc=$$$OK
	Set XSL2=$zobjmethod(%report,..method,4)
	If $IsObject(XSL2) {
		Do XSL2.Rewind()
		Do XSL.CopyFrom(XSL2)
	}
	d ..%EndDrawFo(.context,.XSL,.delay)		
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>
