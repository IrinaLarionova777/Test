<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="JasperWrap.JasperReportTune">
<Super>%RegisteredObject</Super>
<TimeCreated>62712,64225.196694</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//URL for JDBC

]]></Content>
</UDLText>

<Method name="getConnectURL">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 set ns=$zu(5)
 set portSuperServer=..getPortSuperServer()
 quit "jdbc:Cache://127.0.0.1:"_portSuperServer_"/"_ns_"/?username=report&password=report"
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//Port superserver

]]></Content>
</UDLText>

<Method name="getPortSuperServer">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set portSuperServer=""
	try {
       set ns=$zu(5)
       zn "%SYS"
       set confobj=##class(Config.Startup).Open()
       if $IsObject(confobj) set portSuperServer=confobj.DefaultPort
       zn ns
	} catch (exception) {
		set portSuperServer=1972
	}
 quit portSuperServer
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//WebServerPort

]]></Content>
</UDLText>

<Method name="getWebServerPort">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set webServerPort=""
	try {
       set ns=$zu(5)
       zn "%SYS"
       set confobj=##class(Config.Startup).Open()
       if $IsObject(confobj) set webServerPort=confobj.WebServerPort
       zn ns
	} catch (exception) {
		set webServerPort=57772
	}
 quit webServerPort
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//путь к шаблонам jasper отчетов

]]></Content>
</UDLText>

<Method name="getPathFileJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[ quit $get(^Settings("server","pathFileJasperTemplate"),..getDirJasper())
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//путь к рабочей папке Jasper

]]></Content>
</UDLText>

<Method name="getDirJasper">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit $get(^Settings("server","pathWorkJasper"),"c:\work\jasper")
]]></Implementation>
</Method>

<Method name="getNameGateway">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit "JasperGate"
]]></Implementation>
</Method>

<Method name="getPortJasperGateway">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit "7777"
]]></Implementation>
</Method>

<Method name="getTypeFileReport">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ quit $get(^Settings("server","formatJasperReport"),"pdf")
]]></Implementation>
</Method>

<Method name="getPathFileJar">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[ quit ..getDirJasper()_"\jar"
]]></Implementation>
</Method>

<Method name="fillFormats">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 set defaultFormat=$get(^Settings("server","formatJasperReport"))
 kill ^Settings("server","formatJasperReport")
 for i="pdf","xls","docx","xlsx","xml","html","rtf","odt" { set ^Settings("server","formatJasperReport",i)="" }
 if defaultFormat'="" set ^Settings("server","formatJasperReport")=defaultFormat
]]></Implementation>
</Method>

<Query name="queryFormats">
<Description>
Query all departments from refTmp</Description>
<Type>%Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="format:%String"/>
</Query>

<Method name="queryFormatsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if '$data(^Settings("server","formatJasperReport")) do ..fillFormats()
  	set $li(qHandle,1)=""
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryFormatsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryFormatsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryFormatsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryFormatsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set item=$listget(qHandle,1)
	set item=$order(^Settings("server","formatJasperReport",item)) 
	if item="" set Row="",AtEnd=1 quit $$$OK
	set $li(Row,1)=item
	set $li(qHandle,1)=item
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryFormats">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  SET rset=##class(%ResultSet).%New("JasperWrap.JasperReportTune:queryFormats")
  do rset.Execute()
  while rset.Next() { 
     w !,rset.Data("format")
  }	
  do rset.Close()
]]></Implementation>
</Method>
</Class>
</Export>
