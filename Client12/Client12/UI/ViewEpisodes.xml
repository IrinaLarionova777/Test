<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Client12.UI.ViewEpisodes">
<Super>%ZEN.Component.page</Super>
<TimeCreated>63117,49074.166138</TimeCreated>

<XData name="Contents">
<Description>
The contents of these panes are provided by subclasses.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page id="pg" height="100%" 
enclosingClass="height over" 
groupClass="width height" 
xmlns="http://www.intersystems.com/zen" 
xmlns:ZenExt="ZenExt"
>

<pane paneName="formPane"  groupClass="width height"/>

</page>
]]></Data>
</XData>

<XData name="formPane">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane height="100%" width="100%" id="page" xmlns="http://www.intersystems.com/zen" 
title="Настройка видимости отчетов"  xmlns:ZenExt="ZenExt" >
<vgroup groupClass=" height" enclosingClass=" height" height="100%" width="100%">
<spacer height="5" />
<ZenExt:date id="DateFrom" value='' />
<ZenExt:date id="DateTo" value='' />
<!--<radioButton id="Status" optionValue="1"  label="Результаты не введены"/>
<radioButton id="Status" optionValue="2" label="Результаты введены, но не авторизованы"/>
-->
<ZenExt:radioSet id="Status" layout="horizontal" valueList="1,2,3,4" displayList="Результаты не введены,Результаты введены (не авторизованы), Результаты авторизованы, Результаты отправлены в МИС" />
<ZenExt:button id="btFind" caption="Обновить" onclick="zenPage.FindEpisodes()" /> 
<spacer width="5" />

<!--<vgroup height="100%" width="33%" >-->
<pane height="100%" width="33%" id="page1" xmlns="http://www.intersystems.com/zen" 
xmlns:ZenExt="ZenExt" valign="top">
<ZenExt:tablePane
	id="table"
	queryClass="Client12.UI.ViewEpisodes"
	queryName="queryEpisodes"
	valueColumn="Episode"
	initialExecute="false"
	pageSize="1000"
	valign="top"
	height="100%"
	width="100%"
	showZebra="false"
	autoExecute ="false"
	
>
<parameter id="pDateFrom" value='zenPage.getComponentById("DateFrom")'/>
<parameter id="pDateTo" value='zenPage.getComponentById("DateTo")' />
<parameter id="pStatus" value='1' />
<ZenExt:column colName="Episode" />
<ZenExt:column colName="TestSet" header=" " width="5%" />
<ZenExt:column colName="TestSetName" header="Наименование набора тестов"  />
<ZenExt:column colName="datetimeOfEnter" />
<ZenExt:column colName="datetimeOfEnterResults" />
<ZenExt:column colName="datetimeOfAuthorisation" />
<ZenExt:column colName="datetimeOfSendToMIS" />

<condition colName="FlagUse" predicate="EQ" value="1"  rowStyle="background: #E0E0FF;"/>
<!--<condition colName="FlagUse" predicate="EQ" value="1" rowStyle="font-weight: bold;background: #E0E0FF;"/>-->
<condition colName="FlagUse" predicate="EQ" value="2" rowStyle="background: #A0A0F0;"/>
</ZenExt:tablePane>
</pane>
<!--<label  height="1%" value="* - группа частично доступна, ** - группа полностью доступна."  valign="bottom"/>-->
<!--</vgroup>-->


</vgroup>
</pane>
]]></Data>
</XData>

<Method name="FindEpisodes">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//zenPage.getComponentById("parE1").setProperty("value",id) 
	var dateFrom = zen("DateFrom").getValue()
	dateFrom=DateFromStringToHorolog(dateFrom)
	zenPage.getComponentById("pDateFrom").setProperty("value",dateFrom) 
	var dateTo = zen("DateTo").getValue()
	dateTo=DateFromStringToHorolog(dateTo)
	zenPage.getComponentById("pDateTo").setProperty("value",dateTo) 
	var status = zen("Status").getValue()
	zenPage.getComponentById("pStatus").setProperty("value",status) 
	
	zenPage.getComponentById("table").executeQuery()

	//zen("timer").setProperty("timeout",2500)
	//zen("timer").startTimer()
]]></Implementation>
</Method>

<Method name="DateFromStringToHorolog">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	quit $select($get(pDate)'="":$zdh($tr(pDate,".","/"),4),1:0)
]]></Implementation>
</Method>

<Query name="queryEpisodes">
<Description>
Query Episodes 
pStatus = 1 - не введены результаты
pStatus = 2 - введены результаты
pStatus = 3 - авторизованы
pStatus = 4 - результаты отправлены в МИС</Description>
<Type>%Query</Type>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pStatus:%String,refTmp:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="episode:%String,testset:%String,nameTestSet:%String,datetimeOfEnter:%String,datetimeOfEnterResults:%String,datetimeOfAuthorisation:%String,datetimeOfSendToMIS:%String"/>
</Query>

<Method name="queryEpisodesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pDateFrom:%String,pDateTo:%String,pStatus:%String,refTmp:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 s ^test("view")=$g(pDateFrom)_"*"_$g(pDateTo)_"*"_$g(pStatus)
	 if $get(pDateFrom)="" set pDateFrom=+$h
	 if $get(pDateTo)="" set pDateTo=+$h
	 if $get(pStatus)="" set pStatus=1
    if $tr($get(refTmp),$c(0),"")="" set refTmp=$na(^CacheTempEpisodes($j))
	set ok=..GetDataEpisodes(pDateFrom, pDateTo, pStatus, refTmp)
  	set $li(qHandle,1)=""
  	set $li(qHandle,2)=refTmp
  	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryEpisodesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>queryTestSetsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set key=$listget(qHandle,1)
	set refTmp=$listget(qHandle,2)
	set key=$order(@refTmp@(key)) if key="" set Row="",AtEnd=1 quit $$$OK
    set testset=$lg(key,2)
    set rec=$get(@refTmp@(key))
	set $li(Row,1)=$lg(key,1)
	set $li(Row,2)=testset_$select(testset>1:"("_$lg(key,3)_")",1:"")
	set $li(Row,3)=$piece($get(^TTAB("TS",testset)),"\",1)
	set $li(Row,4)=$lg(rec,1)
	set $li(Row,5)=$lg(rec,2)
	set $li(Row,6)=$lg(rec,3)
	set $li(Row,7)=$lg(rec,4)
	set $li(qHandle,1)=key
	set AtEnd=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="queryEpisodesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>queryTestSetsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set refTmp=$listget(qHandle,2) if refTmp'="" k @refTmp
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testqueryEpisodes">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pStatus:%String,refTmp:%String</FormalSpec>
<Implementation><![CDATA[
  if $get(pDateFrom)="" set pDateFrom=+$h
  if $get(pDateTo)="" set pDateTo=+$h
  if $get(pStatus)="" set pStatus=1
  SET rset=##class(%ResultSet).%New("Client12.UI.ViewEpisodes:queryEpisodes")
  set ok=rset.Execute(pDateFrom,pDateTo,pStatus,$get(refTmp))
  if 'ok {
	  do $system.OBJ.DisplayError(ok)
  }
  set cnt=0
  while rset.Next() { 
     w !,rset.Data("episode")," ",rset.Data("testset")," ",rset.Data("nameTestSet")," ",rset.Data("datetimeOfEnter")
     w " ",rset.Data("datetimeOfEnterResults")," ",rset.Data("datetimeOfAuthorisation")
     set cnt=cnt+1
  }	
  do rset.Close()
  write !!,"Записей "_cnt
]]></Implementation>
</Method>

<Method name="GetDataEpisodes">
<Description>
pStatus = 1 - не введены результаты
pStatus = 2 - введены результаты
pStatus = 3 - авторизованы
pStatus = 4 - результаты отправлены в МИС</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateFrom:%String,pDateTo:%String,pStatus:%String,refTmp:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set date=pDateFrom-1 
        for {
	        set date=$order(^TDAY(4,date)) quit:date=""  quit:date>pDateTo  
	        set epis="" 
	        for {
		       set epis=$order(^TDAY(4,date,0,epis)) quit:epis=""  if '$Data(^TEPI(epis)) continue
		       set rec=$get(^TEPI(epis))
               set ts=""
               for {
	              set ts=$o(^TEPI(epis,1,ts)) quit:ts=""  
	              set dep=$e(ts,1) 
                  set tscnt="",cnt=0 
                  for {
	                  set tscnt=$o(^TEPI(epis,1,ts,tscnt),1,rects) quit:tscnt="" 
	                  set orderid=$piece(rects,"\",47)
	                  set dateOfEnter=$piece(rects,"\",1)
	                  set timeOfEnter=$piece(rects,"\",2)*60
	                  set dateOfAuthorization=$piece(rects,"\",4)
	                  set timeOfAuthorization=$piece(rects,"\",5)*60
	                  set dateOfCreation=$piece(rects,"\",21)
	                  set timeOfCreation=$piece(rects,"\",22)*60
	                    
	                  set statusSend=""
	                  if orderid'="" {
		                  set statusSend=$listget($get(^ECUBE("Epis",epis,orderid,ts,tscnt)),2)
	                  }
	                        
		              if (pStatus=4)&&(statusSend'=2) continue
		              if (pStatus=3)&&((dateOfAuthorization="")||(timeOfAuthorization="")) continue
			          if (pStatus=2)&&((dateOfEnter="")||(timeOfEnter="")) continue 
			          if (pStatus=1)&&((dateOfEnter'="")||(timeOfEnter'="")) continue
			          
			          set key=$lb(epis,ts,tscnt)
			          set datetimeOfCreation=$select((dateOfCreation'="")&&(timeOfCreation'=""):$zdt(dateOfCreation_","_timeOfCreation,4),1:"")
			          set datetimeOfEnter=$select((dateOfEnter'="")&&(timeOfEnter'=""):$zdt(dateOfEnter_","_timeOfEnter,4),1:"")
			          set datetimeOfAuthorization=$select((dateOfAuthorization'="")&&(timeOfAuthorization'=""):$zdt(dateOfAuthorization_","_timeOfAuthorization,4),1:"")
			          set @refTmp@(key)=$lb(datetimeOfCreation,datetimeOfEnter,datetimeOfAuthorization,$select(statusSend=2:"Y",1:"N"))   
                  }
               }
	        }
        }
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>
</Class>
</Export>
