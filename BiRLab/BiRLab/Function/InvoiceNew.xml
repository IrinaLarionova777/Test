<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="BiRLab.Function.InvoiceNew">
<Super>%RegisteredObject</Super>
<TimeCreated>62816,37157.185162</TimeCreated>

<Method name="GetPriceEpisodeItem">
<Description><![CDATA[
input:
  pEpisode - номер эпизода from EP_VisitNumber->EPVIS_VisitNumber
  pItem - EP_VisitTestSet - >VISTS_TestSet_DR
  pDate - дата, на которую ищем цену
output: 
  price As %String (может быть "")
  pCito - 
  pError - если все хорошо, то пусто, иначе - строка с описанием ошибки]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pItem:%String,pTestSet:%String="",pTestsetNpp:%String="1",pDate:%String,&pCito:%String,pPayer:%String="",pHospital:%String,pPaymentCategory:%String="",pPriceListVersion:%String="",&pPrice:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1,pPrice="",pCito=""
	try {
		if pTestSet="" set pTestSet=pItem

		// смотрим, входит ли эпизод в выставленный счет
        set cito="",flagFinalPrice=0
        $$$ThrowOnError(..GetFinalPrice(pEpisode,pItem,pTestSet,pTestsetNpp,.cito,.flagFinalPrice,.price))
        
	    if (flagFinalPrice=1) {
		      set pCito=cito
		      set pPrice=price
		      quit 
	    }
	    
    	$$$ThrowOnError(..GetPrice(pPayer, pHospital, pPaymentCategory, pItem, pDate, pCito, pPriceListVersion, .pPrice ))
	} 
	catch(exception) {
		set pPrice=""
		set pCito=""
		set ok=exception.AsStatus()
		do ##class(TCLEx.Function.General).WriteError($ze,"BiRLab.Function.Invoice:GetPriceEpisodeItem: episode="_$get(pEpisode)_", item="_$get(pItem)_", date="_$get(pDate))
	} 
	quit ok
]]></Implementation>
</Method>

<Method name="GetPrice">
<Description><![CDATA[
input:
  pPayer - код плательщика (BiRLab_Data.Episode->Payer->Code)
  pHospital -код ЛПУ (BiRLab_Data.Episode->Hospital->Code)
  pPaymentCategory - код категории (BiRLab_Data.Episode->PaymentCategory->Code)
  pItem - 
  pDate - дата, на которую ищем цену
  pCito - 
output: 
  price As %String (может быть "")
  pError - если все хорошо, то пусто, иначе - строка с описанием ошибки]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pPayer:%String,pHospital:%String,pPaymentCategory:%String,pItem:%String,pDate:%String,pCito:%String,pPriceListVersionId:%String="",pHospitalPayerCategoryVersion:%String="",&pPrice:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1,pPrice=""
	try {
		if (pPriceListVersionId="")||(pHospitalPayerCategoryVersion="") {
			$$$ThrowOnError(..GetPriceList(pPayer,pHospital,pPaymentCategory,pDate,.pPriceListVersionId,.pHospitalPayerCategoryVersion))
		    if (pHospitalPayerCategoryVersion="")||(pPriceListVersionId="") {
			   quit
		    }
		}
		/*
		if ##class(BiRLab.CT.HospitalPaymentCategoryVersionNotSupported).NoSupported(idHPCV,pItem) {
			set pPrice=0
			quit
		}*/
		
		set pPrice = ##class(BiRLab.CT.PriceListVersionDetails).GetPrice(pPriceListVersionId,pItem) 
		 
		set coef = ##class(BiRLab.CT.HospitalPaymentCategoryVersionPriority).GetCito(pHospitalPayerCategoryVersion,pCito)
		if pCito'="",+coef set pPrice = pPrice*coef
	} 
	catch(exception) {
		set pPrice=""
		set ok=exception.AsStatus()
	}  
	quit ok
]]></Implementation>
</Method>

<Method name="GetPriceList">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pPayer:%String,pHospital:%String,pPaymentCategory:%String,pDate:%String,&pPriceListVersionId:%String,&pHospitalPaymentCategoryVersionId:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1,pPriceListVersionId="",pHospitalPaymentCategoryVersionId=""
	try {
		
		set pHospitalPaymentCategoryVersionId=##class(BiRLab.CT.HospitalPaymentCategory).GetVersionPrice2(pPayer,pHospital,pPaymentCategory,pDate)
		if pHospitalPaymentCategoryVersionId="" quit
		
		set pricelistid="" 
		&sql(select PriceList->ID into :pricelistid from BiRLab_CT.HospitalPaymentCategoryVersion where ID=:pHospitalPaymentCategoryVersionId)
		if (SQLCODE'=0)||(pricelistid="") quit
		
		set pPriceListVersionId = ##class(BiRLab.CT.PriceList).GetVersionPriceV2(pricelistid,pDate)
		  
	} catch(exception) {
		set pPriceListVersionId=""
		set pHospitalPaymentCategoryVersionId=""
		set ok=$System.Status.GetErrorText(exception.AsStatus())
	}  
	quit ok
]]></Implementation>
</Method>

<Method name="GetFinalPrice">
<Description><![CDATA[
input:
  pEpisode - номер эпизода from BiRLab_Data.Episode->Episode (EP_VisitNumber->EPVIS_VisitNumber)
   pItem - EP_VisitTestSet - >VISTS_TestSet_DR (для обычных наборов тестов (не из супернабоа) или код супернабора
output: 
  price As %String (может быть "")
  pCito - 
  pError - если все хорошо, то пусто, иначе - строка с описанием ошибки]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,pItem:%String,pTestSet:%String,pTestSetCounter:%String,&pCito:%String,&pFlagFinalPrice:%Boolean,&pPrice:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1,pPrice="",pFlagFinalPrice=0
	try {
	    &sql(select Amount,Cito into :price,:cito from BiRLab_Data.InvoiceEpisodeItem
           where EpisodeItem->Episode->Episode=:pEpisode 
           and Item=:pItem 
           and Status=1 and InvoiceEpisode->Invoice->Status<>6
	    )
	           
        if (SQLCODE=0) {
	          set pPrice=price
		      set pCito=cito
		      set pFlagFinalPrice=1
		      quit 
	 	}
	 	
	 	set flagSupressBilling=$piece($get(^TEPI(pEpisode,1,pTestSet,pTestSetCounter)),"\",34)
	 	if flagSupressBilling="Y" {
		 	set pPrice=0
		 	set pFlagFinalPrice=1
	 	}
	 	 
	} catch(exception) {
		set pPrice=""
		set pFlagFinalPrice=0
		set ok=exception.AsStatus()
	}  
	quit ok
]]></Implementation>
</Method>

<Method name="GetPaymentCategory">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPayer:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
   quit 1
]]></Implementation>
</Method>

<Method name="FindEpisodeImport">
<Description>
Найти эпизод в заимпорченных в Бирлаб эпизодах, если найден, то вернуть строку с информацией
Если эпизод заимпорчен, то pInfoEpisode'=""</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pEpisode:%String,&pInfoEpisode:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=1,pInfoEpisode=""
	try {
			
	    &sql(select Payer->Code,Hospital->Code,PaymentCategory->Code,CITO,DateOfAuthorization,DateOfCreation
	         into :codePayer,:codeHospital,:codePaymentCategory,:citoEpis,:dateOfAuthorization,:dateOfCreation
	         from BiRLab_Data.Episode where (Episode=:pEpisode) 
	    )
	    
	    if (SQLCODE=0) {
		    set pInfoEpisode=$listbuild(codePayer,codeHospital,codePaymentCategory,citoEpis,dateOfAuthorization,dateOfCreation)
		    quit
	    }
	} catch(e) {
		set ok=e.AsStatus() 
	}
	quit ok
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// end class

]]></Content>
</UDLText>
</Class>
</Export>
