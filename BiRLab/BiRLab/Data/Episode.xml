<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="BiRLab.Data.Episode">
<Description>
Эпизод</Description>
<Super>%Persistent,%ZEN.DataModel.Adaptor,%IndexBuilder</Super>
<TimeCreated>62294,51539.161196</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Episode">
<Description>
Эпизод</Description>
<Type>%String</Type>
</Property>

<Property name="CurrentInvoiceEpisode">
<Type>BiRLab.Data.InvoiceEpisode</Type>
</Property>

<Property name="DateOfCreation">
<Description>
Дата создания</Description>
<Type>BiRLab.dt.Date</Type>
</Property>

<Property name="DateOfAuthorization">
<Description>
Дата авторизации</Description>
<Type>BiRLab.dt.Date</Type>
</Property>

<Property name="Status">
<Description>
Статус ??? Создан, Частично выполнен, Выполнен</Description>
<Type>BiRLab.CT.EpisodeStatus</Type>
</Property>

<Property name="Hospital">
<Description>
ЛПУ</Description>
<Type>BiRLab.CT.Hospital</Type>
</Property>

<Property name="Payer">
<Description>
Плательщик</Description>
<Type>BiRLab.CT.Payer</Type>
</Property>

<Property name="PaymentCategory">
<Description>
Категория оплаты </Description>
<Type>BiRLab.CT.PaymentCategory</Type>
</Property>

<Property name="CITO">
<Description>
Коэффициент CITO</Description>
<Type>BiRLab.CT.Priority</Type>
</Property>

<Property name="InsuranceCompany">
<Description>
Страховая компания</Description>
<Type>%String</Type>
</Property>

<Property name="InsuranceSeries">
<Description>
Серия страхового полиса</Description>
<Type>%String</Type>
</Property>

<Property name="InsuranceNumber">
<Description>
Номер страхового полиса</Description>
<Type>%String</Type>
</Property>

<Property name="Surname">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>s {Surname}=##class(BiRLab.Data.Episode).GetFam({Episode})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Name">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>s {Name}=##class(BiRLab.Data.Episode).GetNam({Episode})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="FatherName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>s {FatherName}=##class(BiRLab.Data.Episode).GetFat({Episode})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Items">
<Type>BiRLab.Data.EpisodeItem</Type>
<Cardinality>many</Cardinality>
<Inverse>Episode</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="EpisodeIndex">
<Properties>Episode</Properties>
<Unique>1</Unique>
</Index>

<Index name="SurnameIndex">
<Properties>Surname</Properties>
</Index>

<Index name="NameIndex">
<Properties>Name</Properties>
</Index>

<Index name="FatherNameIndex">
<Properties>FatherName</Properties>
</Index>

<Index name="DateOfCreationIndex">
<Properties>DateOfCreation</Properties>
</Index>

<Index name="DateOfAuthorizationIndex">
<Type>bitmap</Type>
<Properties>DateOfAuthorization</Properties>
</Index>

<Index name="HospitalIndex">
<Type>bitmap</Type>
<Properties>Hospital</Properties>
</Index>

<Index name="PayerIndex">
<Type>bitmap</Type>
<Properties>Payer</Properties>
</Index>

<Index name="CurrentInvoiceEpisodeIndex">
<Type>bitmap</Type>
<Properties>CurrentInvoiceEpisode</Properties>
</Index>

<Method name="GetFam">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEp</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(User.EPVisitNumber).%OpenId(pEp)
	quit:'$IsObject(obj) ""
	quit obj.EPVISSurname
]]></Implementation>
</Method>

<Method name="GetNam">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEp</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(User.EPVisitNumber).%OpenId(pEp)
	quit:'$IsObject(obj) ""
	quit obj.EPVISGivenName
]]></Implementation>
</Method>

<Method name="GetFat">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEp</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(User.EPVisitNumber).%OpenId(pEp)
	quit:'$IsObject(obj) ""
	quit obj.EPVISName1
]]></Implementation>
</Method>

<Method name="EpisodeImport">
<Description>
Импорт эпизодов и услуг эпизодов за период 
дата в формате "01.01.2012"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pdts,pdtpo,pHosp,pBuf</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 set @pBuf@("CntEpisode")=0
 set @pBuf@("End")=0
 set dts=##class(BiRLab.Utils.Date).Hor(pdts)
 set dtpo=##class(BiRLab.Utils.Date).Hor(pdtpo)
 set pHosp=$G(pHosp)
 // какие эпизоды импортить Авторизованные или частично авторизованные
 //set importP=##class(BiRLab.Data.Settings).%OpenId(1).ImportEpisode.Authorization
 set importDate=##class(BiRLab.Data.Settings).%OpenId(1).ImportEpisode.DateImport
 if importDate=0 set dts=dts-21
 // если импорт по дате авторизации эпизода, необходимо выбрать эпизоды, у которых нет неавторизованных
 // иди не отмененных наборов и нет наборов, которые авторизованы после окончания периода
  // собираем данные из ЛИС
 set sql="SELECT EPVIS_VisitNumber as number, EPVIS_DateOfEntry as dateEntry, "
 set sql=sql_"EPVIS_HospitalCode_DR as lpu, "
 set sql=sql_" EPVIS_PriorityCode_DR as priorityE, EPVIS_PaymentCode_DR as payment, "
 set sql=sql_" EPVIS_Extra9 as insurance, EPVIS_Extra10 as insuranceS, EPVIS_Extra11 as insuranceN"
 set sql=sql_" FROM SQLUser.EP_VisitNumber A "
 set sql=sql_" WHERE EPVIS_DateOfEntry>='"_dts_"' and EPVIS_DateOfEntry<='"_dtpo_"' and "
 if importDate=0 
 	{set sql=sql_" NOT EXISTS (select * from SQLUser.EP_VisitTestSet B where "
 	 set sql=sql_"A.EPVIS_VisitNumber=B.VISTS_ParRef and B.VISTS_DateOfReason is null "
 	 set sql=sql_"and B.VISTS_DateOfAuthorisation is null) and "
	}
 set sql=sql_" (EPVIS_DateOfPricing is null or EPVIS_DateOfPricing='') and"
 set sql=sql_" EPVIS_HospitalCode_DR IN ("_pHosp_")"
 set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
 ;zw sql
 ;quit $$$OK
 set sc=rs.Prepare(sql)
 set sc=rs.Execute()
 while (rs.%Next()) {
		set number = rs.%Get("number")
		set dateEntry= rs.%Get("dateEntry")
		set lpu=rs.%Get("lpu")
		set priorityE=rs.%Get("priorityE")
		set payment=rs.%Get("payment")
	    set insurance=rs.%Get("insurance")
	    set insuranceS=rs.%Get("insuranceS")
	    set insuranceN=rs.%Get("insuranceN")
		if payment="" set payment=##class(BiRLab.CT.PayerHospital).GetPayerByHospital(lpu)
		if $D(@pBuf@("StopProcess")) quit
		set stat= ..GetEpisodeStatus($G(number))
        If number'="" D NEWEPISODE
	    set @pBuf@("CntEpisode")=$G(@pBuf@("CntEpisode"))+1
 }
 set @pBuf@("End") = 1
 quit $$$OK

 //новый эпизод
NEWEPISODE 
 // если такой эпизод уже есть, надо обновить данные
 // если есть эпизод в счете, эту строчку можно будет убрать, когда начнем блокировать эпизоды 
 // в ЛИС при выставлении счетов
 //Q:##class(BiRLab.Data.InvoiceEpisode).YesEpisode(number)'=""
 set obj=..GetIdEpisode(number)
 set obj.Episode =$G(number)
 set obj.DateOfCreation =$G(dateEntry)
 set obj.DateOfAuthorization =$P(stat,",",2)
 do obj.StatusSetObjectId($P(stat,","))
 do obj.HospitalSetObjectId(lpu)
 do obj.PayerSetObjectId(payment)
 do obj.PaymentCategorySetObjectId(1)
 if priorityE="U" do obj.CITOSetObjectId("U")
 // данные страхового полиса
 set obj.InsuranceCompany=$G(insurance)
 set obj.InsuranceSeries=$G(insuranceS)
 set obj.InsuranceNumber=$G(insuranceN)
 set ok = obj.%Save()
 set idE=obj.%Id()
 D IMPORTITEMS(number,idE)
 set ok=obj.%Close()
 Q

 // импорт услуг эпизода
 //!!!!! добавить проверку, добавлять услуги, к которым привязан данный набор тестов
IMPORTITEMS(number,idE)
 &sql(DECLARE EpisodeItems CURSOR FOR
 SELECT VISTS_RowId,VISTS_ParRef,VISTS_TestSet_DR,VISTS_Priority_DR,VISTS_StatusResult,
 VISTS_SupressBilling,VISTS_DateOfReason,VISTS_DateOfAuthorisation,VISTS_DateOfCreation,VISTS_SuperSet_DR
 INTO :idTestSet,:itemParRef, :testset, :priority, :itemstatus,
 :supressbilling, :dtreason,:dtauthorisation, :dtcreation, :superset
 FROM SQLUser.EP_VisitTestSet
 WHERE VISTS_ParRef=:number)
 &sql(OPEN EpisodeItems)
 &sql(FETCH EpisodeItems)
 set listTestSet=""
    While (SQLCODE = 0) {
	     set supers=0
	     set:superset'="" supers=testset[superset
	     if (superset="")||(supers=1) {
	     	// импортирована ли эта услуга, или новая
	     	set item=testset
	     	set:superset'="" item=superset
            // если есть возможность удалять из счета отдельные услуги
            //if ##class(BiRLab.Data.InvoiceEpisode).YesEpisodeItem(number,testset)'="" &sql(FETCH EpisodeItems) continue
 	     	set stat=1
 		 	set dtst=dtcreation
 		 	if dtauthorisation'="" {
 		 		set stat=2
 		  		set dtst=dtauthorisation
 		 		}
 		 	if dtreason'="" {
 		 		set stat=3
 		  		set dtst=dtreason
 		 		}
 	     	//определить список услуг, к которым привязан данный набор тестов
 	     	set ok=..EditEpisodeItems(obj,number,item,idTestSet,dtst,stat,priority,supressbilling)
 	     	if listTestSet'="" set listTestSet=listTestSet_","
 	     	set listTestSet=listTestSet_idTestSet
 	     	}
	     &sql(FETCH EpisodeItems)
    }
    &sql(CLOSE EpisodeItems)
    do FINDDELETEDITEM(number,listTestSet)
 Q
 // Поиск услуг, которые были удалены в ЛИС (актуально для повтороного импорта)
FINDDELETEDITEM(number,listTestSet)
    set sql="select ID as id from BiRLab_Data.EpisodeItem "
	set sql=sql_"where Episode->Episode='"_number_"' and Item NOT IN ("_listTestSet_")"
    set rsf=##class(%ResultSet).%New("%DynamicQuery:SQL")
 	set sc=rsf.Prepare(sql)
 	set sc=rsf.Execute()
 	while (rsf.%Next()) {
		set id = rsf.%Get("id")
	    do ##class(BiRLab.Data.EpisodeItem).%DeleteId(id)  
   	}
  Q
]]></Implementation>
</Method>

<Method name="GetEpisodeStatus">
<Description>
Определение статуса эпизода
Если не автаризован ни один набор тестов, то эпизод "Создан"
Если автвризованы не все наборы тестов, эпизод "Частично выполнен"
Если автаризованы все наборы тестов, эпизод "Выполнен" Дата авторизаии эпизода 
Дата авторизаии эпизода- максимальная дата авторизации наборов тестов
Возвращает сроку "Id статуса_","_Дата авторизации"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Number</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 If $G(Number)="" Q ""
 S stat=1 
 &sql(DECLARE StatusEpisode CURSOR FOR
 SELECT VISTS_ParRef,VISTS_DateOfAuthorisation, VISTS_DateOfReason, 
 max(VISTS_DateOfReason),max(VISTS_DateOfAuthorisation)
 INTO :id,:dt,:dtreason,:maxdtreason,:maxdt
 FROM SQLUser.EP_VisitTestSet
 WHERE VISTS_ParRef=:Number)
 &sql(OPEN StatusEpisode)
 &sql(FETCH StatusEpisode)
 S fl=""
 S dat=maxdt
 S:maxdtreason>maxdt dat=maxdtreason
 While (SQLCODE = 0) {
       S:(dt'="")||(dtreason'="") stat=2
       if (dt="")&&(dtreason="") s fl=1
         
       &sql(FETCH StatusEpisode)
    }
 &sql(CLOSE StatusEpisode)
 S:(stat=2)&&(fl="") stat=3
 S:stat=2 dat=""
 S stat=stat_","_dat
 Q stat
]]></Implementation>
</Method>

<Method name="GetIdEpisode">
<Description>
определяет Id эпизода </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNumber</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE IdEpisode CURSOR FOR
	select ID into :id from BiRLab_Data.Episode where Episode=:pNumber
	)
	&sql(OPEN IdEpisode)
    &sql(FETCH IdEpisode)
    set:SQLCODE=0 code=##class(BiRLab.Data.Episode).%OpenId(id)
    set:SQLCODE'=0 code=##class(BiRLab.Data.Episode).%New()
	&sql(CLOSE IdEpisode)
    quit code
]]></Implementation>
</Method>

<Method name="GetIdEpisodeItem">
<Description>
определяет Id услуги в эпизоде </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpisode,pIdTestSet,pItem</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE IdEpisodeItem CURSOR FOR
	select ID into :id 
	from BiRLab_Data.EpisodeItem 
	where Episode->Episode=:pEpisode and IdEPVisitTestSet=:pIdTestSet and Item=:pItem 
	)
	&sql(OPEN IdEpisodeItem)
    &sql(FETCH IdEpisodeItem)
    set:SQLCODE=0 code=##class(BiRLab.Data.EpisodeItem).%OpenId(id)
    set:SQLCODE'=0 code=##class(BiRLab.Data.EpisodeItem).%New()
	&sql(CLOSE IdEpisodeItem)
    quit code
]]></Implementation>
</Method>

<Method name="EditEpisodeItems">
<Description>
Обновляем услуги эпизода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj,pEpisode,pTestSet,pidTestSet,pDt,pStat,pPriority,pSupressBilling</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	// услуги, которые привязаны к данному набору тестов
  	&sql(DECLARE IdItems CURSOR FOR
    select Code into :id 
	from BiRLab_CT.Item 
	where CodeLIS=:pTestSet 
	    )
	&sql(OPEN IdItems)
    &sql(FETCH IdItems)
    If SQLCODE'=0 &sql(CLOSE IdItems) quit $$$OK
    While (SQLCODE = 0) {
       	set objI =..GetIdEpisodeItem(pEpisode,pidTestSet,id)
       	do objI.ItemSetObjectId(id)
 		set objI.Episode=pObj
 		set objI.IdEPVisitTestSet=pidTestSet
 		set objI.DateTimeOfChangeStatus=pDt 
       	do objI.StatusSetObjectId(pStat)
       	if pPriority="U" do objI.CITOSetObjectId("U")
       	set objI.SupressBilling=0
       	if pSupressBilling="Y" set objI.SupressBilling=1
       	set rez = objI.%Save()
       	set ok=objI.%Close()
		&sql(FETCH IdItems)
    
	}
	&sql(CLOSE IdItems)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSql">
<ClassMethod>1</ClassMethod>
<FormalSpec>P1,P2,P3,P4,P5,P6,P7,P8,P9</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set:P6'="" P6 = ##class(BiRLab.Utils.Date).Hor(P6)
	set:P7'="" P7 = ##class(BiRLab.Utils.Date).Hor(P7)
	set:P8'="" P8 = ##class(BiRLab.Utils.Date).Hor(P8)
	set:P9'="" P9 = ##class(BiRLab.Utils.Date).Hor(P9)
	set sql="SELECT %ID, Episode, Surname ||' '|| coalesce(Name,'') ||' '|| coalesce(FatherName,'') as fio,  "
	set sql=sql_" DateOfCreation, DateOfAuthorization "
	set sql=sql_" from BirLab_Data.Episode"
	set where=" where "
	if P1'="" set where=where_" Episode LIKE '"_P1_"%' and "
	if P2'="" set where=where_" Episode ='"_P2_"' and "
	if P3'="" set where=where_" Surname LIKE '%"_P3_"%' and "
	if P4'="" set where=where_" Name LIKE '%"_P4_"%' and "
	if P5'="" set where=where_" Hospital='"_P5_"' and "
	if P6'="" set where=where_" DateOfCreation>='"_P6_"' and "
	if P7'="" set where=where_" DateOfCreation<='"_P7_"' and "
	if P8'="" set where=where_" DateOfAuthorization>='"_P8_"' and "
	if P9'="" set where=where_" DateOfAuthorization<='"_P9_"' and "
	set where=where_" Status =3 and BiRLab.SqlProc_noInvEp(Episode)=1 and "
	;
	set rs = ##class(%ResultSet.SQL).%New()
	if where=" where" set where=""
	set sql=sql_where
	set:sql[" and" $E(sql,$L(sql)-4,$L(sql)-1)=""
	;s ^tmp=sql
	quit sql
]]></Implementation>
</Method>

<Method name="FetchRS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRS:%ResultSet,rez,params</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	set id = pRS.%GetData(1)
	set ep = pRS.%GetData(2)
	set fio = pRS.%GetData(3)
	set dc = pRS.%GetData(4)
	set da = pRS.%GetData(5)
	set sum = ##class(BiRLab.UI.findEpisode).GetSumEpisode(,id,0)
	set:sum'="" sum = $FN(sum,"",2)

	set lb = $LB(id,ep,fio,dc,da,sum)
	;s ^tmp(1)=lb
	quit lb
]]></Implementation>
</Method>

<Query name="findRS">
<Description>
Запрос для таблицы поиска </Description>
<Type>%Query</Type>
<FormalSpec>P1:%String,P2:%String,P3:%String,P4:%String,P5:%String,P6:%String,P7:%String,P8:%String,P9:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%String,Episode:%String,FIO:%String,DateReg:%String,DateAuth:%String,Sum:%String"/>
</Query>

<Method name="findRSExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,P1:%String,P2:%String,P3:%String,P4:%String,P5:%String,P6:%String,P7:%String,P8:%String,P9:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res
	Set qHandle=""
	
	set:P6'="" P6 = ##class(BiRLab.Utils.Date).Hor(P6)
	set:P7'="" P7 = ##class(BiRLab.Utils.Date).Hor(P7)
	set:P8'="" P8 = ##class(BiRLab.Utils.Date).Hor(P8)
	set:P9'="" P9 = ##class(BiRLab.Utils.Date).Hor(P9)
	set sql="SELECT %ID, Episode, Surname ||' '|| coalesce(Name,'') ||' '|| coalesce(FatherName,'') as fio,  "
	set sql=sql_" DateOfCreation, DateOfAuthorization "
	set sql=sql_" from BirLab_Data.Episode"
	set where=" where "
	if P1'="" set where=where_" Episode LIKE '"_P1_"%' and "
	if P2'="" set where=where_" Episode ='"_P2_"' and "
	if P3'="" set where=where_" Surname LIKE '%"_P3_"%' and "
	if P4'="" set where=where_" Name LIKE '%"_P4_"%' and "
	if P5'="" set where=where_" Hospital='"_P5_"' and "
	if P6'="" set where=where_" DateOfCreation>='"_P6_"' and "
	if P7'="" set where=where_" DateOfCreation<='"_P7_"' and "
	if P8'="" set where=where_" DateOfAuthorization>='"_P8_"' and "
	if P9'="" set where=where_" DateOfAuthorization<='"_P9_"' and "
	set where=where_" Status =3 and BiRLab.SqlProc_noInvEp(Episode)=1 and "
	;
	set rs = ##class(%ResultSet.SQL).%New()
	if where=" where" set where=""
	set sql=sql_where
	set:sql[" and" $E(sql,$L(sql)-4,$L(sql)-1)=""
	;s ^tmp=sql
	set rs=##class(%ResultSet.SQL).%Prepare(sql)
	quit:'rs ""
	
	while (rs.%Next()) {
		set id = rs.%GetData(1)
		set ep = rs.%GetData(2)
		set fio = rs.%GetData(3)
		set dc = rs.%GetData(4)
		set da = rs.%GetData(5)
	
		set lb = $LB(id,ep,fio,dc,da)
		Set ^||res(id)=lb
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="findRSClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>findRSExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="findRSFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>findRSExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit:'$D(^||res) $$$OK
	Set qHandle=$Order(^||res(qHandle))
	If qHandle="" Set AtEnd=1,Row="" Quit $$$OK
	Set Row=$G(^||res(qHandle))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CurrentInvoiceEpisode">
<Description>
прописать значение CurrentInvoiceEpisode
do ##class(BiRLab.Data.Episode).CurrentInvoiceEpisode(id,val)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pId,pVal=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%OpenId(pId)
	quit:'$IsObject(obj) ""
	if pVal="" {
		set obj.CurrentInvoiceEpisode = ""
	} else {
		do obj.CurrentInvoiceEpisodeSetObjectId(pVal)
	}
	quit obj.%Save()
]]></Implementation>
</Method>

<Method name="ClearCurInvEp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdInv</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;При аннулировании счета очистить свойство CurrentInvoiceEpisode для всех Invoice->InvoiceEpisode->Episode
	&sql(declare cClearCurInvEp cursor for 
	 	select ID,Episode
	 	into :id,:ep
		from BiRLab_Data.InvoiceEpisode
		where Invoice=:pIdInv
		)
	 &sql(OPEN cClearCurInvEp)
	 for {
		 &sql(FETCH cClearCurInvEp)
		 quit:SQLCODE
		 do ##class(BiRLab.Data.Episode).CurrentInvoiceEpisode(ep)
	 }
	 &sql(CLOSE cClearCurInvEp)
	quit $$$OK
]]></Implementation>
</Method>

<Trigger name="Episodeafterupdate">
<Code>	do ..ProcessingTrigger({ID},0)</Code>
<Event>UPDATE</Event>
<Order>1</Order>
<Time>AFTER</Time>
</Trigger>

<Trigger name="Episodeafterinsert">
<Code>	do ..ProcessingTrigger({ID},0)</Code>
<Event>INSERT</Event>
<Order>1</Order>
<Time>AFTER</Time>
</Trigger>

<Trigger name="Episodebeforedelete">
<Code>    do ..ProcessingTrigger({ID},1)</Code>
<Event>DELETE</Event>
<Order>1</Order>
</Trigger>

<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[    quit ..ProcessingTrigger(..%Id(),0)
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set info=""
		set id=$listget(oid,1)
		set ok=..ProcessingTrigger(id,1)
	} catch(e) {
		set ok=e.AsStatus()
		do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_":"_"%OnDelete id="_$get(id))
	}
	quit ok
]]></Implementation>
</Method>

<Method name="ProcessingTrigger">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String="",pFlagDelete:%Boolean="N"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
			set obj=##class(BiRLab.Data.Episode).%OpenId(pId)
			set episode=""
			if $IsObject(obj) {
				set episode=obj.Episode
			}
			if (episode'="") {
				set ok=##class(TCLEx.BI.BuildIndices).BIClassChange("TCLEx.Data.EPVisitNumberExt",episode,0)
		    }
	} catch(e) {
		set ok=e.AsStatus()
		do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_":"_"ProcessingTrigger id="_$get(pId))
	}
	quit ok
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^BiRLab.Data.EpisodeD</DataLocation>
<DefaultData>EpisodeDefaultData</DefaultData>
<IdLocation>^BiRLab.Data.EpisodeD</IdLocation>
<IndexLocation>^BiRLab.Data.EpisodeI</IndexLocation>
<StreamLocation>^BiRLab.Data.EpisodeS</StreamLocation>
<Data name="EpisodeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Episode</Value>
</Value>
<Value name="3">
<Value>DateOfCreation</Value>
</Value>
<Value name="4">
<Value>DateOfAuthorization</Value>
</Value>
<Value name="5">
<Value>Status</Value>
</Value>
<Value name="6">
<Value>PaymentCategory</Value>
</Value>
<Value name="7">
<Value>Hospital</Value>
</Value>
<Value name="8">
<Value>Payer</Value>
</Value>
<Value name="9">
<Value>CITO</Value>
</Value>
<Value name="10">
<Value>IdEPVisitTestSet</Value>
</Value>
<Value name="11">
<Value>InsuranceCompany</Value>
</Value>
<Value name="12">
<Value>InsuranceSeries</Value>
</Value>
<Value name="13">
<Value>InsuranceNumber</Value>
</Value>
<Value name="14">
<Value>CurrentInvoiceEpisode</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
</Property>
<Property name="CITO">
</Property>
<Property name="DateOfAuthorization">
</Property>
<Property name="DateOfCreation">
</Property>
<Property name="FatherName">
</Property>
<Property name="Hospital">
</Property>
<Property name="InsuranceCompany">
</Property>
<Property name="InsuranceNumber">
</Property>
<Property name="InsuranceSeries">
</Property>
<Property name="Name">
</Property>
<Property name="Payer">
</Property>
<Property name="PaymentCategory">
</Property>
<Property name="Status">
</Property>
<Property name="Surname">
</Property>
<SQLMap name="$Episode">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="DateOfAuthorizationIndex">
<BlockCount>-6876</BlockCount>
</SQLMap>
<SQLMap name="DateOfCreationIndex">
<BlockCount>-5112</BlockCount>
</SQLMap>
<SQLMap name="EpisodeIndex">
<BlockCount>-7532</BlockCount>
</SQLMap>
<SQLMap name="FatherNameIndex">
<BlockCount>-5172</BlockCount>
</SQLMap>
<SQLMap name="HospitalIndex">
<BlockCount>-2384</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-28296</BlockCount>
</SQLMap>
<SQLMap name="NameIndex">
<BlockCount>-5088</BlockCount>
</SQLMap>
<SQLMap name="PayerIndex">
<BlockCount>-2396</BlockCount>
</SQLMap>
<SQLMap name="SurnameIndex">
<BlockCount>-5816</BlockCount>
</SQLMap>
</Storage>
</Class>
</Export>
