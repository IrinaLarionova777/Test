<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="BiRLab.CT.HospitalPaymentCategoryVersionPriority">
<Description>
Коэффициенты CITO для категории оплаты</Description>
<Super>%Persistent,%ZEN.DataModel.Adaptor</Super>
<TimeCreated>62287,53960.575648</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Priority">
<Description>
Тип срочности</Description>
<Type>BiRLab.CT.Priority</Type>
</Property>

<Property name="Coef">
<Description>
Значение коэффициента</Description>
<Type>%Float</Type>
</Property>

<Property name="HospitalPaymentCategoryVersion">
<Description>
Категория оплаты Прайс-Листа</Description>
<Type>BiRLab.CT.HospitalPaymentCategoryVersion</Type>
<Cardinality>parent</Cardinality>
<Inverse>Priorities</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="HospitalPaymentCategoryVersionIndex">
<Properties>HospitalPaymentCategoryVersion</Properties>
</Index>

<Index name="PriorityIndex">
<IdKey>1</IdKey>
<Properties>Priority</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetCito">
<Description>
Значение коэф. срочности</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pHospitalPaymentCategoryVersion,pPriority</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	&sql(
		 select Coef
		 	into :сoef
		 from BiRLab_CT.HospitalPaymentCategoryVersionPriority
		 where HospitalPaymentCategoryVersion=:pHospitalPaymentCategoryVersion
		 	and Priority=:pPriority
		)
	if (SQLCODE'=0) quit ""
	quit сoef
]]></Implementation>
</Method>

<Method name="MySave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVersId,pCoef,pCoefVal,pId=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ..%ExistsId(pId) {
		set obj = ..%OpenId(pId)
		set:$G(pCoefVal) obj.Coef = pCoefVal
		;s ^tmp=obj_"!"_pVersId
	} else {
		set obj = ..%New()
		set obj.Priority = ##class(BiRLab.CT.Priority).%OpenId(pCoef)
		do obj.HospitalPaymentCategoryVersionSetObjectId(pVersId)
		set:$G(pCoefVal) obj.Coef = pCoefVal
	}
	set rez = obj.%Save()
	;s ^tmp=rez
	quit $$$OK
]]></Implementation>
</Method>

<Trigger name="HPCVPafterupdate">
<Code>	do ..ProcessingTrigger({ID},0)</Code>
<Event>UPDATE</Event>
<Order>1</Order>
<Time>AFTER</Time>
</Trigger>

<Trigger name="HPCVPafterinsert">
<Code>    do ..ProcessingTrigger({ID},0)</Code>
<Event>INSERT</Event>
<Order>1</Order>
<Time>AFTER</Time>
</Trigger>

<Trigger name="HPCVPafterdelete">
<Code>	do ..ProcessingTrigger({ID},1)</Code>
<Event>DELETE</Event>
<Order>1</Order>
<Time>AFTER</Time>
</Trigger>

<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[    quit ..ProcessingTrigger(..%Id(),0)
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set id=$listget(oid,1)
		set ok=..ProcessingTrigger(id,1)
	} catch(e) {
		set ok=e.AsStatus()
		do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_":"_"%OnDelete id="_$get(id))
	}
	quit ok
]]></Implementation>
</Method>

<Method name="ProcessingTrigger">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String="",pFlagDelete:%Boolean="N"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
			set obj=##class(BiRLab.CT.HospitalPaymentCategoryVersion).%OpenId(pId)
			set hospitalcode="",payercode=""
			if $IsObject(obj) {
				set hospital=obj.HospitalPaymentCategory.PayerHospital.Hospital.Code
			    set payer=obj.HospitalPaymentCategory.PayerHospital.Payer.Code
			}
			if (hospital'="")&&(payer'="") {
				set epis=""
		        for {
			        set epis=$order(^TEPIextI("FlagFinalPriceHospitalPayer",0,hospital,payer,epis)) if epis="" quit
			        set ok=##class(TCLEx.Task.ExtraCalcQueueManager).InsertInQueue(epis,0)
		        }
		    }
	} catch(e) {
		set ok=e.AsStatus()
		do ##class(TCLEx.Function.General).WriteError($ze,$CLASSNAME()_":"_"ProcessingTrigger id="_$get(pId))
	}
	quit ok
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Priorities")</DataLocation>
<DefaultData>PaymentCategoryPriceListPriorityDefaultData</DefaultData>
<IdLocation>^BiRLab.CT.PaymentCateD89CC("Priorities")</IdLocation>
<IndexLocation>^BiRLab.CT.PaymentCateB9F6I</IndexLocation>
<StreamLocation>^BiRLab.CT.PaymentCateB9F6S</StreamLocation>
<Data name="PaymentCategoryPriceListPriorityDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Priority</Value>
</Value>
<Value name="3">
<Value>Coef</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
