<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="BiRLab.CT.PriceListVersionDetails">
<Description>
Услуги версии Прайс-Листа</Description>
<Super>%Persistent,%ZEN.DataModel.Adaptor</Super>
<TimeCreated>62276,81193.161879</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Item">
<Description>
Услуга</Description>
<Type>BiRLab.CT.Item</Type>
</Property>

<Property name="Price">
<Type>%Float</Type>
</Property>

<Property name="PriceListVersion">
<Description>
Услуги </Description>
<Type>BiRLab.CT.PriceListVersion</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PriceListVersionIndex">
<Properties>PriceListVersion</Properties>
</Index>

<Index name="ItemIndex">
<IdKey>1</IdKey>
<Properties>Item</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetPrice">
<Description>
Цена Услуги</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPriceListVersion,pItem</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	&sql(
		 select Price
		 	into :price
		 from BiRLab_CT.PriceListVersionDetails
		 where PriceListVersion=:pPriceListVersion
		 	and Item=:pItem
		)
	if (SQLCODE'=0) quit ""
	quit price
]]></Implementation>
</Method>

<Method name="Edit">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPVD,pCode,pPrice</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%OpenId(pPVD)
	if $IsObject(obj) {
		set obj.Item = ##class(BiRLab.CT.Item).%OpenId(pCode)
		set obj.Price = pPrice
		do obj.%Save()
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="MySave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPriceVersId,pCode,pPrice</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%New()
	set obj.Item = ##class(BiRLab.CT.Item).%OpenId(pCode)
	set obj.Price = pPrice
	do obj.PriceListVersionSetObjectId(pPriceVersId)
	do obj.%Save()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Clear">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPriceVersId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit:$G(pPayer)="" ""
	&sql(delete from BiRLab_CT.PriceListVersionDetails
		where PriceListVersion=:pPriceVersId
	)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ClearSelectItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPriceVersId,pItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(delete from BiRLab_CT.PriceListVersionDetails
		where PriceListVersion=:pPriceVersId and ID=:pItem
	)
	quit $$$OK
]]></Implementation>
</Method>

<Query name="findRS">
<Description>
Запрос для таблицы поиска </Description>
<Type>%Query</Type>
<FormalSpec>P1:%String,P2:%String,P3:%String,PF1:%String,PF2:%String</FormalSpec>
<Parameter name="ROWSPEC" value="ID:%String,PriceList:%String,Vers:%String,ActiveFrom:%String,Price:%String"/>
</Query>

<Method name="findRSExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,P1:%String,P2:%String,P3:%String,PF1:%String,PF2:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res
	Set qHandle=""
	
	set sql="SELECT %ID,PriceListVersion->PriceList->Description as PriceList, "
	set sql=sql_" PriceListVersion->Version as Vers, PriceListVersion->ActiveFrom, "
	set sql=sql_" Price " 
	set sql=sql_" from BiRLab_CT.PriceListVersionDetails"
	set where=" where"
	if P1'="" set where=where_" Item='"_P1_"' and "
	if P2="",P3'="" set where=where_" PriceListVersion->ActiveFrom<='"_P3_"' and "
	if P2'="",P3="" set where=where_" PriceListVersion->ActiveFrom>='"_P2_"' and "
	if P2'="",P3'="" set where=where_" (PriceListVersion->ActiveFrom BETWEEN '"_P2_"' and '"_P3_"') and "
	if PF1'="" set where=where_" PriceListVersion->PriceList->Description LIKE '"_PF1_"%' and "
	if PF2'="" set where=where_" PriceListVersion->Version='"_PF2_"' and "
	;
	set rs = ##class(%ResultSet.SQL).%New()
	if where=" where" set where=""
	set sql=sql_where
	set:sql[" and" $E(sql,$L(sql)-4,$L(sql)-1)=""
	;s ^tmp=sql
	set rs=##class(%ResultSet.SQL).%Prepare(sql)
	quit:'rs ""
	while (rs.%Next()) {
		set d1 = rs.%GetData(4)
		;if (d1'="") set d1 = ##class(BiRLab.Utils.Date).Date(d1)
		Set ^||res(rs.%GetData(1))=$LB(rs.%GetData(1),rs.%GetData(2),rs.%GetData(3),d1,rs.%GetData(5))
	}

 	 	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="findRSClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>findRSExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||res
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="findRSFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>findRSExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit:'$D(^||res) $$$OK
	Set qHandle=$Order(^||res(qHandle))
	If qHandle="" Set AtEnd=1,Row="" Quit $$$OK
	Set Row=$G(^||res(qHandle))
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>PriceListVersionDetailsDefaultData</DefaultData>
<IdLocation>^BiRLab.CT.PriceListVersionC("Items")</IdLocation>
<IndexLocation>^BiRLab.CT.PriceListVeAA1EI</IndexLocation>
<StreamLocation>^BiRLab.CT.PriceListVeAA1ES</StreamLocation>
<Data name="PriceListVersionDetailsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
