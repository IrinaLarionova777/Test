<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Custom.bion.TCLEx.Utils.TestEnvironment">
<Description>
Клиентское расширение класса TCLEx.Utils.TestEnvironment для Биона</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63141,54962.808799</TimeCreated>

<Method name="GetData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set ok=..TestFreeSpace(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		if $piece($h,",",2)<28800 {  //  если время меньше 8 часов утра
			set ok=##class(TCLEx.Utils.TestEnvironment).TestBackup(pGlob)
		    if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		}
		set ok=##class(TCLEx.Utils.TestEnvironment).TestMirror(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		//set ok=..TestIntegrationErrors(pGlob)
		//if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		set ok=..TestIsERRORS(pGlob)
		if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)
		// Проверка, все ли наборы тестов прикреплены к коду материала образца
		//set ok=..TestBindTestSetSpecimen(pGlob)
		//if 'ok do ##class(TCLEx.Function.General).WriteError($system.Status.GetErrorText(ok),$zn)

		
	} catch(e) {
		do ##class(TCLEx.Function.General).WriteError($ze,$zn)
	}
	quit ok
]]></Implementation>
</Method>

<Method name="TestFreeSpace">
<Description>
Проверка кол-ва свободного места в байтах</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlob:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		for disk="c","s","t" {
			set freespace=##class(TCLEx.Utils.TestEnvironment).GetFreeSpace(disk) 
            set freespaceGb=freespace/(1024*1024*1024)
	        if freespaceGb<5 {
		       set @pGlob@($i(@pGlob))="Свободного места на диске "_disk_": меньше 5 Гб ("_freespace_" байт)"
	        }
		}
	} catch(e) {
		set ok=e.AsStatus()
    }
    quit ok
]]></Implementation>
</Method>

<Method name="SendMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ok=$$$OK
  try {
	set EmailAddress="irina.larionova@intersystems.com"
	Set s=##class(%Net.SMTP).%New()
	Set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	Set auth.UserName=$$SMTPUserName^Settings.EMail()
	Set auth.Password=$$SMTPPassword^Settings.EMail()
	Set s.authenticator=auth
	Set s.smtpserver=$$SMTPServer^Settings.EMail() ;"mail.bionlab.ru"  
	Set m=##class(%Net.MailMessage).%New()
	//Set m.IsHTML=1
	Set m.From="support@bionlab.ru" ;pFromAddress
	Set tocnt=$Length(EmailAddress,";")
	For i=1:1:tocnt {
		Set adr=$Piece(EmailAddress,";",i)
		If (adr="")||(adr'["@") Continue
		Do m.To.Insert(adr)
	}	
	Set m.Subject="Оповещение от ЛИС TrakCareLab Бион от "_$zdt($h,4)
	Set m.Charset="UTF-8"
	Set cnt=""
	For  {
		Set cnt=$Order(@pGlb@(cnt),1,vals)
		If cnt="" Quit
		Do m.TextData.Write(vals_$c(13))
	}
	Set ok=s.Send(m)
	
  } catch(e) { set ok=e.AsStatus() }
  quit ok
]]></Implementation>
</Method>

<Method name="TestIsERRORS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlb:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ok=$$$OK
	try {
		set currdate=+$h,currtime=+$piece($h,",",2)
		//s ^test("testenv",$i(^test("testenv")))=$h_"*"_currdate_"*"_currtime 
		if currtime<3601 {
			set currdate=currdate-1
			set limit=(24*3600)+(currtime-3600) 
		} else {
		    set limit=currtime-3600	
		}
		//s ^test("testenv",$i(^test("testenv")))=currdate_"*"_limit 
		set date=currdate-1
		for {
			set date=$order(^ERRORS(date)) if date="" quit
			set npp=""
			for {
				set npp=$order(^ERRORS(date,npp)) if npp="" quit
				set rec=$get(^ERRORS(date,npp))
				if rec'="" {
					set hor=$piece(rec,"||",1) if hor="" continue
				    set time=$piece(hor,",",2)
				    if ((date=currdate)&&(time>limit))||(date>currdate) {
					    set rec3=$p(rec,"||",3)
					   if $e(rec3,1,36)="ОШИБКА #5001: Нет данных для эпизода" continue
					   if $e(rec3,1,42)="ОШИБКА #5001: Не удалось сформировать файл" continue
					   set @pGlb@($i(@pGlb))="ERRORS("_date_","_npp_")="_$e(rec,1,200)
				    }
				} else {
					if $data(^ERRORS(date,npp,"*STACK","0","V","$ZE")) {
						set hor=$get(^ERRORS(date,npp,"*STACK","0","V","$H")) if hor="" continue
				        set time=$piece(hor,",",2)
				        if ((date=currdate)&&(time>limit))||(date>currdate) {
					       set @pGlb@($i(@pGlb))="ERRORS("_date_","_npp_")="_$e($get(^ERRORS(date,npp,"*STACK","0","V","$ZE")),1,200)
				        }
					}
				}
			}
		}
	} catch(e) {
		set ok=e.AsStatus()
	}
	quit ok
]]></Implementation>
</Method>
</Class>
</Export>
