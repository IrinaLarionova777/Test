<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24">
<Class name="Custom.bion.TCLEx.Report.ResultFormNew">
<Super>%RegisteredObject</Super>
<TimeCreated>63232,61953.440202</TimeCreated>

<Method name="MakePrintingEpisodesBuf">
<Description>
Создание буфера со списком эпизодов и наборов тестов, которые нужно распечатать
Параметры:
pReportType - тип отчета 
pCourier - код курьера
pBuf - формируемый буфер</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportType:%String,pCourier:%String,pUser:%String,pBuf:%String</FormalSpec>
<Implementation><![CDATA[
	
	// получаем кол-во копий по курьеру (в привязке к DRP)
	set printerinfo=##class(TCLEx.Function.Printer).getPrinterByCourierDRP(pCourier)
	set qCopies=$piece(printerinfo,$char(0),2)
	if +qCopies=0 set qCopies=1

	Kill @pBuf
	Do ..MakePatientLocationEpisodesBuf(pReportType,pCourier,pUser,pBuf,qCopies)
	//Do ..MakeDoctorEpisodesBuf(pReportType,pCourier,pUser,pBuf,qCopies)
]]></Implementation>
</Method>

<Method name="MakePatientLocationEpisodesBuf">
<Description>
Создание буфера со списком эпизодов и наборов тестов для Местарасположения Пользователя , которые нужно распечатать
Параметры:
pCourier - код курьера
pBuf - формируемый буфер</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pReportType:%String,pCourier:%String,pUser:%String,pBuf:%String,pQCopies:%String</FormalSpec>
<Implementation><![CDATA[
	set pQCopies=$get(pQCopies,1)
	set printer1=##class(TCLEx.Function.Printer).DefaultPrinter()
	set printer2=printer1_"LOT2"
	Set glb=$Name(^TRPT)
	Set hosp=""
	For  {
		Set hosp=$Order(@glb@(pReportType,pCourier,"H",hosp))
		If hosp="" Quit
		Set epis=""
		For  {
			Set epis=$Order(@glb@(pReportType,pCourier,"H",hosp,epis))
			If epis="" Quit
			
			// Предполагаем, что разные курьеры настроены на печать на разные лотки
			// Подмениваем курьера , если это нужно
			set hospcode=$piece($get(^TEPI(epis)),"\",20)
			set printer=printer1
			set flagPrintLogo=0
			/// Печать в другой лоток без шапки (с пустым местом вместо шапки или нет???)
			If (hospcode'="")&&($Data(^BionImg("ResultReportHeaders",hospcode)))&&($$select^LVBCTPD(printer2)=0) {
				set printer=printer2
				set flagPrintLogo=1
			}
			
			Set testset=""
			For  {
				Set testset=$Order(@glb@(pReportType,pCourier,"H",hosp,epis,testset))
				If testset="" Quit
				Set testcnt=""
				For  {
					Set testcnt=$Order(@glb@(pReportType,pCourier,"H",hosp,epis,testset,testcnt),1,vals)
					If testcnt="" Quit
					Set testsetid=epis_"||"_testset_"||"_testcnt
					If $$printable^LVBCTTS(testset,testsetid) {
						set userAuth=$$seldata^LVBVISTS(testsetid,9)
						set user=$translate($get(pUser)," ","")
						if user="" {
							set user=$Piece(vals,"\",2)
						}
						If user="" Set user=" "
						set key="H"_$c(1)_printer_$c(1)_flagPrintLogo
						Set @pBuf@(key,user,pQCopies,epis,testsetid)=""
						Kill @glb@(pReportType,pCourier,"H",hosp,epis,testset,testcnt)
					}		
				}	
			}	
			Kill @glb@(pReportType,pCourier,"H",hosp,epis)
		}
	}
]]></Implementation>
</Method>

<Method name="SaveLISReportAll">
<Description>
Сохранить полученный отчет в User.PRReport
Параметры:
pCourier - код курьера
pUser - пользователь запустивший отчет
pEpisCount - число эпизодов в отчете
pQCopies - число копий 
pParams - параметры (в Бионе 
pLISGlb - буфер отчета в формате ЛИС</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCourier:%String,pUser:%String,pQCopies:%Integer,pParams:%String="",pEpisodesGlb:%String</FormalSpec>
<PublicList>PLIST</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set ok=$$$OK
 try {
	 // формирование задания в диспетчере печати (чтобы был номер для имени файла
	 set ok=##class(TCLEx.Report.ResultFormNew).CreateEmptyLISReport(pCourier,pUser,pQCopies,1,.idReport)
	 if 'ok quit
	 set pdfFileName=##class(TCLEx.Report.DRP).GetFileName(idReport)  //..GetFileReportName(idReport)
	 // формирование PDF Файла со всеми эпизодами
	 Set reportclassnameDRP=##class(TCLEx.Report.Settings).GetDRPResultClassName()
	 set pPDF=1  // признак того, что результат нужен только как PDF файл (распечатываемые на бумаге монут иметь другой вид, например не нужен логотип, т.к. он есть на бумажном бланке)
	 set pPDFDir=##class(%File).GetDirectory(pdfFileName) //каталог, куда выгружать файл
	 set pOverWritePDF=1 //если =1 - перезаписывать файл, иначе ошибка(файл уже существует)
	 // ExtraParamsZen=$listbuild(IsLogoNeeded(1/0),IsSignatureNeeded,IsStampNeeded)
	 set ExtraParamsZen="" //дополнительные параметры формироваия отчета в формате $ListBuild  for ZenReport ExtraParamsZen=$list(IsLogoNeeded(1/0),IsSignatureNeeded,IsStampNeeded)
	 set flagNeedLogo=$select($piece(pParams,$char(1),3)=1:2,1:3)
	 set flagNeedSignature=2
	 set flagNeedStamp=2
	 set ExtraParamsZen=$listbuild(flagNeedLogo,flagNeedSignature,flagNeedStamp)
	 set FlagPreview="" //флаг = "V" - значит это файл для предпросмотра результатов (тогда показываются не только авторизованные результаты)
	 set extraParams=$listbuild(pPDF,pPDFDir,pOverWritePDF,ExtraParamsZen,0,0,FlagPreview)
	 
	 set nmfile=##class(%File).GetFilename(pdfFileName)
	 set dirfile=##class(%File).GetDirectory(pdfFileName)
	 set files=""
		 
	 Set epis="",countEpisodes=0
	 For  {
		Set epis=$Order(@pEpisodesGlb@(epis)) If epis="" Quit
		Set languages=##class(TCLEx.Function.Episode).ResultLanguages(epis)
		If languages="" Continue
		Kill testsets
		Set testsetid=""
		For  {
			Set testsetid=$Order(@pEpisodesGlb@(epis,testsetid)) If testsetid="" Quit
			Set testsetobj=##class(User.EPVisitTestSet).%OpenId(testsetid)
			If '$IsObject(testsetobj) Quit
			Set superset=""
			If $IsObject(testsetobj.VISTSSuperSetDR) Set superset=testsetobj.VISTSSuperSetDR.%Id()
			If superset'="" {
				Set testsets(superset)=""
			} Else {
				Set testsets(testsetid)=""
			}		
		}
		Set langcnt=$ListLength(languages)
		For i=1:1:langcnt {
			Set language=$ListGet(languages,i)
			If language="" Continue
			set filenamevsp=##class(TCLEx.Report.ResultFormNew).NextAuxiliaryFile(nmfile,dirfile) 
			set ok=$ClassMethod(reportclassnameDRP,"CreateEpisodePDFReport",epis,.testsets, language, extraParams, filenamevsp) 
			if 'ok quit
			set files=files_$select(files'="":$char(0),1:"")_filenamevsp
			set countEpisodes=countEpisodes+1
		}
	}
	if files'="" {
		set ok=##class(TCLEx.Report.ResultFormNew).SaveLISReportDop(idReport,pCourier,pUser,pQCopies,countEpisodes,files,pdfFileName,pParams)
		if 'ok quit
	}	
  } catch(e) {
	set ok=e.AsStatus()
 }
 quit ok
]]></Implementation>
</Method>

<Method name="getPrinter">
<Description>
Получить принтер  
Параметры:
pCourier - ID курьера
pUser - ID пользователя
Возвращаемое значение:
Id принтера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCourier,pUser,pParams=""</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set printer=$piece(pParams,$char(1),2)
	quit $select(printer'="":printer,1:##class(TCLEx.Function.Printer).DefaultPrinter())
]]></Implementation>
</Method>

<Method name="GetPrinterLotok2">
<Description>
Если есть в настройках Адресатов печати принтер, настроенный на другой лоток (один и тот же принтер, но с разными лотками по умолчанию)
то возвращаем код этого доп принтера, иначе возвращает пусто</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPrinter:%String</FormalSpec>
<ReturnType>%String</ReturnType>
</Method>
</Class>
</Export>
